// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.22.3
// source: account.proto

package account

import (
	common "github.com/subiz/header/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Agent_Gender int32

const (
	Agent_unset  Agent_Gender = 0
	Agent_male   Agent_Gender = 1
	Agent_female Agent_Gender = 2
)

// Enum value maps for Agent_Gender.
var (
	Agent_Gender_name = map[int32]string{
		0: "unset",
		1: "male",
		2: "female",
	}
	Agent_Gender_value = map[string]int32{
		"unset":  0,
		"male":   1,
		"female": 2,
	}
)

func (x Agent_Gender) Enum() *Agent_Gender {
	p := new(Agent_Gender)
	*p = x
	return p
}

func (x Agent_Gender) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Agent_Gender) Descriptor() protoreflect.EnumDescriptor {
	return file_account_proto_enumTypes[0].Descriptor()
}

func (Agent_Gender) Type() protoreflect.EnumType {
	return &file_account_proto_enumTypes[0]
}

func (x Agent_Gender) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Agent_Gender) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Agent_Gender(num)
	return nil
}

// Deprecated: Use Agent_Gender.Descriptor instead.
func (Agent_Gender) EnumDescriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{2, 0}
}

type Agent_AgentState int32

const (
	Agent_pending  Agent_AgentState = 0 // waiting for invitation response
	Agent_active   Agent_AgentState = 1
	Agent_inactive Agent_AgentState = 2
	Agent_deleted  Agent_AgentState = 3
)

// Enum value maps for Agent_AgentState.
var (
	Agent_AgentState_name = map[int32]string{
		0: "pending",
		1: "active",
		2: "inactive",
		3: "deleted",
	}
	Agent_AgentState_value = map[string]int32{
		"pending":  0,
		"active":   1,
		"inactive": 2,
		"deleted":  3,
	}
)

func (x Agent_AgentState) Enum() *Agent_AgentState {
	p := new(Agent_AgentState)
	*p = x
	return p
}

func (x Agent_AgentState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Agent_AgentState) Descriptor() protoreflect.EnumDescriptor {
	return file_account_proto_enumTypes[1].Descriptor()
}

func (Agent_AgentState) Type() protoreflect.EnumType {
	return &file_account_proto_enumTypes[1]
}

func (x Agent_AgentState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Agent_AgentState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Agent_AgentState(num)
	return nil
}

// Deprecated: Use Agent_AgentState.Descriptor instead.
func (Agent_AgentState) EnumDescriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{2, 1}
}

// optional string referrer_id = 11;
type Account_State int32

const (
	Account_activated Account_State = 1 // normal account
	Account_deleted   Account_State = 3 // haven't refreshed token in the last 90 days
	Account_inactive  Account_State = 4 // haven't refreshed token in the last 60 days
)

// Enum value maps for Account_State.
var (
	Account_State_name = map[int32]string{
		1: "activated",
		3: "deleted",
		4: "inactive",
	}
	Account_State_value = map[string]int32{
		"activated": 1,
		"deleted":   3,
		"inactive":  4,
	}
)

func (x Account_State) Enum() *Account_State {
	p := new(Account_State)
	*p = x
	return p
}

func (x Account_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Account_State) Descriptor() protoreflect.EnumDescriptor {
	return file_account_proto_enumTypes[2].Descriptor()
}

func (Account_State) Type() protoreflect.EnumType {
	return &file_account_proto_enumTypes[2]
}

func (x Account_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Account_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Account_State(num)
	return nil
}

// Deprecated: Use Account_State.Descriptor instead.
func (Account_State) EnumDescriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{3, 0}
}

type DashboardAgent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourGuideWebShowed                  *int64            `protobuf:"varint,6,opt,name=tour_guide_web_showed,json=tourGuideWebShowed" json:"tour_guide_web_showed,omitempty"`
	TourGuideGettingStartedWebShowed    *int64            `protobuf:"varint,10,opt,name=tour_guide_getting_started_web_showed,json=tourGuideGettingStartedWebShowed" json:"tour_guide_getting_started_web_showed,omitempty"`
	TourGuideChannelInstallingWebShowed *int64            `protobuf:"varint,11,opt,name=tour_guide_channel_installing_web_showed,json=tourGuideChannelInstallingWebShowed" json:"tour_guide_channel_installing_web_showed,omitempty"`
	BotBuildShowed                      *int64            `protobuf:"varint,12,opt,name=bot_build_showed,json=botBuildShowed" json:"bot_build_showed,omitempty"`
	PinnedUserViews                     []string          `protobuf:"bytes,13,rep,name=pinned_user_views,json=pinnedUserViews" json:"pinned_user_views,omitempty"` // list of agents that pinned this view
	UserViewDisplayFields               []string          `protobuf:"bytes,14,rep,name=user_view_display_fields,json=userViewDisplayFields" json:"user_view_display_fields,omitempty"`
	UserViewOrderBy                     []string          `protobuf:"bytes,15,rep,name=user_view_order_by,json=userViewOrderBy" json:"user_view_order_by,omitempty"` // +attr:fullname, -attr:email
	OrderDisplayFields                  []string          `protobuf:"bytes,16,rep,name=order_display_fields,json=orderDisplayFields" json:"order_display_fields,omitempty"`
	OrderDisplayOrderBy                 []string          `protobuf:"bytes,17,rep,name=order_display_order_by,json=orderDisplayOrderBy" json:"order_display_order_by,omitempty"`
	DefaultPos                          *string           `protobuf:"bytes,18,opt,name=default_pos,json=defaultPos" json:"default_pos,omitempty"`
	DefaultShippingProvider             *string           `protobuf:"bytes,19,opt,name=default_shipping_provider,json=defaultShippingProvider" json:"default_shipping_provider,omitempty"`
	OrderFilter                         *string           `protobuf:"bytes,20,opt,name=order_filter,json=orderFilter" json:"order_filter,omitempty"` // json
	ConversationSeen                    *int64            `protobuf:"varint,21,opt,name=conversation_seen,json=conversationSeen" json:"conversation_seen,omitempty"`
	PriceFunction                       *string           `protobuf:"bytes,22,opt,name=price_function,json=priceFunction" json:"price_function,omitempty"`
	UserInfoFields                      []string          `protobuf:"bytes,23,rep,name=user_info_fields,json=userInfoFields" json:"user_info_fields,omitempty"`
	OrderFeatureRequested               *int64            `protobuf:"varint,24,opt,name=order_feature_requested,json=orderFeatureRequested" json:"order_feature_requested,omitempty"` // 0, -1: allow to use, xyz: requested
	LastCallDevice                      *string           `protobuf:"bytes,25,opt,name=last_call_device,json=lastCallDevice" json:"last_call_device,omitempty"`
	LastCallNumber                      *string           `protobuf:"bytes,26,opt,name=last_call_number,json=lastCallNumber" json:"last_call_number,omitempty"`
	MuteCallUntil                       *int64            `protobuf:"varint,27,opt,name=mute_call_until,json=muteCallUntil" json:"mute_call_until,omitempty"` // ms
	WebphoneDisabled                    *int64            `protobuf:"varint,28,opt,name=webphone_disabled,json=webphoneDisabled" json:"webphone_disabled,omitempty"`
	AppphoneDisabled                    *int64            `protobuf:"varint,29,opt,name=appphone_disabled,json=appphoneDisabled" json:"appphone_disabled,omitempty"`
	CallPromoteShown                    *int64            `protobuf:"varint,30,opt,name=call_promote_shown,json=callPromoteShown" json:"call_promote_shown,omitempty"`
	OnCall                              *string           `protobuf:"bytes,31,opt,name=on_call,json=onCall" json:"on_call,omitempty"`
	LastCloseTaskNotification           *int64            `protobuf:"varint,32,opt,name=last_close_task_notification,json=lastCloseTaskNotification" json:"last_close_task_notification,omitempty"`
	OrderSeen                           *int64            `protobuf:"varint,33,opt,name=order_seen,json=orderSeen" json:"order_seen,omitempty"`
	SegmentOrderBy                      map[string]string `protobuf:"bytes,34,rep,name=segment_order_by,json=segmentOrderBy" json:"segment_order_by,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	UserViewDisplayField                map[string]string `protobuf:"bytes,35,rep,name=user_view_display_field,json=userViewDisplayField" json:"user_view_display_field,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DebugLogCollected                   *int64            `protobuf:"varint,36,opt,name=debug_log_collected,json=debugLogCollected" json:"debug_log_collected,omitempty"`
	WebNotificationVolume               *int64            `protobuf:"varint,37,opt,name=web_notification_volume,json=webNotificationVolume" json:"web_notification_volume,omitempty"`                                                                            // 0 default, 100 loudest
	SegmentUserViewsOrder               map[string]string `protobuf:"bytes,38,rep,name=segment_user_views_order,json=segmentUserViewsOrder" json:"segment_user_views_order,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // {sg_all: "unassigned,assigned"}
}

func (x *DashboardAgent) Reset() {
	*x = DashboardAgent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashboardAgent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardAgent) ProtoMessage() {}

func (x *DashboardAgent) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardAgent.ProtoReflect.Descriptor instead.
func (*DashboardAgent) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{0}
}

func (x *DashboardAgent) GetTourGuideWebShowed() int64 {
	if x != nil && x.TourGuideWebShowed != nil {
		return *x.TourGuideWebShowed
	}
	return 0
}

func (x *DashboardAgent) GetTourGuideGettingStartedWebShowed() int64 {
	if x != nil && x.TourGuideGettingStartedWebShowed != nil {
		return *x.TourGuideGettingStartedWebShowed
	}
	return 0
}

func (x *DashboardAgent) GetTourGuideChannelInstallingWebShowed() int64 {
	if x != nil && x.TourGuideChannelInstallingWebShowed != nil {
		return *x.TourGuideChannelInstallingWebShowed
	}
	return 0
}

func (x *DashboardAgent) GetBotBuildShowed() int64 {
	if x != nil && x.BotBuildShowed != nil {
		return *x.BotBuildShowed
	}
	return 0
}

func (x *DashboardAgent) GetPinnedUserViews() []string {
	if x != nil {
		return x.PinnedUserViews
	}
	return nil
}

func (x *DashboardAgent) GetUserViewDisplayFields() []string {
	if x != nil {
		return x.UserViewDisplayFields
	}
	return nil
}

func (x *DashboardAgent) GetUserViewOrderBy() []string {
	if x != nil {
		return x.UserViewOrderBy
	}
	return nil
}

func (x *DashboardAgent) GetOrderDisplayFields() []string {
	if x != nil {
		return x.OrderDisplayFields
	}
	return nil
}

func (x *DashboardAgent) GetOrderDisplayOrderBy() []string {
	if x != nil {
		return x.OrderDisplayOrderBy
	}
	return nil
}

func (x *DashboardAgent) GetDefaultPos() string {
	if x != nil && x.DefaultPos != nil {
		return *x.DefaultPos
	}
	return ""
}

func (x *DashboardAgent) GetDefaultShippingProvider() string {
	if x != nil && x.DefaultShippingProvider != nil {
		return *x.DefaultShippingProvider
	}
	return ""
}

func (x *DashboardAgent) GetOrderFilter() string {
	if x != nil && x.OrderFilter != nil {
		return *x.OrderFilter
	}
	return ""
}

func (x *DashboardAgent) GetConversationSeen() int64 {
	if x != nil && x.ConversationSeen != nil {
		return *x.ConversationSeen
	}
	return 0
}

func (x *DashboardAgent) GetPriceFunction() string {
	if x != nil && x.PriceFunction != nil {
		return *x.PriceFunction
	}
	return ""
}

func (x *DashboardAgent) GetUserInfoFields() []string {
	if x != nil {
		return x.UserInfoFields
	}
	return nil
}

func (x *DashboardAgent) GetOrderFeatureRequested() int64 {
	if x != nil && x.OrderFeatureRequested != nil {
		return *x.OrderFeatureRequested
	}
	return 0
}

func (x *DashboardAgent) GetLastCallDevice() string {
	if x != nil && x.LastCallDevice != nil {
		return *x.LastCallDevice
	}
	return ""
}

func (x *DashboardAgent) GetLastCallNumber() string {
	if x != nil && x.LastCallNumber != nil {
		return *x.LastCallNumber
	}
	return ""
}

func (x *DashboardAgent) GetMuteCallUntil() int64 {
	if x != nil && x.MuteCallUntil != nil {
		return *x.MuteCallUntil
	}
	return 0
}

func (x *DashboardAgent) GetWebphoneDisabled() int64 {
	if x != nil && x.WebphoneDisabled != nil {
		return *x.WebphoneDisabled
	}
	return 0
}

func (x *DashboardAgent) GetAppphoneDisabled() int64 {
	if x != nil && x.AppphoneDisabled != nil {
		return *x.AppphoneDisabled
	}
	return 0
}

func (x *DashboardAgent) GetCallPromoteShown() int64 {
	if x != nil && x.CallPromoteShown != nil {
		return *x.CallPromoteShown
	}
	return 0
}

func (x *DashboardAgent) GetOnCall() string {
	if x != nil && x.OnCall != nil {
		return *x.OnCall
	}
	return ""
}

func (x *DashboardAgent) GetLastCloseTaskNotification() int64 {
	if x != nil && x.LastCloseTaskNotification != nil {
		return *x.LastCloseTaskNotification
	}
	return 0
}

func (x *DashboardAgent) GetOrderSeen() int64 {
	if x != nil && x.OrderSeen != nil {
		return *x.OrderSeen
	}
	return 0
}

func (x *DashboardAgent) GetSegmentOrderBy() map[string]string {
	if x != nil {
		return x.SegmentOrderBy
	}
	return nil
}

func (x *DashboardAgent) GetUserViewDisplayField() map[string]string {
	if x != nil {
		return x.UserViewDisplayField
	}
	return nil
}

func (x *DashboardAgent) GetDebugLogCollected() int64 {
	if x != nil && x.DebugLogCollected != nil {
		return *x.DebugLogCollected
	}
	return 0
}

func (x *DashboardAgent) GetWebNotificationVolume() int64 {
	if x != nil && x.WebNotificationVolume != nil {
		return *x.WebNotificationVolume
	}
	return 0
}

func (x *DashboardAgent) GetSegmentUserViewsOrder() map[string]string {
	if x != nil {
		return x.SegmentUserViewsOrder
	}
	return nil
}

type SegmentUserViewsOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx             *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId       *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"` // subiz only
	AgentId         *string         `protobuf:"bytes,3,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	SegmentId       *string         `protobuf:"bytes,4,opt,name=segment_id,json=segmentId" json:"segment_id,omitempty"`
	ViewIds         []string        `protobuf:"bytes,5,rep,name=view_ids,json=viewIds" json:"view_ids,omitempty"`
	PinnedUserViews []string        `protobuf:"bytes,6,rep,name=pinned_user_views,json=pinnedUserViews" json:"pinned_user_views,omitempty"`
}

func (x *SegmentUserViewsOrder) Reset() {
	*x = SegmentUserViewsOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentUserViewsOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentUserViewsOrder) ProtoMessage() {}

func (x *SegmentUserViewsOrder) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentUserViewsOrder.ProtoReflect.Descriptor instead.
func (*SegmentUserViewsOrder) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{1}
}

func (x *SegmentUserViewsOrder) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *SegmentUserViewsOrder) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *SegmentUserViewsOrder) GetAgentId() string {
	if x != nil && x.AgentId != nil {
		return *x.AgentId
	}
	return ""
}

func (x *SegmentUserViewsOrder) GetSegmentId() string {
	if x != nil && x.SegmentId != nil {
		return *x.SegmentId
	}
	return ""
}

func (x *SegmentUserViewsOrder) GetViewIds() []string {
	if x != nil {
		return x.ViewIds
	}
	return nil
}

func (x *SegmentUserViewsOrder) GetPinnedUserViews() []string {
	if x != nil {
		return x.PinnedUserViews
	}
	return nil
}

type Agent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx           *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Id            *string         `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	AccountId     *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"` // subiz only
	Fullname      *string         `protobuf:"bytes,4,opt,name=fullname" json:"fullname,omitempty"`
	Email         *string         `protobuf:"bytes,5,opt,name=email" json:"email,omitempty"`
	Phone         *string         `protobuf:"bytes,8,opt,name=phone" json:"phone,omitempty"`
	IsOwner       *bool           `protobuf:"varint,10,opt,name=is_owner,json=isOwner" json:"is_owner,omitempty"`
	JobTitle      *string         `protobuf:"bytes,11,opt,name=job_title,json=jobTitle" json:"job_title,omitempty"`
	Gender        *string         `protobuf:"bytes,12,opt,name=gender" json:"gender,omitempty"`
	AvatarUrl     *string         `protobuf:"bytes,13,opt,name=avatar_url,json=avatarUrl" json:"avatar_url,omitempty"`
	AvatarUrl_128 *string         `protobuf:"bytes,18,opt,name=avatar_url_128,json=avatarUrl128" json:"avatar_url_128,omitempty"`
	Lang          *string         `protobuf:"bytes,14,opt,name=lang" json:"lang,omitempty"`
	// optional string location = 15;
	Timezone          *string `protobuf:"bytes,16,opt,name=timezone" json:"timezone,omitempty"`
	EncryptedPassword *string `protobuf:"bytes,17,opt,name=encrypted_password,json=encryptedPassword" json:"encrypted_password,omitempty"`
	Joined            *int64  `protobuf:"varint,20,opt,name=joined" json:"joined,omitempty"`
	InvitedBy         *string `protobuf:"bytes,21,opt,name=invited_by,json=invitedBy" json:"invited_by,omitempty"`
	State             *string `protobuf:"bytes,22,opt,name=state" json:"state,omitempty"`
	PasswordChanged   *int64  `protobuf:"varint,23,opt,name=password_changed,json=passwordChanged" json:"password_changed,omitempty"`
	// optional int64 seen = 24;
	Modified         *int64          `protobuf:"varint,25,opt,name=modified" json:"modified,omitempty"`
	Account          *Account        `protobuf:"bytes,28,opt,name=account" json:"account,omitempty"`                                // optional string country_code = 29;
	Type             *string         `protobuf:"bytes,33,opt,name=type" json:"type,omitempty"`                                      // bot or agent (default is agent)
	ClientId         *string         `protobuf:"bytes,34,opt,name=client_id,json=clientId" json:"client_id,omitempty"`              // ID of bot
	IsSupervisor     *bool           `protobuf:"varint,35,opt,name=is_supervisor,json=isSupervisor" json:"is_supervisor,omitempty"` // deprecated, add supervisor to scope
	LastSeen         *Presence       `protobuf:"bytes,38,opt,name=last_seen,json=lastSeen" json:"last_seen,omitempty"`
	DashboardSetting *DashboardAgent `protobuf:"bytes,40,opt,name=dashboard_setting,json=dashboardSetting" json:"dashboard_setting,omitempty"`
	Scopes           []string        `protobuf:"bytes,41,rep,name=scopes" json:"scopes,omitempty"` // supervisor
	InternalName     *string         `protobuf:"bytes,42,opt,name=internal_name,json=internalName" json:"internal_name,omitempty"`
	Extension        *int64          `protobuf:"varint,43,opt,name=extension" json:"extension,omitempty"` // 2343 3442
}

func (x *Agent) Reset() {
	*x = Agent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Agent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Agent) ProtoMessage() {}

func (x *Agent) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Agent.ProtoReflect.Descriptor instead.
func (*Agent) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{2}
}

func (x *Agent) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Agent) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Agent) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *Agent) GetFullname() string {
	if x != nil && x.Fullname != nil {
		return *x.Fullname
	}
	return ""
}

func (x *Agent) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *Agent) GetPhone() string {
	if x != nil && x.Phone != nil {
		return *x.Phone
	}
	return ""
}

func (x *Agent) GetIsOwner() bool {
	if x != nil && x.IsOwner != nil {
		return *x.IsOwner
	}
	return false
}

func (x *Agent) GetJobTitle() string {
	if x != nil && x.JobTitle != nil {
		return *x.JobTitle
	}
	return ""
}

func (x *Agent) GetGender() string {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return ""
}

func (x *Agent) GetAvatarUrl() string {
	if x != nil && x.AvatarUrl != nil {
		return *x.AvatarUrl
	}
	return ""
}

func (x *Agent) GetAvatarUrl_128() string {
	if x != nil && x.AvatarUrl_128 != nil {
		return *x.AvatarUrl_128
	}
	return ""
}

func (x *Agent) GetLang() string {
	if x != nil && x.Lang != nil {
		return *x.Lang
	}
	return ""
}

func (x *Agent) GetTimezone() string {
	if x != nil && x.Timezone != nil {
		return *x.Timezone
	}
	return ""
}

func (x *Agent) GetEncryptedPassword() string {
	if x != nil && x.EncryptedPassword != nil {
		return *x.EncryptedPassword
	}
	return ""
}

func (x *Agent) GetJoined() int64 {
	if x != nil && x.Joined != nil {
		return *x.Joined
	}
	return 0
}

func (x *Agent) GetInvitedBy() string {
	if x != nil && x.InvitedBy != nil {
		return *x.InvitedBy
	}
	return ""
}

func (x *Agent) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *Agent) GetPasswordChanged() int64 {
	if x != nil && x.PasswordChanged != nil {
		return *x.PasswordChanged
	}
	return 0
}

func (x *Agent) GetModified() int64 {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return 0
}

func (x *Agent) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *Agent) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *Agent) GetClientId() string {
	if x != nil && x.ClientId != nil {
		return *x.ClientId
	}
	return ""
}

func (x *Agent) GetIsSupervisor() bool {
	if x != nil && x.IsSupervisor != nil {
		return *x.IsSupervisor
	}
	return false
}

func (x *Agent) GetLastSeen() *Presence {
	if x != nil {
		return x.LastSeen
	}
	return nil
}

func (x *Agent) GetDashboardSetting() *DashboardAgent {
	if x != nil {
		return x.DashboardSetting
	}
	return nil
}

func (x *Agent) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *Agent) GetInternalName() string {
	if x != nil && x.InternalName != nil {
		return *x.InternalName
	}
	return ""
}

func (x *Agent) GetExtension() int64 {
	if x != nil && x.Extension != nil {
		return *x.Extension
	}
	return 0
}

type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx         *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Id          *string         `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Name        *string         `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	LogoUrl     *string         `protobuf:"bytes,5,opt,name=logo_url,json=logoUrl" json:"logo_url,omitempty"`
	LogoUrl_128 *string         `protobuf:"bytes,4,opt,name=logo_url_128,json=logoUrl128" json:"logo_url_128,omitempty"` // png 128x128
	OwnerId     *string         `protobuf:"bytes,6,opt,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
	State       *string         `protobuf:"bytes,7,opt,name=state" json:"state,omitempty"`
	Created     *int64          `protobuf:"varint,8,opt,name=created" json:"created,omitempty"`
	Confirmed   *int64          `protobuf:"varint,9,opt,name=confirmed" json:"confirmed,omitempty"`
	Modified    *int64          `protobuf:"varint,10,opt,name=modified" json:"modified,omitempty"`
	City        *string         `protobuf:"bytes,14,opt,name=city" json:"city,omitempty"`
	ZipCode     *int32          `protobuf:"varint,16,opt,name=zip_code,json=zipCode" json:"zip_code,omitempty"`
	// optional string tax_id = 17;
	Facebook *string `protobuf:"bytes,18,opt,name=facebook" json:"facebook,omitempty"`
	Twitter  *string `protobuf:"bytes,22,opt,name=twitter" json:"twitter,omitempty"`
	Phone    *string `protobuf:"bytes,19,opt,name=phone" json:"phone,omitempty"`
	Address  *string `protobuf:"bytes,20,opt,name=address" json:"address,omitempty"`
	Url      *string `protobuf:"bytes,21,opt,name=url" json:"url,omitempty"`
	Lang     *string `protobuf:"bytes,23,opt,name=lang" json:"lang,omitempty"`
	// optional string referer_from = 24;
	Timezone             *string               `protobuf:"bytes,26,opt,name=timezone" json:"timezone,omitempty"`
	Country              *string               `protobuf:"bytes,27,opt,name=country" json:"country,omitempty"`
	DateFormat           *string               `protobuf:"bytes,29,opt,name=date_format,json=dateFormat" json:"date_format,omitempty"`
	BusinessHours        *BusinessHours        `protobuf:"bytes,30,opt,name=business_hours,json=businessHours" json:"business_hours,omitempty"`
	ReferrerFrom         *string               `protobuf:"bytes,31,opt,name=referrer_from,json=referrerFrom" json:"referrer_from,omitempty"`
	LeadSetting          *LeadSetting          `protobuf:"bytes,33,opt,name=lead_setting,json=leadSetting" json:"lead_setting,omitempty"`
	WebDomains           []string              `protobuf:"bytes,34,rep,name=web_domains,json=webDomains" json:"web_domains,omitempty"`
	Feature              *Feature              `protobuf:"bytes,35,opt,name=feature" json:"feature,omitempty"`
	ForceFeature         *Feature              `protobuf:"bytes,36,opt,name=force_feature,json=forceFeature" json:"force_feature,omitempty"`             // only edit by subiz
	Locale               *string               `protobuf:"bytes,39,opt,name=locale" json:"locale,omitempty"`                                             // primary locale
	SupportedLocales     []string              `protobuf:"bytes,40,rep,name=supported_locales,json=supportedLocales" json:"supported_locales,omitempty"` // default vi-VN and en-US
	Currency             *string               `protobuf:"bytes,41,opt,name=currency" json:"currency,omitempty"`                                         // VND or USD cannot change
	CurrencyLocked       *bool                 `protobuf:"varint,42,opt,name=currency_locked,json=currencyLocked" json:"currency_locked,omitempty"`
	LoginLocked          *int64                `protobuf:"varint,43,opt,name=login_locked,json=loginLocked" json:"login_locked,omitempty"`
	UserAttributeSetting *UserAttributeSetting `protobuf:"bytes,46,opt,name=user_attribute_setting,json=userAttributeSetting" json:"user_attribute_setting,omitempty"`
	DeletedByAgent       *string               `protobuf:"bytes,47,opt,name=deleted_by_agent,json=deletedByAgent" json:"deleted_by_agent,omitempty"`
	InvoiceInfo          *InvoiceInfo          `protobuf:"bytes,48,opt,name=invoice_info,json=invoiceInfo" json:"invoice_info,omitempty"`
	UnlimitedAgentPrice  *int64                `protobuf:"varint,49,opt,name=unlimited_agent_price,json=unlimitedAgentPrice" json:"unlimited_agent_price,omitempty"`
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{3}
}

func (x *Account) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Account) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Account) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Account) GetLogoUrl() string {
	if x != nil && x.LogoUrl != nil {
		return *x.LogoUrl
	}
	return ""
}

func (x *Account) GetLogoUrl_128() string {
	if x != nil && x.LogoUrl_128 != nil {
		return *x.LogoUrl_128
	}
	return ""
}

func (x *Account) GetOwnerId() string {
	if x != nil && x.OwnerId != nil {
		return *x.OwnerId
	}
	return ""
}

func (x *Account) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *Account) GetCreated() int64 {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return 0
}

func (x *Account) GetConfirmed() int64 {
	if x != nil && x.Confirmed != nil {
		return *x.Confirmed
	}
	return 0
}

func (x *Account) GetModified() int64 {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return 0
}

func (x *Account) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *Account) GetZipCode() int32 {
	if x != nil && x.ZipCode != nil {
		return *x.ZipCode
	}
	return 0
}

func (x *Account) GetFacebook() string {
	if x != nil && x.Facebook != nil {
		return *x.Facebook
	}
	return ""
}

func (x *Account) GetTwitter() string {
	if x != nil && x.Twitter != nil {
		return *x.Twitter
	}
	return ""
}

func (x *Account) GetPhone() string {
	if x != nil && x.Phone != nil {
		return *x.Phone
	}
	return ""
}

func (x *Account) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *Account) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *Account) GetLang() string {
	if x != nil && x.Lang != nil {
		return *x.Lang
	}
	return ""
}

func (x *Account) GetTimezone() string {
	if x != nil && x.Timezone != nil {
		return *x.Timezone
	}
	return ""
}

func (x *Account) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *Account) GetDateFormat() string {
	if x != nil && x.DateFormat != nil {
		return *x.DateFormat
	}
	return ""
}

func (x *Account) GetBusinessHours() *BusinessHours {
	if x != nil {
		return x.BusinessHours
	}
	return nil
}

func (x *Account) GetReferrerFrom() string {
	if x != nil && x.ReferrerFrom != nil {
		return *x.ReferrerFrom
	}
	return ""
}

func (x *Account) GetLeadSetting() *LeadSetting {
	if x != nil {
		return x.LeadSetting
	}
	return nil
}

func (x *Account) GetWebDomains() []string {
	if x != nil {
		return x.WebDomains
	}
	return nil
}

func (x *Account) GetFeature() *Feature {
	if x != nil {
		return x.Feature
	}
	return nil
}

func (x *Account) GetForceFeature() *Feature {
	if x != nil {
		return x.ForceFeature
	}
	return nil
}

func (x *Account) GetLocale() string {
	if x != nil && x.Locale != nil {
		return *x.Locale
	}
	return ""
}

func (x *Account) GetSupportedLocales() []string {
	if x != nil {
		return x.SupportedLocales
	}
	return nil
}

func (x *Account) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *Account) GetCurrencyLocked() bool {
	if x != nil && x.CurrencyLocked != nil {
		return *x.CurrencyLocked
	}
	return false
}

func (x *Account) GetLoginLocked() int64 {
	if x != nil && x.LoginLocked != nil {
		return *x.LoginLocked
	}
	return 0
}

func (x *Account) GetUserAttributeSetting() *UserAttributeSetting {
	if x != nil {
		return x.UserAttributeSetting
	}
	return nil
}

func (x *Account) GetDeletedByAgent() string {
	if x != nil && x.DeletedByAgent != nil {
		return *x.DeletedByAgent
	}
	return ""
}

func (x *Account) GetInvoiceInfo() *InvoiceInfo {
	if x != nil {
		return x.InvoiceInfo
	}
	return nil
}

func (x *Account) GetUnlimitedAgentPrice() int64 {
	if x != nil && x.UnlimitedAgentPrice != nil {
		return *x.UnlimitedAgentPrice
	}
	return 0
}

type InvoiceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId            *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	CompanyName          *string         `protobuf:"bytes,4,opt,name=company_name,json=companyName" json:"company_name,omitempty"`
	TaxCode              *string         `protobuf:"bytes,5,opt,name=tax_code,json=taxCode" json:"tax_code,omitempty"`
	Fullname             *string         `protobuf:"bytes,6,opt,name=fullname" json:"fullname,omitempty"`
	Phone                *string         `protobuf:"bytes,7,opt,name=phone" json:"phone,omitempty"`
	Email                *string         `protobuf:"bytes,8,opt,name=email" json:"email,omitempty"`
	Address              *string         `protobuf:"bytes,9,opt,name=address" json:"address,omitempty"`
	DisabledInvoiceEmail *int64          `protobuf:"varint,10,opt,name=disabled_invoice_email,json=disabledInvoiceEmail" json:"disabled_invoice_email,omitempty"`
	Updated              *int64          `protobuf:"varint,20,opt,name=updated" json:"updated,omitempty"`
	UpdatedBy            *string         `protobuf:"bytes,21,opt,name=updated_by,json=updatedBy" json:"updated_by,omitempty"`
}

func (x *InvoiceInfo) Reset() {
	*x = InvoiceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvoiceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceInfo) ProtoMessage() {}

func (x *InvoiceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceInfo.ProtoReflect.Descriptor instead.
func (*InvoiceInfo) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{4}
}

func (x *InvoiceInfo) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *InvoiceInfo) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *InvoiceInfo) GetCompanyName() string {
	if x != nil && x.CompanyName != nil {
		return *x.CompanyName
	}
	return ""
}

func (x *InvoiceInfo) GetTaxCode() string {
	if x != nil && x.TaxCode != nil {
		return *x.TaxCode
	}
	return ""
}

func (x *InvoiceInfo) GetFullname() string {
	if x != nil && x.Fullname != nil {
		return *x.Fullname
	}
	return ""
}

func (x *InvoiceInfo) GetPhone() string {
	if x != nil && x.Phone != nil {
		return *x.Phone
	}
	return ""
}

func (x *InvoiceInfo) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *InvoiceInfo) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *InvoiceInfo) GetDisabledInvoiceEmail() int64 {
	if x != nil && x.DisabledInvoiceEmail != nil {
		return *x.DisabledInvoiceEmail
	}
	return 0
}

func (x *InvoiceInfo) GetUpdated() int64 {
	if x != nil && x.Updated != nil {
		return *x.Updated
	}
	return 0
}

func (x *InvoiceInfo) GetUpdatedBy() string {
	if x != nil && x.UpdatedBy != nil {
		return *x.UpdatedBy
	}
	return ""
}

type UserAttributeSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicFields []string `protobuf:"bytes,3,rep,name=basic_fields,json=basicFields" json:"basic_fields,omitempty"`
}

func (x *UserAttributeSetting) Reset() {
	*x = UserAttributeSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAttributeSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAttributeSetting) ProtoMessage() {}

func (x *UserAttributeSetting) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAttributeSetting.ProtoReflect.Descriptor instead.
func (*UserAttributeSetting) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{5}
}

func (x *UserAttributeSetting) GetBasicFields() []string {
	if x != nil {
		return x.BasicFields
	}
	return nil
}

type Feature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebpageMonitor   *bool   `protobuf:"varint,3,opt,name=webpage_monitor,json=webpageMonitor" json:"webpage_monitor,omitempty"`
	WebpageAudit     *bool   `protobuf:"varint,4,opt,name=webpage_audit,json=webpageAudit" json:"webpage_audit,omitempty"`
	Facebook         *bool   `protobuf:"varint,5,opt,name=facebook" json:"facebook,omitempty"`
	Zalo             *bool   `protobuf:"varint,6,opt,name=zalo" json:"zalo,omitempty"`
	Email            *bool   `protobuf:"varint,7,opt,name=email" json:"email,omitempty"`
	WebPlugin        *bool   `protobuf:"varint,8,opt,name=web_plugin,json=webPlugin" json:"web_plugin,omitempty"`
	Bot              *bool   `protobuf:"varint,9,opt,name=bot" json:"bot,omitempty"`
	Shop             *string `protobuf:"bytes,10,opt,name=shop" json:"shop,omitempty"`                                                      //   pending || active
	TotalFileSize    *int64  `protobuf:"varint,11,opt,name=total_file_size,json=totalFileSize" json:"total_file_size,omitempty"`            // bytes
	TotalCallLogSize *int64  `protobuf:"varint,12,opt,name=total_call_log_size,json=totalCallLogSize" json:"total_call_log_size,omitempty"` // bytes
	CallRecordingTtl *int64  `protobuf:"varint,13,opt,name=call_recording_ttl,json=callRecordingTtl" json:"call_recording_ttl,omitempty"`   // sec
}

func (x *Feature) Reset() {
	*x = Feature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Feature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Feature) ProtoMessage() {}

func (x *Feature) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Feature.ProtoReflect.Descriptor instead.
func (*Feature) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{6}
}

func (x *Feature) GetWebpageMonitor() bool {
	if x != nil && x.WebpageMonitor != nil {
		return *x.WebpageMonitor
	}
	return false
}

func (x *Feature) GetWebpageAudit() bool {
	if x != nil && x.WebpageAudit != nil {
		return *x.WebpageAudit
	}
	return false
}

func (x *Feature) GetFacebook() bool {
	if x != nil && x.Facebook != nil {
		return *x.Facebook
	}
	return false
}

func (x *Feature) GetZalo() bool {
	if x != nil && x.Zalo != nil {
		return *x.Zalo
	}
	return false
}

func (x *Feature) GetEmail() bool {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return false
}

func (x *Feature) GetWebPlugin() bool {
	if x != nil && x.WebPlugin != nil {
		return *x.WebPlugin
	}
	return false
}

func (x *Feature) GetBot() bool {
	if x != nil && x.Bot != nil {
		return *x.Bot
	}
	return false
}

func (x *Feature) GetShop() string {
	if x != nil && x.Shop != nil {
		return *x.Shop
	}
	return ""
}

func (x *Feature) GetTotalFileSize() int64 {
	if x != nil && x.TotalFileSize != nil {
		return *x.TotalFileSize
	}
	return 0
}

func (x *Feature) GetTotalCallLogSize() int64 {
	if x != nil && x.TotalCallLogSize != nil {
		return *x.TotalCallLogSize
	}
	return 0
}

func (x *Feature) GetCallRecordingTtl() int64 {
	if x != nil && x.CallRecordingTtl != nil {
		return *x.CallRecordingTtl
	}
	return 0
}

type LeadSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssignConversationAsLead *string `protobuf:"bytes,3,opt,name=assign_conversation_as_lead,json=assignConversationAsLead" json:"assign_conversation_as_lead,omitempty"` // assigned [default], joined
	AutoUpdatePhone          *int64  `protobuf:"varint,4,opt,name=auto_update_phone,json=autoUpdatePhone" json:"auto_update_phone,omitempty"`
	AutoUpdateEmail          *int64  `protobuf:"varint,5,opt,name=auto_update_email,json=autoUpdateEmail" json:"auto_update_email,omitempty"`
}

func (x *LeadSetting) Reset() {
	*x = LeadSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeadSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeadSetting) ProtoMessage() {}

func (x *LeadSetting) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeadSetting.ProtoReflect.Descriptor instead.
func (*LeadSetting) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{7}
}

func (x *LeadSetting) GetAssignConversationAsLead() string {
	if x != nil && x.AssignConversationAsLead != nil {
		return *x.AssignConversationAsLead
	}
	return ""
}

func (x *LeadSetting) GetAutoUpdatePhone() int64 {
	if x != nil && x.AutoUpdatePhone != nil {
		return *x.AutoUpdatePhone
	}
	return 0
}

func (x *LeadSetting) GetAutoUpdateEmail() int64 {
	if x != nil && x.AutoUpdateEmail != nil {
		return *x.AutoUpdateEmail
	}
	return 0
}

type Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	IsSet     *bool           `protobuf:"varint,2,opt,name=is_set,json=isSet" json:"is_set,omitempty"` // true
	Token     *string         `protobuf:"bytes,3,opt,name=token" json:"token,omitempty"`
	AccountId *string         `protobuf:"bytes,4,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (x *Token) Reset() {
	*x = Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token) ProtoMessage() {}

func (x *Token) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token.ProtoReflect.Descriptor instead.
func (*Token) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{8}
}

func (x *Token) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Token) GetIsSet() bool {
	if x != nil && x.IsSet != nil {
		return *x.IsSet
	}
	return false
}

func (x *Token) GetToken() string {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return ""
}

func (x *Token) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

type WarnInactiveEmail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx                *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	From               *string         `protobuf:"bytes,8,opt,name=from" json:"from,omitempty"`
	To                 *string         `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
	AccountId          *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	OwnerId            *string         `protobuf:"bytes,4,opt,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
	OwnerName          *string         `protobuf:"bytes,7,opt,name=owner_name,json=ownerName" json:"owner_name,omitempty"`
	OwnerEmail         *string         `protobuf:"bytes,9,opt,name=owner_email,json=ownerEmail" json:"owner_email,omitempty"`
	InactiveDate       *int64          `protobuf:"varint,10,opt,name=inactive_date,json=inactiveDate" json:"inactive_date,omitempty"` // in ms
	DaysBeforeInactive *int64          `protobuf:"varint,11,opt,name=days_before_inactive,json=daysBeforeInactive" json:"days_before_inactive,omitempty"`
	AccountName        *string         `protobuf:"bytes,12,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	Plan               *string         `protobuf:"bytes,13,opt,name=plan" json:"plan,omitempty"`
	NumContacts        *int64          `protobuf:"varint,14,opt,name=num_contacts,json=numContacts" json:"num_contacts,omitempty"`
}

func (x *WarnInactiveEmail) Reset() {
	*x = WarnInactiveEmail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WarnInactiveEmail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarnInactiveEmail) ProtoMessage() {}

func (x *WarnInactiveEmail) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarnInactiveEmail.ProtoReflect.Descriptor instead.
func (*WarnInactiveEmail) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{9}
}

func (x *WarnInactiveEmail) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *WarnInactiveEmail) GetFrom() string {
	if x != nil && x.From != nil {
		return *x.From
	}
	return ""
}

func (x *WarnInactiveEmail) GetTo() string {
	if x != nil && x.To != nil {
		return *x.To
	}
	return ""
}

func (x *WarnInactiveEmail) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *WarnInactiveEmail) GetOwnerId() string {
	if x != nil && x.OwnerId != nil {
		return *x.OwnerId
	}
	return ""
}

func (x *WarnInactiveEmail) GetOwnerName() string {
	if x != nil && x.OwnerName != nil {
		return *x.OwnerName
	}
	return ""
}

func (x *WarnInactiveEmail) GetOwnerEmail() string {
	if x != nil && x.OwnerEmail != nil {
		return *x.OwnerEmail
	}
	return ""
}

func (x *WarnInactiveEmail) GetInactiveDate() int64 {
	if x != nil && x.InactiveDate != nil {
		return *x.InactiveDate
	}
	return 0
}

func (x *WarnInactiveEmail) GetDaysBeforeInactive() int64 {
	if x != nil && x.DaysBeforeInactive != nil {
		return *x.DaysBeforeInactive
	}
	return 0
}

func (x *WarnInactiveEmail) GetAccountName() string {
	if x != nil && x.AccountName != nil {
		return *x.AccountName
	}
	return ""
}

func (x *WarnInactiveEmail) GetPlan() string {
	if x != nil && x.Plan != nil {
		return *x.Plan
	}
	return ""
}

func (x *WarnInactiveEmail) GetNumContacts() int64 {
	if x != nil && x.NumContacts != nil {
		return *x.NumContacts
	}
	return 0
}

type InvoiceEmail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx         *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId   *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Created     *int64          `protobuf:"varint,6,opt,name=created" json:"created,omitempty"` // sec
	InvoiceIds  []string        `protobuf:"bytes,8,rep,name=invoice_ids,json=invoiceIds" json:"invoice_ids,omitempty"`
	InvoiceUrls []string        `protobuf:"bytes,9,rep,name=invoice_urls,json=invoiceUrls" json:"invoice_urls,omitempty"`
	OverdueDays []int32         `protobuf:"varint,10,rep,name=overdue_days,json=overdueDays" json:"overdue_days,omitempty"`
}

func (x *InvoiceEmail) Reset() {
	*x = InvoiceEmail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvoiceEmail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceEmail) ProtoMessage() {}

func (x *InvoiceEmail) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceEmail.ProtoReflect.Descriptor instead.
func (*InvoiceEmail) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{10}
}

func (x *InvoiceEmail) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *InvoiceEmail) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *InvoiceEmail) GetCreated() int64 {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return 0
}

func (x *InvoiceEmail) GetInvoiceIds() []string {
	if x != nil {
		return x.InvoiceIds
	}
	return nil
}

func (x *InvoiceEmail) GetInvoiceUrls() []string {
	if x != nil {
		return x.InvoiceUrls
	}
	return nil
}

func (x *InvoiceEmail) GetOverdueDays() []int32 {
	if x != nil {
		return x.OverdueDays
	}
	return nil
}

type SubscriptionUpgradedEmail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Created   *int64          `protobuf:"varint,6,opt,name=created" json:"created,omitempty"` // sec
}

func (x *SubscriptionUpgradedEmail) Reset() {
	*x = SubscriptionUpgradedEmail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionUpgradedEmail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionUpgradedEmail) ProtoMessage() {}

func (x *SubscriptionUpgradedEmail) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionUpgradedEmail.ProtoReflect.Descriptor instead.
func (*SubscriptionUpgradedEmail) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{11}
}

func (x *SubscriptionUpgradedEmail) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *SubscriptionUpgradedEmail) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *SubscriptionUpgradedEmail) GetCreated() int64 {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return 0
}

type BillCreatedEmail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx         *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId   *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Created     *int64          `protobuf:"varint,6,opt,name=created" json:"created,omitempty"` // sec
	InvoiceIds  []string        `protobuf:"bytes,8,rep,name=invoice_ids,json=invoiceIds" json:"invoice_ids,omitempty"`
	InvoiceUrls []string        `protobuf:"bytes,9,rep,name=invoice_urls,json=invoiceUrls" json:"invoice_urls,omitempty"`
}

func (x *BillCreatedEmail) Reset() {
	*x = BillCreatedEmail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BillCreatedEmail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BillCreatedEmail) ProtoMessage() {}

func (x *BillCreatedEmail) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BillCreatedEmail.ProtoReflect.Descriptor instead.
func (*BillCreatedEmail) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{12}
}

func (x *BillCreatedEmail) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *BillCreatedEmail) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *BillCreatedEmail) GetCreated() int64 {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return 0
}

func (x *BillCreatedEmail) GetInvoiceIds() []string {
	if x != nil {
		return x.InvoiceIds
	}
	return nil
}

func (x *BillCreatedEmail) GetInvoiceUrls() []string {
	if x != nil {
		return x.InvoiceUrls
	}
	return nil
}

type TrialEndingEmail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Created   *int64          `protobuf:"varint,6,opt,name=created" json:"created,omitempty"` // sec
	Ended     *int64          `protobuf:"varint,7,opt,name=ended" json:"ended,omitempty"`
}

func (x *TrialEndingEmail) Reset() {
	*x = TrialEndingEmail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrialEndingEmail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrialEndingEmail) ProtoMessage() {}

func (x *TrialEndingEmail) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrialEndingEmail.ProtoReflect.Descriptor instead.
func (*TrialEndingEmail) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{13}
}

func (x *TrialEndingEmail) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *TrialEndingEmail) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *TrialEndingEmail) GetCreated() int64 {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return 0
}

func (x *TrialEndingEmail) GetEnded() int64 {
	if x != nil && x.Ended != nil {
		return *x.Ended
	}
	return 0
}

type DowngradedToFreeEmail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Created   *int64          `protobuf:"varint,6,opt,name=created" json:"created,omitempty"` // sec
}

func (x *DowngradedToFreeEmail) Reset() {
	*x = DowngradedToFreeEmail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DowngradedToFreeEmail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DowngradedToFreeEmail) ProtoMessage() {}

func (x *DowngradedToFreeEmail) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DowngradedToFreeEmail.ProtoReflect.Descriptor instead.
func (*DowngradedToFreeEmail) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{14}
}

func (x *DowngradedToFreeEmail) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *DowngradedToFreeEmail) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *DowngradedToFreeEmail) GetCreated() int64 {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return 0
}

type InviteEmail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx            *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	To             *string         `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
	AccountId      *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	SenderId       *string         `protobuf:"bytes,4,opt,name=sender_id,json=senderId" json:"sender_id,omitempty"`
	ExpiredIn      *int64          `protobuf:"varint,5,opt,name=expired_in,json=expiredIn" json:"expired_in,omitempty"`
	Token          *string         `protobuf:"bytes,6,opt,name=token" json:"token,omitempty"`
	Fullname       *string         `protobuf:"bytes,9,opt,name=fullname" json:"fullname,omitempty"`
	SenderName     *string         `protobuf:"bytes,10,opt,name=sender_name,json=senderName" json:"sender_name,omitempty"`
	AccountName    *string         `protobuf:"bytes,11,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	AccountLogoUrl *string         `protobuf:"bytes,12,opt,name=account_logo_url,json=accountLogoUrl" json:"account_logo_url,omitempty"`
	From           *string         `protobuf:"bytes,14,opt,name=from" json:"from,omitempty"`
}

func (x *InviteEmail) Reset() {
	*x = InviteEmail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteEmail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteEmail) ProtoMessage() {}

func (x *InviteEmail) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteEmail.ProtoReflect.Descriptor instead.
func (*InviteEmail) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{15}
}

func (x *InviteEmail) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *InviteEmail) GetTo() string {
	if x != nil && x.To != nil {
		return *x.To
	}
	return ""
}

func (x *InviteEmail) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *InviteEmail) GetSenderId() string {
	if x != nil && x.SenderId != nil {
		return *x.SenderId
	}
	return ""
}

func (x *InviteEmail) GetExpiredIn() int64 {
	if x != nil && x.ExpiredIn != nil {
		return *x.ExpiredIn
	}
	return 0
}

func (x *InviteEmail) GetToken() string {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return ""
}

func (x *InviteEmail) GetFullname() string {
	if x != nil && x.Fullname != nil {
		return *x.Fullname
	}
	return ""
}

func (x *InviteEmail) GetSenderName() string {
	if x != nil && x.SenderName != nil {
		return *x.SenderName
	}
	return ""
}

func (x *InviteEmail) GetAccountName() string {
	if x != nil && x.AccountName != nil {
		return *x.AccountName
	}
	return ""
}

func (x *InviteEmail) GetAccountLogoUrl() string {
	if x != nil && x.AccountLogoUrl != nil {
		return *x.AccountLogoUrl
	}
	return ""
}

func (x *InviteEmail) GetFrom() string {
	if x != nil && x.From != nil {
		return *x.From
	}
	return ""
}

type ResetPasswordEmail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx  *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	From *string         `protobuf:"bytes,2,opt,name=from" json:"from,omitempty"`
	To   *string         `protobuf:"bytes,3,opt,name=to" json:"to,omitempty"`
	// ExpiredIn is a RFC3339 time string indicates when token will be expired
	ExpiredIn *int64  `protobuf:"varint,4,opt,name=expired_in,json=expiredIn" json:"expired_in,omitempty"`
	Token     *string `protobuf:"bytes,5,opt,name=token" json:"token,omitempty"`
	AccountId *string `protobuf:"bytes,6,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	AgentId   *string `protobuf:"bytes,7,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	AgentName *string `protobuf:"bytes,8,opt,name=agent_name,json=agentName" json:"agent_name,omitempty"`
}

func (x *ResetPasswordEmail) Reset() {
	*x = ResetPasswordEmail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetPasswordEmail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetPasswordEmail) ProtoMessage() {}

func (x *ResetPasswordEmail) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetPasswordEmail.ProtoReflect.Descriptor instead.
func (*ResetPasswordEmail) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{16}
}

func (x *ResetPasswordEmail) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ResetPasswordEmail) GetFrom() string {
	if x != nil && x.From != nil {
		return *x.From
	}
	return ""
}

func (x *ResetPasswordEmail) GetTo() string {
	if x != nil && x.To != nil {
		return *x.To
	}
	return ""
}

func (x *ResetPasswordEmail) GetExpiredIn() int64 {
	if x != nil && x.ExpiredIn != nil {
		return *x.ExpiredIn
	}
	return 0
}

func (x *ResetPasswordEmail) GetToken() string {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return ""
}

func (x *ResetPasswordEmail) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *ResetPasswordEmail) GetAgentId() string {
	if x != nil && x.AgentId != nil {
		return *x.AgentId
	}
	return ""
}

func (x *ResetPasswordEmail) GetAgentName() string {
	if x != nil && x.AgentName != nil {
		return *x.AgentName
	}
	return ""
}

type BusinessHours struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx         *common.Context             `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId   *string                     `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Id          *string                     `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	WorkingDays []*BusinessHours_WorkingDay `protobuf:"bytes,4,rep,name=working_days,json=workingDays" json:"working_days,omitempty"`
	Holidays    []*BusinessHours_Holiday    `protobuf:"bytes,5,rep,name=holidays" json:"holidays,omitempty"`
}

func (x *BusinessHours) Reset() {
	*x = BusinessHours{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessHours) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessHours) ProtoMessage() {}

func (x *BusinessHours) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessHours.ProtoReflect.Descriptor instead.
func (*BusinessHours) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{17}
}

func (x *BusinessHours) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *BusinessHours) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *BusinessHours) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *BusinessHours) GetWorkingDays() []*BusinessHours_WorkingDay {
	if x != nil {
		return x.WorkingDays
	}
	return nil
}

func (x *BusinessHours) GetHolidays() []*BusinessHours_Holiday {
	if x != nil {
		return x.Holidays
	}
	return nil
}

type SyncPublicHolidaysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx         *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	CountryCode *string         `protobuf:"bytes,2,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	Lang        *string         `protobuf:"bytes,3,opt,name=lang" json:"lang,omitempty"`
}

func (x *SyncPublicHolidaysRequest) Reset() {
	*x = SyncPublicHolidaysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncPublicHolidaysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncPublicHolidaysRequest) ProtoMessage() {}

func (x *SyncPublicHolidaysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncPublicHolidaysRequest.ProtoReflect.Descriptor instead.
func (*SyncPublicHolidaysRequest) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{18}
}

func (x *SyncPublicHolidaysRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *SyncPublicHolidaysRequest) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

func (x *SyncPublicHolidaysRequest) GetLang() string {
	if x != nil && x.Lang != nil {
		return *x.Lang
	}
	return ""
}

type SearchSubRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Query     *string         `protobuf:"bytes,4,opt,name=query" json:"query,omitempty"`
	Anchor    *string         `protobuf:"bytes,5,opt,name=anchor" json:"anchor,omitempty"`
	Limit     *int32          `protobuf:"varint,6,opt,name=limit" json:"limit,omitempty"`
	Plan      *string         `protobuf:"bytes,7,opt,name=plan" json:"plan,omitempty"`
	IsChurned *bool           `protobuf:"varint,8,opt,name=is_churned,json=isChurned" json:"is_churned,omitempty"`
	State     *string         `protobuf:"bytes,9,opt,name=state" json:"state,omitempty"`
	// optional uint32 billing_cycle_month = 8;
	OrderBy *string `protobuf:"bytes,10,opt,name=order_by,json=orderBy" json:"order_by,omitempty"`
}

func (x *SearchSubRequest) Reset() {
	*x = SearchSubRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchSubRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchSubRequest) ProtoMessage() {}

func (x *SearchSubRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchSubRequest.ProtoReflect.Descriptor instead.
func (*SearchSubRequest) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{19}
}

func (x *SearchSubRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *SearchSubRequest) GetQuery() string {
	if x != nil && x.Query != nil {
		return *x.Query
	}
	return ""
}

func (x *SearchSubRequest) GetAnchor() string {
	if x != nil && x.Anchor != nil {
		return *x.Anchor
	}
	return ""
}

func (x *SearchSubRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *SearchSubRequest) GetPlan() string {
	if x != nil && x.Plan != nil {
		return *x.Plan
	}
	return ""
}

func (x *SearchSubRequest) GetIsChurned() bool {
	if x != nil && x.IsChurned != nil {
		return *x.IsChurned
	}
	return false
}

func (x *SearchSubRequest) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *SearchSubRequest) GetOrderBy() string {
	if x != nil && x.OrderBy != nil {
		return *x.OrderBy
	}
	return ""
}

type Presences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Presences []*Presence     `protobuf:"bytes,4,rep,name=presences" json:"presences,omitempty"`
}

func (x *Presences) Reset() {
	*x = Presences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Presences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Presences) ProtoMessage() {}

func (x *Presences) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Presences.ProtoReflect.Descriptor instead.
func (*Presences) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{20}
}

func (x *Presences) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Presences) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *Presences) GetPresences() []*Presence {
	if x != nil {
		return x.Presences
	}
	return nil
}

type Presence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx                    *common.Context `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	AccountId              *string         `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UserId                 *string         `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Pinged                 *int64          `protobuf:"varint,5,opt,name=pinged" json:"pinged,omitempty"`
	PingedMinute           *int64          `protobuf:"varint,6,opt,name=pinged_minute,json=pingedMinute" json:"pinged_minute,omitempty"`
	Ip                     *string         `protobuf:"bytes,7,opt,name=ip" json:"ip,omitempty"`
	Ua                     *string         `protobuf:"bytes,8,opt,name=ua" json:"ua,omitempty"`
	IsFocused              *bool           `protobuf:"varint,9,opt,name=is_focused,json=isFocused" json:"is_focused,omitempty"` // tell where the user is actually seeing the page
	LastSeenConvoId        *string         `protobuf:"bytes,10,opt,name=last_seen_convo_id,json=lastSeenConvoId" json:"last_seen_convo_id,omitempty"`
	BrowserTabId           *string         `protobuf:"bytes,11,opt,name=browser_tab_id,json=browserTabId" json:"browser_tab_id,omitempty"`                                 // unique id for each tab
	ViewingProductId       *string         `protobuf:"bytes,12,opt,name=viewing_product_id,json=viewingProductId" json:"viewing_product_id,omitempty"`                     // presence_update user with product linked
	ViewingProductSourceId *string         `protobuf:"bytes,13,opt,name=viewing_product_source_id,json=viewingProductSourceId" json:"viewing_product_source_id,omitempty"` // presence_update user with product linked
	ViewingProductSku      *string         `protobuf:"bytes,14,opt,name=viewing_product_sku,json=viewingProductSku" json:"viewing_product_sku,omitempty"`                  // presence_update user with product linked
	ViewingProductTitle    *string         `protobuf:"bytes,15,opt,name=viewing_product_title,json=viewingProductTitle" json:"viewing_product_title,omitempty"`
}

func (x *Presence) Reset() {
	*x = Presence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Presence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Presence) ProtoMessage() {}

func (x *Presence) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Presence.ProtoReflect.Descriptor instead.
func (*Presence) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{21}
}

func (x *Presence) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Presence) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *Presence) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *Presence) GetPinged() int64 {
	if x != nil && x.Pinged != nil {
		return *x.Pinged
	}
	return 0
}

func (x *Presence) GetPingedMinute() int64 {
	if x != nil && x.PingedMinute != nil {
		return *x.PingedMinute
	}
	return 0
}

func (x *Presence) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *Presence) GetUa() string {
	if x != nil && x.Ua != nil {
		return *x.Ua
	}
	return ""
}

func (x *Presence) GetIsFocused() bool {
	if x != nil && x.IsFocused != nil {
		return *x.IsFocused
	}
	return false
}

func (x *Presence) GetLastSeenConvoId() string {
	if x != nil && x.LastSeenConvoId != nil {
		return *x.LastSeenConvoId
	}
	return ""
}

func (x *Presence) GetBrowserTabId() string {
	if x != nil && x.BrowserTabId != nil {
		return *x.BrowserTabId
	}
	return ""
}

func (x *Presence) GetViewingProductId() string {
	if x != nil && x.ViewingProductId != nil {
		return *x.ViewingProductId
	}
	return ""
}

func (x *Presence) GetViewingProductSourceId() string {
	if x != nil && x.ViewingProductSourceId != nil {
		return *x.ViewingProductSourceId
	}
	return ""
}

func (x *Presence) GetViewingProductSku() string {
	if x != nil && x.ViewingProductSku != nil {
		return *x.ViewingProductSku
	}
	return ""
}

func (x *Presence) GetViewingProductTitle() string {
	if x != nil && x.ViewingProductTitle != nil {
		return *x.ViewingProductTitle
	}
	return ""
}

type BusinessHours_WorkingDay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Weekday   *string `protobuf:"bytes,1,opt,name=weekday" json:"weekday,omitempty"`
	StartTime *string `protobuf:"bytes,2,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndTime   *string `protobuf:"bytes,3,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
}

func (x *BusinessHours_WorkingDay) Reset() {
	*x = BusinessHours_WorkingDay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessHours_WorkingDay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessHours_WorkingDay) ProtoMessage() {}

func (x *BusinessHours_WorkingDay) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessHours_WorkingDay.ProtoReflect.Descriptor instead.
func (*BusinessHours_WorkingDay) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{17, 0}
}

func (x *BusinessHours_WorkingDay) GetWeekday() string {
	if x != nil && x.Weekday != nil {
		return *x.Weekday
	}
	return ""
}

func (x *BusinessHours_WorkingDay) GetStartTime() string {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return ""
}

func (x *BusinessHours_WorkingDay) GetEndTime() string {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return ""
}

type BusinessHours_Holiday struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year      *int32  `protobuf:"varint,1,opt,name=year" json:"year,omitempty"`
	Month     *int32  `protobuf:"varint,2,opt,name=month" json:"month,omitempty"`
	Day       *int32  `protobuf:"varint,3,opt,name=day" json:"day,omitempty"`
	Weekday   *string `protobuf:"bytes,4,opt,name=weekday" json:"weekday,omitempty"` // deprecated
	Name      *string `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	StartTime *string `protobuf:"bytes,6,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndTime   *string `protobuf:"bytes,7,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
}

func (x *BusinessHours_Holiday) Reset() {
	*x = BusinessHours_Holiday{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessHours_Holiday) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessHours_Holiday) ProtoMessage() {}

func (x *BusinessHours_Holiday) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessHours_Holiday.ProtoReflect.Descriptor instead.
func (*BusinessHours_Holiday) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{17, 1}
}

func (x *BusinessHours_Holiday) GetYear() int32 {
	if x != nil && x.Year != nil {
		return *x.Year
	}
	return 0
}

func (x *BusinessHours_Holiday) GetMonth() int32 {
	if x != nil && x.Month != nil {
		return *x.Month
	}
	return 0
}

func (x *BusinessHours_Holiday) GetDay() int32 {
	if x != nil && x.Day != nil {
		return *x.Day
	}
	return 0
}

func (x *BusinessHours_Holiday) GetWeekday() string {
	if x != nil && x.Weekday != nil {
		return *x.Weekday
	}
	return ""
}

func (x *BusinessHours_Holiday) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *BusinessHours_Holiday) GetStartTime() string {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return ""
}

func (x *BusinessHours_Holiday) GetEndTime() string {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return ""
}

var File_account_proto protoreflect.FileDescriptor

var file_account_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xad, 0x0e, 0x0a, 0x0e, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x6f, 0x75,
	0x72, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x5f, 0x77, 0x65, 0x62, 0x5f, 0x73, 0x68, 0x6f, 0x77,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x74, 0x6f, 0x75, 0x72, 0x47, 0x75,
	0x69, 0x64, 0x65, 0x57, 0x65, 0x62, 0x53, 0x68, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x25,
	0x74, 0x6f, 0x75, 0x72, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x77, 0x65, 0x62, 0x5f, 0x73,
	0x68, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x20, 0x74, 0x6f, 0x75,
	0x72, 0x47, 0x75, 0x69, 0x64, 0x65, 0x47, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x57, 0x65, 0x62, 0x53, 0x68, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x55, 0x0a,
	0x28, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x77,
	0x65, 0x62, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x23, 0x74, 0x6f, 0x75, 0x72, 0x47, 0x75, 0x69, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x57, 0x65, 0x62, 0x53, 0x68,
	0x6f, 0x77, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6f, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x62, 0x6f, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x69,
	0x65, 0x77, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x69, 0x6e, 0x6e, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x75, 0x73,
	0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0f, 0x75, 0x73, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79,
	0x12, 0x30, 0x0a, 0x14, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x13, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x17, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x61, 0x6c,
	0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x75,
	0x6e, 0x74, 0x69, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x75, 0x74, 0x65,
	0x43, 0x61, 0x6c, 0x6c, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x77, 0x65, 0x62,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x77, 0x65, 0x62, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x61, 0x70, 0x70, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x63, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x68, 0x6f, 0x77,
	0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x3f, 0x0a, 0x1c, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x19, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x55, 0x0a, 0x10, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x22,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x44,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0e, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x12, 0x68, 0x0a, 0x17, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x23, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x56, 0x69, 0x65, 0x77, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x75, 0x73, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x64, 0x65, 0x62, 0x75, 0x67, 0x4c,
	0x6f, 0x67, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x77,
	0x65, 0x62, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x77, 0x65,
	0x62, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x6b, 0x0a, 0x18, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x26, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x73, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x1a, 0x41, 0x0a, 0x13, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x47, 0x0a, 0x19, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x48, 0x0a, 0x1a,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x73,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xda, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03,
	0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x69, 0x6e, 0x6e, 0x65,
	0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0f, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69,
	0x65, 0x77, 0x73, 0x22, 0xe9, 0x07, 0x0a, 0x05, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x31, 0x32, 0x38, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x31, 0x32, 0x38, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x61, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x2d, 0x0a, 0x12,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6a,
	0x6f, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6a, 0x6f, 0x69,
	0x6e, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12,
	0x2a, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x69, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x12, 0x2e, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65,
	0x6e, 0x12, 0x44, 0x0a, 0x11, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x18, 0x29, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x29, 0x0a, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x09, 0x0a, 0x05,
	0x75, 0x6e, 0x73, 0x65, 0x74, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x6d, 0x61, 0x6c, 0x65, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x66, 0x65, 0x6d, 0x61, 0x6c, 0x65, 0x10, 0x02, 0x22, 0x40, 0x0a,
	0x0a, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x03, 0x22,
	0x91, 0x0a, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63,
	0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a,
	0x0c, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x31, 0x32, 0x38, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x31, 0x32, 0x38, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x7a, 0x69, 0x70, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x7a, 0x69, 0x70, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x61, 0x6e, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x3d, 0x0a, 0x0e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x52, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x37, 0x0a, 0x0c, 0x6c, 0x65,
	0x61, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x64, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x65, 0x62, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x65, 0x62, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x35, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12,
	0x2b, 0x0a, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x65, 0x73, 0x18, 0x28, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x4c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x2e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x14, 0x75, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x2f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x79, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x15,
	0x75, 0x6e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x75, 0x6e, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x22, 0x31, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x10, 0x04, 0x22, 0xde, 0x02, 0x0a, 0x0b, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x78, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x78, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x22, 0x39, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c,
	0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x69, 0x63, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22,
	0xe7, 0x02, 0x0a, 0x07, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x77,
	0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x77, 0x65, 0x62,
	0x70, 0x61, 0x67, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61, 0x63,
	0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x61, 0x63,
	0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x61, 0x6c, 0x6f, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x7a, 0x61, 0x6c, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x77, 0x65, 0x62, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x62, 0x6f, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x62, 0x6f, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x73, 0x68, 0x6f, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2d, 0x0a, 0x13,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63,
	0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x74,
	0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x74, 0x6c, 0x22, 0xa4, 0x01, 0x0a, 0x0b, 0x4c, 0x65,
	0x61, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x3d, 0x0a, 0x1b, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x61, 0x73, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x73, 0x4c, 0x65, 0x61, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x6f,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x61, 0x75, 0x74, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x22, 0x76, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x15, 0x0a, 0x06,
	0x69, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73,
	0x53, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x85, 0x03, 0x0a, 0x11, 0x57, 0x61, 0x72,
	0x6e, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x21,
	0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74,
	0x78, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x62, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x64, 0x61, 0x79, 0x73, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x49, 0x6e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6c, 0x61,
	0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x21, 0x0a,
	0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x22, 0xd1, 0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x79,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x76, 0x65, 0x72, 0x64, 0x75, 0x65,
	0x44, 0x61, 0x79, 0x73, 0x22, 0x77, 0x0a, 0x19, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0xb2, 0x01,
	0x0a, 0x10, 0x42, 0x69, 0x6c, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x55, 0x72,
	0x6c, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x10, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x45, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x22, 0x73, 0x0a, 0x15, 0x44, 0x6f, 0x77,
	0x6e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x54, 0x6f, 0x46, 0x72, 0x65, 0x65, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0xcf,
	0x02, 0x0a, 0x0b, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x21,
	0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74,
	0x78, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74,
	0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x6f,
	0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x22, 0xe9, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e,
	0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xf5, 0x03, 0x0a,
	0x0d, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x21,
	0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74,
	0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x44, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x44, 0x61, 0x79, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61,
	0x79, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x75, 0x72, 0x73,
	0x2e, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x52, 0x08, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61,
	0x79, 0x73, 0x1a, 0x60, 0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x77, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x77, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x1a, 0xad, 0x01, 0x0a, 0x07, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x77, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77,
	0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x75, 0x0a, 0x19, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x03, 0x63, 0x74, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x22, 0xdd, 0x01, 0x0a, 0x10,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x75, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03,
	0x63, 0x74, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x63, 0x68, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x43, 0x68, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0x7e, 0x0a, 0x09, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x09, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x09, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x81, 0x04, 0x0a, 0x08,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x69, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x69, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70,
	0x69, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x70, 0x69, 0x6e, 0x67, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70,
	0x12, 0x0e, 0x0a, 0x02, 0x75, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x75, 0x61,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x65, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x65, 0x64, 0x12,
	0x2b, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x76, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x61, 0x73,
	0x74, 0x53, 0x65, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x6f, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e,
	0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x54, 0x61, 0x62,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x76, 0x69, 0x65, 0x77, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x76, 0x69, 0x65, 0x77, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x39, 0x0a, 0x19, 0x76, 0x69, 0x65, 0x77, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x76, 0x69, 0x65, 0x77, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x76,
	0x69, 0x65, 0x77, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73,
	0x6b, 0x75, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x76, 0x69, 0x65, 0x77, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x6b, 0x75, 0x12, 0x32, 0x0a, 0x15, 0x76,
	0x69, 0x65, 0x77, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x76, 0x69, 0x65, 0x77,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x42,
	0x21, 0x5a, 0x1f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x7a, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74,
}

var (
	file_account_proto_rawDescOnce sync.Once
	file_account_proto_rawDescData = file_account_proto_rawDesc
)

func file_account_proto_rawDescGZIP() []byte {
	file_account_proto_rawDescOnce.Do(func() {
		file_account_proto_rawDescData = protoimpl.X.CompressGZIP(file_account_proto_rawDescData)
	})
	return file_account_proto_rawDescData
}

var file_account_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_account_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_account_proto_goTypes = []interface{}{
	(Agent_Gender)(0),                 // 0: account.Agent.Gender
	(Agent_AgentState)(0),             // 1: account.Agent.AgentState
	(Account_State)(0),                // 2: account.Account.State
	(*DashboardAgent)(nil),            // 3: account.DashboardAgent
	(*SegmentUserViewsOrder)(nil),     // 4: account.SegmentUserViewsOrder
	(*Agent)(nil),                     // 5: account.Agent
	(*Account)(nil),                   // 6: account.Account
	(*InvoiceInfo)(nil),               // 7: account.InvoiceInfo
	(*UserAttributeSetting)(nil),      // 8: account.UserAttributeSetting
	(*Feature)(nil),                   // 9: account.Feature
	(*LeadSetting)(nil),               // 10: account.LeadSetting
	(*Token)(nil),                     // 11: account.Token
	(*WarnInactiveEmail)(nil),         // 12: account.WarnInactiveEmail
	(*InvoiceEmail)(nil),              // 13: account.InvoiceEmail
	(*SubscriptionUpgradedEmail)(nil), // 14: account.SubscriptionUpgradedEmail
	(*BillCreatedEmail)(nil),          // 15: account.BillCreatedEmail
	(*TrialEndingEmail)(nil),          // 16: account.TrialEndingEmail
	(*DowngradedToFreeEmail)(nil),     // 17: account.DowngradedToFreeEmail
	(*InviteEmail)(nil),               // 18: account.InviteEmail
	(*ResetPasswordEmail)(nil),        // 19: account.ResetPasswordEmail
	(*BusinessHours)(nil),             // 20: account.BusinessHours
	(*SyncPublicHolidaysRequest)(nil), // 21: account.SyncPublicHolidaysRequest
	(*SearchSubRequest)(nil),          // 22: account.SearchSubRequest
	(*Presences)(nil),                 // 23: account.Presences
	(*Presence)(nil),                  // 24: account.Presence
	nil,                               // 25: account.DashboardAgent.SegmentOrderByEntry
	nil,                               // 26: account.DashboardAgent.UserViewDisplayFieldEntry
	nil,                               // 27: account.DashboardAgent.SegmentUserViewsOrderEntry
	(*BusinessHours_WorkingDay)(nil),  // 28: account.BusinessHours.WorkingDay
	(*BusinessHours_Holiday)(nil),     // 29: account.BusinessHours.Holiday
	(*common.Context)(nil),            // 30: common.Context
}
var file_account_proto_depIdxs = []int32{
	25, // 0: account.DashboardAgent.segment_order_by:type_name -> account.DashboardAgent.SegmentOrderByEntry
	26, // 1: account.DashboardAgent.user_view_display_field:type_name -> account.DashboardAgent.UserViewDisplayFieldEntry
	27, // 2: account.DashboardAgent.segment_user_views_order:type_name -> account.DashboardAgent.SegmentUserViewsOrderEntry
	30, // 3: account.SegmentUserViewsOrder.ctx:type_name -> common.Context
	30, // 4: account.Agent.ctx:type_name -> common.Context
	6,  // 5: account.Agent.account:type_name -> account.Account
	24, // 6: account.Agent.last_seen:type_name -> account.Presence
	3,  // 7: account.Agent.dashboard_setting:type_name -> account.DashboardAgent
	30, // 8: account.Account.ctx:type_name -> common.Context
	20, // 9: account.Account.business_hours:type_name -> account.BusinessHours
	10, // 10: account.Account.lead_setting:type_name -> account.LeadSetting
	9,  // 11: account.Account.feature:type_name -> account.Feature
	9,  // 12: account.Account.force_feature:type_name -> account.Feature
	8,  // 13: account.Account.user_attribute_setting:type_name -> account.UserAttributeSetting
	7,  // 14: account.Account.invoice_info:type_name -> account.InvoiceInfo
	30, // 15: account.InvoiceInfo.ctx:type_name -> common.Context
	30, // 16: account.Token.ctx:type_name -> common.Context
	30, // 17: account.WarnInactiveEmail.ctx:type_name -> common.Context
	30, // 18: account.InvoiceEmail.ctx:type_name -> common.Context
	30, // 19: account.SubscriptionUpgradedEmail.ctx:type_name -> common.Context
	30, // 20: account.BillCreatedEmail.ctx:type_name -> common.Context
	30, // 21: account.TrialEndingEmail.ctx:type_name -> common.Context
	30, // 22: account.DowngradedToFreeEmail.ctx:type_name -> common.Context
	30, // 23: account.InviteEmail.ctx:type_name -> common.Context
	30, // 24: account.ResetPasswordEmail.ctx:type_name -> common.Context
	30, // 25: account.BusinessHours.ctx:type_name -> common.Context
	28, // 26: account.BusinessHours.working_days:type_name -> account.BusinessHours.WorkingDay
	29, // 27: account.BusinessHours.holidays:type_name -> account.BusinessHours.Holiday
	30, // 28: account.SyncPublicHolidaysRequest.ctx:type_name -> common.Context
	30, // 29: account.SearchSubRequest.ctx:type_name -> common.Context
	30, // 30: account.Presences.ctx:type_name -> common.Context
	24, // 31: account.Presences.presences:type_name -> account.Presence
	30, // 32: account.Presence.ctx:type_name -> common.Context
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_account_proto_init() }
func file_account_proto_init() {
	if File_account_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_account_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashboardAgent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentUserViewsOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Agent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvoiceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAttributeSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Feature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeadSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WarnInactiveEmail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvoiceEmail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionUpgradedEmail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BillCreatedEmail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrialEndingEmail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DowngradedToFreeEmail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteEmail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetPasswordEmail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessHours); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncPublicHolidaysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchSubRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Presences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Presence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessHours_WorkingDay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessHours_Holiday); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_account_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_account_proto_goTypes,
		DependencyIndexes: file_account_proto_depIdxs,
		EnumInfos:         file_account_proto_enumTypes,
		MessageInfos:      file_account_proto_msgTypes,
	}.Build()
	File_account_proto = out.File
	file_account_proto_rawDesc = nil
	file_account_proto_goTypes = nil
	file_account_proto_depIdxs = nil
}
