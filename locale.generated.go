// CODE GENERATED BY lang.js. DO NOT MODIFY
package header

import "strings"

// GetI18n returns the value by its locale
func GetI18n(str *I18NString, locale, fallback string) string {
	if str == nil {
		return ""
	}
	if locale == "af-NA" {
		if str.Af_NA == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Af_NA
	}

	if locale == "af-ZA" {
		if str.Af_ZA == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Af_ZA
	}

	if locale == "ar-AR" {
		if str.Ar_AR == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Ar_AR
	}

	if locale == "ar-MA" {
		if str.Ar_MA == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Ar_MA
	}

	if locale == "ar-SA" {
		if str.Ar_SA == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Ar_SA
	}

	if locale == "ay-BO" {
		if str.Ay_BO == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Ay_BO
	}

	if locale == "az-AZ" {
		if str.Az_AZ == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Az_AZ
	}

	if locale == "be-BY" {
		if str.Be_BY == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Be_BY
	}

	if locale == "bg-BG" {
		if str.Bg_BG == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Bg_BG
	}

	if locale == "bn-IN" {
		if str.Bn_IN == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Bn_IN
	}

	if locale == "bn-BD" {
		if str.Bn_BD == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Bn_BD
	}

	if locale == "bs-BA" {
		if str.Bs_BA == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Bs_BA
	}

	if locale == "ca-ES" {
		if str.Ca_ES == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Ca_ES
	}

	if locale == "ck-US" {
		if str.Ck_US == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Ck_US
	}

	if locale == "cs-CZ" {
		if str.Cs_CZ == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Cs_CZ
	}

	if locale == "cy-GB" {
		if str.Cy_GB == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Cy_GB
	}

	if locale == "da-DK" {
		if str.Da_DK == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Da_DK
	}

	if locale == "de-AT" {
		if str.De_AT == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.De_AT
	}

	if locale == "de-DE" {
		if str.De_DE == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.De_DE
	}

	if locale == "de-CH" {
		if str.De_CH == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.De_CH
	}

	if locale == "el-GR" {
		if str.El_GR == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.El_GR
	}

	if locale == "en-GB" {
		if str.En_GB == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.En_GB
	}

	if locale == "en-AU" {
		if str.En_AU == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.En_AU
	}

	if locale == "en-CA" {
		if str.En_CA == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.En_CA
	}

	if locale == "en-IE" {
		if str.En_IE == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.En_IE
	}

	if locale == "en-IN" {
		if str.En_IN == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.En_IN
	}

	if locale == "en-PI" {
		if str.En_PI == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.En_PI
	}

	if locale == "en-UD" {
		if str.En_UD == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.En_UD
	}

	if locale == "en-US" {
		if str.En_US == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.En_US
	}

	if locale == "en-ZA" {
		if str.En_ZA == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.En_ZA
	}

	if locale == "eo-EO" {
		if str.Eo_EO == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Eo_EO
	}

	if locale == "es-AR" {
		if str.Es_AR == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Es_AR
	}

	if locale == "es-419" {
		if str.Es_419 == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Es_419
	}

	if locale == "es-CL" {
		if str.Es_CL == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Es_CL
	}

	if locale == "es-CO" {
		if str.Es_CO == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Es_CO
	}

	if locale == "es-EC" {
		if str.Es_EC == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Es_EC
	}

	if locale == "es-ES" {
		if str.Es_ES == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Es_ES
	}

	if locale == "es-LA" {
		if str.Es_LA == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Es_LA
	}

	if locale == "es-NI" {
		if str.Es_NI == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Es_NI
	}

	if locale == "es-MX" {
		if str.Es_MX == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Es_MX
	}

	if locale == "es-US" {
		if str.Es_US == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Es_US
	}

	if locale == "es-VE" {
		if str.Es_VE == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Es_VE
	}

	if locale == "et-EE" {
		if str.Et_EE == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Et_EE
	}

	if locale == "eu-ES" {
		if str.Eu_ES == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Eu_ES
	}

	if locale == "fa-IR" {
		if str.Fa_IR == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Fa_IR
	}

	if locale == "fb-LT" {
		if str.Fb_LT == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Fb_LT
	}

	if locale == "fi-FI" {
		if str.Fi_FI == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Fi_FI
	}

	if locale == "fo-FO" {
		if str.Fo_FO == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Fo_FO
	}

	if locale == "fr-CA" {
		if str.Fr_CA == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Fr_CA
	}

	if locale == "fr-FR" {
		if str.Fr_FR == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Fr_FR
	}

	if locale == "fr-BE" {
		if str.Fr_BE == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Fr_BE
	}

	if locale == "fr-CH" {
		if str.Fr_CH == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Fr_CH
	}

	if locale == "fy-NL" {
		if str.Fy_NL == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Fy_NL
	}

	if locale == "ga-IE" {
		if str.Ga_IE == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Ga_IE
	}

	if locale == "gl-ES" {
		if str.Gl_ES == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Gl_ES
	}

	if locale == "gn-PY" {
		if str.Gn_PY == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Gn_PY
	}

	if locale == "gu-IN" {
		if str.Gu_IN == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Gu_IN
	}

	if locale == "gx-GR" {
		if str.Gx_GR == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Gx_GR
	}

	if locale == "he-IL" {
		if str.He_IL == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.He_IL
	}

	if locale == "hi-IN" {
		if str.Hi_IN == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Hi_IN
	}

	if locale == "hr-HR" {
		if str.Hr_HR == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Hr_HR
	}

	if locale == "hu-HU" {
		if str.Hu_HU == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Hu_HU
	}

	if locale == "hy-AM" {
		if str.Hy_AM == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Hy_AM
	}

	if locale == "id-ID" {
		if str.Id_ID == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Id_ID
	}

	if locale == "is-IS" {
		if str.Is_IS == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Is_IS
	}

	if locale == "it-IT" {
		if str.It_IT == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.It_IT
	}

	if locale == "ja-JP" {
		if str.Ja_JP == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Ja_JP
	}

	if locale == "jv-ID" {
		if str.Jv_ID == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Jv_ID
	}

	if locale == "ka-GE" {
		if str.Ka_GE == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Ka_GE
	}

	if locale == "kk-KZ" {
		if str.Kk_KZ == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Kk_KZ
	}

	if locale == "km-KH" {
		if str.Km_KH == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Km_KH
	}

	if locale == "kn-IN" {
		if str.Kn_IN == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Kn_IN
	}

	if locale == "ko-KR" {
		if str.Ko_KR == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Ko_KR
	}

	if locale == "ku-TR" {
		if str.Ku_TR == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Ku_TR
	}

	if locale == "la-VA" {
		if str.La_VA == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.La_VA
	}

	if locale == "li-NL" {
		if str.Li_NL == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Li_NL
	}

	if locale == "lt-LT" {
		if str.Lt_LT == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Lt_LT
	}

	if locale == "lv-LV" {
		if str.Lv_LV == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Lv_LV
	}

	if locale == "mg-MG" {
		if str.Mg_MG == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Mg_MG
	}

	if locale == "mk-MK" {
		if str.Mk_MK == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Mk_MK
	}

	if locale == "ml-IN" {
		if str.Ml_IN == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Ml_IN
	}

	if locale == "mn-MN" {
		if str.Mn_MN == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Mn_MN
	}

	if locale == "mr-IN" {
		if str.Mr_IN == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Mr_IN
	}

	if locale == "ms-MY" {
		if str.Ms_MY == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Ms_MY
	}

	if locale == "mt-MT" {
		if str.Mt_MT == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Mt_MT
	}

	if locale == "nb-NO" {
		if str.Nb_NO == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Nb_NO
	}

	if locale == "ne-NP" {
		if str.Ne_NP == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Ne_NP
	}

	if locale == "nl-BE" {
		if str.Nl_BE == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Nl_BE
	}

	if locale == "nl-NL" {
		if str.Nl_NL == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Nl_NL
	}

	if locale == "nn-NO" {
		if str.Nn_NO == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Nn_NO
	}

	if locale == "or-IN" {
		if str.Or_IN == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Or_IN
	}

	if locale == "pa-IN" {
		if str.Pa_IN == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Pa_IN
	}

	if locale == "pl-PL" {
		if str.Pl_PL == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Pl_PL
	}

	if locale == "ps-AF" {
		if str.Ps_AF == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Ps_AF
	}

	if locale == "pt-BR" {
		if str.Pt_BR == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Pt_BR
	}

	if locale == "pt-PT" {
		if str.Pt_PT == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Pt_PT
	}

	if locale == "qu-PE" {
		if str.Qu_PE == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Qu_PE
	}

	if locale == "rm-CH" {
		if str.Rm_CH == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Rm_CH
	}

	if locale == "ro-RO" {
		if str.Ro_RO == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Ro_RO
	}

	if locale == "ru-RU" {
		if str.Ru_RU == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Ru_RU
	}

	if locale == "sa-IN" {
		if str.Sa_IN == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Sa_IN
	}

	if locale == "se-NO" {
		if str.Se_NO == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Se_NO
	}

	if locale == "si-LK" {
		if str.Si_LK == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Si_LK
	}

	if locale == "sk-SK" {
		if str.Sk_SK == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Sk_SK
	}

	if locale == "sl-SI" {
		if str.Sl_SI == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Sl_SI
	}

	if locale == "so-SO" {
		if str.So_SO == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.So_SO
	}

	if locale == "sq-AL" {
		if str.Sq_AL == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Sq_AL
	}

	if locale == "sr-RS" {
		if str.Sr_RS == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Sr_RS
	}

	if locale == "sv-SE" {
		if str.Sv_SE == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Sv_SE
	}

	if locale == "sw-KE" {
		if str.Sw_KE == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Sw_KE
	}

	if locale == "ta-IN" {
		if str.Ta_IN == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Ta_IN
	}

	if locale == "te-IN" {
		if str.Te_IN == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Te_IN
	}

	if locale == "tg-TJ" {
		if str.Tg_TJ == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Tg_TJ
	}

	if locale == "th-TH" {
		if str.Th_TH == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Th_TH
	}

	if locale == "tl-PH" {
		if str.Tl_PH == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Tl_PH
	}

	if locale == "tr-TR" {
		if str.Tr_TR == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Tr_TR
	}

	if locale == "tt-RU" {
		if str.Tt_RU == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Tt_RU
	}

	if locale == "uk-UA" {
		if str.Uk_UA == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Uk_UA
	}

	if locale == "ur-PK" {
		if str.Ur_PK == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Ur_PK
	}

	if locale == "uz-UZ" {
		if str.Uz_UZ == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Uz_UZ
	}

	if locale == "vi-VN" {
		if str.Vi_VN == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Vi_VN
	}

	if locale == "xh-ZA" {
		if str.Xh_ZA == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Xh_ZA
	}

	if locale == "yi-DE" {
		if str.Yi_DE == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Yi_DE
	}

	if locale == "zh-Hans" {
		if str.Zh_Hans == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Zh_Hans
	}

	if locale == "zh-Hant" {
		if str.Zh_Hant == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Zh_Hant
	}

	if locale == "zh-CN" {
		if str.Zh_CN == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Zh_CN
	}

	if locale == "zh-HK" {
		if str.Zh_HK == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Zh_HK
	}

	if locale == "zh-SG" {
		if str.Zh_SG == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Zh_SG
	}

	if locale == "zh-TW" {
		if str.Zh_TW == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Zh_TW
	}

	if locale == "zu-ZA" {
		if str.Zu_ZA == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.Zu_ZA
	}

	return ""
}

var LocaleM = map[string]bool{
	"af-NA": true,
	"af-ZA": true,
	"ar-AR": true,
	"ar-MA": true,
	"ar-SA": true,
	"ay-BO": true,
	"az-AZ": true,
	"be-BY": true,
	"bg-BG": true,
	"bn-IN": true,
	"bn-BD": true,
	"bs-BA": true,
	"ca-ES": true,
	"ck-US": true,
	"cs-CZ": true,
	"cy-GB": true,
	"da-DK": true,
	"de-AT": true,
	"de-DE": true,
	"de-CH": true,
	"el-GR": true,
	"en-GB": true,
	"en-AU": true,
	"en-CA": true,
	"en-IE": true,
	"en-IN": true,
	"en-PI": true,
	"en-UD": true,
	"en-US": true,
	"en-ZA": true,
	"eo-EO": true,
	"es-AR": true,
	"es-419": true,
	"es-CL": true,
	"es-CO": true,
	"es-EC": true,
	"es-ES": true,
	"es-LA": true,
	"es-NI": true,
	"es-MX": true,
	"es-US": true,
	"es-VE": true,
	"et-EE": true,
	"eu-ES": true,
	"fa-IR": true,
	"fb-LT": true,
	"fi-FI": true,
	"fo-FO": true,
	"fr-CA": true,
	"fr-FR": true,
	"fr-BE": true,
	"fr-CH": true,
	"fy-NL": true,
	"ga-IE": true,
	"gl-ES": true,
	"gn-PY": true,
	"gu-IN": true,
	"gx-GR": true,
	"he-IL": true,
	"hi-IN": true,
	"hr-HR": true,
	"hu-HU": true,
	"hy-AM": true,
	"id-ID": true,
	"is-IS": true,
	"it-IT": true,
	"ja-JP": true,
	"jv-ID": true,
	"ka-GE": true,
	"kk-KZ": true,
	"km-KH": true,
	"kn-IN": true,
	"ko-KR": true,
	"ku-TR": true,
	"la-VA": true,
	"li-NL": true,
	"lt-LT": true,
	"lv-LV": true,
	"mg-MG": true,
	"mk-MK": true,
	"ml-IN": true,
	"mn-MN": true,
	"mr-IN": true,
	"ms-MY": true,
	"mt-MT": true,
	"nb-NO": true,
	"ne-NP": true,
	"nl-BE": true,
	"nl-NL": true,
	"nn-NO": true,
	"or-IN": true,
	"pa-IN": true,
	"pl-PL": true,
	"ps-AF": true,
	"pt-BR": true,
	"pt-PT": true,
	"qu-PE": true,
	"rm-CH": true,
	"ro-RO": true,
	"ru-RU": true,
	"sa-IN": true,
	"se-NO": true,
	"si-LK": true,
	"sk-SK": true,
	"sl-SI": true,
	"so-SO": true,
	"sq-AL": true,
	"sr-RS": true,
	"sv-SE": true,
	"sw-KE": true,
	"ta-IN": true,
	"te-IN": true,
	"tg-TJ": true,
	"th-TH": true,
	"tl-PH": true,
	"tr-TR": true,
	"tt-RU": true,
	"uk-UA": true,
	"ur-PK": true,
	"uz-UZ": true,
	"vi-VN": true,
	"xh-ZA": true,
	"yi-DE": true,
	"zh-Hans": true,
	"zh-Hant": true,
	"zh-CN": true,
	"zh-HK": true,
	"zh-SG": true,
	"zh-TW": true,
	"zu-ZA": true,
}


func GetAllI18ns(str *I18NString) []string {
	out := make([]string, 0)
	if strings.TrimSpace(str.Af_NA) != "" {
		out = append(out, str.Af_NA)
	}

	if strings.TrimSpace(str.Af_ZA) != "" {
		out = append(out, str.Af_ZA)
	}

	if strings.TrimSpace(str.Ar_AR) != "" {
		out = append(out, str.Ar_AR)
	}

	if strings.TrimSpace(str.Ar_MA) != "" {
		out = append(out, str.Ar_MA)
	}

	if strings.TrimSpace(str.Ar_SA) != "" {
		out = append(out, str.Ar_SA)
	}

	if strings.TrimSpace(str.Ay_BO) != "" {
		out = append(out, str.Ay_BO)
	}

	if strings.TrimSpace(str.Az_AZ) != "" {
		out = append(out, str.Az_AZ)
	}

	if strings.TrimSpace(str.Be_BY) != "" {
		out = append(out, str.Be_BY)
	}

	if strings.TrimSpace(str.Bg_BG) != "" {
		out = append(out, str.Bg_BG)
	}

	if strings.TrimSpace(str.Bn_IN) != "" {
		out = append(out, str.Bn_IN)
	}

	if strings.TrimSpace(str.Bn_BD) != "" {
		out = append(out, str.Bn_BD)
	}

	if strings.TrimSpace(str.Bs_BA) != "" {
		out = append(out, str.Bs_BA)
	}

	if strings.TrimSpace(str.Ca_ES) != "" {
		out = append(out, str.Ca_ES)
	}

	if strings.TrimSpace(str.Ck_US) != "" {
		out = append(out, str.Ck_US)
	}

	if strings.TrimSpace(str.Cs_CZ) != "" {
		out = append(out, str.Cs_CZ)
	}

	if strings.TrimSpace(str.Cy_GB) != "" {
		out = append(out, str.Cy_GB)
	}

	if strings.TrimSpace(str.Da_DK) != "" {
		out = append(out, str.Da_DK)
	}

	if strings.TrimSpace(str.De_AT) != "" {
		out = append(out, str.De_AT)
	}

	if strings.TrimSpace(str.De_DE) != "" {
		out = append(out, str.De_DE)
	}

	if strings.TrimSpace(str.De_CH) != "" {
		out = append(out, str.De_CH)
	}

	if strings.TrimSpace(str.El_GR) != "" {
		out = append(out, str.El_GR)
	}

	if strings.TrimSpace(str.En_GB) != "" {
		out = append(out, str.En_GB)
	}

	if strings.TrimSpace(str.En_AU) != "" {
		out = append(out, str.En_AU)
	}

	if strings.TrimSpace(str.En_CA) != "" {
		out = append(out, str.En_CA)
	}

	if strings.TrimSpace(str.En_IE) != "" {
		out = append(out, str.En_IE)
	}

	if strings.TrimSpace(str.En_IN) != "" {
		out = append(out, str.En_IN)
	}

	if strings.TrimSpace(str.En_PI) != "" {
		out = append(out, str.En_PI)
	}

	if strings.TrimSpace(str.En_UD) != "" {
		out = append(out, str.En_UD)
	}

	if strings.TrimSpace(str.En_US) != "" {
		out = append(out, str.En_US)
	}

	if strings.TrimSpace(str.En_ZA) != "" {
		out = append(out, str.En_ZA)
	}

	if strings.TrimSpace(str.Eo_EO) != "" {
		out = append(out, str.Eo_EO)
	}

	if strings.TrimSpace(str.Es_AR) != "" {
		out = append(out, str.Es_AR)
	}

	if strings.TrimSpace(str.Es_419) != "" {
		out = append(out, str.Es_419)
	}

	if strings.TrimSpace(str.Es_CL) != "" {
		out = append(out, str.Es_CL)
	}

	if strings.TrimSpace(str.Es_CO) != "" {
		out = append(out, str.Es_CO)
	}

	if strings.TrimSpace(str.Es_EC) != "" {
		out = append(out, str.Es_EC)
	}

	if strings.TrimSpace(str.Es_ES) != "" {
		out = append(out, str.Es_ES)
	}

	if strings.TrimSpace(str.Es_LA) != "" {
		out = append(out, str.Es_LA)
	}

	if strings.TrimSpace(str.Es_NI) != "" {
		out = append(out, str.Es_NI)
	}

	if strings.TrimSpace(str.Es_MX) != "" {
		out = append(out, str.Es_MX)
	}

	if strings.TrimSpace(str.Es_US) != "" {
		out = append(out, str.Es_US)
	}

	if strings.TrimSpace(str.Es_VE) != "" {
		out = append(out, str.Es_VE)
	}

	if strings.TrimSpace(str.Et_EE) != "" {
		out = append(out, str.Et_EE)
	}

	if strings.TrimSpace(str.Eu_ES) != "" {
		out = append(out, str.Eu_ES)
	}

	if strings.TrimSpace(str.Fa_IR) != "" {
		out = append(out, str.Fa_IR)
	}

	if strings.TrimSpace(str.Fb_LT) != "" {
		out = append(out, str.Fb_LT)
	}

	if strings.TrimSpace(str.Fi_FI) != "" {
		out = append(out, str.Fi_FI)
	}

	if strings.TrimSpace(str.Fo_FO) != "" {
		out = append(out, str.Fo_FO)
	}

	if strings.TrimSpace(str.Fr_CA) != "" {
		out = append(out, str.Fr_CA)
	}

	if strings.TrimSpace(str.Fr_FR) != "" {
		out = append(out, str.Fr_FR)
	}

	if strings.TrimSpace(str.Fr_BE) != "" {
		out = append(out, str.Fr_BE)
	}

	if strings.TrimSpace(str.Fr_CH) != "" {
		out = append(out, str.Fr_CH)
	}

	if strings.TrimSpace(str.Fy_NL) != "" {
		out = append(out, str.Fy_NL)
	}

	if strings.TrimSpace(str.Ga_IE) != "" {
		out = append(out, str.Ga_IE)
	}

	if strings.TrimSpace(str.Gl_ES) != "" {
		out = append(out, str.Gl_ES)
	}

	if strings.TrimSpace(str.Gn_PY) != "" {
		out = append(out, str.Gn_PY)
	}

	if strings.TrimSpace(str.Gu_IN) != "" {
		out = append(out, str.Gu_IN)
	}

	if strings.TrimSpace(str.Gx_GR) != "" {
		out = append(out, str.Gx_GR)
	}

	if strings.TrimSpace(str.He_IL) != "" {
		out = append(out, str.He_IL)
	}

	if strings.TrimSpace(str.Hi_IN) != "" {
		out = append(out, str.Hi_IN)
	}

	if strings.TrimSpace(str.Hr_HR) != "" {
		out = append(out, str.Hr_HR)
	}

	if strings.TrimSpace(str.Hu_HU) != "" {
		out = append(out, str.Hu_HU)
	}

	if strings.TrimSpace(str.Hy_AM) != "" {
		out = append(out, str.Hy_AM)
	}

	if strings.TrimSpace(str.Id_ID) != "" {
		out = append(out, str.Id_ID)
	}

	if strings.TrimSpace(str.Is_IS) != "" {
		out = append(out, str.Is_IS)
	}

	if strings.TrimSpace(str.It_IT) != "" {
		out = append(out, str.It_IT)
	}

	if strings.TrimSpace(str.Ja_JP) != "" {
		out = append(out, str.Ja_JP)
	}

	if strings.TrimSpace(str.Jv_ID) != "" {
		out = append(out, str.Jv_ID)
	}

	if strings.TrimSpace(str.Ka_GE) != "" {
		out = append(out, str.Ka_GE)
	}

	if strings.TrimSpace(str.Kk_KZ) != "" {
		out = append(out, str.Kk_KZ)
	}

	if strings.TrimSpace(str.Km_KH) != "" {
		out = append(out, str.Km_KH)
	}

	if strings.TrimSpace(str.Kn_IN) != "" {
		out = append(out, str.Kn_IN)
	}

	if strings.TrimSpace(str.Ko_KR) != "" {
		out = append(out, str.Ko_KR)
	}

	if strings.TrimSpace(str.Ku_TR) != "" {
		out = append(out, str.Ku_TR)
	}

	if strings.TrimSpace(str.La_VA) != "" {
		out = append(out, str.La_VA)
	}

	if strings.TrimSpace(str.Li_NL) != "" {
		out = append(out, str.Li_NL)
	}

	if strings.TrimSpace(str.Lt_LT) != "" {
		out = append(out, str.Lt_LT)
	}

	if strings.TrimSpace(str.Lv_LV) != "" {
		out = append(out, str.Lv_LV)
	}

	if strings.TrimSpace(str.Mg_MG) != "" {
		out = append(out, str.Mg_MG)
	}

	if strings.TrimSpace(str.Mk_MK) != "" {
		out = append(out, str.Mk_MK)
	}

	if strings.TrimSpace(str.Ml_IN) != "" {
		out = append(out, str.Ml_IN)
	}

	if strings.TrimSpace(str.Mn_MN) != "" {
		out = append(out, str.Mn_MN)
	}

	if strings.TrimSpace(str.Mr_IN) != "" {
		out = append(out, str.Mr_IN)
	}

	if strings.TrimSpace(str.Ms_MY) != "" {
		out = append(out, str.Ms_MY)
	}

	if strings.TrimSpace(str.Mt_MT) != "" {
		out = append(out, str.Mt_MT)
	}

	if strings.TrimSpace(str.Nb_NO) != "" {
		out = append(out, str.Nb_NO)
	}

	if strings.TrimSpace(str.Ne_NP) != "" {
		out = append(out, str.Ne_NP)
	}

	if strings.TrimSpace(str.Nl_BE) != "" {
		out = append(out, str.Nl_BE)
	}

	if strings.TrimSpace(str.Nl_NL) != "" {
		out = append(out, str.Nl_NL)
	}

	if strings.TrimSpace(str.Nn_NO) != "" {
		out = append(out, str.Nn_NO)
	}

	if strings.TrimSpace(str.Or_IN) != "" {
		out = append(out, str.Or_IN)
	}

	if strings.TrimSpace(str.Pa_IN) != "" {
		out = append(out, str.Pa_IN)
	}

	if strings.TrimSpace(str.Pl_PL) != "" {
		out = append(out, str.Pl_PL)
	}

	if strings.TrimSpace(str.Ps_AF) != "" {
		out = append(out, str.Ps_AF)
	}

	if strings.TrimSpace(str.Pt_BR) != "" {
		out = append(out, str.Pt_BR)
	}

	if strings.TrimSpace(str.Pt_PT) != "" {
		out = append(out, str.Pt_PT)
	}

	if strings.TrimSpace(str.Qu_PE) != "" {
		out = append(out, str.Qu_PE)
	}

	if strings.TrimSpace(str.Rm_CH) != "" {
		out = append(out, str.Rm_CH)
	}

	if strings.TrimSpace(str.Ro_RO) != "" {
		out = append(out, str.Ro_RO)
	}

	if strings.TrimSpace(str.Ru_RU) != "" {
		out = append(out, str.Ru_RU)
	}

	if strings.TrimSpace(str.Sa_IN) != "" {
		out = append(out, str.Sa_IN)
	}

	if strings.TrimSpace(str.Se_NO) != "" {
		out = append(out, str.Se_NO)
	}

	if strings.TrimSpace(str.Si_LK) != "" {
		out = append(out, str.Si_LK)
	}

	if strings.TrimSpace(str.Sk_SK) != "" {
		out = append(out, str.Sk_SK)
	}

	if strings.TrimSpace(str.Sl_SI) != "" {
		out = append(out, str.Sl_SI)
	}

	if strings.TrimSpace(str.So_SO) != "" {
		out = append(out, str.So_SO)
	}

	if strings.TrimSpace(str.Sq_AL) != "" {
		out = append(out, str.Sq_AL)
	}

	if strings.TrimSpace(str.Sr_RS) != "" {
		out = append(out, str.Sr_RS)
	}

	if strings.TrimSpace(str.Sv_SE) != "" {
		out = append(out, str.Sv_SE)
	}

	if strings.TrimSpace(str.Sw_KE) != "" {
		out = append(out, str.Sw_KE)
	}

	if strings.TrimSpace(str.Ta_IN) != "" {
		out = append(out, str.Ta_IN)
	}

	if strings.TrimSpace(str.Te_IN) != "" {
		out = append(out, str.Te_IN)
	}

	if strings.TrimSpace(str.Tg_TJ) != "" {
		out = append(out, str.Tg_TJ)
	}

	if strings.TrimSpace(str.Th_TH) != "" {
		out = append(out, str.Th_TH)
	}

	if strings.TrimSpace(str.Tl_PH) != "" {
		out = append(out, str.Tl_PH)
	}

	if strings.TrimSpace(str.Tr_TR) != "" {
		out = append(out, str.Tr_TR)
	}

	if strings.TrimSpace(str.Tt_RU) != "" {
		out = append(out, str.Tt_RU)
	}

	if strings.TrimSpace(str.Uk_UA) != "" {
		out = append(out, str.Uk_UA)
	}

	if strings.TrimSpace(str.Ur_PK) != "" {
		out = append(out, str.Ur_PK)
	}

	if strings.TrimSpace(str.Uz_UZ) != "" {
		out = append(out, str.Uz_UZ)
	}

	if strings.TrimSpace(str.Vi_VN) != "" {
		out = append(out, str.Vi_VN)
	}

	if strings.TrimSpace(str.Xh_ZA) != "" {
		out = append(out, str.Xh_ZA)
	}

	if strings.TrimSpace(str.Yi_DE) != "" {
		out = append(out, str.Yi_DE)
	}

	if strings.TrimSpace(str.Zh_Hans) != "" {
		out = append(out, str.Zh_Hans)
	}

	if strings.TrimSpace(str.Zh_Hant) != "" {
		out = append(out, str.Zh_Hant)
	}

	if strings.TrimSpace(str.Zh_CN) != "" {
		out = append(out, str.Zh_CN)
	}

	if strings.TrimSpace(str.Zh_HK) != "" {
		out = append(out, str.Zh_HK)
	}

	if strings.TrimSpace(str.Zh_SG) != "" {
		out = append(out, str.Zh_SG)
	}

	if strings.TrimSpace(str.Zh_TW) != "" {
		out = append(out, str.Zh_TW)
	}

	if strings.TrimSpace(str.Zu_ZA) != "" {
		out = append(out, str.Zu_ZA)
	}

	return out
}