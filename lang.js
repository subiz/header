var lo = require('lodash')
var langmap = require('langmap')

const fs = require('fs')

function capitalizeFirstLetter (string) {
	return string.charAt(0).toUpperCase() + string.slice(1)
}

function toGoLocale (locale) {
	return capitalizeFirstLetter(locale.replace('-', '_'))
}

let localem = `

var LocaleM = map[string]bool{
`

let gocodeallstring = `

func GetAllI18ns(str *I18NString) []string {
	out := make([]string, 0)
`

let gocode = `// CODE GENERATED BY lang.js. DO NOT MODIFY
package header

import "strings"

// GetI18n returns the value by its locale
func GetI18n(str *I18NString, locale, fallback string) string {
	if str == nil {
		return ""
	}
`

let proto = `syntax = "proto3";

package header;

option go_package = "github.com/subiz/header";

message I18nString {`
var i = 10
var s = lo.
	map(langmap, (_, k) => k).
	filter(k => k.indexOf('-') >= 0).
	map(k => {
		i++

		gocode += `	if locale == "${k}" {
		if str.${toGoLocale(k)} == "" && fallback != locale && fallback != "" {
			return GetI18n(str, fallback, fallback)
		}
		return str.${toGoLocale(k)}
	}

`

		gocodeallstring += `	if strings.TrimSpace(str.${toGoLocale(k)}) != "" {
		out = append(out, str.${toGoLocale(k)})
	}

`

		localem += `	"${k}": true,
`
		proto += `
	string ${k.replace('-', '_')} = ${i}; // ${langmap[k].englishName}`
	})

localem += '}\n'
gocode +=
	`	return ""
}` + localem
gocodeallstring += `	return out
}`

proto += `
	string custom = 250;
}`
fs.writeFileSync('/src/locale.generated.go', gocode + gocodeallstring)
fs.writeFileSync('/src/locale.generated.proto', proto)
