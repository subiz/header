// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.3
// source: request.proto

package header

import (
	account "github.com/subiz/header/account"
	common "github.com/subiz/header/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReportCampaignRequest_Range int32

const (
	ReportCampaignRequest_hour ReportCampaignRequest_Range = 0 // default
	ReportCampaignRequest_day  ReportCampaignRequest_Range = 1
)

// Enum value maps for ReportCampaignRequest_Range.
var (
	ReportCampaignRequest_Range_name = map[int32]string{
		0: "hour",
		1: "day",
	}
	ReportCampaignRequest_Range_value = map[string]int32{
		"hour": 0,
		"day":  1,
	}
)

func (x ReportCampaignRequest_Range) Enum() *ReportCampaignRequest_Range {
	p := new(ReportCampaignRequest_Range)
	*p = x
	return p
}

func (x ReportCampaignRequest_Range) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReportCampaignRequest_Range) Descriptor() protoreflect.EnumDescriptor {
	return file_request_proto_enumTypes[0].Descriptor()
}

func (ReportCampaignRequest_Range) Type() protoreflect.EnumType {
	return &file_request_proto_enumTypes[0]
}

func (x ReportCampaignRequest_Range) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReportCampaignRequest_Range.Descriptor instead.
func (ReportCampaignRequest_Range) EnumDescriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{19, 0}
}

type ReportWebPluginRequest_Range int32

const (
	ReportWebPluginRequest_hour ReportWebPluginRequest_Range = 0 // default
	ReportWebPluginRequest_day  ReportWebPluginRequest_Range = 1
)

// Enum value maps for ReportWebPluginRequest_Range.
var (
	ReportWebPluginRequest_Range_name = map[int32]string{
		0: "hour",
		1: "day",
	}
	ReportWebPluginRequest_Range_value = map[string]int32{
		"hour": 0,
		"day":  1,
	}
)

func (x ReportWebPluginRequest_Range) Enum() *ReportWebPluginRequest_Range {
	p := new(ReportWebPluginRequest_Range)
	*p = x
	return p
}

func (x ReportWebPluginRequest_Range) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReportWebPluginRequest_Range) Descriptor() protoreflect.EnumDescriptor {
	return file_request_proto_enumTypes[1].Descriptor()
}

func (ReportWebPluginRequest_Range) Type() protoreflect.EnumType {
	return &file_request_proto_enumTypes[1]
}

func (x ReportWebPluginRequest_Range) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReportWebPluginRequest_Range.Descriptor instead.
func (ReportWebPluginRequest_Range) EnumDescriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{20, 0}
}

type AvailibilityReportRequest_Range int32

const (
	AvailibilityReportRequest_hour  AvailibilityReportRequest_Range = 0
	AvailibilityReportRequest_day   AvailibilityReportRequest_Range = 1
	AvailibilityReportRequest_month AvailibilityReportRequest_Range = 2
)

// Enum value maps for AvailibilityReportRequest_Range.
var (
	AvailibilityReportRequest_Range_name = map[int32]string{
		0: "hour",
		1: "day",
		2: "month",
	}
	AvailibilityReportRequest_Range_value = map[string]int32{
		"hour":  0,
		"day":   1,
		"month": 2,
	}
)

func (x AvailibilityReportRequest_Range) Enum() *AvailibilityReportRequest_Range {
	p := new(AvailibilityReportRequest_Range)
	*p = x
	return p
}

func (x AvailibilityReportRequest_Range) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AvailibilityReportRequest_Range) Descriptor() protoreflect.EnumDescriptor {
	return file_request_proto_enumTypes[2].Descriptor()
}

func (AvailibilityReportRequest_Range) Type() protoreflect.EnumType {
	return &file_request_proto_enumTypes[2]
}

func (x AvailibilityReportRequest_Range) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AvailibilityReportRequest_Range.Descriptor instead.
func (AvailibilityReportRequest_Range) EnumDescriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{26, 0}
}

type UserReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// string credit_id = 3;
	FromTime int64    `protobuf:"varint,4,opt,name=from_time,json=fromTime,proto3" json:"from_time,omitempty"` // ms
	Unit     string   `protobuf:"bytes,5,opt,name=unit,proto3" json:"unit,omitempty"`                          // hour, day, month
	Limit    int64    `protobuf:"varint,8,opt,name=limit,proto3" json:"limit,omitempty"`                       // default: 24, 30, 24
	Metrics  []string `protobuf:"bytes,9,rep,name=metrics,proto3" json:"metrics,omitempty"`                    // category.cactegory_id all.
}

func (x *UserReportRequest) Reset() {
	*x = UserReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserReportRequest) ProtoMessage() {}

func (x *UserReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserReportRequest.ProtoReflect.Descriptor instead.
func (*UserReportRequest) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{0}
}

func (x *UserReportRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *UserReportRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *UserReportRequest) GetFromTime() int64 {
	if x != nil {
		return x.FromTime
	}
	return 0
}

func (x *UserReportRequest) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *UserReportRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *UserReportRequest) GetMetrics() []string {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type ConversationMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId               string                 `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	CreatedHourFrom         int64                  `protobuf:"varint,3,opt,name=created_hour_from,json=createdHourFrom,proto3" json:"created_hour_from,omitempty"`
	CreatedHourTo           int64                  `protobuf:"varint,4,opt,name=created_hour_to,json=createdHourTo,proto3" json:"created_hour_to,omitempty"`
	LatestSentHourFrom      int64                  `protobuf:"varint,16,opt,name=latest_sent_hour_from,json=latestSentHourFrom,proto3" json:"latest_sent_hour_from,omitempty"`
	LatestSentHourTo        int64                  `protobuf:"varint,17,opt,name=latest_sent_hour_to,json=latestSentHourTo,proto3" json:"latest_sent_hour_to,omitempty"`
	Channels                []string               `protobuf:"bytes,5,rep,name=channels,proto3" json:"channels,omitempty"`
	ChannelTouchpoints      []string               `protobuf:"bytes,6,rep,name=channel_touchpoints,json=channelTouchpoints,proto3" json:"channel_touchpoints,omitempty"`
	Ratings                 []int32                `protobuf:"varint,8,rep,packed,name=ratings,proto3" json:"ratings,omitempty"`
	Tags                    []string               `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`                                        // and
	AgentIds                []string               `protobuf:"bytes,9,rep,name=agent_ids,json=agentIds,proto3" json:"agent_ids,omitempty"`                // and
	AgentSentIds            []string               `protobuf:"bytes,14,rep,name=agent_sent_ids,json=agentSentIds,proto3" json:"agent_sent_ids,omitempty"` // and
	FirstRepliedDurationGt  int64                  `protobuf:"varint,15,opt,name=first_replied_duration_gt,json=firstRepliedDurationGt,proto3" json:"first_replied_duration_gt,omitempty"`
	SendDurationSumGt       int64                  `protobuf:"varint,21,opt,name=send_duration_sum_gt,json=sendDurationSumGt,proto3" json:"send_duration_sum_gt,omitempty"`
	FirstRepliedDurationLte int64                  `protobuf:"varint,22,opt,name=first_replied_duration_lte,json=firstRepliedDurationLte,proto3" json:"first_replied_duration_lte,omitempty"`
	FirstRepliedDurationOf  string                 `protobuf:"bytes,23,opt,name=first_replied_duration_of,json=firstRepliedDurationOf,proto3" json:"first_replied_duration_of,omitempty"`
	NotChannels             []string               `protobuf:"bytes,18,rep,name=not_channels,json=notChannels,proto3" json:"not_channels,omitempty"`
	BusinessHours           *account.BusinessHours `protobuf:"bytes,19,opt,name=business_hours,json=businessHours,proto3" json:"business_hours,omitempty"`
	NotBusinessHours        *account.BusinessHours `protobuf:"bytes,20,opt,name=not_business_hours,json=notBusinessHours,proto3" json:"not_business_hours,omitempty"`
	Tz                      int32                  `protobuf:"varint,10,opt,name=tz,proto3" json:"tz,omitempty"`
	Dim                     string                 `protobuf:"bytes,11,opt,name=dim,proto3" json:"dim,omitempty"`
	Anchor                  string                 `protobuf:"bytes,12,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Limit                   int32                  `protobuf:"varint,13,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ConversationMetricsRequest) Reset() {
	*x = ConversationMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationMetricsRequest) ProtoMessage() {}

func (x *ConversationMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationMetricsRequest.ProtoReflect.Descriptor instead.
func (*ConversationMetricsRequest) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{1}
}

func (x *ConversationMetricsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ConversationMetricsRequest) GetCreatedHourFrom() int64 {
	if x != nil {
		return x.CreatedHourFrom
	}
	return 0
}

func (x *ConversationMetricsRequest) GetCreatedHourTo() int64 {
	if x != nil {
		return x.CreatedHourTo
	}
	return 0
}

func (x *ConversationMetricsRequest) GetLatestSentHourFrom() int64 {
	if x != nil {
		return x.LatestSentHourFrom
	}
	return 0
}

func (x *ConversationMetricsRequest) GetLatestSentHourTo() int64 {
	if x != nil {
		return x.LatestSentHourTo
	}
	return 0
}

func (x *ConversationMetricsRequest) GetChannels() []string {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *ConversationMetricsRequest) GetChannelTouchpoints() []string {
	if x != nil {
		return x.ChannelTouchpoints
	}
	return nil
}

func (x *ConversationMetricsRequest) GetRatings() []int32 {
	if x != nil {
		return x.Ratings
	}
	return nil
}

func (x *ConversationMetricsRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ConversationMetricsRequest) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *ConversationMetricsRequest) GetAgentSentIds() []string {
	if x != nil {
		return x.AgentSentIds
	}
	return nil
}

func (x *ConversationMetricsRequest) GetFirstRepliedDurationGt() int64 {
	if x != nil {
		return x.FirstRepliedDurationGt
	}
	return 0
}

func (x *ConversationMetricsRequest) GetSendDurationSumGt() int64 {
	if x != nil {
		return x.SendDurationSumGt
	}
	return 0
}

func (x *ConversationMetricsRequest) GetFirstRepliedDurationLte() int64 {
	if x != nil {
		return x.FirstRepliedDurationLte
	}
	return 0
}

func (x *ConversationMetricsRequest) GetFirstRepliedDurationOf() string {
	if x != nil {
		return x.FirstRepliedDurationOf
	}
	return ""
}

func (x *ConversationMetricsRequest) GetNotChannels() []string {
	if x != nil {
		return x.NotChannels
	}
	return nil
}

func (x *ConversationMetricsRequest) GetBusinessHours() *account.BusinessHours {
	if x != nil {
		return x.BusinessHours
	}
	return nil
}

func (x *ConversationMetricsRequest) GetNotBusinessHours() *account.BusinessHours {
	if x != nil {
		return x.NotBusinessHours
	}
	return nil
}

func (x *ConversationMetricsRequest) GetTz() int32 {
	if x != nil {
		return x.Tz
	}
	return 0
}

func (x *ConversationMetricsRequest) GetDim() string {
	if x != nil {
		return x.Dim
	}
	return ""
}

func (x *ConversationMetricsRequest) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *ConversationMetricsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type AgentMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId        string                 `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	CreatedHourFrom  int64                  `protobuf:"varint,3,opt,name=created_hour_from,json=createdHourFrom,proto3" json:"created_hour_from,omitempty"`
	CreatedHourTo    int64                  `protobuf:"varint,4,opt,name=created_hour_to,json=createdHourTo,proto3" json:"created_hour_to,omitempty"`
	AgentIds         []string               `protobuf:"bytes,5,rep,name=agent_ids,json=agentIds,proto3" json:"agent_ids,omitempty"`
	Channels         []string               `protobuf:"bytes,6,rep,name=channels,proto3" json:"channels,omitempty"`
	NotChannels      []string               `protobuf:"bytes,7,rep,name=not_channels,json=notChannels,proto3" json:"not_channels,omitempty"`
	BusinessHours    *account.BusinessHours `protobuf:"bytes,8,opt,name=business_hours,json=businessHours,proto3" json:"business_hours,omitempty"`
	NotBusinessHours *account.BusinessHours `protobuf:"bytes,9,opt,name=not_business_hours,json=notBusinessHours,proto3" json:"not_business_hours,omitempty"`
	Tz               int32                  `protobuf:"varint,10,opt,name=tz,proto3" json:"tz,omitempty"`
	Dim              string                 `protobuf:"bytes,11,opt,name=dim,proto3" json:"dim,omitempty"`
	Tags             []string               `protobuf:"bytes,12,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *AgentMetricsRequest) Reset() {
	*x = AgentMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentMetricsRequest) ProtoMessage() {}

func (x *AgentMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentMetricsRequest.ProtoReflect.Descriptor instead.
func (*AgentMetricsRequest) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{2}
}

func (x *AgentMetricsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AgentMetricsRequest) GetCreatedHourFrom() int64 {
	if x != nil {
		return x.CreatedHourFrom
	}
	return 0
}

func (x *AgentMetricsRequest) GetCreatedHourTo() int64 {
	if x != nil {
		return x.CreatedHourTo
	}
	return 0
}

func (x *AgentMetricsRequest) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *AgentMetricsRequest) GetChannels() []string {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *AgentMetricsRequest) GetNotChannels() []string {
	if x != nil {
		return x.NotChannels
	}
	return nil
}

func (x *AgentMetricsRequest) GetBusinessHours() *account.BusinessHours {
	if x != nil {
		return x.BusinessHours
	}
	return nil
}

func (x *AgentMetricsRequest) GetNotBusinessHours() *account.BusinessHours {
	if x != nil {
		return x.NotBusinessHours
	}
	return nil
}

func (x *AgentMetricsRequest) GetTz() int32 {
	if x != nil {
		return x.Tz
	}
	return 0
}

func (x *AgentMetricsRequest) GetDim() string {
	if x != nil {
		return x.Dim
	}
	return ""
}

func (x *AgentMetricsRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type CallMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId         string                 `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	CreatedHourFrom   int64                  `protobuf:"varint,3,opt,name=created_hour_from,json=createdHourFrom,proto3" json:"created_hour_from,omitempty"`
	CreatedHourTo     int64                  `protobuf:"varint,4,opt,name=created_hour_to,json=createdHourTo,proto3" json:"created_hour_to,omitempty"`
	AgentIds          []string               `protobuf:"bytes,5,rep,name=agent_ids,json=agentIds,proto3" json:"agent_ids,omitempty"`
	Phones            []string               `protobuf:"bytes,6,rep,name=phones,proto3" json:"phones,omitempty"`
	Direction         string                 `protobuf:"bytes,7,opt,name=direction,proto3" json:"direction,omitempty"`
	Tags              []string               `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	BusinessHours     *account.BusinessHours `protobuf:"bytes,11,opt,name=business_hours,json=businessHours,proto3" json:"business_hours,omitempty"`
	NotBusinessHours  *account.BusinessHours `protobuf:"bytes,12,opt,name=not_business_hours,json=notBusinessHours,proto3" json:"not_business_hours,omitempty"`
	Tz                int32                  `protobuf:"varint,9,opt,name=tz,proto3" json:"tz,omitempty"`
	Dim               string                 `protobuf:"bytes,10,opt,name=dim,proto3" json:"dim,omitempty"`
	CallDurationSumGt int64                  `protobuf:"varint,15,opt,name=call_duration_sum_gt,json=callDurationSumGt,proto3" json:"call_duration_sum_gt,omitempty"`
	Anchor            string                 `protobuf:"bytes,13,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Limit             int32                  `protobuf:"varint,14,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *CallMetricsRequest) Reset() {
	*x = CallMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallMetricsRequest) ProtoMessage() {}

func (x *CallMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallMetricsRequest.ProtoReflect.Descriptor instead.
func (*CallMetricsRequest) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{3}
}

func (x *CallMetricsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CallMetricsRequest) GetCreatedHourFrom() int64 {
	if x != nil {
		return x.CreatedHourFrom
	}
	return 0
}

func (x *CallMetricsRequest) GetCreatedHourTo() int64 {
	if x != nil {
		return x.CreatedHourTo
	}
	return 0
}

func (x *CallMetricsRequest) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *CallMetricsRequest) GetPhones() []string {
	if x != nil {
		return x.Phones
	}
	return nil
}

func (x *CallMetricsRequest) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *CallMetricsRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CallMetricsRequest) GetBusinessHours() *account.BusinessHours {
	if x != nil {
		return x.BusinessHours
	}
	return nil
}

func (x *CallMetricsRequest) GetNotBusinessHours() *account.BusinessHours {
	if x != nil {
		return x.NotBusinessHours
	}
	return nil
}

func (x *CallMetricsRequest) GetTz() int32 {
	if x != nil {
		return x.Tz
	}
	return 0
}

func (x *CallMetricsRequest) GetDim() string {
	if x != nil {
		return x.Dim
	}
	return ""
}

func (x *CallMetricsRequest) GetCallDurationSumGt() int64 {
	if x != nil {
		return x.CallDurationSumGt
	}
	return 0
}

func (x *CallMetricsRequest) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *CallMetricsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ListUserEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	UserId    string          `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // could be empty, but type must set
	Query     string          `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	Anchor    string          `protobuf:"bytes,5,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Limit     int32           `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"` // hour
	Category  string          `protobuf:"bytes,9,opt,name=category,proto3" json:"category,omitempty"`
	LimitHour int32           `protobuf:"varint,10,opt,name=limit_hour,json=limitHour,proto3" json:"limit_hour,omitempty"`
	EndHour   int64           `protobuf:"varint,11,opt,name=end_hour,json=endHour,proto3" json:"end_hour,omitempty"`
	Type      string          `protobuf:"bytes,12,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *ListUserEventsRequest) Reset() {
	*x = ListUserEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserEventsRequest) ProtoMessage() {}

func (x *ListUserEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserEventsRequest.ProtoReflect.Descriptor instead.
func (*ListUserEventsRequest) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{4}
}

func (x *ListUserEventsRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ListUserEventsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ListUserEventsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListUserEventsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ListUserEventsRequest) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *ListUserEventsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListUserEventsRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *ListUserEventsRequest) GetLimitHour() int32 {
	if x != nil {
		return x.LimitHour
	}
	return 0
}

func (x *ListUserEventsRequest) GetEndHour() int64 {
	if x != nil {
		return x.EndHour
	}
	return 0
}

func (x *ListUserEventsRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type ListEventTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	FromHour  int64           `protobuf:"varint,3,opt,name=from_hour,json=fromHour,proto3" json:"from_hour,omitempty"`
	ToHour    int64           `protobuf:"varint,4,opt,name=to_hour,json=toHour,proto3" json:"to_hour,omitempty"`
	Category  string          `protobuf:"bytes,5,opt,name=category,proto3" json:"category,omitempty"`
	Keyword   string          `protobuf:"bytes,6,opt,name=keyword,proto3" json:"keyword,omitempty"`
}

func (x *ListEventTypeRequest) Reset() {
	*x = ListEventTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEventTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEventTypeRequest) ProtoMessage() {}

func (x *ListEventTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEventTypeRequest.ProtoReflect.Descriptor instead.
func (*ListEventTypeRequest) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{5}
}

func (x *ListEventTypeRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ListEventTypeRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ListEventTypeRequest) GetFromHour() int64 {
	if x != nil {
		return x.FromHour
	}
	return 0
}

func (x *ListEventTypeRequest) GetToHour() int64 {
	if x != nil {
		return x.ToHour
	}
	return 0
}

func (x *ListEventTypeRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *ListEventTypeRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

type PresencesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	UserIds   []string        `protobuf:"bytes,2,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	AccountId string          `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *PresencesRequest) Reset() {
	*x = PresencesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PresencesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresencesRequest) ProtoMessage() {}

func (x *PresencesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresencesRequest.ProtoReflect.Descriptor instead.
func (*PresencesRequest) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{6}
}

func (x *PresencesRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *PresencesRequest) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *PresencesRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type ListNotiRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	AgentId   string          `protobuf:"bytes,3,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Limit     int32           `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Anchor    string          `protobuf:"bytes,5,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Category  string          `protobuf:"bytes,6,opt,name=category,proto3" json:"category,omitempty"` // comma separated
}

func (x *ListNotiRequest) Reset() {
	*x = ListNotiRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNotiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNotiRequest) ProtoMessage() {}

func (x *ListNotiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNotiRequest.ProtoReflect.Descriptor instead.
func (*ListNotiRequest) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{7}
}

func (x *ListNotiRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ListNotiRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ListNotiRequest) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *ListNotiRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListNotiRequest) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *ListNotiRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

type UserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId            string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	UserId               string          `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ObjectId             string          `protobuf:"bytes,4,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Channel              string          `protobuf:"bytes,5,opt,name=channel,proto3" json:"channel,omitempty"`
	ChannelSource        string          `protobuf:"bytes,6,opt,name=channel_source,json=channelSource,proto3" json:"channel_source,omitempty"`
	ProfileId            string          `protobuf:"bytes,7,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
	LabelSourceChannel   string          `protobuf:"bytes,9,opt,name=label_source_channel,json=labelSourceChannel,proto3" json:"label_source_channel,omitempty"`
	LabelSourceChannelId string          `protobuf:"bytes,10,opt,name=label_source_channel_id,json=labelSourceChannelId,proto3" json:"label_source_channel_id,omitempty"`
	LabelSourceId        string          `protobuf:"bytes,11,opt,name=label_source_id,json=labelSourceId,proto3" json:"label_source_id,omitempty"`
	LabelName            string          `protobuf:"bytes,12,opt,name=label_name,json=labelName,proto3" json:"label_name,omitempty"`
}

func (x *UserRequest) Reset() {
	*x = UserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRequest) ProtoMessage() {}

func (x *UserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRequest.ProtoReflect.Descriptor instead.
func (*UserRequest) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{8}
}

func (x *UserRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *UserRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *UserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserRequest) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *UserRequest) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *UserRequest) GetChannelSource() string {
	if x != nil {
		return x.ChannelSource
	}
	return ""
}

func (x *UserRequest) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

func (x *UserRequest) GetLabelSourceChannel() string {
	if x != nil {
		return x.LabelSourceChannel
	}
	return ""
}

func (x *UserRequest) GetLabelSourceChannelId() string {
	if x != nil {
		return x.LabelSourceChannelId
	}
	return ""
}

func (x *UserRequest) GetLabelSourceId() string {
	if x != nil {
		return x.LabelSourceId
	}
	return ""
}

func (x *UserRequest) GetLabelName() string {
	if x != nil {
		return x.LabelName
	}
	return ""
}

type ListNotesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	UserId    string          `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *ListNotesRequest) Reset() {
	*x = ListNotesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNotesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNotesRequest) ProtoMessage() {}

func (x *ListNotesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNotesRequest.ProtoReflect.Descriptor instead.
func (*ListNotesRequest) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{9}
}

func (x *ListNotesRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ListNotesRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ListNotesRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type DeleteNoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	TargetId  string `protobuf:"bytes,3,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	Id        string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteNoteRequest) Reset() {
	*x = DeleteNoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNoteRequest) ProtoMessage() {}

func (x *DeleteNoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNoteRequest.ProtoReflect.Descriptor instead.
func (*DeleteNoteRequest) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteNoteRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *DeleteNoteRequest) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *DeleteNoteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UpdateWorkflowSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx        *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId  string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	WorkflowId string          `protobuf:"bytes,3,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	SessionId  string          `protobuf:"bytes,4,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Command    string          `protobuf:"bytes,5,opt,name=command,proto3" json:"command,omitempty"` // pause, stop, retry, resume
}

func (x *UpdateWorkflowSessionRequest) Reset() {
	*x = UpdateWorkflowSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWorkflowSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWorkflowSessionRequest) ProtoMessage() {}

func (x *UpdateWorkflowSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWorkflowSessionRequest.ProtoReflect.Descriptor instead.
func (*UpdateWorkflowSessionRequest) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateWorkflowSessionRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *UpdateWorkflowSessionRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *UpdateWorkflowSessionRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *UpdateWorkflowSessionRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *UpdateWorkflowSessionRequest) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

type ListWorkflowLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx        *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId  string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	WorkflowId string          `protobuf:"bytes,3,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	SessionId  string          `protobuf:"bytes,4,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	ObjectId   string          `protobuf:"bytes,5,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Limit      int64           `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	Anchor     string          `protobuf:"bytes,7,opt,name=anchor,proto3" json:"anchor,omitempty"`
}

func (x *ListWorkflowLogRequest) Reset() {
	*x = ListWorkflowLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorkflowLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkflowLogRequest) ProtoMessage() {}

func (x *ListWorkflowLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkflowLogRequest.ProtoReflect.Descriptor instead.
func (*ListWorkflowLogRequest) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{12}
}

func (x *ListWorkflowLogRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ListWorkflowLogRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ListWorkflowLogRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *ListWorkflowLogRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ListWorkflowLogRequest) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *ListWorkflowLogRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListWorkflowLogRequest) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

type BotsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Query     string          `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"` // (bot category: orders)
	Anchor    string          `protobuf:"bytes,3,opt,name=anchor,proto3" json:"anchor,omitempty"`
	AccountId string          `protobuf:"bytes,4,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *BotsRequest) Reset() {
	*x = BotsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BotsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotsRequest) ProtoMessage() {}

func (x *BotsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotsRequest.ProtoReflect.Descriptor instead.
func (*BotsRequest) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{13}
}

func (x *BotsRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *BotsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *BotsRequest) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *BotsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type ReportBotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	BotId     string `protobuf:"bytes,3,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	DayFrom   int64  `protobuf:"varint,4,opt,name=day_from,json=dayFrom,proto3" json:"day_from,omitempty"`
	DayTo     int64  `protobuf:"varint,5,opt,name=day_to,json=dayTo,proto3" json:"day_to,omitempty"`
}

func (x *ReportBotRequest) Reset() {
	*x = ReportBotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportBotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportBotRequest) ProtoMessage() {}

func (x *ReportBotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportBotRequest.ProtoReflect.Descriptor instead.
func (*ReportBotRequest) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{14}
}

func (x *ReportBotRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ReportBotRequest) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

func (x *ReportBotRequest) GetDayFrom() int64 {
	if x != nil {
		return x.DayFrom
	}
	return 0
}

func (x *ReportBotRequest) GetDayTo() int64 {
	if x != nil {
		return x.DayTo
	}
	return 0
}

type ActionrunMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dim             string `protobuf:"bytes,2,opt,name=dim,proto3" json:"dim,omitempty"`
	Tz              int32  `protobuf:"varint,3,opt,name=tz,proto3" json:"tz,omitempty"`
	AccountId       string `protobuf:"bytes,4,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	BotId           string `protobuf:"bytes,5,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	CreatedHourFrom int64  `protobuf:"varint,6,opt,name=created_hour_from,json=createdHourFrom,proto3" json:"created_hour_from,omitempty"`
	CreatedHourTo   int64  `protobuf:"varint,7,opt,name=created_hour_to,json=createdHourTo,proto3" json:"created_hour_to,omitempty"`
}

func (x *ActionrunMetricsRequest) Reset() {
	*x = ActionrunMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionrunMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionrunMetricsRequest) ProtoMessage() {}

func (x *ActionrunMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionrunMetricsRequest.ProtoReflect.Descriptor instead.
func (*ActionrunMetricsRequest) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{15}
}

func (x *ActionrunMetricsRequest) GetDim() string {
	if x != nil {
		return x.Dim
	}
	return ""
}

func (x *ActionrunMetricsRequest) GetTz() int32 {
	if x != nil {
		return x.Tz
	}
	return 0
}

func (x *ActionrunMetricsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ActionrunMetricsRequest) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

func (x *ActionrunMetricsRequest) GetCreatedHourFrom() int64 {
	if x != nil {
		return x.CreatedHourFrom
	}
	return 0
}

func (x *ActionrunMetricsRequest) GetCreatedHourTo() int64 {
	if x != nil {
		return x.CreatedHourTo
	}
	return 0
}

type BotrunMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dim             string `protobuf:"bytes,2,opt,name=dim,proto3" json:"dim,omitempty"`
	Tz              int32  `protobuf:"varint,3,opt,name=tz,proto3" json:"tz,omitempty"`
	AccountId       string `protobuf:"bytes,4,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	BotId           string `protobuf:"bytes,5,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	CreatedHourFrom int64  `protobuf:"varint,6,opt,name=created_hour_from,json=createdHourFrom,proto3" json:"created_hour_from,omitempty"`
	CreatedHourTo   int64  `protobuf:"varint,7,opt,name=created_hour_to,json=createdHourTo,proto3" json:"created_hour_to,omitempty"`
}

func (x *BotrunMetricsRequest) Reset() {
	*x = BotrunMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BotrunMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotrunMetricsRequest) ProtoMessage() {}

func (x *BotrunMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotrunMetricsRequest.ProtoReflect.Descriptor instead.
func (*BotrunMetricsRequest) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{16}
}

func (x *BotrunMetricsRequest) GetDim() string {
	if x != nil {
		return x.Dim
	}
	return ""
}

func (x *BotrunMetricsRequest) GetTz() int32 {
	if x != nil {
		return x.Tz
	}
	return 0
}

func (x *BotrunMetricsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *BotrunMetricsRequest) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

func (x *BotrunMetricsRequest) GetCreatedHourFrom() int64 {
	if x != nil {
		return x.CreatedHourFrom
	}
	return 0
}

func (x *BotrunMetricsRequest) GetCreatedHourTo() int64 {
	if x != nil {
		return x.CreatedHourTo
	}
	return 0
}

type ListObjectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId       string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	BotId           string `protobuf:"bytes,3,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	CreatedHourFrom int64  `protobuf:"varint,8,opt,name=created_hour_from,json=createdHourFrom,proto3" json:"created_hour_from,omitempty"`
	CreatedHourTo   int64  `protobuf:"varint,9,opt,name=created_hour_to,json=createdHourTo,proto3" json:"created_hour_to,omitempty"`
	Anchor          string `protobuf:"bytes,6,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Limit           int32  `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	DayFrom         int64  `protobuf:"varint,4,opt,name=day_from,json=dayFrom,proto3" json:"day_from,omitempty"`
	DayTo           int64  `protobuf:"varint,5,opt,name=day_to,json=dayTo,proto3" json:"day_to,omitempty"`
}

func (x *ListObjectsRequest) Reset() {
	*x = ListObjectsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListObjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListObjectsRequest) ProtoMessage() {}

func (x *ListObjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListObjectsRequest.ProtoReflect.Descriptor instead.
func (*ListObjectsRequest) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{17}
}

func (x *ListObjectsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ListObjectsRequest) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

func (x *ListObjectsRequest) GetCreatedHourFrom() int64 {
	if x != nil {
		return x.CreatedHourFrom
	}
	return 0
}

func (x *ListObjectsRequest) GetCreatedHourTo() int64 {
	if x != nil {
		return x.CreatedHourTo
	}
	return 0
}

func (x *ListObjectsRequest) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *ListObjectsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListObjectsRequest) GetDayFrom() int64 {
	if x != nil {
		return x.DayFrom
	}
	return 0
}

func (x *ListObjectsRequest) GetDayTo() int64 {
	if x != nil {
		return x.DayTo
	}
	return 0
}

type ConversionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx         *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId   string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	CampaignId  string          `protobuf:"bytes,3,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`
	Anchor      string          `protobuf:"bytes,4,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Limit       int32           `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	FromHour    int32           `protobuf:"varint,7,opt,name=from_hour,json=fromHour,proto3" json:"from_hour,omitempty"`
	ToHour      int32           `protobuf:"varint,8,opt,name=to_hour,json=toHour,proto3" json:"to_hour,omitempty"`
	WebPluginId string          `protobuf:"bytes,9,opt,name=web_plugin_id,json=webPluginId,proto3" json:"web_plugin_id,omitempty"`
}

func (x *ConversionRequest) Reset() {
	*x = ConversionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversionRequest) ProtoMessage() {}

func (x *ConversionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversionRequest.ProtoReflect.Descriptor instead.
func (*ConversionRequest) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{18}
}

func (x *ConversionRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ConversionRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ConversionRequest) GetCampaignId() string {
	if x != nil {
		return x.CampaignId
	}
	return ""
}

func (x *ConversionRequest) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *ConversionRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ConversionRequest) GetFromHour() int32 {
	if x != nil {
		return x.FromHour
	}
	return 0
}

func (x *ConversionRequest) GetToHour() int32 {
	if x != nil {
		return x.ToHour
	}
	return 0
}

func (x *ConversionRequest) GetWebPluginId() string {
	if x != nil {
		return x.WebPluginId
	}
	return ""
}

type ReportCampaignRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx        *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId  string          `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	CampaignId string          `protobuf:"bytes,4,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`
	FromHour   int32           `protobuf:"varint,5,opt,name=from_hour,json=fromHour,proto3" json:"from_hour,omitempty"`
	ToHour     int32           `protobuf:"varint,6,opt,name=to_hour,json=toHour,proto3" json:"to_hour,omitempty"`
	Range      string          `protobuf:"bytes,7,opt,name=range,proto3" json:"range,omitempty"`
	Tz         int32           `protobuf:"varint,8,opt,name=tz,proto3" json:"tz,omitempty"`
}

func (x *ReportCampaignRequest) Reset() {
	*x = ReportCampaignRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportCampaignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportCampaignRequest) ProtoMessage() {}

func (x *ReportCampaignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportCampaignRequest.ProtoReflect.Descriptor instead.
func (*ReportCampaignRequest) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{19}
}

func (x *ReportCampaignRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ReportCampaignRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ReportCampaignRequest) GetCampaignId() string {
	if x != nil {
		return x.CampaignId
	}
	return ""
}

func (x *ReportCampaignRequest) GetFromHour() int32 {
	if x != nil {
		return x.FromHour
	}
	return 0
}

func (x *ReportCampaignRequest) GetToHour() int32 {
	if x != nil {
		return x.ToHour
	}
	return 0
}

func (x *ReportCampaignRequest) GetRange() string {
	if x != nil {
		return x.Range
	}
	return ""
}

func (x *ReportCampaignRequest) GetTz() int32 {
	if x != nil {
		return x.Tz
	}
	return 0
}

type ReportWebPluginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx         *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId   string          `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	WebPluginId string          `protobuf:"bytes,4,opt,name=web_plugin_id,json=webPluginId,proto3" json:"web_plugin_id,omitempty"`
	FromHour    int32           `protobuf:"varint,5,opt,name=from_hour,json=fromHour,proto3" json:"from_hour,omitempty"`
	ToHour      int32           `protobuf:"varint,6,opt,name=to_hour,json=toHour,proto3" json:"to_hour,omitempty"`
	Range       string          `protobuf:"bytes,7,opt,name=range,proto3" json:"range,omitempty"`
	Tz          int32           `protobuf:"varint,8,opt,name=tz,proto3" json:"tz,omitempty"`
}

func (x *ReportWebPluginRequest) Reset() {
	*x = ReportWebPluginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportWebPluginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportWebPluginRequest) ProtoMessage() {}

func (x *ReportWebPluginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportWebPluginRequest.ProtoReflect.Descriptor instead.
func (*ReportWebPluginRequest) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{20}
}

func (x *ReportWebPluginRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ReportWebPluginRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ReportWebPluginRequest) GetWebPluginId() string {
	if x != nil {
		return x.WebPluginId
	}
	return ""
}

func (x *ReportWebPluginRequest) GetFromHour() int32 {
	if x != nil {
		return x.FromHour
	}
	return 0
}

func (x *ReportWebPluginRequest) GetToHour() int32 {
	if x != nil {
		return x.ToHour
	}
	return 0
}

func (x *ReportWebPluginRequest) GetRange() string {
	if x != nil {
		return x.Range
	}
	return ""
}

func (x *ReportWebPluginRequest) GetTz() int32 {
	if x != nil {
		return x.Tz
	}
	return 0
}

type WebPluginConversionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx         *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId   string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	WebPluginId string          `protobuf:"bytes,3,opt,name=web_plugin_id,json=webPluginId,proto3" json:"web_plugin_id,omitempty"`
	UnixDayFrom int64           `protobuf:"varint,5,opt,name=unix_day_from,json=unixDayFrom,proto3" json:"unix_day_from,omitempty"`
	UnixDayTo   int64           `protobuf:"varint,6,opt,name=unix_day_to,json=unixDayTo,proto3" json:"unix_day_to,omitempty"`
	Anchor      string          `protobuf:"bytes,8,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Limit       int32           `protobuf:"varint,9,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *WebPluginConversionRequest) Reset() {
	*x = WebPluginConversionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebPluginConversionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebPluginConversionRequest) ProtoMessage() {}

func (x *WebPluginConversionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebPluginConversionRequest.ProtoReflect.Descriptor instead.
func (*WebPluginConversionRequest) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{21}
}

func (x *WebPluginConversionRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *WebPluginConversionRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *WebPluginConversionRequest) GetWebPluginId() string {
	if x != nil {
		return x.WebPluginId
	}
	return ""
}

func (x *WebPluginConversionRequest) GetUnixDayFrom() int64 {
	if x != nil {
		return x.UnixDayFrom
	}
	return 0
}

func (x *WebPluginConversionRequest) GetUnixDayTo() int64 {
	if x != nil {
		return x.UnixDayTo
	}
	return 0
}

func (x *WebPluginConversionRequest) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *WebPluginConversionRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type SearchLocationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx   *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Query string          `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	Limit int64           `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *SearchLocationsRequest) Reset() {
	*x = SearchLocationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchLocationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchLocationsRequest) ProtoMessage() {}

func (x *SearchLocationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchLocationsRequest.ProtoReflect.Descriptor instead.
func (*SearchLocationsRequest) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{22}
}

func (x *SearchLocationsRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *SearchLocationsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SearchLocationsRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type RecentIndexDeliveryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	WebhookId string          `protobuf:"bytes,2,opt,name=webhook_id,json=webhookId,proto3" json:"webhook_id,omitempty"`
	Limit     int32           `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *RecentIndexDeliveryRequest) Reset() {
	*x = RecentIndexDeliveryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecentIndexDeliveryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecentIndexDeliveryRequest) ProtoMessage() {}

func (x *RecentIndexDeliveryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecentIndexDeliveryRequest.ProtoReflect.Descriptor instead.
func (*RecentIndexDeliveryRequest) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{23}
}

func (x *RecentIndexDeliveryRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *RecentIndexDeliveryRequest) GetWebhookId() string {
	if x != nil {
		return x.WebhookId
	}
	return ""
}

func (x *RecentIndexDeliveryRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type DeliveryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	WebhookId string          `protobuf:"bytes,2,opt,name=webhook_id,json=webhookId,proto3" json:"webhook_id,omitempty"`
	Id        int32           `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeliveryRequest) Reset() {
	*x = DeliveryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliveryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliveryRequest) ProtoMessage() {}

func (x *DeliveryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliveryRequest.ProtoReflect.Descriptor instead.
func (*DeliveryRequest) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{24}
}

func (x *DeliveryRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *DeliveryRequest) GetWebhookId() string {
	if x != nil {
		return x.WebhookId
	}
	return ""
}

func (x *DeliveryRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type SearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId            string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Query                string          `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	Limit                int32           `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	AgentId              string          `protobuf:"bytes,8,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`         // search my user of agent
	Labels               []string        `protobuf:"bytes,9,rep,name=labels,proto3" json:"labels,omitempty"`                          // or
	Agents               []string        `protobuf:"bytes,10,rep,name=agents,proto3" json:"agents,omitempty"`                         // or
	IsPrivate            bool            `protobuf:"varint,11,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"` // search in private convo only
	OnlyHeader           bool            `protobuf:"varint,13,opt,name=only_header,json=onlyHeader,proto3" json:"only_header,omitempty"`
	ConversationId       string          `protobuf:"bytes,14,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"` // filter by conversation
	Anchor               string          `protobuf:"bytes,15,opt,name=anchor,proto3" json:"anchor,omitempty"`
	ExcludeConversations []string        `protobuf:"bytes,16,rep,name=exclude_conversations,json=excludeConversations,proto3" json:"exclude_conversations,omitempty"`
}

func (x *SearchRequest) Reset() {
	*x = SearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest) ProtoMessage() {}

func (x *SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{25}
}

func (x *SearchRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *SearchRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *SearchRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SearchRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SearchRequest) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *SearchRequest) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *SearchRequest) GetAgents() []string {
	if x != nil {
		return x.Agents
	}
	return nil
}

func (x *SearchRequest) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *SearchRequest) GetOnlyHeader() bool {
	if x != nil {
		return x.OnlyHeader
	}
	return false
}

func (x *SearchRequest) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *SearchRequest) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *SearchRequest) GetExcludeConversations() []string {
	if x != nil {
		return x.ExcludeConversations
	}
	return nil
}

type AvailibilityReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	AgentId   string          `protobuf:"bytes,3,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	From      string          `protobuf:"bytes,5,opt,name=from,proto3" json:"from,omitempty"` // try date --rfc-3339=seconds date in rfc 333
	// seconds standard. E.g: 2019-03-07T10:42:01+07:00
	Range          string `protobuf:"bytes,8,opt,name=range,proto3" json:"range,omitempty"`
	NumberOfPoints int32  `protobuf:"varint,13,opt,name=number_of_points,json=numberOfPoints,proto3" json:"number_of_points,omitempty"`
}

func (x *AvailibilityReportRequest) Reset() {
	*x = AvailibilityReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailibilityReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailibilityReportRequest) ProtoMessage() {}

func (x *AvailibilityReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailibilityReportRequest.ProtoReflect.Descriptor instead.
func (*AvailibilityReportRequest) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{26}
}

func (x *AvailibilityReportRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *AvailibilityReportRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AvailibilityReportRequest) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *AvailibilityReportRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *AvailibilityReportRequest) GetRange() string {
	if x != nil {
		return x.Range
	}
	return ""
}

func (x *AvailibilityReportRequest) GetNumberOfPoints() int32 {
	if x != nil {
		return x.NumberOfPoints
	}
	return 0
}

type FileUrlDownloadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx        *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId  string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Url        string          `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	MaxSize    int64           `protobuf:"varint,4,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`
	TypePrefix string          `protobuf:"bytes,5,opt,name=type_prefix,json=typePrefix,proto3" json:"type_prefix,omitempty"`
	Timeout    int64           `protobuf:"varint,6,opt,name=timeout,proto3" json:"timeout,omitempty"`                     // ms
	UserAgent  string          `protobuf:"bytes,7,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"` // control client user-agent while download
	TypeHint   string          `protobuf:"bytes,8,opt,name=type_hint,json=typeHint,proto3" json:"type_hint,omitempty"`    // must from trusted source
	Extension  string          `protobuf:"bytes,9,opt,name=extension,proto3" json:"extension,omitempty"`                  // xlsx, jped
	MaxHeight  int64           `protobuf:"varint,10,opt,name=max_height,json=maxHeight,proto3" json:"max_height,omitempty"`
	MaxWidth   int64           `protobuf:"varint,11,opt,name=max_width,json=maxWidth,proto3" json:"max_width,omitempty"`
	Category   string          `protobuf:"bytes,12,opt,name=category,proto3" json:"category,omitempty"`
}

func (x *FileUrlDownloadRequest) Reset() {
	*x = FileUrlDownloadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileUrlDownloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileUrlDownloadRequest) ProtoMessage() {}

func (x *FileUrlDownloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileUrlDownloadRequest.ProtoReflect.Descriptor instead.
func (*FileUrlDownloadRequest) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{27}
}

func (x *FileUrlDownloadRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *FileUrlDownloadRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *FileUrlDownloadRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *FileUrlDownloadRequest) GetMaxSize() int64 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

func (x *FileUrlDownloadRequest) GetTypePrefix() string {
	if x != nil {
		return x.TypePrefix
	}
	return ""
}

func (x *FileUrlDownloadRequest) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *FileUrlDownloadRequest) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *FileUrlDownloadRequest) GetTypeHint() string {
	if x != nil {
		return x.TypeHint
	}
	return ""
}

func (x *FileUrlDownloadRequest) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

func (x *FileUrlDownloadRequest) GetMaxHeight() int64 {
	if x != nil {
		return x.MaxHeight
	}
	return 0
}

func (x *FileUrlDownloadRequest) GetMaxWidth() int64 {
	if x != nil {
		return x.MaxWidth
	}
	return 0
}

func (x *FileUrlDownloadRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

type OrderMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dim                string                 `protobuf:"bytes,2,opt,name=dim,proto3" json:"dim,omitempty"`
	Tz                 int32                  `protobuf:"varint,3,opt,name=tz,proto3" json:"tz,omitempty"`
	AccountId          string                 `protobuf:"bytes,10,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	IssueHourFrom      int64                  `protobuf:"varint,11,opt,name=issue_hour_from,json=issueHourFrom,proto3" json:"issue_hour_from,omitempty"`
	IssueHourTo        int64                  `protobuf:"varint,12,opt,name=issue_hour_to,json=issueHourTo,proto3" json:"issue_hour_to,omitempty"`
	PaidHourFrom       int64                  `protobuf:"varint,13,opt,name=paid_hour_from,json=paidHourFrom,proto3" json:"paid_hour_from,omitempty"`
	PaidHourTo         int64                  `protobuf:"varint,14,opt,name=paid_hour_to,json=paidHourTo,proto3" json:"paid_hour_to,omitempty"`
	Channels           []string               `protobuf:"bytes,15,rep,name=channels,proto3" json:"channels,omitempty"`
	NotChannels        []string               `protobuf:"bytes,16,rep,name=not_channels,json=notChannels,proto3" json:"not_channels,omitempty"`
	ChannelTouchpoints []string               `protobuf:"bytes,17,rep,name=channel_touchpoints,json=channelTouchpoints,proto3" json:"channel_touchpoints,omitempty"`
	ProductIds         []string               `protobuf:"bytes,18,rep,name=product_ids,json=productIds,proto3" json:"product_ids,omitempty"` // and
	Salesperson        []string               `protobuf:"bytes,19,rep,name=salesperson,proto3" json:"salesperson,omitempty"`                 // and, agent ids
	PosIds             []string               `protobuf:"bytes,20,rep,name=pos_ids,json=posIds,proto3" json:"pos_ids,omitempty"`
	BusinessHours      *account.BusinessHours `protobuf:"bytes,23,opt,name=business_hours,json=businessHours,proto3" json:"business_hours,omitempty"`
	NotBusinessHours   *account.BusinessHours `protobuf:"bytes,24,opt,name=not_business_hours,json=notBusinessHours,proto3" json:"not_business_hours,omitempty"`
	CreatedHourFrom    int64                  `protobuf:"varint,25,opt,name=created_hour_from,json=createdHourFrom,proto3" json:"created_hour_from,omitempty"`
	CreatedHourTo      int64                  `protobuf:"varint,26,opt,name=created_hour_to,json=createdHourTo,proto3" json:"created_hour_to,omitempty"`
}

func (x *OrderMetricsRequest) Reset() {
	*x = OrderMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderMetricsRequest) ProtoMessage() {}

func (x *OrderMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderMetricsRequest.ProtoReflect.Descriptor instead.
func (*OrderMetricsRequest) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{28}
}

func (x *OrderMetricsRequest) GetDim() string {
	if x != nil {
		return x.Dim
	}
	return ""
}

func (x *OrderMetricsRequest) GetTz() int32 {
	if x != nil {
		return x.Tz
	}
	return 0
}

func (x *OrderMetricsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *OrderMetricsRequest) GetIssueHourFrom() int64 {
	if x != nil {
		return x.IssueHourFrom
	}
	return 0
}

func (x *OrderMetricsRequest) GetIssueHourTo() int64 {
	if x != nil {
		return x.IssueHourTo
	}
	return 0
}

func (x *OrderMetricsRequest) GetPaidHourFrom() int64 {
	if x != nil {
		return x.PaidHourFrom
	}
	return 0
}

func (x *OrderMetricsRequest) GetPaidHourTo() int64 {
	if x != nil {
		return x.PaidHourTo
	}
	return 0
}

func (x *OrderMetricsRequest) GetChannels() []string {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *OrderMetricsRequest) GetNotChannels() []string {
	if x != nil {
		return x.NotChannels
	}
	return nil
}

func (x *OrderMetricsRequest) GetChannelTouchpoints() []string {
	if x != nil {
		return x.ChannelTouchpoints
	}
	return nil
}

func (x *OrderMetricsRequest) GetProductIds() []string {
	if x != nil {
		return x.ProductIds
	}
	return nil
}

func (x *OrderMetricsRequest) GetSalesperson() []string {
	if x != nil {
		return x.Salesperson
	}
	return nil
}

func (x *OrderMetricsRequest) GetPosIds() []string {
	if x != nil {
		return x.PosIds
	}
	return nil
}

func (x *OrderMetricsRequest) GetBusinessHours() *account.BusinessHours {
	if x != nil {
		return x.BusinessHours
	}
	return nil
}

func (x *OrderMetricsRequest) GetNotBusinessHours() *account.BusinessHours {
	if x != nil {
		return x.NotBusinessHours
	}
	return nil
}

func (x *OrderMetricsRequest) GetCreatedHourFrom() int64 {
	if x != nil {
		return x.CreatedHourFrom
	}
	return 0
}

func (x *OrderMetricsRequest) GetCreatedHourTo() int64 {
	if x != nil {
		return x.CreatedHourTo
	}
	return 0
}

type OrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx                 *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId           string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	UserId              string          `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // list order by user
	Status              string          `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`               // list order by status
	CreatedHourFrom     int64           `protobuf:"varint,5,opt,name=created_hour_from,json=createdHourFrom,proto3" json:"created_hour_from,omitempty"`
	CreatedHourTo       int64           `protobuf:"varint,6,opt,name=created_hour_to,json=createdHourTo,proto3" json:"created_hour_to,omitempty"`
	DueDateHourFrom     int64           `protobuf:"varint,20,opt,name=due_date_hour_from,json=dueDateHourFrom,proto3" json:"due_date_hour_from,omitempty"`
	DueDateHourTo       int64           `protobuf:"varint,21,opt,name=due_date_hour_to,json=dueDateHourTo,proto3" json:"due_date_hour_to,omitempty"`
	IssueHourFrom       int64           `protobuf:"varint,22,opt,name=issue_hour_from,json=issueHourFrom,proto3" json:"issue_hour_from,omitempty"`
	IssueHourTo         int64           `protobuf:"varint,23,opt,name=issue_hour_to,json=issueHourTo,proto3" json:"issue_hour_to,omitempty"`
	IncludeDeleted      bool            `protobuf:"varint,7,opt,name=include_deleted,json=includeDeleted,proto3" json:"include_deleted,omitempty"`
	Limit               int32           `protobuf:"varint,8,opt,name=limit,proto3" json:"limit,omitempty"`
	Anchor              string          `protobuf:"bytes,9,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Offset              int32           `protobuf:"varint,18,opt,name=offset,proto3" json:"offset,omitempty"`
	Dim                 string          `protobuf:"bytes,17,opt,name=dim,proto3" json:"dim,omitempty"`
	OrderBy             string          `protobuf:"bytes,19,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	Ids                 []string        `protobuf:"bytes,10,rep,name=ids,proto3" json:"ids,omitempty"`
	Modifieds           []int64         `protobuf:"varint,11,rep,packed,name=modifieds,proto3" json:"modifieds,omitempty"`
	Query               string          `protobuf:"bytes,12,opt,name=query,proto3" json:"query,omitempty"`
	IsDraft             bool            `protobuf:"varint,13,opt,name=is_draft,json=isDraft,proto3" json:"is_draft,omitempty"`
	PaymentStatus       string          `protobuf:"bytes,14,opt,name=payment_status,json=paymentStatus,proto3" json:"payment_status,omitempty"`
	PosIds              []string        `protobuf:"bytes,15,rep,name=pos_ids,json=posIds,proto3" json:"pos_ids,omitempty"`
	Salesperson         []string        `protobuf:"bytes,16,rep,name=salesperson,proto3" json:"salesperson,omitempty"` // agent ids
	Statuses            []string        `protobuf:"bytes,24,rep,name=statuses,proto3" json:"statuses,omitempty"`
	NotStatuses         []string        `protobuf:"bytes,25,rep,name=not_statuses,json=notStatuses,proto3" json:"not_statuses,omitempty"`
	ShippingStatuses    []string        `protobuf:"bytes,26,rep,name=shipping_statuses,json=shippingStatuses,proto3" json:"shipping_statuses,omitempty"`
	NotShippingStatuses []string        `protobuf:"bytes,27,rep,name=not_shipping_statuses,json=notShippingStatuses,proto3" json:"not_shipping_statuses,omitempty"`
	Tags                []string        `protobuf:"bytes,33,rep,name=tags,proto3" json:"tags,omitempty"` // and
	Pipeline            string          `protobuf:"bytes,30,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	PipelineStage       string          `protobuf:"bytes,31,opt,name=pipeline_stage,json=pipelineStage,proto3" json:"pipeline_stage,omitempty"`
	AssignedAgentId     string          `protobuf:"bytes,32,opt,name=assigned_agent_id,json=assignedAgentId,proto3" json:"assigned_agent_id,omitempty"`
}

func (x *OrdersRequest) Reset() {
	*x = OrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrdersRequest) ProtoMessage() {}

func (x *OrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrdersRequest.ProtoReflect.Descriptor instead.
func (*OrdersRequest) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{29}
}

func (x *OrdersRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *OrdersRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *OrdersRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *OrdersRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *OrdersRequest) GetCreatedHourFrom() int64 {
	if x != nil {
		return x.CreatedHourFrom
	}
	return 0
}

func (x *OrdersRequest) GetCreatedHourTo() int64 {
	if x != nil {
		return x.CreatedHourTo
	}
	return 0
}

func (x *OrdersRequest) GetDueDateHourFrom() int64 {
	if x != nil {
		return x.DueDateHourFrom
	}
	return 0
}

func (x *OrdersRequest) GetDueDateHourTo() int64 {
	if x != nil {
		return x.DueDateHourTo
	}
	return 0
}

func (x *OrdersRequest) GetIssueHourFrom() int64 {
	if x != nil {
		return x.IssueHourFrom
	}
	return 0
}

func (x *OrdersRequest) GetIssueHourTo() int64 {
	if x != nil {
		return x.IssueHourTo
	}
	return 0
}

func (x *OrdersRequest) GetIncludeDeleted() bool {
	if x != nil {
		return x.IncludeDeleted
	}
	return false
}

func (x *OrdersRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *OrdersRequest) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *OrdersRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *OrdersRequest) GetDim() string {
	if x != nil {
		return x.Dim
	}
	return ""
}

func (x *OrdersRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *OrdersRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *OrdersRequest) GetModifieds() []int64 {
	if x != nil {
		return x.Modifieds
	}
	return nil
}

func (x *OrdersRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *OrdersRequest) GetIsDraft() bool {
	if x != nil {
		return x.IsDraft
	}
	return false
}

func (x *OrdersRequest) GetPaymentStatus() string {
	if x != nil {
		return x.PaymentStatus
	}
	return ""
}

func (x *OrdersRequest) GetPosIds() []string {
	if x != nil {
		return x.PosIds
	}
	return nil
}

func (x *OrdersRequest) GetSalesperson() []string {
	if x != nil {
		return x.Salesperson
	}
	return nil
}

func (x *OrdersRequest) GetStatuses() []string {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *OrdersRequest) GetNotStatuses() []string {
	if x != nil {
		return x.NotStatuses
	}
	return nil
}

func (x *OrdersRequest) GetShippingStatuses() []string {
	if x != nil {
		return x.ShippingStatuses
	}
	return nil
}

func (x *OrdersRequest) GetNotShippingStatuses() []string {
	if x != nil {
		return x.NotShippingStatuses
	}
	return nil
}

func (x *OrdersRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *OrdersRequest) GetPipeline() string {
	if x != nil {
		return x.Pipeline
	}
	return ""
}

func (x *OrdersRequest) GetPipelineStage() string {
	if x != nil {
		return x.PipelineStage
	}
	return ""
}

func (x *OrdersRequest) GetAssignedAgentId() string {
	if x != nil {
		return x.AssignedAgentId
	}
	return ""
}

type CountOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context  `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string           `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Queries   []*OrdersRequest `protobuf:"bytes,4,rep,name=queries,proto3" json:"queries,omitempty"`
}

func (x *CountOrdersRequest) Reset() {
	*x = CountOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountOrdersRequest) ProtoMessage() {}

func (x *CountOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountOrdersRequest.ProtoReflect.Descriptor instead.
func (*CountOrdersRequest) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{30}
}

func (x *CountOrdersRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *CountOrdersRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CountOrdersRequest) GetQueries() []*OrdersRequest {
	if x != nil {
		return x.Queries
	}
	return nil
}

type WorkflowReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx        *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId  string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	WorkflowId string          `protobuf:"bytes,3,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	FromHour   int64           `protobuf:"varint,6,opt,name=from_hour,json=fromHour,proto3" json:"from_hour,omitempty"`
	ToHour     int64           `protobuf:"varint,7,opt,name=to_hour,json=toHour,proto3" json:"to_hour,omitempty"`
	// session_started, goal_reached, session_error, any_action, message_sent, message_sent_facebook, message_sent_email, message_sent_zns, assign
	ActionTypes []string `protobuf:"bytes,8,rep,name=action_types,json=actionTypes,proto3" json:"action_types,omitempty"`
}

func (x *WorkflowReportRequest) Reset() {
	*x = WorkflowReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowReportRequest) ProtoMessage() {}

func (x *WorkflowReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowReportRequest.ProtoReflect.Descriptor instead.
func (*WorkflowReportRequest) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{31}
}

func (x *WorkflowReportRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *WorkflowReportRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *WorkflowReportRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *WorkflowReportRequest) GetFromHour() int64 {
	if x != nil {
		return x.FromHour
	}
	return 0
}

func (x *WorkflowReportRequest) GetToHour() int64 {
	if x != nil {
		return x.ToHour
	}
	return 0
}

func (x *WorkflowReportRequest) GetActionTypes() []string {
	if x != nil {
		return x.ActionTypes
	}
	return nil
}

type AuthorizeShopeeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx           *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId     string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Code          string          `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	ShopId        int64           `protobuf:"varint,4,opt,name=shop_id,json=shopId,proto3" json:"shop_id,omitempty"`
	MainAccountId string          `protobuf:"bytes,5,opt,name=main_account_id,json=mainAccountId,proto3" json:"main_account_id,omitempty"`
}

func (x *AuthorizeShopeeRequest) Reset() {
	*x = AuthorizeShopeeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizeShopeeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizeShopeeRequest) ProtoMessage() {}

func (x *AuthorizeShopeeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizeShopeeRequest.ProtoReflect.Descriptor instead.
func (*AuthorizeShopeeRequest) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{32}
}

func (x *AuthorizeShopeeRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *AuthorizeShopeeRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AuthorizeShopeeRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *AuthorizeShopeeRequest) GetShopId() int64 {
	if x != nil {
		return x.ShopId
	}
	return 0
}

func (x *AuthorizeShopeeRequest) GetMainAccountId() string {
	if x != nil {
		return x.MainAccountId
	}
	return ""
}

type ShopeeSyncProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ShopId    int64           `protobuf:"varint,3,opt,name=shop_id,json=shopId,proto3" json:"shop_id,omitempty"`
	Offset    int64           `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	PageSize  int64           `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Status    string          `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	Mode      string          `protobuf:"bytes,8,opt,name=mode,proto3" json:"mode,omitempty"` // override, append only
}

func (x *ShopeeSyncProductRequest) Reset() {
	*x = ShopeeSyncProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShopeeSyncProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopeeSyncProductRequest) ProtoMessage() {}

func (x *ShopeeSyncProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopeeSyncProductRequest.ProtoReflect.Descriptor instead.
func (*ShopeeSyncProductRequest) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{33}
}

func (x *ShopeeSyncProductRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ShopeeSyncProductRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ShopeeSyncProductRequest) GetShopId() int64 {
	if x != nil {
		return x.ShopId
	}
	return 0
}

func (x *ShopeeSyncProductRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ShopeeSyncProductRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ShopeeSyncProductRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ShopeeSyncProductRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

type AddressAutocompleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Keyword   string          `protobuf:"bytes,3,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Language  string          `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	Countries []string        `protobuf:"bytes,5,rep,name=countries,proto3" json:"countries,omitempty"`
}

func (x *AddressAutocompleteRequest) Reset() {
	*x = AddressAutocompleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressAutocompleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressAutocompleteRequest) ProtoMessage() {}

func (x *AddressAutocompleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressAutocompleteRequest.ProtoReflect.Descriptor instead.
func (*AddressAutocompleteRequest) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{34}
}

func (x *AddressAutocompleteRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *AddressAutocompleteRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AddressAutocompleteRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *AddressAutocompleteRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *AddressAutocompleteRequest) GetCountries() []string {
	if x != nil {
		return x.Countries
	}
	return nil
}

type TasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx                     *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId               string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	AssociatedTickets       []string        `protobuf:"bytes,4,rep,name=associated_tickets,json=associatedTickets,proto3" json:"associated_tickets,omitempty"`
	AssociatedUsers         []string        `protobuf:"bytes,5,rep,name=associated_users,json=associatedUsers,proto3" json:"associated_users,omitempty"`
	AssociatedOrders        []string        `protobuf:"bytes,7,rep,name=associated_orders,json=associatedOrders,proto3" json:"associated_orders,omitempty"`
	AssociatedConversations []string        `protobuf:"bytes,9,rep,name=associated_conversations,json=associatedConversations,proto3" json:"associated_conversations,omitempty"`
	CreatedHourFrom         int64           `protobuf:"varint,10,opt,name=created_hour_from,json=createdHourFrom,proto3" json:"created_hour_from,omitempty"`
	CreatedHourTo           int64           `protobuf:"varint,11,opt,name=created_hour_to,json=createdHourTo,proto3" json:"created_hour_to,omitempty"`
	DueDateHourFrom         int64           `protobuf:"varint,12,opt,name=due_date_hour_from,json=dueDateHourFrom,proto3" json:"due_date_hour_from,omitempty"`
	DueDateHourTo           int64           `protobuf:"varint,13,opt,name=due_date_hour_to,json=dueDateHourTo,proto3" json:"due_date_hour_to,omitempty"`
	Assignee                string          `protobuf:"bytes,14,opt,name=assignee,proto3" json:"assignee,omitempty"`
	Priority                int64           `protobuf:"varint,15,opt,name=priority,proto3" json:"priority,omitempty"`
	Status                  string          `protobuf:"bytes,16,opt,name=status,proto3" json:"status,omitempty"`
	Limit                   int32           `protobuf:"varint,20,opt,name=limit,proto3" json:"limit,omitempty"`
	Anchor                  string          `protobuf:"bytes,21,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Offset                  int32           `protobuf:"varint,22,opt,name=offset,proto3" json:"offset,omitempty"`
	OrderBy                 string          `protobuf:"bytes,30,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	Ids                     []string        `protobuf:"bytes,23,rep,name=ids,proto3" json:"ids,omitempty"`
	LastModifieds           []int64         `protobuf:"varint,24,rep,packed,name=last_modifieds,json=lastModifieds,proto3" json:"last_modifieds,omitempty"` // ms
	Supervisor              string          `protobuf:"bytes,25,opt,name=supervisor,proto3" json:"supervisor,omitempty"`                                    // task.supervisor = supervisor && task.assignee != supervisor
	Assignees               []string        `protobuf:"bytes,26,rep,name=assignees,proto3" json:"assignees,omitempty"`
	IsPinned                string          `protobuf:"bytes,28,opt,name=is_pinned,json=isPinned,proto3" json:"is_pinned,omitempty"` // yes/no
	Watcher                 string          `protobuf:"bytes,29,opt,name=watcher,proto3" json:"watcher,omitempty"`
	Shorten                 bool            `protobuf:"varint,31,opt,name=shorten,proto3" json:"shorten,omitempty"` // only return pinned, watchers, title, assignee, supervisor, actived, duedate and title
}

func (x *TasksRequest) Reset() {
	*x = TasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TasksRequest) ProtoMessage() {}

func (x *TasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TasksRequest.ProtoReflect.Descriptor instead.
func (*TasksRequest) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{35}
}

func (x *TasksRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *TasksRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *TasksRequest) GetAssociatedTickets() []string {
	if x != nil {
		return x.AssociatedTickets
	}
	return nil
}

func (x *TasksRequest) GetAssociatedUsers() []string {
	if x != nil {
		return x.AssociatedUsers
	}
	return nil
}

func (x *TasksRequest) GetAssociatedOrders() []string {
	if x != nil {
		return x.AssociatedOrders
	}
	return nil
}

func (x *TasksRequest) GetAssociatedConversations() []string {
	if x != nil {
		return x.AssociatedConversations
	}
	return nil
}

func (x *TasksRequest) GetCreatedHourFrom() int64 {
	if x != nil {
		return x.CreatedHourFrom
	}
	return 0
}

func (x *TasksRequest) GetCreatedHourTo() int64 {
	if x != nil {
		return x.CreatedHourTo
	}
	return 0
}

func (x *TasksRequest) GetDueDateHourFrom() int64 {
	if x != nil {
		return x.DueDateHourFrom
	}
	return 0
}

func (x *TasksRequest) GetDueDateHourTo() int64 {
	if x != nil {
		return x.DueDateHourTo
	}
	return 0
}

func (x *TasksRequest) GetAssignee() string {
	if x != nil {
		return x.Assignee
	}
	return ""
}

func (x *TasksRequest) GetPriority() int64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *TasksRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TasksRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TasksRequest) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *TasksRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *TasksRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *TasksRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *TasksRequest) GetLastModifieds() []int64 {
	if x != nil {
		return x.LastModifieds
	}
	return nil
}

func (x *TasksRequest) GetSupervisor() string {
	if x != nil {
		return x.Supervisor
	}
	return ""
}

func (x *TasksRequest) GetAssignees() []string {
	if x != nil {
		return x.Assignees
	}
	return nil
}

func (x *TasksRequest) GetIsPinned() string {
	if x != nil {
		return x.IsPinned
	}
	return ""
}

func (x *TasksRequest) GetWatcher() string {
	if x != nil {
		return x.Watcher
	}
	return ""
}

func (x *TasksRequest) GetShorten() bool {
	if x != nil {
		return x.Shorten
	}
	return false
}

type DocIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx               *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId         string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Collection        string          `protobuf:"bytes,3,opt,name=collection,proto3" json:"collection,omitempty"`
	DocumentId        string          `protobuf:"bytes,4,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	Part              string          `protobuf:"bytes,5,opt,name=part,proto3" json:"part,omitempty"`
	Content           string          `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`
	IsName            bool            `protobuf:"varint,7,opt,name=is_name,json=isName,proto3" json:"is_name,omitempty"` // hint for better name search
	IsId              bool            `protobuf:"varint,10,opt,name=is_id,json=isId,proto3" json:"is_id,omitempty"`      // hint for not indexing using tokenize
	Day               int64           `protobuf:"varint,8,opt,name=day,proto3" json:"day,omitempty"`                     // unix day for doc, used to order more recent document
	IsPhone           bool            `protobuf:"varint,11,opt,name=is_phone,json=isPhone,proto3" json:"is_phone,omitempty"`
	IsEmail           bool            `protobuf:"varint,12,opt,name=is_email,json=isEmail,proto3" json:"is_email,omitempty"`
	Owners            []string        `protobuf:"bytes,9,rep,name=owners,proto3" json:"owners,omitempty"`
	PrimaryDocumentId string          `protobuf:"bytes,13,opt,name=primary_document_id,json=primaryDocumentId,proto3" json:"primary_document_id,omitempty"`
	Sec               int64           `protobuf:"varint,14,opt,name=sec,proto3" json:"sec,omitempty"` // unix sec for doc, used to order more recent document
	Locale            string          `protobuf:"bytes,15,opt,name=locale,proto3" json:"locale,omitempty"`
}

func (x *DocIndexRequest) Reset() {
	*x = DocIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocIndexRequest) ProtoMessage() {}

func (x *DocIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocIndexRequest.ProtoReflect.Descriptor instead.
func (*DocIndexRequest) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{36}
}

func (x *DocIndexRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *DocIndexRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *DocIndexRequest) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

func (x *DocIndexRequest) GetDocumentId() string {
	if x != nil {
		return x.DocumentId
	}
	return ""
}

func (x *DocIndexRequest) GetPart() string {
	if x != nil {
		return x.Part
	}
	return ""
}

func (x *DocIndexRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *DocIndexRequest) GetIsName() bool {
	if x != nil {
		return x.IsName
	}
	return false
}

func (x *DocIndexRequest) GetIsId() bool {
	if x != nil {
		return x.IsId
	}
	return false
}

func (x *DocIndexRequest) GetDay() int64 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *DocIndexRequest) GetIsPhone() bool {
	if x != nil {
		return x.IsPhone
	}
	return false
}

func (x *DocIndexRequest) GetIsEmail() bool {
	if x != nil {
		return x.IsEmail
	}
	return false
}

func (x *DocIndexRequest) GetOwners() []string {
	if x != nil {
		return x.Owners
	}
	return nil
}

func (x *DocIndexRequest) GetPrimaryDocumentId() string {
	if x != nil {
		return x.PrimaryDocumentId
	}
	return ""
}

func (x *DocIndexRequest) GetSec() int64 {
	if x != nil {
		return x.Sec
	}
	return 0
}

func (x *DocIndexRequest) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

type DocSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx           *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId     string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Collection    string          `protobuf:"bytes,3,opt,name=collection,proto3" json:"collection,omitempty"`
	Query         string          `protobuf:"bytes,5,opt,name=query,proto3" json:"query,omitempty"`
	Anchor        string          `protobuf:"bytes,6,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Limit         int64           `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	IncludeParts  []string        `protobuf:"bytes,8,rep,name=include_parts,json=includeParts,proto3" json:"include_parts,omitempty"` // only include those parts
	DocDistinct   bool            `protobuf:"varint,9,opt,name=doc_distinct,json=docDistinct,proto3" json:"doc_distinct,omitempty"`   // distinct document
	IncludeOwners []string        `protobuf:"bytes,10,rep,name=include_owners,json=includeOwners,proto3" json:"include_owners,omitempty"`
	DayAnchor     int64           `protobuf:"varint,11,opt,name=day_anchor,json=dayAnchor,proto3" json:"day_anchor,omitempty"`
	IsOnlyId      bool            `protobuf:"varint,12,opt,name=is_only_id,json=isOnlyId,proto3" json:"is_only_id,omitempty"`
	Locale        string          `protobuf:"bytes,13,opt,name=locale,proto3" json:"locale,omitempty"`
	IsShorten     bool            `protobuf:"varint,14,opt,name=is_shorten,json=isShorten,proto3" json:"is_shorten,omitempty"`
}

func (x *DocSearchRequest) Reset() {
	*x = DocSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocSearchRequest) ProtoMessage() {}

func (x *DocSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocSearchRequest.ProtoReflect.Descriptor instead.
func (*DocSearchRequest) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{37}
}

func (x *DocSearchRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *DocSearchRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *DocSearchRequest) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

func (x *DocSearchRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *DocSearchRequest) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *DocSearchRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *DocSearchRequest) GetIncludeParts() []string {
	if x != nil {
		return x.IncludeParts
	}
	return nil
}

func (x *DocSearchRequest) GetDocDistinct() bool {
	if x != nil {
		return x.DocDistinct
	}
	return false
}

func (x *DocSearchRequest) GetIncludeOwners() []string {
	if x != nil {
		return x.IncludeOwners
	}
	return nil
}

func (x *DocSearchRequest) GetDayAnchor() int64 {
	if x != nil {
		return x.DayAnchor
	}
	return 0
}

func (x *DocSearchRequest) GetIsOnlyId() bool {
	if x != nil {
		return x.IsOnlyId
	}
	return false
}

func (x *DocSearchRequest) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *DocSearchRequest) GetIsShorten() bool {
	if x != nil {
		return x.IsShorten
	}
	return false
}

var File_request_proto protoreflect.FileDescriptor

var file_request_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb6, 0x01, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x8b, 0x07,
	0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x48,
	0x6f, 0x75, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x54, 0x6f, 0x12,
	0x31, 0x0a, 0x15, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x68,
	0x6f, 0x75, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x46, 0x72,
	0x6f, 0x6d, 0x12, 0x2d, 0x0a, 0x13, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x6e,
	0x74, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x74, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x54,
	0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x2f, 0x0a,
	0x13, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x07, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12,
	0x39, 0x0a, 0x19, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x16, 0x66, 0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x6d, 0x5f,
	0x67, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x47, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x17, 0x66, 0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x66, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x3d, 0x0a, 0x0e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x52, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x44, 0x0a, 0x12, 0x6e, 0x6f, 0x74, 0x5f, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x52, 0x10, 0x6e, 0x6f, 0x74, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x74,
	0x7a, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x74, 0x7a, 0x12, 0x10, 0x0a, 0x03, 0x64,
	0x69, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x6d, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x9f, 0x03, 0x0a, 0x13,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x6f,
	0x75, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x26,
	0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x74,
	0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x48, 0x6f, 0x75, 0x72, 0x54, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x12, 0x3d, 0x0a, 0x0e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x68,
	0x6f, 0x75, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x75,
	0x72, 0x73, 0x52, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x75, 0x72,
	0x73, 0x12, 0x44, 0x0a, 0x12, 0x6e, 0x6f, 0x74, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x48, 0x6f, 0x75, 0x72, 0x73, 0x52, 0x10, 0x6e, 0x6f, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x7a, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x74, 0x7a, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x6d, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0xf4, 0x03,
	0x0a, 0x12, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68,
	0x6f, 0x75, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x12,
	0x26, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f,
	0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x48, 0x6f, 0x75, 0x72, 0x54, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x3d,
	0x0a, 0x0e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x52, 0x0d,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x44, 0x0a,
	0x12, 0x6e, 0x6f, 0x74, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f,
	0x75, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x75, 0x72,
	0x73, 0x52, 0x10, 0x6e, 0x6f, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x6f,
	0x75, 0x72, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x7a, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x74, 0x7a, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x64, 0x69, 0x6d, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x67, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x61, 0x6c, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x75, 0x6d, 0x47, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x22, 0xa0, 0x02, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74,
	0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x68, 0x6f, 0x75, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x48,
	0x6f, 0x75, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xc4, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03,
	0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x48, 0x6f, 0x75, 0x72, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x74, 0x6f, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x6f,
	0x0a, 0x10, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0xb8, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x95, 0x03, 0x0a, 0x0b, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x6d, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x5f, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0xba, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22,
	0xe5, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x22, 0x7d, 0x0a, 0x0b, 0x42, 0x6f, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x7a, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x42, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x6f, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6f, 0x74, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x64, 0x61, 0x79, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x64, 0x61, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x64,
	0x61, 0x79, 0x5f, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x64, 0x61, 0x79,
	0x54, 0x6f, 0x22, 0xc5, 0x01, 0x0a, 0x17, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x75, 0x6e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x64, 0x69, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x6d,
	0x12, 0x0e, 0x0a, 0x02, 0x74, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x74, 0x7a,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x15, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x46, 0x72,
	0x6f, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x6f,
	0x75, 0x72, 0x5f, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x54, 0x6f, 0x22, 0xc2, 0x01, 0x0a, 0x14, 0x42,
	0x6f, 0x74, 0x72, 0x75, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x64, 0x69, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x74, 0x7a, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x48,
	0x6f, 0x75, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x54, 0x6f, 0x22,
	0xfe, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x48, 0x6f, 0x75, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x74, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x54, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x64, 0x61, 0x79, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x64, 0x61, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x61, 0x79,
	0x5f, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x64, 0x61, 0x79, 0x54, 0x6f,
	0x22, 0xfe, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x68, 0x6f, 0x75, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d,
	0x48, 0x6f, 0x75, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x6f, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x22, 0x0a,
	0x0d, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x65, 0x62, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49,
	0x64, 0x22, 0xf2, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63,
	0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x6f, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x6f,
	0x48, 0x6f, 0x75, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x7a,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x74, 0x7a, 0x22, 0x1a, 0x0a, 0x05, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x64, 0x61, 0x79, 0x10, 0x01, 0x22, 0xf6, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x57, 0x65, 0x62, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x65, 0x62, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x68, 0x6f, 0x75, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d,
	0x48, 0x6f, 0x75, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x6f, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x7a, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x74, 0x7a, 0x22, 0x1a, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x08, 0x0a, 0x04,
	0x68, 0x6f, 0x75, 0x72, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x10, 0x01, 0x22,
	0xf4, 0x01, 0x0a, 0x1a, 0x57, 0x65, 0x62, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74,
	0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0d, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x65, 0x62, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x64, 0x61, 0x79,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x75, 0x6e, 0x69,
	0x78, 0x44, 0x61, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1e, 0x0a, 0x0b, 0x75, 0x6e, 0x69, 0x78,
	0x5f, 0x64, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75,
	0x6e, 0x69, 0x78, 0x44, 0x61, 0x79, 0x54, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68,
	0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x67, 0x0a, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03,
	0x63, 0x74, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22,
	0x74, 0x0a, 0x1a, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78,
	0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x63, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x77,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xfe, 0x02, 0x0a, 0x0d, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03,
	0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6f, 0x6e, 0x6c, 0x79, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x15, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xf3, 0x01, 0x0a, 0x19,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x66, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x25, 0x0a, 0x05, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x64, 0x61, 0x79, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x10,
	0x02, 0x22, 0xf4, 0x02, 0x0a, 0x16, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03,
	0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x68, 0x69,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x48, 0x69,
	0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x8f, 0x05, 0x0a, 0x13, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64,
	0x69, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x74, 0x7a, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x48, 0x6f, 0x75, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x74, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x54, 0x6f, 0x12, 0x24, 0x0a,
	0x0e, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x61, 0x69, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x46,
	0x72, 0x6f, 0x6d, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72,
	0x5f, 0x74, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x69, 0x64, 0x48,
	0x6f, 0x75, 0x72, 0x54, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x74, 0x6f, 0x75, 0x63, 0x68, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x61, 0x6c,
	0x65, 0x73, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x73, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x49, 0x64,
	0x73, 0x12, 0x3d, 0x0a, 0x0e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f,
	0x75, 0x72, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x75, 0x72,
	0x73, 0x52, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x75, 0x72, 0x73,
	0x12, 0x44, 0x0a, 0x12, 0x6e, 0x6f, 0x74, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x48,
	0x6f, 0x75, 0x72, 0x73, 0x52, 0x10, 0x6e, 0x6f, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x46, 0x72,
	0x6f, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x6f,
	0x75, 0x72, 0x5f, 0x74, 0x6f, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x54, 0x6f, 0x22, 0xfa, 0x07, 0x0a, 0x0d, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03,
	0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x74, 0x6f, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x75,
	0x72, 0x54, 0x6f, 0x12, 0x2b, 0x0a, 0x12, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x68, 0x6f, 0x75, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x64, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x46, 0x72, 0x6f, 0x6d,
	0x12, 0x27, 0x0a, 0x10, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x6f, 0x75,
	0x72, 0x5f, 0x74, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x75, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x54, 0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x69, 0x73, 0x73, 0x75, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x46, 0x72, 0x6f,
	0x6d, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f,
	0x74, 0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x48,
	0x6f, 0x75, 0x72, 0x54, 0x6f, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x64, 0x69, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x62, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03,
	0x69, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x64, 0x72,
	0x61, 0x66, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x44, 0x72, 0x61,
	0x66, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x73,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x49,
	0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73,
	0x18, 0x18, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73,
	0x18, 0x19, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10,
	0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73,
	0x12, 0x32, 0x0a, 0x15, 0x6e, 0x6f, 0x74, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x13, 0x6e, 0x6f, 0x74, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x21, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x87, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74,
	0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x2f, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x22, 0xd3, 0x01, 0x0a, 0x15, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63,
	0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x6f, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x6f,
	0x48, 0x6f, 0x75, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x16, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x69, 0x6e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xd6, 0x01, 0x0a, 0x18, 0x53, 0x68,
	0x6f, 0x70, 0x65, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x22, 0xb2, 0x01, 0x0a, 0x1a, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x75,
	0x74, 0x6f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xb5, 0x06, 0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x73, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x10, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x39, 0x0a, 0x18, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x17, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x11,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x48, 0x6f, 0x75, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x74, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x54, 0x6f,
	0x12, 0x2b, 0x0a, 0x12, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x6f, 0x75,
	0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x64, 0x75,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x27, 0x0a,
	0x10, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x74,
	0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x48, 0x6f, 0x75, 0x72, 0x54, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x17,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x73, 0x18, 0x1a, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x73, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x6e,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x6e, 0x22,
	0xaa, 0x03, 0x0a, 0x0f, 0x44, 0x6f, 0x63, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x72, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x13, 0x0a,
	0x05, 0x69, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x64, 0x61, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x69, 0x73, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x73, 0x65, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x22, 0x9b, 0x03, 0x0a,
	0x10, 0x44, 0x6f, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x61, 0x72, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x6f, 0x63, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x64, 0x6f, 0x63, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x79, 0x5f, 0x61, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x61, 0x79, 0x41,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c,
	0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x6e, 0x42, 0x19, 0x5a, 0x17, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x7a, 0x2f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_request_proto_rawDescOnce sync.Once
	file_request_proto_rawDescData = file_request_proto_rawDesc
)

func file_request_proto_rawDescGZIP() []byte {
	file_request_proto_rawDescOnce.Do(func() {
		file_request_proto_rawDescData = protoimpl.X.CompressGZIP(file_request_proto_rawDescData)
	})
	return file_request_proto_rawDescData
}

var file_request_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_request_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_request_proto_goTypes = []interface{}{
	(ReportCampaignRequest_Range)(0),     // 0: header.ReportCampaignRequest.Range
	(ReportWebPluginRequest_Range)(0),    // 1: header.ReportWebPluginRequest.Range
	(AvailibilityReportRequest_Range)(0), // 2: header.AvailibilityReportRequest.Range
	(*UserReportRequest)(nil),            // 3: header.UserReportRequest
	(*ConversationMetricsRequest)(nil),   // 4: header.ConversationMetricsRequest
	(*AgentMetricsRequest)(nil),          // 5: header.AgentMetricsRequest
	(*CallMetricsRequest)(nil),           // 6: header.CallMetricsRequest
	(*ListUserEventsRequest)(nil),        // 7: header.ListUserEventsRequest
	(*ListEventTypeRequest)(nil),         // 8: header.ListEventTypeRequest
	(*PresencesRequest)(nil),             // 9: header.PresencesRequest
	(*ListNotiRequest)(nil),              // 10: header.ListNotiRequest
	(*UserRequest)(nil),                  // 11: header.UserRequest
	(*ListNotesRequest)(nil),             // 12: header.ListNotesRequest
	(*DeleteNoteRequest)(nil),            // 13: header.DeleteNoteRequest
	(*UpdateWorkflowSessionRequest)(nil), // 14: header.UpdateWorkflowSessionRequest
	(*ListWorkflowLogRequest)(nil),       // 15: header.ListWorkflowLogRequest
	(*BotsRequest)(nil),                  // 16: header.BotsRequest
	(*ReportBotRequest)(nil),             // 17: header.ReportBotRequest
	(*ActionrunMetricsRequest)(nil),      // 18: header.ActionrunMetricsRequest
	(*BotrunMetricsRequest)(nil),         // 19: header.BotrunMetricsRequest
	(*ListObjectsRequest)(nil),           // 20: header.ListObjectsRequest
	(*ConversionRequest)(nil),            // 21: header.ConversionRequest
	(*ReportCampaignRequest)(nil),        // 22: header.ReportCampaignRequest
	(*ReportWebPluginRequest)(nil),       // 23: header.ReportWebPluginRequest
	(*WebPluginConversionRequest)(nil),   // 24: header.WebPluginConversionRequest
	(*SearchLocationsRequest)(nil),       // 25: header.SearchLocationsRequest
	(*RecentIndexDeliveryRequest)(nil),   // 26: header.RecentIndexDeliveryRequest
	(*DeliveryRequest)(nil),              // 27: header.DeliveryRequest
	(*SearchRequest)(nil),                // 28: header.SearchRequest
	(*AvailibilityReportRequest)(nil),    // 29: header.AvailibilityReportRequest
	(*FileUrlDownloadRequest)(nil),       // 30: header.FileUrlDownloadRequest
	(*OrderMetricsRequest)(nil),          // 31: header.OrderMetricsRequest
	(*OrdersRequest)(nil),                // 32: header.OrdersRequest
	(*CountOrdersRequest)(nil),           // 33: header.CountOrdersRequest
	(*WorkflowReportRequest)(nil),        // 34: header.WorkflowReportRequest
	(*AuthorizeShopeeRequest)(nil),       // 35: header.AuthorizeShopeeRequest
	(*ShopeeSyncProductRequest)(nil),     // 36: header.ShopeeSyncProductRequest
	(*AddressAutocompleteRequest)(nil),   // 37: header.AddressAutocompleteRequest
	(*TasksRequest)(nil),                 // 38: header.TasksRequest
	(*DocIndexRequest)(nil),              // 39: header.DocIndexRequest
	(*DocSearchRequest)(nil),             // 40: header.DocSearchRequest
	(*common.Context)(nil),               // 41: common.Context
	(*account.BusinessHours)(nil),        // 42: account.BusinessHours
}
var file_request_proto_depIdxs = []int32{
	41, // 0: header.UserReportRequest.ctx:type_name -> common.Context
	42, // 1: header.ConversationMetricsRequest.business_hours:type_name -> account.BusinessHours
	42, // 2: header.ConversationMetricsRequest.not_business_hours:type_name -> account.BusinessHours
	42, // 3: header.AgentMetricsRequest.business_hours:type_name -> account.BusinessHours
	42, // 4: header.AgentMetricsRequest.not_business_hours:type_name -> account.BusinessHours
	42, // 5: header.CallMetricsRequest.business_hours:type_name -> account.BusinessHours
	42, // 6: header.CallMetricsRequest.not_business_hours:type_name -> account.BusinessHours
	41, // 7: header.ListUserEventsRequest.ctx:type_name -> common.Context
	41, // 8: header.ListEventTypeRequest.ctx:type_name -> common.Context
	41, // 9: header.PresencesRequest.ctx:type_name -> common.Context
	41, // 10: header.ListNotiRequest.ctx:type_name -> common.Context
	41, // 11: header.UserRequest.ctx:type_name -> common.Context
	41, // 12: header.ListNotesRequest.ctx:type_name -> common.Context
	41, // 13: header.UpdateWorkflowSessionRequest.ctx:type_name -> common.Context
	41, // 14: header.ListWorkflowLogRequest.ctx:type_name -> common.Context
	41, // 15: header.BotsRequest.ctx:type_name -> common.Context
	41, // 16: header.ConversionRequest.ctx:type_name -> common.Context
	41, // 17: header.ReportCampaignRequest.ctx:type_name -> common.Context
	41, // 18: header.ReportWebPluginRequest.ctx:type_name -> common.Context
	41, // 19: header.WebPluginConversionRequest.ctx:type_name -> common.Context
	41, // 20: header.SearchLocationsRequest.ctx:type_name -> common.Context
	41, // 21: header.RecentIndexDeliveryRequest.ctx:type_name -> common.Context
	41, // 22: header.DeliveryRequest.ctx:type_name -> common.Context
	41, // 23: header.SearchRequest.ctx:type_name -> common.Context
	41, // 24: header.AvailibilityReportRequest.ctx:type_name -> common.Context
	41, // 25: header.FileUrlDownloadRequest.ctx:type_name -> common.Context
	42, // 26: header.OrderMetricsRequest.business_hours:type_name -> account.BusinessHours
	42, // 27: header.OrderMetricsRequest.not_business_hours:type_name -> account.BusinessHours
	41, // 28: header.OrdersRequest.ctx:type_name -> common.Context
	41, // 29: header.CountOrdersRequest.ctx:type_name -> common.Context
	32, // 30: header.CountOrdersRequest.queries:type_name -> header.OrdersRequest
	41, // 31: header.WorkflowReportRequest.ctx:type_name -> common.Context
	41, // 32: header.AuthorizeShopeeRequest.ctx:type_name -> common.Context
	41, // 33: header.ShopeeSyncProductRequest.ctx:type_name -> common.Context
	41, // 34: header.AddressAutocompleteRequest.ctx:type_name -> common.Context
	41, // 35: header.TasksRequest.ctx:type_name -> common.Context
	41, // 36: header.DocIndexRequest.ctx:type_name -> common.Context
	41, // 37: header.DocSearchRequest.ctx:type_name -> common.Context
	38, // [38:38] is the sub-list for method output_type
	38, // [38:38] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_request_proto_init() }
func file_request_proto_init() {
	if File_request_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_request_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEventTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PresencesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNotiRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNotesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWorkflowSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWorkflowLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BotsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportBotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionrunMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BotrunMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListObjectsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportCampaignRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportWebPluginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebPluginConversionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchLocationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecentIndexDeliveryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliveryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailibilityReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileUrlDownloadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizeShopeeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShopeeSyncProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressAutocompleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_request_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_request_proto_goTypes,
		DependencyIndexes: file_request_proto_depIdxs,
		EnumInfos:         file_request_proto_enumTypes,
		MessageInfos:      file_request_proto_msgTypes,
	}.Build()
	File_request_proto = out.File
	file_request_proto_rawDesc = nil
	file_request_proto_goTypes = nil
	file_request_proto_depIdxs = nil
}
