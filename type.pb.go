// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.0
// source: type.proto

package header

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RealtimeType int32

const (
	RealtimeType_a                   RealtimeType = 0
	RealtimeType_account_updated     RealtimeType = 11
	RealtimeType_agent_group_deleted RealtimeType = 12
	RealtimeType_agent_group_updated RealtimeType = 13
	RealtimeType_invitation_accepted RealtimeType = 14
	RealtimeType_agent_deleted       RealtimeType = 15
	RealtimeType_agent_updated       RealtimeType = 16
	// agent_permission_updated = 17;
	RealtimeType_my_user_upserted                   RealtimeType = 19
	RealtimeType_user_info_updated                  RealtimeType = 20
	RealtimeType_agent_presence_updated             RealtimeType = 21
	RealtimeType_user_created                       RealtimeType = 22
	RealtimeType_note_created                       RealtimeType = 23
	RealtimeType_presence_updated                   RealtimeType = 24
	RealtimeType_content_viewed                     RealtimeType = 25
	RealtimeType_topic_read                         RealtimeType = 30
	RealtimeType_subscribed_topic_updated           RealtimeType = 31
	RealtimeType_user_attribute_updated             RealtimeType = 33
	RealtimeType_user_attribute_deleted             RealtimeType = 34
	RealtimeType_notification_setting_updated       RealtimeType = 39
	RealtimeType_conversation_updated               RealtimeType = 40
	RealtimeType_message_sent                       RealtimeType = 41 // event.data.message
	RealtimeType_conversation_state_updated         RealtimeType = 42 // event.data.conversation
	RealtimeType_message_pong                       RealtimeType = 43 // event.data.message.pongs.0
	RealtimeType_conversation_joined                RealtimeType = 44 // event.data.conversation.memebers.0
	RealtimeType_conversation_invited               RealtimeType = 45
	RealtimeType_conversation_left                  RealtimeType = 46
	RealtimeType_conversation_tagged                RealtimeType = 47
	RealtimeType_conversation_untagged              RealtimeType = 48
	RealtimeType_integration_updated                RealtimeType = 49
	RealtimeType_integration_deleted                RealtimeType = 50
	RealtimeType_conversation_spam_marked           RealtimeType = 51 // event.data.conversation
	RealtimeType_conversation_spam_unmarked         RealtimeType = 52 // event.data.conversation
	RealtimeType_conversation_typing                RealtimeType = 54
	RealtimeType_conversation_unassigned            RealtimeType = 56
	RealtimeType_conversation_assigned              RealtimeType = 57
	RealtimeType_message_updated                    RealtimeType = 58 // event.data.message
	RealtimeType_conversation_viewing               RealtimeType = 59
	RealtimeType_conversation_rating_requested      RealtimeType = 60 // event.data.conversation
	RealtimeType_conversation_rated                 RealtimeType = 61 // event.data.conversation
	RealtimeType_my_conversation_list_updated       RealtimeType = 65 // conversation // actived = -1 => removed
	RealtimeType_tag_updated                        RealtimeType = 70
	RealtimeType_tag_deleted                        RealtimeType = 71
	RealtimeType_message_template_updated           RealtimeType = 72
	RealtimeType_message_template_deleted           RealtimeType = 73
	RealtimeType_agent_notification_created         RealtimeType = 88
	RealtimeType_agent_notification_read            RealtimeType = 114
	RealtimeType_agent_notibox_read                 RealtimeType = 115
	RealtimeType_bot_deleted                        RealtimeType = 89
	RealtimeType_bot_updated                        RealtimeType = 90
	RealtimeType_bot_debug_end                      RealtimeType = 91
	RealtimeType_bot_debug_begin_action             RealtimeType = 92
	RealtimeType_user_campaign_converted            RealtimeType = 95
	RealtimeType_user_returned                      RealtimeType = 96
	RealtimeType_user_first_visited                 RealtimeType = 97
	RealtimeType_bot_terminated                     RealtimeType = 98
	RealtimeType_user_alias_created                 RealtimeType = 99
	RealtimeType_site_user_verified                 RealtimeType = 100
	RealtimeType_site_updated                       RealtimeType = 101
	RealtimeType_site_up                            RealtimeType = 102
	RealtimeType_site_down                          RealtimeType = 103
	RealtimeType_language_updated                   RealtimeType = 104
	RealtimeType_user_note_updated                  RealtimeType = 105
	RealtimeType_user_note_deleted                  RealtimeType = 106
	RealtimeType_user_lead_owner_updated            RealtimeType = 107
	RealtimeType_user_lead_owner_deleted            RealtimeType = 108
	RealtimeType_user_label_updated                 RealtimeType = 109
	RealtimeType_user_label_deleted                 RealtimeType = 110
	RealtimeType_label_updated                      RealtimeType = 112
	RealtimeType_label_deleted                      RealtimeType = 113
	RealtimeType_contact_info_updated               RealtimeType = 116
	RealtimeType_internal_conversation_updated      RealtimeType = 117
	RealtimeType_message_pinned                     RealtimeType = 118 // event.data.message
	RealtimeType_message_unpinned                   RealtimeType = 119 // event.data.message
	RealtimeType_user_view_updated                  RealtimeType = 120
	RealtimeType_user_view_deleted                  RealtimeType = 121
	RealtimeType_login_session_updated              RealtimeType = 122
	RealtimeType_rule_updated                       RealtimeType = 123
	RealtimeType_rule_deleted                       RealtimeType = 124
	RealtimeType_ticket_rule_updated                RealtimeType = 125
	RealtimeType_ticket_rule_deleted                RealtimeType = 126
	RealtimeType_product_updated                    RealtimeType = 130
	RealtimeType_product_deleted                    RealtimeType = 131
	RealtimeType_product_feed_updated               RealtimeType = 132
	RealtimeType_product_feed_deleted               RealtimeType = 133
	RealtimeType_product_collection_updated         RealtimeType = 134
	RealtimeType_product_collection_deleted         RealtimeType = 135
	RealtimeType_order_created                      RealtimeType = 136
	RealtimeType_order_updated                      RealtimeType = 137
	RealtimeType_order_deleted                      RealtimeType = 138
	RealtimeType_currency_updated                   RealtimeType = 139
	RealtimeType_shop_setting_updated               RealtimeType = 140
	RealtimeType_order_event_created                RealtimeType = 141
	RealtimeType_shipping_address_updated           RealtimeType = 142
	RealtimeType_order_payment_made                 RealtimeType = 145 // data.bill deprecated
	RealtimeType_order_payment_deleted              RealtimeType = 146 // data.bill // deprecated
	RealtimeType_payment_deleted                    RealtimeType = 143 // data.bill like order payment _deleted
	RealtimeType_purchased                          RealtimeType = 144 // data.bill
	RealtimeType_purchase_canceled                  RealtimeType = 148 // data.bill
	RealtimeType_order_status_updated               RealtimeType = 147 // data.order_status
	RealtimeType_order_comment_added                RealtimeType = 149 // data.message
	RealtimeType_order_comment_deleted              RealtimeType = 150 // data.message
	RealtimeType_order_comment_updated              RealtimeType = 151 // data.message
	RealtimeType_order_history_updated              RealtimeType = 152
	RealtimeType_order_confirmed                    RealtimeType = 153
	RealtimeType_order_tagged                       RealtimeType = 217
	RealtimeType_order_untagged                     RealtimeType = 218
	RealtimeType_pipeline_created                   RealtimeType = 155
	RealtimeType_pipeline_updated                   RealtimeType = 156
	RealtimeType_pipeline_deleted                   RealtimeType = 157
	RealtimeType_task_created                       RealtimeType = 160
	RealtimeType_task_updated                       RealtimeType = 161
	RealtimeType_task_deleted                       RealtimeType = 162
	RealtimeType_task_comment_added                 RealtimeType = 163 // data.message
	RealtimeType_task_comment_deleted               RealtimeType = 164 // data.message
	RealtimeType_task_comment_updated               RealtimeType = 165 // data.message
	RealtimeType_task_history_updated               RealtimeType = 166
	RealtimeType_order_pipeline_stage_updated       RealtimeType = 168 // data.order
	RealtimeType_order_pipeline_stage_agent_updated RealtimeType = 169 // data.order
	RealtimeType_order_pipeline_stage_task_updated  RealtimeType = 170
	RealtimeType_notification_created               RealtimeType = 171 // data.notification
	RealtimeType_notification_updated               RealtimeType = 172 // data.notification
	RealtimeType_notification_read                  RealtimeType = 174 // data.notification
	RealtimeType_conversation_modal_created         RealtimeType = 180
	RealtimeType_conversation_modal_updated         RealtimeType = 181
	RealtimeType_conversation_modal_deleted         RealtimeType = 182
	RealtimeType_user_event_created                 RealtimeType = 190
	RealtimeType_user_event_updated                 RealtimeType = 191
	RealtimeType_phone_device_updated               RealtimeType = 192
	RealtimeType_phone_device_deleted               RealtimeType = 193
	RealtimeType_call_setting_updated               RealtimeType = 194
	// call_status_updated = 200; // answer, hang_up, dial_timeout, ringing, forward
	RealtimeType_call_answered                   RealtimeType = 195 // call_info
	RealtimeType_call_wait_key_timeout           RealtimeType = 196 // conversation
	RealtimeType_blocked_number_updated          RealtimeType = 201
	RealtimeType_blocked_number_deleted          RealtimeType = 202
	RealtimeType_greeting_audio_updated          RealtimeType = 203
	RealtimeType_lead_created                    RealtimeType = 204
	RealtimeType_call_rang                       RealtimeType = 205 // call_info
	RealtimeType_message_referral                RealtimeType = 206 // message
	RealtimeType_recent_call_updated             RealtimeType = 207 // agent
	RealtimeType_webrtc_candidate_added          RealtimeType = 210
	RealtimeType_call_invited                    RealtimeType = 211
	RealtimeType_call_ended                      RealtimeType = 212
	RealtimeType_call_joined                     RealtimeType = 213
	RealtimeType_call_left                       RealtimeType = 214
	RealtimeType_call_ringing                    RealtimeType = 215
	RealtimeType_call_transferred                RealtimeType = 216
	RealtimeType_agent_on_call_status_changed    RealtimeType = 220
	RealtimeType_event_type_updated              RealtimeType = 225
	RealtimeType_segment_updated                 RealtimeType = 226
	RealtimeType_segment_deleted                 RealtimeType = 227
	RealtimeType_campaign_updated                RealtimeType = 229
	RealtimeType_campaign_deleted                RealtimeType = 230
	RealtimeType_outbound_call_entry_updated     RealtimeType = 231
	RealtimeType_outbound_call_entry_deleted     RealtimeType = 232
	RealtimeType_workflow_pump                   RealtimeType = 233 // internal use only
	RealtimeType_outbound_call_updated           RealtimeType = 234
	RealtimeType_user_banned                     RealtimeType = 235 // banned_user
	RealtimeType_user_unbanned                   RealtimeType = 236 // banned_user
	RealtimeType_called                          RealtimeType = 238
	RealtimeType_payment_made                    RealtimeType = 239 // bill
	RealtimeType_payment_updated                 RealtimeType = 237 // bill
	RealtimeType_logged_in                       RealtimeType = 240
	RealtimeType_zns_sent                        RealtimeType = 241
	RealtimeType_channel_integrated              RealtimeType = 242
	RealtimeType_channel_removed                 RealtimeType = 243
	RealtimeType_credit_updated                  RealtimeType = 244
	RealtimeType_subiz_bill_updated              RealtimeType = 245
	RealtimeType_desktop_notification_pushed     RealtimeType = 249
	RealtimeType_ticket_created                  RealtimeType = 250
	RealtimeType_ticket_updated                  RealtimeType = 251
	RealtimeType_ticket_deleted                  RealtimeType = 252
	RealtimeType_ticket_tagged                   RealtimeType = 253
	RealtimeType_ticket_untagged                 RealtimeType = 254
	RealtimeType_ticket_rated                    RealtimeType = 256
	RealtimeType_ticket_priority_updated         RealtimeType = 257
	RealtimeType_ticket_state_updated            RealtimeType = 258
	RealtimeType_ticket_comment_added            RealtimeType = 259 // data.message
	RealtimeType_ticket_comment_deleted          RealtimeType = 260 // data.message
	RealtimeType_ticket_comment_updated          RealtimeType = 261 // data.message
	RealtimeType_ticket_joined                   RealtimeType = 262 // event.data.conversation.memebers.0
	RealtimeType_ticket_left                     RealtimeType = 264
	RealtimeType_ticket_typing                   RealtimeType = 265
	RealtimeType_ticket_unassigned               RealtimeType = 266
	RealtimeType_ticket_assigned                 RealtimeType = 267
	RealtimeType_ticket_reassigned               RealtimeType = 268
	RealtimeType_ticket_pong                     RealtimeType = 270
	RealtimeType_ticket_history_updated          RealtimeType = 281
	RealtimeType_ticket_type_created             RealtimeType = 282
	RealtimeType_ticket_type_updated             RealtimeType = 283
	RealtimeType_ticket_view_created             RealtimeType = 284
	RealtimeType_ticket_view_updated             RealtimeType = 285
	RealtimeType_ticket_view_deleted             RealtimeType = 286
	RealtimeType_live_users_updated              RealtimeType = 255
	RealtimeType_sla_policy_created              RealtimeType = 287
	RealtimeType_sla_policy_updated              RealtimeType = 288
	RealtimeType_sla_policy_deleted              RealtimeType = 289
	RealtimeType_knowledge_base_updated          RealtimeType = 290
	RealtimeType_knowledge_base_deleted          RealtimeType = 291
	RealtimeType_article_updated                 RealtimeType = 292
	RealtimeType_article_deleted                 RealtimeType = 293
	RealtimeType_article_category_updated        RealtimeType = 294
	RealtimeType_article_category_deleted        RealtimeType = 295
	RealtimeType_workflow_updated                RealtimeType = 300 // workflow
	RealtimeType_workflow_deleted                RealtimeType = 301 // workflow
	RealtimeType_workflow_pulsed                 RealtimeType = 302 // workflow_pulse
	RealtimeType_workflow_timeup                 RealtimeType = 303 // workflow_pulse
	RealtimeType_bank_account_updated            RealtimeType = 304
	RealtimeType_bank_account_deleted            RealtimeType = 305
	RealtimeType_segment_joined                  RealtimeType = 306
	RealtimeType_segment_left                    RealtimeType = 307
	RealtimeType_label_added                     RealtimeType = 309
	RealtimeType_label_removed                   RealtimeType = 310 //
	RealtimeType_order_draft_updated             RealtimeType = 311
	RealtimeType_order_draft_deleted             RealtimeType = 312
	RealtimeType_order_canceled                  RealtimeType = 313
	RealtimeType_ai_data_entry_updated           RealtimeType = 314
	RealtimeType_ai_data_entry_deleted           RealtimeType = 315
	RealtimeType_ai_data_group_updated           RealtimeType = 316
	RealtimeType_ai_data_group_deleted           RealtimeType = 317
	RealtimeType_ai_agent_updated                RealtimeType = 318
	RealtimeType_ai_agent_deleted                RealtimeType = 319
	RealtimeType_zns_template_created            RealtimeType = 320
	RealtimeType_zns_template_updated            RealtimeType = 321
	RealtimeType_zns_media_created               RealtimeType = 322
	RealtimeType_zns_media_updated               RealtimeType = 323
	RealtimeType_email_signature_created         RealtimeType = 325
	RealtimeType_email_signature_updated         RealtimeType = 326
	RealtimeType_email_signature_deleted         RealtimeType = 327
	RealtimeType_attribute_collected             RealtimeType = 328
	RealtimeType_llm_tool_called                 RealtimeType = 329
	RealtimeType_form_submitted                  RealtimeType = 339
	RealtimeType_form_updated                    RealtimeType = 340
	RealtimeType_form_created                    RealtimeType = 341
	RealtimeType_form_deleted                    RealtimeType = 342
	RealtimeType_facebook_event_lead_sent        RealtimeType = 343
	RealtimeType_facebook_event_purchase_sent    RealtimeType = 344
	RealtimeType_facebook_event_add_to_cart_sent RealtimeType = 345
	RealtimeType_segment_sync_updated            RealtimeType = 350
	RealtimeType_segment_sync_deleted            RealtimeType = 351
)

// Enum value maps for RealtimeType.
var (
	RealtimeType_name = map[int32]string{
		0:   "a",
		11:  "account_updated",
		12:  "agent_group_deleted",
		13:  "agent_group_updated",
		14:  "invitation_accepted",
		15:  "agent_deleted",
		16:  "agent_updated",
		19:  "my_user_upserted",
		20:  "user_info_updated",
		21:  "agent_presence_updated",
		22:  "user_created",
		23:  "note_created",
		24:  "presence_updated",
		25:  "content_viewed",
		30:  "topic_read",
		31:  "subscribed_topic_updated",
		33:  "user_attribute_updated",
		34:  "user_attribute_deleted",
		39:  "notification_setting_updated",
		40:  "conversation_updated",
		41:  "message_sent",
		42:  "conversation_state_updated",
		43:  "message_pong",
		44:  "conversation_joined",
		45:  "conversation_invited",
		46:  "conversation_left",
		47:  "conversation_tagged",
		48:  "conversation_untagged",
		49:  "integration_updated",
		50:  "integration_deleted",
		51:  "conversation_spam_marked",
		52:  "conversation_spam_unmarked",
		54:  "conversation_typing",
		56:  "conversation_unassigned",
		57:  "conversation_assigned",
		58:  "message_updated",
		59:  "conversation_viewing",
		60:  "conversation_rating_requested",
		61:  "conversation_rated",
		65:  "my_conversation_list_updated",
		70:  "tag_updated",
		71:  "tag_deleted",
		72:  "message_template_updated",
		73:  "message_template_deleted",
		88:  "agent_notification_created",
		114: "agent_notification_read",
		115: "agent_notibox_read",
		89:  "bot_deleted",
		90:  "bot_updated",
		91:  "bot_debug_end",
		92:  "bot_debug_begin_action",
		95:  "user_campaign_converted",
		96:  "user_returned",
		97:  "user_first_visited",
		98:  "bot_terminated",
		99:  "user_alias_created",
		100: "site_user_verified",
		101: "site_updated",
		102: "site_up",
		103: "site_down",
		104: "language_updated",
		105: "user_note_updated",
		106: "user_note_deleted",
		107: "user_lead_owner_updated",
		108: "user_lead_owner_deleted",
		109: "user_label_updated",
		110: "user_label_deleted",
		112: "label_updated",
		113: "label_deleted",
		116: "contact_info_updated",
		117: "internal_conversation_updated",
		118: "message_pinned",
		119: "message_unpinned",
		120: "user_view_updated",
		121: "user_view_deleted",
		122: "login_session_updated",
		123: "rule_updated",
		124: "rule_deleted",
		125: "ticket_rule_updated",
		126: "ticket_rule_deleted",
		130: "product_updated",
		131: "product_deleted",
		132: "product_feed_updated",
		133: "product_feed_deleted",
		134: "product_collection_updated",
		135: "product_collection_deleted",
		136: "order_created",
		137: "order_updated",
		138: "order_deleted",
		139: "currency_updated",
		140: "shop_setting_updated",
		141: "order_event_created",
		142: "shipping_address_updated",
		145: "order_payment_made",
		146: "order_payment_deleted",
		143: "payment_deleted",
		144: "purchased",
		148: "purchase_canceled",
		147: "order_status_updated",
		149: "order_comment_added",
		150: "order_comment_deleted",
		151: "order_comment_updated",
		152: "order_history_updated",
		153: "order_confirmed",
		217: "order_tagged",
		218: "order_untagged",
		155: "pipeline_created",
		156: "pipeline_updated",
		157: "pipeline_deleted",
		160: "task_created",
		161: "task_updated",
		162: "task_deleted",
		163: "task_comment_added",
		164: "task_comment_deleted",
		165: "task_comment_updated",
		166: "task_history_updated",
		168: "order_pipeline_stage_updated",
		169: "order_pipeline_stage_agent_updated",
		170: "order_pipeline_stage_task_updated",
		171: "notification_created",
		172: "notification_updated",
		174: "notification_read",
		180: "conversation_modal_created",
		181: "conversation_modal_updated",
		182: "conversation_modal_deleted",
		190: "user_event_created",
		191: "user_event_updated",
		192: "phone_device_updated",
		193: "phone_device_deleted",
		194: "call_setting_updated",
		195: "call_answered",
		196: "call_wait_key_timeout",
		201: "blocked_number_updated",
		202: "blocked_number_deleted",
		203: "greeting_audio_updated",
		204: "lead_created",
		205: "call_rang",
		206: "message_referral",
		207: "recent_call_updated",
		210: "webrtc_candidate_added",
		211: "call_invited",
		212: "call_ended",
		213: "call_joined",
		214: "call_left",
		215: "call_ringing",
		216: "call_transferred",
		220: "agent_on_call_status_changed",
		225: "event_type_updated",
		226: "segment_updated",
		227: "segment_deleted",
		229: "campaign_updated",
		230: "campaign_deleted",
		231: "outbound_call_entry_updated",
		232: "outbound_call_entry_deleted",
		233: "workflow_pump",
		234: "outbound_call_updated",
		235: "user_banned",
		236: "user_unbanned",
		238: "called",
		239: "payment_made",
		237: "payment_updated",
		240: "logged_in",
		241: "zns_sent",
		242: "channel_integrated",
		243: "channel_removed",
		244: "credit_updated",
		245: "subiz_bill_updated",
		249: "desktop_notification_pushed",
		250: "ticket_created",
		251: "ticket_updated",
		252: "ticket_deleted",
		253: "ticket_tagged",
		254: "ticket_untagged",
		256: "ticket_rated",
		257: "ticket_priority_updated",
		258: "ticket_state_updated",
		259: "ticket_comment_added",
		260: "ticket_comment_deleted",
		261: "ticket_comment_updated",
		262: "ticket_joined",
		264: "ticket_left",
		265: "ticket_typing",
		266: "ticket_unassigned",
		267: "ticket_assigned",
		268: "ticket_reassigned",
		270: "ticket_pong",
		281: "ticket_history_updated",
		282: "ticket_type_created",
		283: "ticket_type_updated",
		284: "ticket_view_created",
		285: "ticket_view_updated",
		286: "ticket_view_deleted",
		255: "live_users_updated",
		287: "sla_policy_created",
		288: "sla_policy_updated",
		289: "sla_policy_deleted",
		290: "knowledge_base_updated",
		291: "knowledge_base_deleted",
		292: "article_updated",
		293: "article_deleted",
		294: "article_category_updated",
		295: "article_category_deleted",
		300: "workflow_updated",
		301: "workflow_deleted",
		302: "workflow_pulsed",
		303: "workflow_timeup",
		304: "bank_account_updated",
		305: "bank_account_deleted",
		306: "segment_joined",
		307: "segment_left",
		309: "label_added",
		310: "label_removed",
		311: "order_draft_updated",
		312: "order_draft_deleted",
		313: "order_canceled",
		314: "ai_data_entry_updated",
		315: "ai_data_entry_deleted",
		316: "ai_data_group_updated",
		317: "ai_data_group_deleted",
		318: "ai_agent_updated",
		319: "ai_agent_deleted",
		320: "zns_template_created",
		321: "zns_template_updated",
		322: "zns_media_created",
		323: "zns_media_updated",
		325: "email_signature_created",
		326: "email_signature_updated",
		327: "email_signature_deleted",
		328: "attribute_collected",
		329: "llm_tool_called",
		339: "form_submitted",
		340: "form_updated",
		341: "form_created",
		342: "form_deleted",
		343: "facebook_event_lead_sent",
		344: "facebook_event_purchase_sent",
		345: "facebook_event_add_to_cart_sent",
		350: "segment_sync_updated",
		351: "segment_sync_deleted",
	}
	RealtimeType_value = map[string]int32{
		"a":                                  0,
		"account_updated":                    11,
		"agent_group_deleted":                12,
		"agent_group_updated":                13,
		"invitation_accepted":                14,
		"agent_deleted":                      15,
		"agent_updated":                      16,
		"my_user_upserted":                   19,
		"user_info_updated":                  20,
		"agent_presence_updated":             21,
		"user_created":                       22,
		"note_created":                       23,
		"presence_updated":                   24,
		"content_viewed":                     25,
		"topic_read":                         30,
		"subscribed_topic_updated":           31,
		"user_attribute_updated":             33,
		"user_attribute_deleted":             34,
		"notification_setting_updated":       39,
		"conversation_updated":               40,
		"message_sent":                       41,
		"conversation_state_updated":         42,
		"message_pong":                       43,
		"conversation_joined":                44,
		"conversation_invited":               45,
		"conversation_left":                  46,
		"conversation_tagged":                47,
		"conversation_untagged":              48,
		"integration_updated":                49,
		"integration_deleted":                50,
		"conversation_spam_marked":           51,
		"conversation_spam_unmarked":         52,
		"conversation_typing":                54,
		"conversation_unassigned":            56,
		"conversation_assigned":              57,
		"message_updated":                    58,
		"conversation_viewing":               59,
		"conversation_rating_requested":      60,
		"conversation_rated":                 61,
		"my_conversation_list_updated":       65,
		"tag_updated":                        70,
		"tag_deleted":                        71,
		"message_template_updated":           72,
		"message_template_deleted":           73,
		"agent_notification_created":         88,
		"agent_notification_read":            114,
		"agent_notibox_read":                 115,
		"bot_deleted":                        89,
		"bot_updated":                        90,
		"bot_debug_end":                      91,
		"bot_debug_begin_action":             92,
		"user_campaign_converted":            95,
		"user_returned":                      96,
		"user_first_visited":                 97,
		"bot_terminated":                     98,
		"user_alias_created":                 99,
		"site_user_verified":                 100,
		"site_updated":                       101,
		"site_up":                            102,
		"site_down":                          103,
		"language_updated":                   104,
		"user_note_updated":                  105,
		"user_note_deleted":                  106,
		"user_lead_owner_updated":            107,
		"user_lead_owner_deleted":            108,
		"user_label_updated":                 109,
		"user_label_deleted":                 110,
		"label_updated":                      112,
		"label_deleted":                      113,
		"contact_info_updated":               116,
		"internal_conversation_updated":      117,
		"message_pinned":                     118,
		"message_unpinned":                   119,
		"user_view_updated":                  120,
		"user_view_deleted":                  121,
		"login_session_updated":              122,
		"rule_updated":                       123,
		"rule_deleted":                       124,
		"ticket_rule_updated":                125,
		"ticket_rule_deleted":                126,
		"product_updated":                    130,
		"product_deleted":                    131,
		"product_feed_updated":               132,
		"product_feed_deleted":               133,
		"product_collection_updated":         134,
		"product_collection_deleted":         135,
		"order_created":                      136,
		"order_updated":                      137,
		"order_deleted":                      138,
		"currency_updated":                   139,
		"shop_setting_updated":               140,
		"order_event_created":                141,
		"shipping_address_updated":           142,
		"order_payment_made":                 145,
		"order_payment_deleted":              146,
		"payment_deleted":                    143,
		"purchased":                          144,
		"purchase_canceled":                  148,
		"order_status_updated":               147,
		"order_comment_added":                149,
		"order_comment_deleted":              150,
		"order_comment_updated":              151,
		"order_history_updated":              152,
		"order_confirmed":                    153,
		"order_tagged":                       217,
		"order_untagged":                     218,
		"pipeline_created":                   155,
		"pipeline_updated":                   156,
		"pipeline_deleted":                   157,
		"task_created":                       160,
		"task_updated":                       161,
		"task_deleted":                       162,
		"task_comment_added":                 163,
		"task_comment_deleted":               164,
		"task_comment_updated":               165,
		"task_history_updated":               166,
		"order_pipeline_stage_updated":       168,
		"order_pipeline_stage_agent_updated": 169,
		"order_pipeline_stage_task_updated":  170,
		"notification_created":               171,
		"notification_updated":               172,
		"notification_read":                  174,
		"conversation_modal_created":         180,
		"conversation_modal_updated":         181,
		"conversation_modal_deleted":         182,
		"user_event_created":                 190,
		"user_event_updated":                 191,
		"phone_device_updated":               192,
		"phone_device_deleted":               193,
		"call_setting_updated":               194,
		"call_answered":                      195,
		"call_wait_key_timeout":              196,
		"blocked_number_updated":             201,
		"blocked_number_deleted":             202,
		"greeting_audio_updated":             203,
		"lead_created":                       204,
		"call_rang":                          205,
		"message_referral":                   206,
		"recent_call_updated":                207,
		"webrtc_candidate_added":             210,
		"call_invited":                       211,
		"call_ended":                         212,
		"call_joined":                        213,
		"call_left":                          214,
		"call_ringing":                       215,
		"call_transferred":                   216,
		"agent_on_call_status_changed":       220,
		"event_type_updated":                 225,
		"segment_updated":                    226,
		"segment_deleted":                    227,
		"campaign_updated":                   229,
		"campaign_deleted":                   230,
		"outbound_call_entry_updated":        231,
		"outbound_call_entry_deleted":        232,
		"workflow_pump":                      233,
		"outbound_call_updated":              234,
		"user_banned":                        235,
		"user_unbanned":                      236,
		"called":                             238,
		"payment_made":                       239,
		"payment_updated":                    237,
		"logged_in":                          240,
		"zns_sent":                           241,
		"channel_integrated":                 242,
		"channel_removed":                    243,
		"credit_updated":                     244,
		"subiz_bill_updated":                 245,
		"desktop_notification_pushed":        249,
		"ticket_created":                     250,
		"ticket_updated":                     251,
		"ticket_deleted":                     252,
		"ticket_tagged":                      253,
		"ticket_untagged":                    254,
		"ticket_rated":                       256,
		"ticket_priority_updated":            257,
		"ticket_state_updated":               258,
		"ticket_comment_added":               259,
		"ticket_comment_deleted":             260,
		"ticket_comment_updated":             261,
		"ticket_joined":                      262,
		"ticket_left":                        264,
		"ticket_typing":                      265,
		"ticket_unassigned":                  266,
		"ticket_assigned":                    267,
		"ticket_reassigned":                  268,
		"ticket_pong":                        270,
		"ticket_history_updated":             281,
		"ticket_type_created":                282,
		"ticket_type_updated":                283,
		"ticket_view_created":                284,
		"ticket_view_updated":                285,
		"ticket_view_deleted":                286,
		"live_users_updated":                 255,
		"sla_policy_created":                 287,
		"sla_policy_updated":                 288,
		"sla_policy_deleted":                 289,
		"knowledge_base_updated":             290,
		"knowledge_base_deleted":             291,
		"article_updated":                    292,
		"article_deleted":                    293,
		"article_category_updated":           294,
		"article_category_deleted":           295,
		"workflow_updated":                   300,
		"workflow_deleted":                   301,
		"workflow_pulsed":                    302,
		"workflow_timeup":                    303,
		"bank_account_updated":               304,
		"bank_account_deleted":               305,
		"segment_joined":                     306,
		"segment_left":                       307,
		"label_added":                        309,
		"label_removed":                      310,
		"order_draft_updated":                311,
		"order_draft_deleted":                312,
		"order_canceled":                     313,
		"ai_data_entry_updated":              314,
		"ai_data_entry_deleted":              315,
		"ai_data_group_updated":              316,
		"ai_data_group_deleted":              317,
		"ai_agent_updated":                   318,
		"ai_agent_deleted":                   319,
		"zns_template_created":               320,
		"zns_template_updated":               321,
		"zns_media_created":                  322,
		"zns_media_updated":                  323,
		"email_signature_created":            325,
		"email_signature_updated":            326,
		"email_signature_deleted":            327,
		"attribute_collected":                328,
		"llm_tool_called":                    329,
		"form_submitted":                     339,
		"form_updated":                       340,
		"form_created":                       341,
		"form_deleted":                       342,
		"facebook_event_lead_sent":           343,
		"facebook_event_purchase_sent":       344,
		"facebook_event_add_to_cart_sent":    345,
		"segment_sync_updated":               350,
		"segment_sync_deleted":               351,
	}
)

func (x RealtimeType) Enum() *RealtimeType {
	p := new(RealtimeType)
	*p = x
	return p
}

func (x RealtimeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RealtimeType) Descriptor() protoreflect.EnumDescriptor {
	return file_type_proto_enumTypes[0].Descriptor()
}

func (RealtimeType) Type() protoreflect.EnumType {
	return &file_type_proto_enumTypes[0]
}

func (x RealtimeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RealtimeType.Descriptor instead.
func (RealtimeType) EnumDescriptor() ([]byte, []int) {
	return file_type_proto_rawDescGZIP(), []int{0}
}

type TextTransform struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"` // trim, lower_case, upper_case
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TextTransform) Reset() {
	*x = TextTransform{}
	mi := &file_type_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TextTransform) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextTransform) ProtoMessage() {}

func (x *TextTransform) ProtoReflect() protoreflect.Message {
	mi := &file_type_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextTransform.ProtoReflect.Descriptor instead.
func (*TextTransform) Descriptor() ([]byte, []int) {
	return file_type_proto_rawDescGZIP(), []int{0}
}

func (x *TextTransform) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type FloatTransform struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"` // round, ceil, floor
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FloatTransform) Reset() {
	*x = FloatTransform{}
	mi := &file_type_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FloatTransform) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatTransform) ProtoMessage() {}

func (x *FloatTransform) ProtoReflect() protoreflect.Message {
	mi := &file_type_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatTransform.ProtoReflect.Descriptor instead.
func (*FloatTransform) Descriptor() ([]byte, []int) {
	return file_type_proto_rawDescGZIP(), []int{1}
}

func (x *FloatTransform) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type TextCondition struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Op              string                 `protobuf:"bytes,2,opt,name=op,proto3" json:"op,omitempty"` // end_with
	Transforms      []*TextTransform       `protobuf:"bytes,3,rep,name=transforms,proto3" json:"transforms,omitempty"`
	HasValue        bool                   `protobuf:"varint,4,opt,name=has_value,json=hasValue,proto3" json:"has_value,omitempty"` // true or false
	Empty           bool                   `protobuf:"varint,5,opt,name=empty,proto3" json:"empty,omitempty"`                       // true or false
	Eq              []string               `protobuf:"bytes,6,rep,name=eq,proto3" json:"eq,omitempty"`
	Neq             []string               `protobuf:"bytes,7,rep,name=neq,proto3" json:"neq,omitempty"`
	StartWith       []string               `protobuf:"bytes,8,rep,name=start_with,json=startWith,proto3" json:"start_with,omitempty"`
	EndWith         []string               `protobuf:"bytes,9,rep,name=end_with,json=endWith,proto3" json:"end_with,omitempty"`
	Contain         []string               `protobuf:"bytes,10,rep,name=contain,proto3" json:"contain,omitempty"`
	Regex           string                 `protobuf:"bytes,12,opt,name=regex,proto3" json:"regex,omitempty"`
	NotContain      []string               `protobuf:"bytes,13,rep,name=not_contain,json=notContain,proto3" json:"not_contain,omitempty"`
	NotStartWith    []string               `protobuf:"bytes,15,rep,name=not_start_with,json=notStartWith,proto3" json:"not_start_with,omitempty"`
	NotEndWith      []string               `protobuf:"bytes,16,rep,name=not_end_with,json=notEndWith,proto3" json:"not_end_with,omitempty"`
	ContainAll      []string               `protobuf:"bytes,18,rep,name=contain_all,json=containAll,proto3" json:"contain_all,omitempty"`
	CaseSensitive   bool                   `protobuf:"varint,30,opt,name=case_sensitive,json=caseSensitive,proto3" json:"case_sensitive,omitempty"`
	AccentSensitive bool                   `protobuf:"varint,31,opt,name=accent_sensitive,json=accentSensitive,proto3" json:"accent_sensitive,omitempty"`
	EqVar           []string               `protobuf:"bytes,40,rep,name=eq_var,json=eqVar,proto3" json:"eq_var,omitempty"`
	NeqVar          []string               `protobuf:"bytes,47,rep,name=neq_var,json=neqVar,proto3" json:"neq_var,omitempty"`
	StartWithVar    []string               `protobuf:"bytes,48,rep,name=start_with_var,json=startWithVar,proto3" json:"start_with_var,omitempty"`
	EndWithVar      []string               `protobuf:"bytes,49,rep,name=end_with_var,json=endWithVar,proto3" json:"end_with_var,omitempty"`
	ContainVar      []string               `protobuf:"bytes,50,rep,name=contain_var,json=containVar,proto3" json:"contain_var,omitempty"`
	RegexVar        string                 `protobuf:"bytes,52,opt,name=regex_var,json=regexVar,proto3" json:"regex_var,omitempty"`
	NotContainVar   []string               `protobuf:"bytes,53,rep,name=not_contain_var,json=notContainVar,proto3" json:"not_contain_var,omitempty"`
	NotStartWithVar []string               `protobuf:"bytes,55,rep,name=not_start_with_var,json=notStartWithVar,proto3" json:"not_start_with_var,omitempty"`
	NotEndWithVar   []string               `protobuf:"bytes,56,rep,name=not_end_with_var,json=notEndWithVar,proto3" json:"not_end_with_var,omitempty"`
	ContainAllVarr  []string               `protobuf:"bytes,58,rep,name=contain_all_varr,json=containAllVarr,proto3" json:"contain_all_varr,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TextCondition) Reset() {
	*x = TextCondition{}
	mi := &file_type_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TextCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextCondition) ProtoMessage() {}

func (x *TextCondition) ProtoReflect() protoreflect.Message {
	mi := &file_type_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextCondition.ProtoReflect.Descriptor instead.
func (*TextCondition) Descriptor() ([]byte, []int) {
	return file_type_proto_rawDescGZIP(), []int{2}
}

func (x *TextCondition) GetOp() string {
	if x != nil {
		return x.Op
	}
	return ""
}

func (x *TextCondition) GetTransforms() []*TextTransform {
	if x != nil {
		return x.Transforms
	}
	return nil
}

func (x *TextCondition) GetHasValue() bool {
	if x != nil {
		return x.HasValue
	}
	return false
}

func (x *TextCondition) GetEmpty() bool {
	if x != nil {
		return x.Empty
	}
	return false
}

func (x *TextCondition) GetEq() []string {
	if x != nil {
		return x.Eq
	}
	return nil
}

func (x *TextCondition) GetNeq() []string {
	if x != nil {
		return x.Neq
	}
	return nil
}

func (x *TextCondition) GetStartWith() []string {
	if x != nil {
		return x.StartWith
	}
	return nil
}

func (x *TextCondition) GetEndWith() []string {
	if x != nil {
		return x.EndWith
	}
	return nil
}

func (x *TextCondition) GetContain() []string {
	if x != nil {
		return x.Contain
	}
	return nil
}

func (x *TextCondition) GetRegex() string {
	if x != nil {
		return x.Regex
	}
	return ""
}

func (x *TextCondition) GetNotContain() []string {
	if x != nil {
		return x.NotContain
	}
	return nil
}

func (x *TextCondition) GetNotStartWith() []string {
	if x != nil {
		return x.NotStartWith
	}
	return nil
}

func (x *TextCondition) GetNotEndWith() []string {
	if x != nil {
		return x.NotEndWith
	}
	return nil
}

func (x *TextCondition) GetContainAll() []string {
	if x != nil {
		return x.ContainAll
	}
	return nil
}

func (x *TextCondition) GetCaseSensitive() bool {
	if x != nil {
		return x.CaseSensitive
	}
	return false
}

func (x *TextCondition) GetAccentSensitive() bool {
	if x != nil {
		return x.AccentSensitive
	}
	return false
}

func (x *TextCondition) GetEqVar() []string {
	if x != nil {
		return x.EqVar
	}
	return nil
}

func (x *TextCondition) GetNeqVar() []string {
	if x != nil {
		return x.NeqVar
	}
	return nil
}

func (x *TextCondition) GetStartWithVar() []string {
	if x != nil {
		return x.StartWithVar
	}
	return nil
}

func (x *TextCondition) GetEndWithVar() []string {
	if x != nil {
		return x.EndWithVar
	}
	return nil
}

func (x *TextCondition) GetContainVar() []string {
	if x != nil {
		return x.ContainVar
	}
	return nil
}

func (x *TextCondition) GetRegexVar() string {
	if x != nil {
		return x.RegexVar
	}
	return ""
}

func (x *TextCondition) GetNotContainVar() []string {
	if x != nil {
		return x.NotContainVar
	}
	return nil
}

func (x *TextCondition) GetNotStartWithVar() []string {
	if x != nil {
		return x.NotStartWithVar
	}
	return nil
}

func (x *TextCondition) GetNotEndWithVar() []string {
	if x != nil {
		return x.NotEndWithVar
	}
	return nil
}

func (x *TextCondition) GetContainAllVarr() []string {
	if x != nil {
		return x.ContainAllVarr
	}
	return nil
}

type EventConditionFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Key           string                 `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"` // event, id, keyword, lead_owner attr:fullname segment user_label
	Type          string                 `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Text          *TextCondition         `protobuf:"bytes,6,opt,name=text,proto3" json:"text,omitempty"`
	Boolean       *BooleanCondition      `protobuf:"bytes,8,opt,name=boolean,proto3" json:"boolean,omitempty"`
	Number        *FloatCondition        `protobuf:"bytes,9,opt,name=number,proto3" json:"number,omitempty"`
	Datetime      *DatetimeCondition     `protobuf:"bytes,10,opt,name=datetime,proto3" json:"datetime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventConditionFilter) Reset() {
	*x = EventConditionFilter{}
	mi := &file_type_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventConditionFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventConditionFilter) ProtoMessage() {}

func (x *EventConditionFilter) ProtoReflect() protoreflect.Message {
	mi := &file_type_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventConditionFilter.ProtoReflect.Descriptor instead.
func (*EventConditionFilter) Descriptor() ([]byte, []int) {
	return file_type_proto_rawDescGZIP(), []int{3}
}

func (x *EventConditionFilter) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventConditionFilter) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *EventConditionFilter) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *EventConditionFilter) GetText() *TextCondition {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *EventConditionFilter) GetBoolean() *BooleanCondition {
	if x != nil {
		return x.Boolean
	}
	return nil
}

func (x *EventConditionFilter) GetNumber() *FloatCondition {
	if x != nil {
		return x.Number
	}
	return nil
}

func (x *EventConditionFilter) GetDatetime() *DatetimeCondition {
	if x != nil {
		return x.Datetime
	}
	return nil
}

type EventCondition struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Type   string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`                   // attribute_updated, form_submitted, page_viewed
	UiType string                 `protobuf:"bytes,4,opt,name=ui_type,json=uiType,proto3" json:"ui_type,omitempty"` // form, page, purchase, email
	// created
	Inverse       bool                    `protobuf:"varint,5,opt,name=inverse,proto3" json:"inverse,omitempty"`                // have not been performed
	AtLeast       int32                   `protobuf:"varint,6,opt,name=at_least,json=atLeast,proto3" json:"at_least,omitempty"` // have been performanced at_least [___] times
	Created       *DatetimeCondition      `protobuf:"bytes,7,opt,name=created,proto3" json:"created,omitempty"`
	Filters       []*EventConditionFilter `protobuf:"bytes,8,rep,name=filters,proto3" json:"filters,omitempty"` // field: price, operator eq, value 5
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventCondition) Reset() {
	*x = EventCondition{}
	mi := &file_type_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventCondition) ProtoMessage() {}

func (x *EventCondition) ProtoReflect() protoreflect.Message {
	mi := &file_type_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventCondition.ProtoReflect.Descriptor instead.
func (*EventCondition) Descriptor() ([]byte, []int) {
	return file_type_proto_rawDescGZIP(), []int{4}
}

func (x *EventCondition) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *EventCondition) GetUiType() string {
	if x != nil {
		return x.UiType
	}
	return ""
}

func (x *EventCondition) GetInverse() bool {
	if x != nil {
		return x.Inverse
	}
	return false
}

func (x *EventCondition) GetAtLeast() int32 {
	if x != nil {
		return x.AtLeast
	}
	return 0
}

func (x *EventCondition) GetCreated() *DatetimeCondition {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *EventCondition) GetFilters() []*EventConditionFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type BooleanCondition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Op            string                 `protobuf:"bytes,2,opt,name=op,proto3" json:"op,omitempty"` // has_value, true, false, any
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BooleanCondition) Reset() {
	*x = BooleanCondition{}
	mi := &file_type_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BooleanCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BooleanCondition) ProtoMessage() {}

func (x *BooleanCondition) ProtoReflect() protoreflect.Message {
	mi := &file_type_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BooleanCondition.ProtoReflect.Descriptor instead.
func (*BooleanCondition) Descriptor() ([]byte, []int) {
	return file_type_proto_rawDescGZIP(), []int{5}
}

func (x *BooleanCondition) GetOp() string {
	if x != nil {
		return x.Op
	}
	return ""
}

type FloatCondition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Op            string                 `protobuf:"bytes,2,opt,name=op,proto3" json:"op,omitempty"`
	Transforms    []*FloatTransform      `protobuf:"bytes,3,rep,name=transforms,proto3" json:"transforms,omitempty"`
	HasValue      bool                   `protobuf:"varint,4,opt,name=has_value,json=hasValue,proto3" json:"has_value,omitempty"`
	Gt            float64                `protobuf:"fixed64,5,opt,name=gt,proto3" json:"gt,omitempty"`
	Gte           float64                `protobuf:"fixed64,6,opt,name=gte,proto3" json:"gte,omitempty"`
	Lt            float64                `protobuf:"fixed64,7,opt,name=lt,proto3" json:"lt,omitempty"`
	Lte           float64                `protobuf:"fixed64,8,opt,name=lte,proto3" json:"lte,omitempty"`
	Eq            []float64              `protobuf:"fixed64,10,rep,packed,name=eq,proto3" json:"eq,omitempty"`
	Neq           []float64              `protobuf:"fixed64,11,rep,packed,name=neq,proto3" json:"neq,omitempty"`
	InRange       []float64              `protobuf:"fixed64,13,rep,packed,name=in_range,json=inRange,proto3" json:"in_range,omitempty"`
	NotInRange    []float64              `protobuf:"fixed64,14,rep,packed,name=not_in_range,json=notInRange,proto3" json:"not_in_range,omitempty"`
	EqVar         []string               `protobuf:"bytes,15,rep,name=eq_var,json=eqVar,proto3" json:"eq_var,omitempty"`
	NeqVar        []string               `protobuf:"bytes,16,rep,name=neq_var,json=neqVar,proto3" json:"neq_var,omitempty"`
	GtVar         string                 `protobuf:"bytes,17,opt,name=gt_var,json=gtVar,proto3" json:"gt_var,omitempty"`
	GteVar        string                 `protobuf:"bytes,18,opt,name=gte_var,json=gteVar,proto3" json:"gte_var,omitempty"`
	LtVar         string                 `protobuf:"bytes,19,opt,name=lt_var,json=ltVar,proto3" json:"lt_var,omitempty"`
	LteVar        string                 `protobuf:"bytes,20,opt,name=lte_var,json=lteVar,proto3" json:"lte_var,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FloatCondition) Reset() {
	*x = FloatCondition{}
	mi := &file_type_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FloatCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatCondition) ProtoMessage() {}

func (x *FloatCondition) ProtoReflect() protoreflect.Message {
	mi := &file_type_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatCondition.ProtoReflect.Descriptor instead.
func (*FloatCondition) Descriptor() ([]byte, []int) {
	return file_type_proto_rawDescGZIP(), []int{6}
}

func (x *FloatCondition) GetOp() string {
	if x != nil {
		return x.Op
	}
	return ""
}

func (x *FloatCondition) GetTransforms() []*FloatTransform {
	if x != nil {
		return x.Transforms
	}
	return nil
}

func (x *FloatCondition) GetHasValue() bool {
	if x != nil {
		return x.HasValue
	}
	return false
}

func (x *FloatCondition) GetGt() float64 {
	if x != nil {
		return x.Gt
	}
	return 0
}

func (x *FloatCondition) GetGte() float64 {
	if x != nil {
		return x.Gte
	}
	return 0
}

func (x *FloatCondition) GetLt() float64 {
	if x != nil {
		return x.Lt
	}
	return 0
}

func (x *FloatCondition) GetLte() float64 {
	if x != nil {
		return x.Lte
	}
	return 0
}

func (x *FloatCondition) GetEq() []float64 {
	if x != nil {
		return x.Eq
	}
	return nil
}

func (x *FloatCondition) GetNeq() []float64 {
	if x != nil {
		return x.Neq
	}
	return nil
}

func (x *FloatCondition) GetInRange() []float64 {
	if x != nil {
		return x.InRange
	}
	return nil
}

func (x *FloatCondition) GetNotInRange() []float64 {
	if x != nil {
		return x.NotInRange
	}
	return nil
}

func (x *FloatCondition) GetEqVar() []string {
	if x != nil {
		return x.EqVar
	}
	return nil
}

func (x *FloatCondition) GetNeqVar() []string {
	if x != nil {
		return x.NeqVar
	}
	return nil
}

func (x *FloatCondition) GetGtVar() string {
	if x != nil {
		return x.GtVar
	}
	return ""
}

func (x *FloatCondition) GetGteVar() string {
	if x != nil {
		return x.GteVar
	}
	return ""
}

func (x *FloatCondition) GetLtVar() string {
	if x != nil {
		return x.LtVar
	}
	return ""
}

func (x *FloatCondition) GetLteVar() string {
	if x != nil {
		return x.LteVar
	}
	return ""
}

type DatetimeCondition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// relative: is_empty, in_business_hour, non_business_hour, today, yesterday, last_week, this_week, last_month, this_month, last, before_ago
	// absolute: before, after, between, outside
	Op         string   `protobuf:"bytes,2,opt,name=op,proto3" json:"op,omitempty"`
	HasValue   bool     `protobuf:"varint,5,opt,name=has_value,json=hasValue,proto3" json:"has_value,omitempty"`
	DaysOfWeek []string `protobuf:"bytes,10,rep,name=days_of_week,json=daysOfWeek,proto3" json:"days_of_week,omitempty"` // monday
	After      int64    `protobuf:"varint,11,opt,name=after,proto3" json:"after,omitempty"`
	Before     int64    `protobuf:"varint,12,opt,name=before,proto3" json:"before,omitempty"`
	Between    []int64  `protobuf:"varint,13,rep,packed,name=between,proto3" json:"between,omitempty"`
	Outside    []int64  `protobuf:"varint,14,rep,packed,name=outside,proto3" json:"outside,omitempty"`
	// relative, minute
	Last              int64  `protobuf:"varint,17,opt,name=last,proto3" json:"last,omitempty"`                            // 1440 => last 24h sec
	BeforeAgo         int64  `protobuf:"varint,18,opt,name=before_ago,json=beforeAgo,proto3" json:"before_ago,omitempty"` // 365*86400 sec
	AfterVar          string `protobuf:"bytes,19,opt,name=after_var,json=afterVar,proto3" json:"after_var,omitempty"`     // user.attr[key=birthday]
	BeforeVar         string `protobuf:"bytes,20,opt,name=before_var,json=beforeVar,proto3" json:"before_var,omitempty"`
	AfterVarSec       int64  `protobuf:"varint,21,opt,name=after_var_sec,json=afterVarSec,proto3" json:"after_var_sec,omitempty"` // 86400
	BeforeVarSec      int64  `protobuf:"varint,22,opt,name=before_var_sec,json=beforeVarSec,proto3" json:"before_var_sec,omitempty"`
	AfterRelativeSec  int64  `protobuf:"varint,24,opt,name=after_relative_sec,json=afterRelativeSec,proto3" json:"after_relative_sec,omitempty"`
	BeforeRelativeSec int64  `protobuf:"varint,25,opt,name=before_relative_sec,json=beforeRelativeSec,proto3" json:"before_relative_sec,omitempty"`
	VarFormat         string `protobuf:"bytes,28,opt,name=var_format,json=varFormat,proto3" json:"var_format,omitempty"` // default unix_sec, 2006-01-02T15:04:05Z07:00
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *DatetimeCondition) Reset() {
	*x = DatetimeCondition{}
	mi := &file_type_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatetimeCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatetimeCondition) ProtoMessage() {}

func (x *DatetimeCondition) ProtoReflect() protoreflect.Message {
	mi := &file_type_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatetimeCondition.ProtoReflect.Descriptor instead.
func (*DatetimeCondition) Descriptor() ([]byte, []int) {
	return file_type_proto_rawDescGZIP(), []int{7}
}

func (x *DatetimeCondition) GetOp() string {
	if x != nil {
		return x.Op
	}
	return ""
}

func (x *DatetimeCondition) GetHasValue() bool {
	if x != nil {
		return x.HasValue
	}
	return false
}

func (x *DatetimeCondition) GetDaysOfWeek() []string {
	if x != nil {
		return x.DaysOfWeek
	}
	return nil
}

func (x *DatetimeCondition) GetAfter() int64 {
	if x != nil {
		return x.After
	}
	return 0
}

func (x *DatetimeCondition) GetBefore() int64 {
	if x != nil {
		return x.Before
	}
	return 0
}

func (x *DatetimeCondition) GetBetween() []int64 {
	if x != nil {
		return x.Between
	}
	return nil
}

func (x *DatetimeCondition) GetOutside() []int64 {
	if x != nil {
		return x.Outside
	}
	return nil
}

func (x *DatetimeCondition) GetLast() int64 {
	if x != nil {
		return x.Last
	}
	return 0
}

func (x *DatetimeCondition) GetBeforeAgo() int64 {
	if x != nil {
		return x.BeforeAgo
	}
	return 0
}

func (x *DatetimeCondition) GetAfterVar() string {
	if x != nil {
		return x.AfterVar
	}
	return ""
}

func (x *DatetimeCondition) GetBeforeVar() string {
	if x != nil {
		return x.BeforeVar
	}
	return ""
}

func (x *DatetimeCondition) GetAfterVarSec() int64 {
	if x != nil {
		return x.AfterVarSec
	}
	return 0
}

func (x *DatetimeCondition) GetBeforeVarSec() int64 {
	if x != nil {
		return x.BeforeVarSec
	}
	return 0
}

func (x *DatetimeCondition) GetAfterRelativeSec() int64 {
	if x != nil {
		return x.AfterRelativeSec
	}
	return 0
}

func (x *DatetimeCondition) GetBeforeRelativeSec() int64 {
	if x != nil {
		return x.BeforeRelativeSec
	}
	return 0
}

func (x *DatetimeCondition) GetVarFormat() string {
	if x != nil {
		return x.VarFormat
	}
	return ""
}

var File_type_proto protoreflect.FileDescriptor

const file_type_proto_rawDesc = "" +
	"\n" +
	"\n" +
	"type.proto\x12\x06header\"#\n" +
	"\rTextTransform\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\"$\n" +
	"\x0eFloatTransform\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\"\xcf\x06\n" +
	"\rTextCondition\x12\x0e\n" +
	"\x02op\x18\x02 \x01(\tR\x02op\x125\n" +
	"\n" +
	"transforms\x18\x03 \x03(\v2\x15.header.TextTransformR\n" +
	"transforms\x12\x1b\n" +
	"\thas_value\x18\x04 \x01(\bR\bhasValue\x12\x14\n" +
	"\x05empty\x18\x05 \x01(\bR\x05empty\x12\x0e\n" +
	"\x02eq\x18\x06 \x03(\tR\x02eq\x12\x10\n" +
	"\x03neq\x18\a \x03(\tR\x03neq\x12\x1d\n" +
	"\n" +
	"start_with\x18\b \x03(\tR\tstartWith\x12\x19\n" +
	"\bend_with\x18\t \x03(\tR\aendWith\x12\x18\n" +
	"\acontain\x18\n" +
	" \x03(\tR\acontain\x12\x14\n" +
	"\x05regex\x18\f \x01(\tR\x05regex\x12\x1f\n" +
	"\vnot_contain\x18\r \x03(\tR\n" +
	"notContain\x12$\n" +
	"\x0enot_start_with\x18\x0f \x03(\tR\fnotStartWith\x12 \n" +
	"\fnot_end_with\x18\x10 \x03(\tR\n" +
	"notEndWith\x12\x1f\n" +
	"\vcontain_all\x18\x12 \x03(\tR\n" +
	"containAll\x12%\n" +
	"\x0ecase_sensitive\x18\x1e \x01(\bR\rcaseSensitive\x12)\n" +
	"\x10accent_sensitive\x18\x1f \x01(\bR\x0faccentSensitive\x12\x15\n" +
	"\x06eq_var\x18( \x03(\tR\x05eqVar\x12\x17\n" +
	"\aneq_var\x18/ \x03(\tR\x06neqVar\x12$\n" +
	"\x0estart_with_var\x180 \x03(\tR\fstartWithVar\x12 \n" +
	"\fend_with_var\x181 \x03(\tR\n" +
	"endWithVar\x12\x1f\n" +
	"\vcontain_var\x182 \x03(\tR\n" +
	"containVar\x12\x1b\n" +
	"\tregex_var\x184 \x01(\tR\bregexVar\x12&\n" +
	"\x0fnot_contain_var\x185 \x03(\tR\rnotContainVar\x12+\n" +
	"\x12not_start_with_var\x187 \x03(\tR\x0fnotStartWithVar\x12'\n" +
	"\x10not_end_with_var\x188 \x03(\tR\rnotEndWithVar\x12(\n" +
	"\x10contain_all_varr\x18: \x03(\tR\x0econtainAllVarr\"\x92\x02\n" +
	"\x14EventConditionFilter\x12\x0e\n" +
	"\x02id\x18\x03 \x01(\tR\x02id\x12\x10\n" +
	"\x03key\x18\x04 \x01(\tR\x03key\x12\x12\n" +
	"\x04type\x18\x05 \x01(\tR\x04type\x12)\n" +
	"\x04text\x18\x06 \x01(\v2\x15.header.TextConditionR\x04text\x122\n" +
	"\aboolean\x18\b \x01(\v2\x18.header.BooleanConditionR\aboolean\x12.\n" +
	"\x06number\x18\t \x01(\v2\x16.header.FloatConditionR\x06number\x125\n" +
	"\bdatetime\x18\n" +
	" \x01(\v2\x19.header.DatetimeConditionR\bdatetime\"\xdf\x01\n" +
	"\x0eEventCondition\x12\x12\n" +
	"\x04type\x18\x02 \x01(\tR\x04type\x12\x17\n" +
	"\aui_type\x18\x04 \x01(\tR\x06uiType\x12\x18\n" +
	"\ainverse\x18\x05 \x01(\bR\ainverse\x12\x19\n" +
	"\bat_least\x18\x06 \x01(\x05R\aatLeast\x123\n" +
	"\acreated\x18\a \x01(\v2\x19.header.DatetimeConditionR\acreated\x126\n" +
	"\afilters\x18\b \x03(\v2\x1c.header.EventConditionFilterR\afilters\"\"\n" +
	"\x10BooleanCondition\x12\x0e\n" +
	"\x02op\x18\x02 \x01(\tR\x02op\"\xa8\x03\n" +
	"\x0eFloatCondition\x12\x0e\n" +
	"\x02op\x18\x02 \x01(\tR\x02op\x126\n" +
	"\n" +
	"transforms\x18\x03 \x03(\v2\x16.header.FloatTransformR\n" +
	"transforms\x12\x1b\n" +
	"\thas_value\x18\x04 \x01(\bR\bhasValue\x12\x0e\n" +
	"\x02gt\x18\x05 \x01(\x01R\x02gt\x12\x10\n" +
	"\x03gte\x18\x06 \x01(\x01R\x03gte\x12\x0e\n" +
	"\x02lt\x18\a \x01(\x01R\x02lt\x12\x10\n" +
	"\x03lte\x18\b \x01(\x01R\x03lte\x12\x0e\n" +
	"\x02eq\x18\n" +
	" \x03(\x01R\x02eq\x12\x10\n" +
	"\x03neq\x18\v \x03(\x01R\x03neq\x12\x19\n" +
	"\bin_range\x18\r \x03(\x01R\ainRange\x12 \n" +
	"\fnot_in_range\x18\x0e \x03(\x01R\n" +
	"notInRange\x12\x15\n" +
	"\x06eq_var\x18\x0f \x03(\tR\x05eqVar\x12\x17\n" +
	"\aneq_var\x18\x10 \x03(\tR\x06neqVar\x12\x15\n" +
	"\x06gt_var\x18\x11 \x01(\tR\x05gtVar\x12\x17\n" +
	"\agte_var\x18\x12 \x01(\tR\x06gteVar\x12\x15\n" +
	"\x06lt_var\x18\x13 \x01(\tR\x05ltVar\x12\x17\n" +
	"\alte_var\x18\x14 \x01(\tR\x06lteVar\"\xfa\x03\n" +
	"\x11DatetimeCondition\x12\x0e\n" +
	"\x02op\x18\x02 \x01(\tR\x02op\x12\x1b\n" +
	"\thas_value\x18\x05 \x01(\bR\bhasValue\x12 \n" +
	"\fdays_of_week\x18\n" +
	" \x03(\tR\n" +
	"daysOfWeek\x12\x14\n" +
	"\x05after\x18\v \x01(\x03R\x05after\x12\x16\n" +
	"\x06before\x18\f \x01(\x03R\x06before\x12\x18\n" +
	"\abetween\x18\r \x03(\x03R\abetween\x12\x18\n" +
	"\aoutside\x18\x0e \x03(\x03R\aoutside\x12\x12\n" +
	"\x04last\x18\x11 \x01(\x03R\x04last\x12\x1d\n" +
	"\n" +
	"before_ago\x18\x12 \x01(\x03R\tbeforeAgo\x12\x1b\n" +
	"\tafter_var\x18\x13 \x01(\tR\bafterVar\x12\x1d\n" +
	"\n" +
	"before_var\x18\x14 \x01(\tR\tbeforeVar\x12\"\n" +
	"\rafter_var_sec\x18\x15 \x01(\x03R\vafterVarSec\x12$\n" +
	"\x0ebefore_var_sec\x18\x16 \x01(\x03R\fbeforeVarSec\x12,\n" +
	"\x12after_relative_sec\x18\x18 \x01(\x03R\x10afterRelativeSec\x12.\n" +
	"\x13before_relative_sec\x18\x19 \x01(\x03R\x11beforeRelativeSec\x12\x1d\n" +
	"\n" +
	"var_format\x18\x1c \x01(\tR\tvarFormat*\xe0-\n" +
	"\fRealtimeType\x12\x05\n" +
	"\x01a\x10\x00\x12\x13\n" +
	"\x0faccount_updated\x10\v\x12\x17\n" +
	"\x13agent_group_deleted\x10\f\x12\x17\n" +
	"\x13agent_group_updated\x10\r\x12\x17\n" +
	"\x13invitation_accepted\x10\x0e\x12\x11\n" +
	"\ragent_deleted\x10\x0f\x12\x11\n" +
	"\ragent_updated\x10\x10\x12\x14\n" +
	"\x10my_user_upserted\x10\x13\x12\x15\n" +
	"\x11user_info_updated\x10\x14\x12\x1a\n" +
	"\x16agent_presence_updated\x10\x15\x12\x10\n" +
	"\fuser_created\x10\x16\x12\x10\n" +
	"\fnote_created\x10\x17\x12\x14\n" +
	"\x10presence_updated\x10\x18\x12\x12\n" +
	"\x0econtent_viewed\x10\x19\x12\x0e\n" +
	"\n" +
	"topic_read\x10\x1e\x12\x1c\n" +
	"\x18subscribed_topic_updated\x10\x1f\x12\x1a\n" +
	"\x16user_attribute_updated\x10!\x12\x1a\n" +
	"\x16user_attribute_deleted\x10\"\x12 \n" +
	"\x1cnotification_setting_updated\x10'\x12\x18\n" +
	"\x14conversation_updated\x10(\x12\x10\n" +
	"\fmessage_sent\x10)\x12\x1e\n" +
	"\x1aconversation_state_updated\x10*\x12\x10\n" +
	"\fmessage_pong\x10+\x12\x17\n" +
	"\x13conversation_joined\x10,\x12\x18\n" +
	"\x14conversation_invited\x10-\x12\x15\n" +
	"\x11conversation_left\x10.\x12\x17\n" +
	"\x13conversation_tagged\x10/\x12\x19\n" +
	"\x15conversation_untagged\x100\x12\x17\n" +
	"\x13integration_updated\x101\x12\x17\n" +
	"\x13integration_deleted\x102\x12\x1c\n" +
	"\x18conversation_spam_marked\x103\x12\x1e\n" +
	"\x1aconversation_spam_unmarked\x104\x12\x17\n" +
	"\x13conversation_typing\x106\x12\x1b\n" +
	"\x17conversation_unassigned\x108\x12\x19\n" +
	"\x15conversation_assigned\x109\x12\x13\n" +
	"\x0fmessage_updated\x10:\x12\x18\n" +
	"\x14conversation_viewing\x10;\x12!\n" +
	"\x1dconversation_rating_requested\x10<\x12\x16\n" +
	"\x12conversation_rated\x10=\x12 \n" +
	"\x1cmy_conversation_list_updated\x10A\x12\x0f\n" +
	"\vtag_updated\x10F\x12\x0f\n" +
	"\vtag_deleted\x10G\x12\x1c\n" +
	"\x18message_template_updated\x10H\x12\x1c\n" +
	"\x18message_template_deleted\x10I\x12\x1e\n" +
	"\x1aagent_notification_created\x10X\x12\x1b\n" +
	"\x17agent_notification_read\x10r\x12\x16\n" +
	"\x12agent_notibox_read\x10s\x12\x0f\n" +
	"\vbot_deleted\x10Y\x12\x0f\n" +
	"\vbot_updated\x10Z\x12\x11\n" +
	"\rbot_debug_end\x10[\x12\x1a\n" +
	"\x16bot_debug_begin_action\x10\\\x12\x1b\n" +
	"\x17user_campaign_converted\x10_\x12\x11\n" +
	"\ruser_returned\x10`\x12\x16\n" +
	"\x12user_first_visited\x10a\x12\x12\n" +
	"\x0ebot_terminated\x10b\x12\x16\n" +
	"\x12user_alias_created\x10c\x12\x16\n" +
	"\x12site_user_verified\x10d\x12\x10\n" +
	"\fsite_updated\x10e\x12\v\n" +
	"\asite_up\x10f\x12\r\n" +
	"\tsite_down\x10g\x12\x14\n" +
	"\x10language_updated\x10h\x12\x15\n" +
	"\x11user_note_updated\x10i\x12\x15\n" +
	"\x11user_note_deleted\x10j\x12\x1b\n" +
	"\x17user_lead_owner_updated\x10k\x12\x1b\n" +
	"\x17user_lead_owner_deleted\x10l\x12\x16\n" +
	"\x12user_label_updated\x10m\x12\x16\n" +
	"\x12user_label_deleted\x10n\x12\x11\n" +
	"\rlabel_updated\x10p\x12\x11\n" +
	"\rlabel_deleted\x10q\x12\x18\n" +
	"\x14contact_info_updated\x10t\x12!\n" +
	"\x1dinternal_conversation_updated\x10u\x12\x12\n" +
	"\x0emessage_pinned\x10v\x12\x14\n" +
	"\x10message_unpinned\x10w\x12\x15\n" +
	"\x11user_view_updated\x10x\x12\x15\n" +
	"\x11user_view_deleted\x10y\x12\x19\n" +
	"\x15login_session_updated\x10z\x12\x10\n" +
	"\frule_updated\x10{\x12\x10\n" +
	"\frule_deleted\x10|\x12\x17\n" +
	"\x13ticket_rule_updated\x10}\x12\x17\n" +
	"\x13ticket_rule_deleted\x10~\x12\x14\n" +
	"\x0fproduct_updated\x10\x82\x01\x12\x14\n" +
	"\x0fproduct_deleted\x10\x83\x01\x12\x19\n" +
	"\x14product_feed_updated\x10\x84\x01\x12\x19\n" +
	"\x14product_feed_deleted\x10\x85\x01\x12\x1f\n" +
	"\x1aproduct_collection_updated\x10\x86\x01\x12\x1f\n" +
	"\x1aproduct_collection_deleted\x10\x87\x01\x12\x12\n" +
	"\rorder_created\x10\x88\x01\x12\x12\n" +
	"\rorder_updated\x10\x89\x01\x12\x12\n" +
	"\rorder_deleted\x10\x8a\x01\x12\x15\n" +
	"\x10currency_updated\x10\x8b\x01\x12\x19\n" +
	"\x14shop_setting_updated\x10\x8c\x01\x12\x18\n" +
	"\x13order_event_created\x10\x8d\x01\x12\x1d\n" +
	"\x18shipping_address_updated\x10\x8e\x01\x12\x17\n" +
	"\x12order_payment_made\x10\x91\x01\x12\x1a\n" +
	"\x15order_payment_deleted\x10\x92\x01\x12\x14\n" +
	"\x0fpayment_deleted\x10\x8f\x01\x12\x0e\n" +
	"\tpurchased\x10\x90\x01\x12\x16\n" +
	"\x11purchase_canceled\x10\x94\x01\x12\x19\n" +
	"\x14order_status_updated\x10\x93\x01\x12\x18\n" +
	"\x13order_comment_added\x10\x95\x01\x12\x1a\n" +
	"\x15order_comment_deleted\x10\x96\x01\x12\x1a\n" +
	"\x15order_comment_updated\x10\x97\x01\x12\x1a\n" +
	"\x15order_history_updated\x10\x98\x01\x12\x14\n" +
	"\x0forder_confirmed\x10\x99\x01\x12\x11\n" +
	"\forder_tagged\x10\xd9\x01\x12\x13\n" +
	"\x0eorder_untagged\x10\xda\x01\x12\x15\n" +
	"\x10pipeline_created\x10\x9b\x01\x12\x15\n" +
	"\x10pipeline_updated\x10\x9c\x01\x12\x15\n" +
	"\x10pipeline_deleted\x10\x9d\x01\x12\x11\n" +
	"\ftask_created\x10\xa0\x01\x12\x11\n" +
	"\ftask_updated\x10\xa1\x01\x12\x11\n" +
	"\ftask_deleted\x10\xa2\x01\x12\x17\n" +
	"\x12task_comment_added\x10\xa3\x01\x12\x19\n" +
	"\x14task_comment_deleted\x10\xa4\x01\x12\x19\n" +
	"\x14task_comment_updated\x10\xa5\x01\x12\x19\n" +
	"\x14task_history_updated\x10\xa6\x01\x12!\n" +
	"\x1corder_pipeline_stage_updated\x10\xa8\x01\x12'\n" +
	"\"order_pipeline_stage_agent_updated\x10\xa9\x01\x12&\n" +
	"!order_pipeline_stage_task_updated\x10\xaa\x01\x12\x19\n" +
	"\x14notification_created\x10\xab\x01\x12\x19\n" +
	"\x14notification_updated\x10\xac\x01\x12\x16\n" +
	"\x11notification_read\x10\xae\x01\x12\x1f\n" +
	"\x1aconversation_modal_created\x10\xb4\x01\x12\x1f\n" +
	"\x1aconversation_modal_updated\x10\xb5\x01\x12\x1f\n" +
	"\x1aconversation_modal_deleted\x10\xb6\x01\x12\x17\n" +
	"\x12user_event_created\x10\xbe\x01\x12\x17\n" +
	"\x12user_event_updated\x10\xbf\x01\x12\x19\n" +
	"\x14phone_device_updated\x10\xc0\x01\x12\x19\n" +
	"\x14phone_device_deleted\x10\xc1\x01\x12\x19\n" +
	"\x14call_setting_updated\x10\xc2\x01\x12\x12\n" +
	"\rcall_answered\x10\xc3\x01\x12\x1a\n" +
	"\x15call_wait_key_timeout\x10\xc4\x01\x12\x1b\n" +
	"\x16blocked_number_updated\x10\xc9\x01\x12\x1b\n" +
	"\x16blocked_number_deleted\x10\xca\x01\x12\x1b\n" +
	"\x16greeting_audio_updated\x10\xcb\x01\x12\x11\n" +
	"\flead_created\x10\xcc\x01\x12\x0e\n" +
	"\tcall_rang\x10\xcd\x01\x12\x15\n" +
	"\x10message_referral\x10\xce\x01\x12\x18\n" +
	"\x13recent_call_updated\x10\xcf\x01\x12\x1b\n" +
	"\x16webrtc_candidate_added\x10\xd2\x01\x12\x11\n" +
	"\fcall_invited\x10\xd3\x01\x12\x0f\n" +
	"\n" +
	"call_ended\x10\xd4\x01\x12\x10\n" +
	"\vcall_joined\x10\xd5\x01\x12\x0e\n" +
	"\tcall_left\x10\xd6\x01\x12\x11\n" +
	"\fcall_ringing\x10\xd7\x01\x12\x15\n" +
	"\x10call_transferred\x10\xd8\x01\x12!\n" +
	"\x1cagent_on_call_status_changed\x10\xdc\x01\x12\x17\n" +
	"\x12event_type_updated\x10\xe1\x01\x12\x14\n" +
	"\x0fsegment_updated\x10\xe2\x01\x12\x14\n" +
	"\x0fsegment_deleted\x10\xe3\x01\x12\x15\n" +
	"\x10campaign_updated\x10\xe5\x01\x12\x15\n" +
	"\x10campaign_deleted\x10\xe6\x01\x12 \n" +
	"\x1boutbound_call_entry_updated\x10\xe7\x01\x12 \n" +
	"\x1boutbound_call_entry_deleted\x10\xe8\x01\x12\x12\n" +
	"\rworkflow_pump\x10\xe9\x01\x12\x1a\n" +
	"\x15outbound_call_updated\x10\xea\x01\x12\x10\n" +
	"\vuser_banned\x10\xeb\x01\x12\x12\n" +
	"\ruser_unbanned\x10\xec\x01\x12\v\n" +
	"\x06called\x10\xee\x01\x12\x11\n" +
	"\fpayment_made\x10\xef\x01\x12\x14\n" +
	"\x0fpayment_updated\x10\xed\x01\x12\x0e\n" +
	"\tlogged_in\x10\xf0\x01\x12\r\n" +
	"\bzns_sent\x10\xf1\x01\x12\x17\n" +
	"\x12channel_integrated\x10\xf2\x01\x12\x14\n" +
	"\x0fchannel_removed\x10\xf3\x01\x12\x13\n" +
	"\x0ecredit_updated\x10\xf4\x01\x12\x17\n" +
	"\x12subiz_bill_updated\x10\xf5\x01\x12 \n" +
	"\x1bdesktop_notification_pushed\x10\xf9\x01\x12\x13\n" +
	"\x0eticket_created\x10\xfa\x01\x12\x13\n" +
	"\x0eticket_updated\x10\xfb\x01\x12\x13\n" +
	"\x0eticket_deleted\x10\xfc\x01\x12\x12\n" +
	"\rticket_tagged\x10\xfd\x01\x12\x14\n" +
	"\x0fticket_untagged\x10\xfe\x01\x12\x11\n" +
	"\fticket_rated\x10\x80\x02\x12\x1c\n" +
	"\x17ticket_priority_updated\x10\x81\x02\x12\x19\n" +
	"\x14ticket_state_updated\x10\x82\x02\x12\x19\n" +
	"\x14ticket_comment_added\x10\x83\x02\x12\x1b\n" +
	"\x16ticket_comment_deleted\x10\x84\x02\x12\x1b\n" +
	"\x16ticket_comment_updated\x10\x85\x02\x12\x12\n" +
	"\rticket_joined\x10\x86\x02\x12\x10\n" +
	"\vticket_left\x10\x88\x02\x12\x12\n" +
	"\rticket_typing\x10\x89\x02\x12\x16\n" +
	"\x11ticket_unassigned\x10\x8a\x02\x12\x14\n" +
	"\x0fticket_assigned\x10\x8b\x02\x12\x16\n" +
	"\x11ticket_reassigned\x10\x8c\x02\x12\x10\n" +
	"\vticket_pong\x10\x8e\x02\x12\x1b\n" +
	"\x16ticket_history_updated\x10\x99\x02\x12\x18\n" +
	"\x13ticket_type_created\x10\x9a\x02\x12\x18\n" +
	"\x13ticket_type_updated\x10\x9b\x02\x12\x18\n" +
	"\x13ticket_view_created\x10\x9c\x02\x12\x18\n" +
	"\x13ticket_view_updated\x10\x9d\x02\x12\x18\n" +
	"\x13ticket_view_deleted\x10\x9e\x02\x12\x17\n" +
	"\x12live_users_updated\x10\xff\x01\x12\x17\n" +
	"\x12sla_policy_created\x10\x9f\x02\x12\x17\n" +
	"\x12sla_policy_updated\x10\xa0\x02\x12\x17\n" +
	"\x12sla_policy_deleted\x10\xa1\x02\x12\x1b\n" +
	"\x16knowledge_base_updated\x10\xa2\x02\x12\x1b\n" +
	"\x16knowledge_base_deleted\x10\xa3\x02\x12\x14\n" +
	"\x0farticle_updated\x10\xa4\x02\x12\x14\n" +
	"\x0farticle_deleted\x10\xa5\x02\x12\x1d\n" +
	"\x18article_category_updated\x10\xa6\x02\x12\x1d\n" +
	"\x18article_category_deleted\x10\xa7\x02\x12\x15\n" +
	"\x10workflow_updated\x10\xac\x02\x12\x15\n" +
	"\x10workflow_deleted\x10\xad\x02\x12\x14\n" +
	"\x0fworkflow_pulsed\x10\xae\x02\x12\x14\n" +
	"\x0fworkflow_timeup\x10\xaf\x02\x12\x19\n" +
	"\x14bank_account_updated\x10\xb0\x02\x12\x19\n" +
	"\x14bank_account_deleted\x10\xb1\x02\x12\x13\n" +
	"\x0esegment_joined\x10\xb2\x02\x12\x11\n" +
	"\fsegment_left\x10\xb3\x02\x12\x10\n" +
	"\vlabel_added\x10\xb5\x02\x12\x12\n" +
	"\rlabel_removed\x10\xb6\x02\x12\x18\n" +
	"\x13order_draft_updated\x10\xb7\x02\x12\x18\n" +
	"\x13order_draft_deleted\x10\xb8\x02\x12\x13\n" +
	"\x0eorder_canceled\x10\xb9\x02\x12\x1a\n" +
	"\x15ai_data_entry_updated\x10\xba\x02\x12\x1a\n" +
	"\x15ai_data_entry_deleted\x10\xbb\x02\x12\x1a\n" +
	"\x15ai_data_group_updated\x10\xbc\x02\x12\x1a\n" +
	"\x15ai_data_group_deleted\x10\xbd\x02\x12\x15\n" +
	"\x10ai_agent_updated\x10\xbe\x02\x12\x15\n" +
	"\x10ai_agent_deleted\x10\xbf\x02\x12\x19\n" +
	"\x14zns_template_created\x10\xc0\x02\x12\x19\n" +
	"\x14zns_template_updated\x10\xc1\x02\x12\x16\n" +
	"\x11zns_media_created\x10\xc2\x02\x12\x16\n" +
	"\x11zns_media_updated\x10\xc3\x02\x12\x1c\n" +
	"\x17email_signature_created\x10\xc5\x02\x12\x1c\n" +
	"\x17email_signature_updated\x10\xc6\x02\x12\x1c\n" +
	"\x17email_signature_deleted\x10\xc7\x02\x12\x18\n" +
	"\x13attribute_collected\x10\xc8\x02\x12\x14\n" +
	"\x0fllm_tool_called\x10\xc9\x02\x12\x13\n" +
	"\x0eform_submitted\x10\xd3\x02\x12\x11\n" +
	"\fform_updated\x10\xd4\x02\x12\x11\n" +
	"\fform_created\x10\xd5\x02\x12\x11\n" +
	"\fform_deleted\x10\xd6\x02\x12\x1d\n" +
	"\x18facebook_event_lead_sent\x10\xd7\x02\x12!\n" +
	"\x1cfacebook_event_purchase_sent\x10\xd8\x02\x12$\n" +
	"\x1ffacebook_event_add_to_cart_sent\x10\xd9\x02\x12\x19\n" +
	"\x14segment_sync_updated\x10\xde\x02\x12\x19\n" +
	"\x14segment_sync_deleted\x10\xdf\x02B\x19Z\x17github.com/subiz/headerb\x06proto3"

var (
	file_type_proto_rawDescOnce sync.Once
	file_type_proto_rawDescData []byte
)

func file_type_proto_rawDescGZIP() []byte {
	file_type_proto_rawDescOnce.Do(func() {
		file_type_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_type_proto_rawDesc), len(file_type_proto_rawDesc)))
	})
	return file_type_proto_rawDescData
}

var file_type_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_type_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_type_proto_goTypes = []any{
	(RealtimeType)(0),            // 0: header.RealtimeType
	(*TextTransform)(nil),        // 1: header.TextTransform
	(*FloatTransform)(nil),       // 2: header.FloatTransform
	(*TextCondition)(nil),        // 3: header.TextCondition
	(*EventConditionFilter)(nil), // 4: header.EventConditionFilter
	(*EventCondition)(nil),       // 5: header.EventCondition
	(*BooleanCondition)(nil),     // 6: header.BooleanCondition
	(*FloatCondition)(nil),       // 7: header.FloatCondition
	(*DatetimeCondition)(nil),    // 8: header.DatetimeCondition
}
var file_type_proto_depIdxs = []int32{
	1, // 0: header.TextCondition.transforms:type_name -> header.TextTransform
	3, // 1: header.EventConditionFilter.text:type_name -> header.TextCondition
	6, // 2: header.EventConditionFilter.boolean:type_name -> header.BooleanCondition
	7, // 3: header.EventConditionFilter.number:type_name -> header.FloatCondition
	8, // 4: header.EventConditionFilter.datetime:type_name -> header.DatetimeCondition
	8, // 5: header.EventCondition.created:type_name -> header.DatetimeCondition
	4, // 6: header.EventCondition.filters:type_name -> header.EventConditionFilter
	2, // 7: header.FloatCondition.transforms:type_name -> header.FloatTransform
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_type_proto_init() }
func file_type_proto_init() {
	if File_type_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_type_proto_rawDesc), len(file_type_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_type_proto_goTypes,
		DependencyIndexes: file_type_proto_depIdxs,
		EnumInfos:         file_type_proto_enumTypes,
		MessageInfos:      file_type_proto_msgTypes,
	}.Build()
	File_type_proto = out.File
	file_type_proto_goTypes = nil
	file_type_proto_depIdxs = nil
}
