// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1-devel
// 	protoc        v3.17.2
// source: type.proto

package header

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RealtimeType int32

const (
	RealtimeType_a                                  RealtimeType = 0
	RealtimeType_account_updated                    RealtimeType = 11
	RealtimeType_agent_group_deleted                RealtimeType = 12
	RealtimeType_agent_group_updated                RealtimeType = 13
	RealtimeType_invitation_accepted                RealtimeType = 14
	RealtimeType_agent_deleted                      RealtimeType = 15
	RealtimeType_agent_updated                      RealtimeType = 16
	RealtimeType_agent_permission_updated           RealtimeType = 17
	RealtimeType_my_user_upserted                   RealtimeType = 19
	RealtimeType_user_info_updated                  RealtimeType = 20
	RealtimeType_agent_presence_updated             RealtimeType = 21
	RealtimeType_user_created                       RealtimeType = 22
	RealtimeType_note_created                       RealtimeType = 23
	RealtimeType_presence_updated                   RealtimeType = 24
	RealtimeType_content_viewed                     RealtimeType = 25
	RealtimeType_content_searched                   RealtimeType = 26
	RealtimeType_content_addedtocart                RealtimeType = 27
	RealtimeType_content_checkedout                 RealtimeType = 28
	RealtimeType_content_purchased                  RealtimeType = 29
	RealtimeType_topic_read                         RealtimeType = 30
	RealtimeType_subscribed_topic_updated           RealtimeType = 31
	RealtimeType_user_topic_updated                 RealtimeType = 32
	RealtimeType_user_attribute_updated             RealtimeType = 33
	RealtimeType_user_attribute_deleted             RealtimeType = 34
	RealtimeType_notibox_notification_upserted      RealtimeType = 37
	RealtimeType_notibox_upserted                   RealtimeType = 38
	RealtimeType_notification_setting_updated       RealtimeType = 39
	RealtimeType_conversation_updated               RealtimeType = 40
	RealtimeType_message_sent                       RealtimeType = 41 // event.data.message
	RealtimeType_conversation_state_updated         RealtimeType = 42 // event.data.conversation
	RealtimeType_message_pong                       RealtimeType = 43 // event.data.message.pongs.0
	RealtimeType_conversation_joined                RealtimeType = 44 // event.data.conversation.memebers.0
	RealtimeType_conversation_invited               RealtimeType = 45
	RealtimeType_conversation_left                  RealtimeType = 46
	RealtimeType_conversation_tagged                RealtimeType = 47
	RealtimeType_conversation_untagged              RealtimeType = 48
	RealtimeType_integration_updated                RealtimeType = 49
	RealtimeType_conversation_typing                RealtimeType = 54
	RealtimeType_conversation_unassigned            RealtimeType = 56
	RealtimeType_conversation_assigned              RealtimeType = 57
	RealtimeType_message_updated                    RealtimeType = 58 // event.data.message
	RealtimeType_conversation_rating_requested      RealtimeType = 60 // event.data.conversation
	RealtimeType_conversation_rated                 RealtimeType = 61 // event.data.conversation
	RealtimeType_my_conversation_mute_updated       RealtimeType = 66 // conversation
	RealtimeType_my_conversation_read_updated       RealtimeType = 67 // conversation
	RealtimeType_my_conversation_unsubscribed       RealtimeType = 68 // conversation
	RealtimeType_tag_updated                        RealtimeType = 70
	RealtimeType_tag_deleted                        RealtimeType = 71
	RealtimeType_message_template_updated           RealtimeType = 72
	RealtimeType_message_template_deleted           RealtimeType = 73
	RealtimeType_live_act_user_num                  RealtimeType = 82
	RealtimeType_live_top_source                    RealtimeType = 83
	RealtimeType_live_top_location                  RealtimeType = 84
	RealtimeType_live_top_page                      RealtimeType = 85
	RealtimeType_agent_notification_created         RealtimeType = 88
	RealtimeType_agent_notification_read            RealtimeType = 114
	RealtimeType_agent_notibox_read                 RealtimeType = 115
	RealtimeType_bot_deleted                        RealtimeType = 89
	RealtimeType_bot_updated                        RealtimeType = 90
	RealtimeType_bot_debug_end                      RealtimeType = 91
	RealtimeType_bot_debug_begin_action             RealtimeType = 92
	RealtimeType_user_campaign_converted            RealtimeType = 95
	RealtimeType_user_returned                      RealtimeType = 96
	RealtimeType_user_first_visited                 RealtimeType = 97
	RealtimeType_bot_terminated                     RealtimeType = 98
	RealtimeType_user_alias_created                 RealtimeType = 99
	RealtimeType_site_user_verified                 RealtimeType = 100
	RealtimeType_site_updated                       RealtimeType = 101
	RealtimeType_site_up                            RealtimeType = 102
	RealtimeType_site_down                          RealtimeType = 103
	RealtimeType_language_updated                   RealtimeType = 104
	RealtimeType_user_note_updated                  RealtimeType = 105
	RealtimeType_user_note_deleted                  RealtimeType = 106
	RealtimeType_user_lead_owner_updated            RealtimeType = 107
	RealtimeType_user_lead_owner_deleted            RealtimeType = 108
	RealtimeType_user_label_updated                 RealtimeType = 109
	RealtimeType_user_label_deleted                 RealtimeType = 110
	RealtimeType_label_updated                      RealtimeType = 112
	RealtimeType_label_deleted                      RealtimeType = 113
	RealtimeType_contact_info_updated               RealtimeType = 116
	RealtimeType_internal_conversation_updated      RealtimeType = 117
	RealtimeType_message_pinned                     RealtimeType = 118 // event.data.message
	RealtimeType_message_unpinned                   RealtimeType = 119 // event.data.message
	RealtimeType_user_view_updated                  RealtimeType = 120
	RealtimeType_user_view_deleted                  RealtimeType = 121
	RealtimeType_login_session_updated              RealtimeType = 122
	RealtimeType_product_updated                    RealtimeType = 130
	RealtimeType_product_deleted                    RealtimeType = 131
	RealtimeType_product_feed_updated               RealtimeType = 132
	RealtimeType_product_feed_deleted               RealtimeType = 133
	RealtimeType_product_collection_updated         RealtimeType = 134
	RealtimeType_product_collection_deleted         RealtimeType = 135
	RealtimeType_order_created                      RealtimeType = 136
	RealtimeType_order_updated                      RealtimeType = 137
	RealtimeType_order_deleted                      RealtimeType = 138
	RealtimeType_currency_updated                   RealtimeType = 139
	RealtimeType_shop_setting_updated               RealtimeType = 140
	RealtimeType_order_event_created                RealtimeType = 141
	RealtimeType_shipping_address_updated           RealtimeType = 142
	RealtimeType_order_payment_made                 RealtimeType = 145 // data.bill
	RealtimeType_order_payment_deleted              RealtimeType = 146 // data.bill
	RealtimeType_order_status_updated               RealtimeType = 147 // data.order_status
	RealtimeType_order_comment_added                RealtimeType = 149 // data.message
	RealtimeType_order_comment_deleted              RealtimeType = 150 // data.message
	RealtimeType_order_comment_updated              RealtimeType = 151 // data.message
	RealtimeType_order_history_updated              RealtimeType = 152
	RealtimeType_user_order_confirmed               RealtimeType = 153
	RealtimeType_pipeline_created                   RealtimeType = 155
	RealtimeType_pipeline_updated                   RealtimeType = 156
	RealtimeType_pipeline_deleted                   RealtimeType = 157
	RealtimeType_task_created                       RealtimeType = 160
	RealtimeType_task_updated                       RealtimeType = 161
	RealtimeType_task_deleted                       RealtimeType = 162
	RealtimeType_task_comment_added                 RealtimeType = 163 // data.message
	RealtimeType_task_comment_deleted               RealtimeType = 164 // data.message
	RealtimeType_task_comment_updated               RealtimeType = 165 // data.message
	RealtimeType_task_history_updated               RealtimeType = 166
	RealtimeType_order_pipeline_stage_updated       RealtimeType = 168 // data.order
	RealtimeType_order_pipeline_stage_agent_updated RealtimeType = 169 // data.order
	RealtimeType_order_pipeline_stage_task_updated  RealtimeType = 170
	RealtimeType_notification_created               RealtimeType = 171 // data.notification
	RealtimeType_notification_updated               RealtimeType = 172 // data.notification
	RealtimeType_notification_seen                  RealtimeType = 173 // data.notification
)

// Enum value maps for RealtimeType.
var (
	RealtimeType_name = map[int32]string{
		0:   "a",
		11:  "account_updated",
		12:  "agent_group_deleted",
		13:  "agent_group_updated",
		14:  "invitation_accepted",
		15:  "agent_deleted",
		16:  "agent_updated",
		17:  "agent_permission_updated",
		19:  "my_user_upserted",
		20:  "user_info_updated",
		21:  "agent_presence_updated",
		22:  "user_created",
		23:  "note_created",
		24:  "presence_updated",
		25:  "content_viewed",
		26:  "content_searched",
		27:  "content_addedtocart",
		28:  "content_checkedout",
		29:  "content_purchased",
		30:  "topic_read",
		31:  "subscribed_topic_updated",
		32:  "user_topic_updated",
		33:  "user_attribute_updated",
		34:  "user_attribute_deleted",
		37:  "notibox_notification_upserted",
		38:  "notibox_upserted",
		39:  "notification_setting_updated",
		40:  "conversation_updated",
		41:  "message_sent",
		42:  "conversation_state_updated",
		43:  "message_pong",
		44:  "conversation_joined",
		45:  "conversation_invited",
		46:  "conversation_left",
		47:  "conversation_tagged",
		48:  "conversation_untagged",
		49:  "integration_updated",
		54:  "conversation_typing",
		56:  "conversation_unassigned",
		57:  "conversation_assigned",
		58:  "message_updated",
		60:  "conversation_rating_requested",
		61:  "conversation_rated",
		66:  "my_conversation_mute_updated",
		67:  "my_conversation_read_updated",
		68:  "my_conversation_unsubscribed",
		70:  "tag_updated",
		71:  "tag_deleted",
		72:  "message_template_updated",
		73:  "message_template_deleted",
		82:  "live_act_user_num",
		83:  "live_top_source",
		84:  "live_top_location",
		85:  "live_top_page",
		88:  "agent_notification_created",
		114: "agent_notification_read",
		115: "agent_notibox_read",
		89:  "bot_deleted",
		90:  "bot_updated",
		91:  "bot_debug_end",
		92:  "bot_debug_begin_action",
		95:  "user_campaign_converted",
		96:  "user_returned",
		97:  "user_first_visited",
		98:  "bot_terminated",
		99:  "user_alias_created",
		100: "site_user_verified",
		101: "site_updated",
		102: "site_up",
		103: "site_down",
		104: "language_updated",
		105: "user_note_updated",
		106: "user_note_deleted",
		107: "user_lead_owner_updated",
		108: "user_lead_owner_deleted",
		109: "user_label_updated",
		110: "user_label_deleted",
		112: "label_updated",
		113: "label_deleted",
		116: "contact_info_updated",
		117: "internal_conversation_updated",
		118: "message_pinned",
		119: "message_unpinned",
		120: "user_view_updated",
		121: "user_view_deleted",
		122: "login_session_updated",
		130: "product_updated",
		131: "product_deleted",
		132: "product_feed_updated",
		133: "product_feed_deleted",
		134: "product_collection_updated",
		135: "product_collection_deleted",
		136: "order_created",
		137: "order_updated",
		138: "order_deleted",
		139: "currency_updated",
		140: "shop_setting_updated",
		141: "order_event_created",
		142: "shipping_address_updated",
		145: "order_payment_made",
		146: "order_payment_deleted",
		147: "order_status_updated",
		149: "order_comment_added",
		150: "order_comment_deleted",
		151: "order_comment_updated",
		152: "order_history_updated",
		153: "user_order_confirmed",
		155: "pipeline_created",
		156: "pipeline_updated",
		157: "pipeline_deleted",
		160: "task_created",
		161: "task_updated",
		162: "task_deleted",
		163: "task_comment_added",
		164: "task_comment_deleted",
		165: "task_comment_updated",
		166: "task_history_updated",
		168: "order_pipeline_stage_updated",
		169: "order_pipeline_stage_agent_updated",
		170: "order_pipeline_stage_task_updated",
		171: "notification_created",
		172: "notification_updated",
		173: "notification_seen",
	}
	RealtimeType_value = map[string]int32{
		"a":                                  0,
		"account_updated":                    11,
		"agent_group_deleted":                12,
		"agent_group_updated":                13,
		"invitation_accepted":                14,
		"agent_deleted":                      15,
		"agent_updated":                      16,
		"agent_permission_updated":           17,
		"my_user_upserted":                   19,
		"user_info_updated":                  20,
		"agent_presence_updated":             21,
		"user_created":                       22,
		"note_created":                       23,
		"presence_updated":                   24,
		"content_viewed":                     25,
		"content_searched":                   26,
		"content_addedtocart":                27,
		"content_checkedout":                 28,
		"content_purchased":                  29,
		"topic_read":                         30,
		"subscribed_topic_updated":           31,
		"user_topic_updated":                 32,
		"user_attribute_updated":             33,
		"user_attribute_deleted":             34,
		"notibox_notification_upserted":      37,
		"notibox_upserted":                   38,
		"notification_setting_updated":       39,
		"conversation_updated":               40,
		"message_sent":                       41,
		"conversation_state_updated":         42,
		"message_pong":                       43,
		"conversation_joined":                44,
		"conversation_invited":               45,
		"conversation_left":                  46,
		"conversation_tagged":                47,
		"conversation_untagged":              48,
		"integration_updated":                49,
		"conversation_typing":                54,
		"conversation_unassigned":            56,
		"conversation_assigned":              57,
		"message_updated":                    58,
		"conversation_rating_requested":      60,
		"conversation_rated":                 61,
		"my_conversation_mute_updated":       66,
		"my_conversation_read_updated":       67,
		"my_conversation_unsubscribed":       68,
		"tag_updated":                        70,
		"tag_deleted":                        71,
		"message_template_updated":           72,
		"message_template_deleted":           73,
		"live_act_user_num":                  82,
		"live_top_source":                    83,
		"live_top_location":                  84,
		"live_top_page":                      85,
		"agent_notification_created":         88,
		"agent_notification_read":            114,
		"agent_notibox_read":                 115,
		"bot_deleted":                        89,
		"bot_updated":                        90,
		"bot_debug_end":                      91,
		"bot_debug_begin_action":             92,
		"user_campaign_converted":            95,
		"user_returned":                      96,
		"user_first_visited":                 97,
		"bot_terminated":                     98,
		"user_alias_created":                 99,
		"site_user_verified":                 100,
		"site_updated":                       101,
		"site_up":                            102,
		"site_down":                          103,
		"language_updated":                   104,
		"user_note_updated":                  105,
		"user_note_deleted":                  106,
		"user_lead_owner_updated":            107,
		"user_lead_owner_deleted":            108,
		"user_label_updated":                 109,
		"user_label_deleted":                 110,
		"label_updated":                      112,
		"label_deleted":                      113,
		"contact_info_updated":               116,
		"internal_conversation_updated":      117,
		"message_pinned":                     118,
		"message_unpinned":                   119,
		"user_view_updated":                  120,
		"user_view_deleted":                  121,
		"login_session_updated":              122,
		"product_updated":                    130,
		"product_deleted":                    131,
		"product_feed_updated":               132,
		"product_feed_deleted":               133,
		"product_collection_updated":         134,
		"product_collection_deleted":         135,
		"order_created":                      136,
		"order_updated":                      137,
		"order_deleted":                      138,
		"currency_updated":                   139,
		"shop_setting_updated":               140,
		"order_event_created":                141,
		"shipping_address_updated":           142,
		"order_payment_made":                 145,
		"order_payment_deleted":              146,
		"order_status_updated":               147,
		"order_comment_added":                149,
		"order_comment_deleted":              150,
		"order_comment_updated":              151,
		"order_history_updated":              152,
		"user_order_confirmed":               153,
		"pipeline_created":                   155,
		"pipeline_updated":                   156,
		"pipeline_deleted":                   157,
		"task_created":                       160,
		"task_updated":                       161,
		"task_deleted":                       162,
		"task_comment_added":                 163,
		"task_comment_deleted":               164,
		"task_comment_updated":               165,
		"task_history_updated":               166,
		"order_pipeline_stage_updated":       168,
		"order_pipeline_stage_agent_updated": 169,
		"order_pipeline_stage_task_updated":  170,
		"notification_created":               171,
		"notification_updated":               172,
		"notification_seen":                  173,
	}
)

func (x RealtimeType) Enum() *RealtimeType {
	p := new(RealtimeType)
	*p = x
	return p
}

func (x RealtimeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RealtimeType) Descriptor() protoreflect.EnumDescriptor {
	return file_type_proto_enumTypes[0].Descriptor()
}

func (RealtimeType) Type() protoreflect.EnumType {
	return &file_type_proto_enumTypes[0]
}

func (x RealtimeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RealtimeType.Descriptor instead.
func (RealtimeType) EnumDescriptor() ([]byte, []int) {
	return file_type_proto_rawDescGZIP(), []int{0}
}

type TextTransform struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"` // trim, lower_case, upper_case
}

func (x *TextTransform) Reset() {
	*x = TextTransform{}
	if protoimpl.UnsafeEnabled {
		mi := &file_type_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextTransform) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextTransform) ProtoMessage() {}

func (x *TextTransform) ProtoReflect() protoreflect.Message {
	mi := &file_type_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextTransform.ProtoReflect.Descriptor instead.
func (*TextTransform) Descriptor() ([]byte, []int) {
	return file_type_proto_rawDescGZIP(), []int{0}
}

func (x *TextTransform) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type FloatTransform struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"` // round, ceil, floor
}

func (x *FloatTransform) Reset() {
	*x = FloatTransform{}
	if protoimpl.UnsafeEnabled {
		mi := &file_type_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatTransform) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatTransform) ProtoMessage() {}

func (x *FloatTransform) ProtoReflect() protoreflect.Message {
	mi := &file_type_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatTransform.ProtoReflect.Descriptor instead.
func (*FloatTransform) Descriptor() ([]byte, []int) {
	return file_type_proto_rawDescGZIP(), []int{1}
}

func (x *FloatTransform) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type TextCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op              string           `protobuf:"bytes,2,opt,name=op,proto3" json:"op,omitempty"`
	Transforms      []*TextTransform `protobuf:"bytes,3,rep,name=transforms,proto3" json:"transforms,omitempty"`
	HasValue        bool             `protobuf:"varint,4,opt,name=has_value,json=hasValue,proto3" json:"has_value,omitempty"` // true or false
	Empty           bool             `protobuf:"varint,5,opt,name=empty,proto3" json:"empty,omitempty"`                       // true or false
	Eq              []string         `protobuf:"bytes,6,rep,name=eq,proto3" json:"eq,omitempty"`
	Neq             []string         `protobuf:"bytes,7,rep,name=neq,proto3" json:"neq,omitempty"`
	StartWith       []string         `protobuf:"bytes,8,rep,name=start_with,json=startWith,proto3" json:"start_with,omitempty"`
	EndWith         []string         `protobuf:"bytes,9,rep,name=end_with,json=endWith,proto3" json:"end_with,omitempty"`
	Contain         []string         `protobuf:"bytes,10,rep,name=contain,proto3" json:"contain,omitempty"`
	Regex           string           `protobuf:"bytes,12,opt,name=regex,proto3" json:"regex,omitempty"`
	NotContain      []string         `protobuf:"bytes,13,rep,name=not_contain,json=notContain,proto3" json:"not_contain,omitempty"`
	NotStartWith    []string         `protobuf:"bytes,15,rep,name=not_start_with,json=notStartWith,proto3" json:"not_start_with,omitempty"`
	NotEndWith      []string         `protobuf:"bytes,16,rep,name=not_end_with,json=notEndWith,proto3" json:"not_end_with,omitempty"`
	ContainAll      []string         `protobuf:"bytes,18,rep,name=contain_all,json=containAll,proto3" json:"contain_all,omitempty"`
	CaseSensitive   bool             `protobuf:"varint,30,opt,name=case_sensitive,json=caseSensitive,proto3" json:"case_sensitive,omitempty"`
	AccentSensitive bool             `protobuf:"varint,31,opt,name=accent_sensitive,json=accentSensitive,proto3" json:"accent_sensitive,omitempty"`
}

func (x *TextCondition) Reset() {
	*x = TextCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_type_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextCondition) ProtoMessage() {}

func (x *TextCondition) ProtoReflect() protoreflect.Message {
	mi := &file_type_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextCondition.ProtoReflect.Descriptor instead.
func (*TextCondition) Descriptor() ([]byte, []int) {
	return file_type_proto_rawDescGZIP(), []int{2}
}

func (x *TextCondition) GetOp() string {
	if x != nil {
		return x.Op
	}
	return ""
}

func (x *TextCondition) GetTransforms() []*TextTransform {
	if x != nil {
		return x.Transforms
	}
	return nil
}

func (x *TextCondition) GetHasValue() bool {
	if x != nil {
		return x.HasValue
	}
	return false
}

func (x *TextCondition) GetEmpty() bool {
	if x != nil {
		return x.Empty
	}
	return false
}

func (x *TextCondition) GetEq() []string {
	if x != nil {
		return x.Eq
	}
	return nil
}

func (x *TextCondition) GetNeq() []string {
	if x != nil {
		return x.Neq
	}
	return nil
}

func (x *TextCondition) GetStartWith() []string {
	if x != nil {
		return x.StartWith
	}
	return nil
}

func (x *TextCondition) GetEndWith() []string {
	if x != nil {
		return x.EndWith
	}
	return nil
}

func (x *TextCondition) GetContain() []string {
	if x != nil {
		return x.Contain
	}
	return nil
}

func (x *TextCondition) GetRegex() string {
	if x != nil {
		return x.Regex
	}
	return ""
}

func (x *TextCondition) GetNotContain() []string {
	if x != nil {
		return x.NotContain
	}
	return nil
}

func (x *TextCondition) GetNotStartWith() []string {
	if x != nil {
		return x.NotStartWith
	}
	return nil
}

func (x *TextCondition) GetNotEndWith() []string {
	if x != nil {
		return x.NotEndWith
	}
	return nil
}

func (x *TextCondition) GetContainAll() []string {
	if x != nil {
		return x.ContainAll
	}
	return nil
}

func (x *TextCondition) GetCaseSensitive() bool {
	if x != nil {
		return x.CaseSensitive
	}
	return false
}

func (x *TextCondition) GetAccentSensitive() bool {
	if x != nil {
		return x.AccentSensitive
	}
	return false
}

type BoolCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op string `protobuf:"bytes,2,opt,name=op,proto3" json:"op,omitempty"` // has_value, true, false
}

func (x *BoolCondition) Reset() {
	*x = BoolCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_type_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoolCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolCondition) ProtoMessage() {}

func (x *BoolCondition) ProtoReflect() protoreflect.Message {
	mi := &file_type_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolCondition.ProtoReflect.Descriptor instead.
func (*BoolCondition) Descriptor() ([]byte, []int) {
	return file_type_proto_rawDescGZIP(), []int{3}
}

func (x *BoolCondition) GetOp() string {
	if x != nil {
		return x.Op
	}
	return ""
}

type FloatCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op         string            `protobuf:"bytes,2,opt,name=op,proto3" json:"op,omitempty"`
	Transforms []*FloatTransform `protobuf:"bytes,3,rep,name=transforms,proto3" json:"transforms,omitempty"`
	HasValue   bool              `protobuf:"varint,4,opt,name=has_value,json=hasValue,proto3" json:"has_value,omitempty"`
	Gt         float64           `protobuf:"fixed64,5,opt,name=gt,proto3" json:"gt,omitempty"`
	Gte        float64           `protobuf:"fixed64,6,opt,name=gte,proto3" json:"gte,omitempty"`
	Lt         float64           `protobuf:"fixed64,7,opt,name=lt,proto3" json:"lt,omitempty"`
	Lte        float64           `protobuf:"fixed64,8,opt,name=lte,proto3" json:"lte,omitempty"`
	Eq         []float64         `protobuf:"fixed64,10,rep,packed,name=eq,proto3" json:"eq,omitempty"`
	Neq        []float64         `protobuf:"fixed64,11,rep,packed,name=neq,proto3" json:"neq,omitempty"`
	InRange    []float64         `protobuf:"fixed64,13,rep,packed,name=in_range,json=inRange,proto3" json:"in_range,omitempty"`
	NotInRange []float64         `protobuf:"fixed64,14,rep,packed,name=not_in_range,json=notInRange,proto3" json:"not_in_range,omitempty"`
}

func (x *FloatCondition) Reset() {
	*x = FloatCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_type_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatCondition) ProtoMessage() {}

func (x *FloatCondition) ProtoReflect() protoreflect.Message {
	mi := &file_type_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatCondition.ProtoReflect.Descriptor instead.
func (*FloatCondition) Descriptor() ([]byte, []int) {
	return file_type_proto_rawDescGZIP(), []int{4}
}

func (x *FloatCondition) GetOp() string {
	if x != nil {
		return x.Op
	}
	return ""
}

func (x *FloatCondition) GetTransforms() []*FloatTransform {
	if x != nil {
		return x.Transforms
	}
	return nil
}

func (x *FloatCondition) GetHasValue() bool {
	if x != nil {
		return x.HasValue
	}
	return false
}

func (x *FloatCondition) GetGt() float64 {
	if x != nil {
		return x.Gt
	}
	return 0
}

func (x *FloatCondition) GetGte() float64 {
	if x != nil {
		return x.Gte
	}
	return 0
}

func (x *FloatCondition) GetLt() float64 {
	if x != nil {
		return x.Lt
	}
	return 0
}

func (x *FloatCondition) GetLte() float64 {
	if x != nil {
		return x.Lte
	}
	return 0
}

func (x *FloatCondition) GetEq() []float64 {
	if x != nil {
		return x.Eq
	}
	return nil
}

func (x *FloatCondition) GetNeq() []float64 {
	if x != nil {
		return x.Neq
	}
	return nil
}

func (x *FloatCondition) GetInRange() []float64 {
	if x != nil {
		return x.InRange
	}
	return nil
}

func (x *FloatCondition) GetNotInRange() []float64 {
	if x != nil {
		return x.NotInRange
	}
	return nil
}

type DatetimeCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op         string   `protobuf:"bytes,2,opt,name=op,proto3" json:"op,omitempty"`                                      // in_business_hour, non_business_hour, today, yesterday, last_week, this_week, last_month, this_month, last, before_ago
	DaysOfWeek []string `protobuf:"bytes,10,rep,name=days_of_week,json=daysOfWeek,proto3" json:"days_of_week,omitempty"` // monday
	After      int64    `protobuf:"varint,11,opt,name=after,proto3" json:"after,omitempty"`
	Before     int64    `protobuf:"varint,12,opt,name=before,proto3" json:"before,omitempty"`
	Between    []int64  `protobuf:"varint,13,rep,packed,name=between,proto3" json:"between,omitempty"`
	Outside    []int64  `protobuf:"varint,14,rep,packed,name=outside,proto3" json:"outside,omitempty"`
	// relative, minute
	Last      int64 `protobuf:"varint,17,opt,name=last,proto3" json:"last,omitempty"`                            // 1440 => last 24h sec
	BeforeAgo int64 `protobuf:"varint,18,opt,name=before_ago,json=beforeAgo,proto3" json:"before_ago,omitempty"` // 365*86400 sec
}

func (x *DatetimeCondition) Reset() {
	*x = DatetimeCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_type_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatetimeCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatetimeCondition) ProtoMessage() {}

func (x *DatetimeCondition) ProtoReflect() protoreflect.Message {
	mi := &file_type_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatetimeCondition.ProtoReflect.Descriptor instead.
func (*DatetimeCondition) Descriptor() ([]byte, []int) {
	return file_type_proto_rawDescGZIP(), []int{5}
}

func (x *DatetimeCondition) GetOp() string {
	if x != nil {
		return x.Op
	}
	return ""
}

func (x *DatetimeCondition) GetDaysOfWeek() []string {
	if x != nil {
		return x.DaysOfWeek
	}
	return nil
}

func (x *DatetimeCondition) GetAfter() int64 {
	if x != nil {
		return x.After
	}
	return 0
}

func (x *DatetimeCondition) GetBefore() int64 {
	if x != nil {
		return x.Before
	}
	return 0
}

func (x *DatetimeCondition) GetBetween() []int64 {
	if x != nil {
		return x.Between
	}
	return nil
}

func (x *DatetimeCondition) GetOutside() []int64 {
	if x != nil {
		return x.Outside
	}
	return nil
}

func (x *DatetimeCondition) GetLast() int64 {
	if x != nil {
		return x.Last
	}
	return 0
}

func (x *DatetimeCondition) GetBeforeAgo() int64 {
	if x != nil {
		return x.BeforeAgo
	}
	return 0
}

var File_type_proto protoreflect.FileDescriptor

var file_type_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x22, 0x23, 0x0a, 0x0d, 0x54, 0x65, 0x78, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x24, 0x0a, 0x0e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0xf1, 0x03, 0x0a, 0x0d, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f,
	0x70, 0x12, 0x35, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54,
	0x65, 0x78, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x0a, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x61, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x65,
	0x71, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6e,
	0x65, 0x71, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x6e, 0x65, 0x71, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x57, 0x69, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x57, 0x69, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x6f,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x6f, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x69, 0x74, 0x68, 0x12, 0x20,
	0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x45, 0x6e, 0x64, 0x57, 0x69, 0x74, 0x68,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x6c, 0x6c, 0x18,
	0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x41, 0x6c,
	0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x61, 0x73, 0x65, 0x53,
	0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x22, 0x1f, 0x0a, 0x0d, 0x42, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x6f, 0x70, 0x22, 0x98, 0x02, 0x0a, 0x0e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x36, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x67, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x67, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x67, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x67, 0x74, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x6c, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x74, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x65, 0x71, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x01, 0x52, 0x02, 0x65, 0x71,
	0x12, 0x10, 0x0a, 0x03, 0x6e, 0x65, 0x71, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x01, 0x52, 0x03, 0x6e,
	0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x01, 0x52, 0x07, 0x69, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x20, 0x0a,
	0x0c, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x01, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22,
	0xda, 0x01, 0x0a, 0x11, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x6f, 0x66,
	0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x79,
	0x73, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x07, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x73,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x67, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x41, 0x67, 0x6f, 0x2a, 0xe9, 0x17, 0x0a,
	0x0c, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x05, 0x0a,
	0x01, 0x61, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x0d, 0x12, 0x17, 0x0a, 0x13, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x65, 0x64, 0x10, 0x0e, 0x12, 0x11, 0x0a, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x0f, 0x12, 0x11, 0x0a, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x10, 0x12, 0x1c, 0x0a, 0x18, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x11, 0x12, 0x14, 0x0a, 0x10, 0x6d, 0x79, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x10, 0x13, 0x12, 0x15,
	0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x10, 0x14, 0x12, 0x1a, 0x0a, 0x16, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10,
	0x15, 0x12, 0x10, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x10, 0x16, 0x12, 0x10, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x10, 0x17, 0x12, 0x14, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x18, 0x12, 0x12, 0x0a, 0x0e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x10, 0x19, 0x12,
	0x14, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x65, 0x64, 0x10, 0x1a, 0x12, 0x17, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x74, 0x6f, 0x63, 0x61, 0x72, 0x74, 0x10, 0x1b, 0x12, 0x16,
	0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65,
	0x64, 0x6f, 0x75, 0x74, 0x10, 0x1c, 0x12, 0x15, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x10, 0x1d, 0x12, 0x0e, 0x0a,
	0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x10, 0x1e, 0x12, 0x1c, 0x0a,
	0x18, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x1f, 0x12, 0x16, 0x0a, 0x12, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x10, 0x20, 0x12, 0x1a, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x21, 0x12,
	0x1a, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x22, 0x12, 0x21, 0x0a, 0x1d, 0x6e,
	0x6f, 0x74, 0x69, 0x62, 0x6f, 0x78, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x10, 0x25, 0x12, 0x14,
	0x0a, 0x10, 0x6e, 0x6f, 0x74, 0x69, 0x62, 0x6f, 0x78, 0x5f, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x65, 0x64, 0x10, 0x26, 0x12, 0x20, 0x0a, 0x1c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x10, 0x27, 0x12, 0x18, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x28,
	0x12, 0x10, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x74,
	0x10, 0x29, 0x12, 0x1e, 0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x10, 0x2a, 0x12, 0x10, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6f,
	0x6e, 0x67, 0x10, 0x2b, 0x12, 0x17, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x2c, 0x12, 0x18, 0x0a,
	0x14, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x64, 0x10, 0x2d, 0x12, 0x15, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x10, 0x2e, 0x12, 0x17,
	0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x61, 0x67, 0x67, 0x65, 0x64, 0x10, 0x2f, 0x12, 0x19, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64,
	0x10, 0x30, 0x12, 0x17, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x31, 0x12, 0x17, 0x0a, 0x13, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x69,
	0x6e, 0x67, 0x10, 0x36, 0x12, 0x1b, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x10,
	0x38, 0x12, 0x19, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x10, 0x39, 0x12, 0x13, 0x0a, 0x0f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10,
	0x3a, 0x12, 0x21, 0x0a, 0x1d, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x10, 0x3c, 0x12, 0x16, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x64, 0x10, 0x3d, 0x12, 0x20, 0x0a, 0x1c,
	0x6d, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x75, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x42, 0x12, 0x20,
	0x0a, 0x1c, 0x6d, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x43,
	0x12, 0x20, 0x0a, 0x1c, 0x6d, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64,
	0x10, 0x44, 0x12, 0x0f, 0x0a, 0x0b, 0x74, 0x61, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x10, 0x46, 0x12, 0x0f, 0x0a, 0x0b, 0x74, 0x61, 0x67, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x10, 0x47, 0x12, 0x1c, 0x0a, 0x18, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x10, 0x48, 0x12, 0x1c, 0x0a, 0x18, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x49,
	0x12, 0x15, 0x0a, 0x11, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x10, 0x52, 0x12, 0x13, 0x0a, 0x0f, 0x6c, 0x69, 0x76, 0x65, 0x5f,
	0x74, 0x6f, 0x70, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x10, 0x53, 0x12, 0x15, 0x0a, 0x11,
	0x6c, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x54, 0x12, 0x11, 0x0a, 0x0d, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x6f, 0x70, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x10, 0x55, 0x12, 0x1e, 0x0a, 0x1a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x10, 0x58, 0x12, 0x1b, 0x0a, 0x17, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x10, 0x72, 0x12, 0x16, 0x0a, 0x12, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x74,
	0x69, 0x62, 0x6f, 0x78, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x10, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x62,
	0x6f, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x59, 0x12, 0x0f, 0x0a, 0x0b,
	0x62, 0x6f, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x5a, 0x12, 0x11, 0x0a,
	0x0d, 0x62, 0x6f, 0x74, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x65, 0x6e, 0x64, 0x10, 0x5b,
	0x12, 0x1a, 0x0a, 0x16, 0x62, 0x6f, 0x74, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x62, 0x65,
	0x67, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x5c, 0x12, 0x1b, 0x0a, 0x17,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x10, 0x5f, 0x12, 0x11, 0x0a, 0x0d, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x10, 0x60, 0x12, 0x16, 0x0a, 0x12,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x74,
	0x65, 0x64, 0x10, 0x61, 0x12, 0x12, 0x0a, 0x0e, 0x62, 0x6f, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x10, 0x62, 0x12, 0x16, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x10, 0x63,
	0x12, 0x16, 0x0a, 0x12, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x64, 0x12, 0x10, 0x0a, 0x0c, 0x73, 0x69, 0x74, 0x65,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x73, 0x69,
	0x74, 0x65, 0x5f, 0x75, 0x70, 0x10, 0x66, 0x12, 0x0d, 0x0a, 0x09, 0x73, 0x69, 0x74, 0x65, 0x5f,
	0x64, 0x6f, 0x77, 0x6e, 0x10, 0x67, 0x12, 0x14, 0x0a, 0x10, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x68, 0x12, 0x15, 0x0a, 0x11,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x10, 0x69, 0x12, 0x15, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x65,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x6a, 0x12, 0x1b, 0x0a, 0x17, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x6b, 0x12, 0x1b, 0x0a, 0x17, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6c, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x10, 0x6c, 0x12, 0x16, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x6d, 0x12, 0x16, 0x0a, 0x12,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x10, 0x6e, 0x12, 0x11, 0x0a, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x70, 0x12, 0x11, 0x0a, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x71, 0x12, 0x18, 0x0a, 0x14, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x10, 0x74, 0x12, 0x21, 0x0a, 0x1d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x75, 0x12, 0x12, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x10, 0x76, 0x12, 0x14, 0x0a, 0x10, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x10,
	0x77, 0x12, 0x15, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x78, 0x12, 0x15, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x79, 0x12,
	0x19, 0x0a, 0x15, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x7a, 0x12, 0x14, 0x0a, 0x0f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x82, 0x01,
	0x12, 0x14, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x10, 0x83, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x84,
	0x01, 0x12, 0x19, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x66, 0x65, 0x65,
	0x64, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x85, 0x01, 0x12, 0x1f, 0x0a, 0x1a,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x86, 0x01, 0x12, 0x1f, 0x0a,
	0x1a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x87, 0x01, 0x12, 0x12,
	0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x10,
	0x88, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x10, 0x89, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x8a, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x8b,
	0x01, 0x12, 0x19, 0x0a, 0x14, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x8c, 0x01, 0x12, 0x18, 0x0a, 0x13,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x10, 0x8d, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x10, 0x8e, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x64, 0x65, 0x10, 0x91, 0x01, 0x12, 0x1a,
	0x0a, 0x15, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x92, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x10, 0x93, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x10, 0x95, 0x01, 0x12,
	0x1a, 0x0a, 0x15, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x96, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x10, 0x97, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x10, 0x98, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x10, 0x99, 0x01, 0x12, 0x15,
	0x0a, 0x10, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x10, 0x9b, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x9c, 0x01, 0x12, 0x15, 0x0a, 0x10,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x10, 0x9d, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x10, 0xa0, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0xa1, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0xa2, 0x01, 0x12, 0x17, 0x0a, 0x12,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x65, 0x64, 0x10, 0xa3, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0xa4, 0x01,
	0x12, 0x19, 0x0a, 0x14, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0xa5, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x10, 0xa6, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0xa8, 0x01, 0x12, 0x27, 0x0a, 0x22, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10,
	0xa9, 0x01, 0x12, 0x26, 0x0a, 0x21, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0xaa, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x10, 0xab, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0xac, 0x01,
	0x12, 0x16, 0x0a, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x65, 0x6e, 0x10, 0xad, 0x01, 0x42, 0x19, 0x5a, 0x17, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x7a, 0x2f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_type_proto_rawDescOnce sync.Once
	file_type_proto_rawDescData = file_type_proto_rawDesc
)

func file_type_proto_rawDescGZIP() []byte {
	file_type_proto_rawDescOnce.Do(func() {
		file_type_proto_rawDescData = protoimpl.X.CompressGZIP(file_type_proto_rawDescData)
	})
	return file_type_proto_rawDescData
}

var file_type_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_type_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_type_proto_goTypes = []interface{}{
	(RealtimeType)(0),         // 0: header.RealtimeType
	(*TextTransform)(nil),     // 1: header.TextTransform
	(*FloatTransform)(nil),    // 2: header.FloatTransform
	(*TextCondition)(nil),     // 3: header.TextCondition
	(*BoolCondition)(nil),     // 4: header.BoolCondition
	(*FloatCondition)(nil),    // 5: header.FloatCondition
	(*DatetimeCondition)(nil), // 6: header.DatetimeCondition
}
var file_type_proto_depIdxs = []int32{
	1, // 0: header.TextCondition.transforms:type_name -> header.TextTransform
	2, // 1: header.FloatCondition.transforms:type_name -> header.FloatTransform
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_type_proto_init() }
func file_type_proto_init() {
	if File_type_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_type_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextTransform); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_type_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatTransform); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_type_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_type_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoolCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_type_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_type_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatetimeCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_type_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_type_proto_goTypes,
		DependencyIndexes: file_type_proto_depIdxs,
		EnumInfos:         file_type_proto_enumTypes,
		MessageInfos:      file_type_proto_msgTypes,
	}.Build()
	File_type_proto = out.File
	file_type_proto_rawDesc = nil
	file_type_proto_goTypes = nil
	file_type_proto_depIdxs = nil
}
