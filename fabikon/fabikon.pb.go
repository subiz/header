// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.3
// source: fabikon.proto

package fabikon

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FacebookDataset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *string `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	PageId    *string `protobuf:"bytes,3,opt,name=page_id,json=pageId" json:"page_id,omitempty"`
	Id        *string `protobuf:"bytes,4,opt,name=id" json:"id,omitempty"`
}

func (x *FacebookDataset) Reset() {
	*x = FacebookDataset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FacebookDataset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FacebookDataset) ProtoMessage() {}

func (x *FacebookDataset) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FacebookDataset.ProtoReflect.Descriptor instead.
func (*FacebookDataset) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{0}
}

func (x *FacebookDataset) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *FacebookDataset) GetPageId() string {
	if x != nil && x.PageId != nil {
		return *x.PageId
	}
	return ""
}

func (x *FacebookDataset) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

type FacebookPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId                *string        `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Id                       *string        `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Created                  *int64         `protobuf:"varint,3,opt,name=created" json:"created,omitempty"`
	PictureUrl               *string        `protobuf:"bytes,4,opt,name=picture_url,json=pictureUrl" json:"picture_url,omitempty"`
	Name                     *string        `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	AccessToken              *string        `protobuf:"bytes,6,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
	Updated                  *int64         `protobuf:"varint,7,opt,name=updated" json:"updated,omitempty"`
	LastFacebookHook         *int64         `protobuf:"varint,9,opt,name=last_facebook_hook,json=lastFacebookHook" json:"last_facebook_hook,omitempty"`
	LinkedPageId             *string        `protobuf:"bytes,11,opt,name=linked_page_id,json=linkedPageId" json:"linked_page_id,omitempty"` // instagram <-> facebook
	IsInstagram              *bool          `protobuf:"varint,12,opt,name=is_instagram,json=isInstagram" json:"is_instagram,omitempty"`
	InstagramAccount         *InstagramUser `protobuf:"bytes,13,opt,name=instagram_account,json=instagramAccount" json:"instagram_account,omitempty"`
	LastSuccessRequestAt     *int64         `protobuf:"varint,14,opt,name=last_success_request_at,json=lastSuccessRequestAt" json:"last_success_request_at,omitempty"`
	LastFailedRequestAt      *int64         `protobuf:"varint,15,opt,name=last_failed_request_at,json=lastFailedRequestAt" json:"last_failed_request_at,omitempty"`
	LastMessageSentSuccessAt *int64         `protobuf:"varint,16,opt,name=last_message_sent_success_at,json=lastMessageSentSuccessAt" json:"last_message_sent_success_at,omitempty"`
	LastMessageSentFailedAt  *int64         `protobuf:"varint,17,opt,name=last_message_sent_failed_at,json=lastMessageSentFailedAt" json:"last_message_sent_failed_at,omitempty"`
	TokenStatus              *string        `protobuf:"bytes,19,opt,name=token_status,json=tokenStatus" json:"token_status,omitempty"` // '' || failed
	TokenStatusUpdated       *int64         `protobuf:"varint,20,opt,name=token_status_updated,json=tokenStatusUpdated" json:"token_status_updated,omitempty"`
	TokenScope               *string        `protobuf:"bytes,29,opt,name=token_scope,json=tokenScope" json:"token_scope,omitempty"` // empty=page, business, ads
	TokenUpdated             *int64         `protobuf:"varint,30,opt,name=token_updated,json=tokenUpdated" json:"token_updated,omitempty"`
	LastFailedUrl            *string        `protobuf:"bytes,21,opt,name=last_failed_url,json=lastFailedUrl" json:"last_failed_url,omitempty"`
	LastFailedBody           *string        `protobuf:"bytes,22,opt,name=last_failed_body,json=lastFailedBody" json:"last_failed_body,omitempty"` // optional string integration_link_status = 23; // active, failed // remove
	LastConversionSynced     *int64         `protobuf:"varint,24,opt,name=last_conversion_synced,json=lastConversionSynced" json:"last_conversion_synced,omitempty"`
	SyncConversionDisabled   *int64         `protobuf:"varint,25,opt,name=sync_conversion_disabled,json=syncConversionDisabled" json:"sync_conversion_disabled,omitempty"`
	DatasetId                *string        `protobuf:"bytes,28,opt,name=dataset_id,json=datasetId" json:"dataset_id,omitempty"`
	IsBusiness               *bool          `protobuf:"varint,32,opt,name=is_business,json=isBusiness" json:"is_business,omitempty"`
	SystemUserToken          *string        `protobuf:"bytes,33,opt,name=system_user_token,json=systemUserToken" json:"system_user_token,omitempty"`
}

func (x *FacebookPage) Reset() {
	*x = FacebookPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FacebookPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FacebookPage) ProtoMessage() {}

func (x *FacebookPage) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FacebookPage.ProtoReflect.Descriptor instead.
func (*FacebookPage) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{1}
}

func (x *FacebookPage) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *FacebookPage) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *FacebookPage) GetCreated() int64 {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return 0
}

func (x *FacebookPage) GetPictureUrl() string {
	if x != nil && x.PictureUrl != nil {
		return *x.PictureUrl
	}
	return ""
}

func (x *FacebookPage) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *FacebookPage) GetAccessToken() string {
	if x != nil && x.AccessToken != nil {
		return *x.AccessToken
	}
	return ""
}

func (x *FacebookPage) GetUpdated() int64 {
	if x != nil && x.Updated != nil {
		return *x.Updated
	}
	return 0
}

func (x *FacebookPage) GetLastFacebookHook() int64 {
	if x != nil && x.LastFacebookHook != nil {
		return *x.LastFacebookHook
	}
	return 0
}

func (x *FacebookPage) GetLinkedPageId() string {
	if x != nil && x.LinkedPageId != nil {
		return *x.LinkedPageId
	}
	return ""
}

func (x *FacebookPage) GetIsInstagram() bool {
	if x != nil && x.IsInstagram != nil {
		return *x.IsInstagram
	}
	return false
}

func (x *FacebookPage) GetInstagramAccount() *InstagramUser {
	if x != nil {
		return x.InstagramAccount
	}
	return nil
}

func (x *FacebookPage) GetLastSuccessRequestAt() int64 {
	if x != nil && x.LastSuccessRequestAt != nil {
		return *x.LastSuccessRequestAt
	}
	return 0
}

func (x *FacebookPage) GetLastFailedRequestAt() int64 {
	if x != nil && x.LastFailedRequestAt != nil {
		return *x.LastFailedRequestAt
	}
	return 0
}

func (x *FacebookPage) GetLastMessageSentSuccessAt() int64 {
	if x != nil && x.LastMessageSentSuccessAt != nil {
		return *x.LastMessageSentSuccessAt
	}
	return 0
}

func (x *FacebookPage) GetLastMessageSentFailedAt() int64 {
	if x != nil && x.LastMessageSentFailedAt != nil {
		return *x.LastMessageSentFailedAt
	}
	return 0
}

func (x *FacebookPage) GetTokenStatus() string {
	if x != nil && x.TokenStatus != nil {
		return *x.TokenStatus
	}
	return ""
}

func (x *FacebookPage) GetTokenStatusUpdated() int64 {
	if x != nil && x.TokenStatusUpdated != nil {
		return *x.TokenStatusUpdated
	}
	return 0
}

func (x *FacebookPage) GetTokenScope() string {
	if x != nil && x.TokenScope != nil {
		return *x.TokenScope
	}
	return ""
}

func (x *FacebookPage) GetTokenUpdated() int64 {
	if x != nil && x.TokenUpdated != nil {
		return *x.TokenUpdated
	}
	return 0
}

func (x *FacebookPage) GetLastFailedUrl() string {
	if x != nil && x.LastFailedUrl != nil {
		return *x.LastFailedUrl
	}
	return ""
}

func (x *FacebookPage) GetLastFailedBody() string {
	if x != nil && x.LastFailedBody != nil {
		return *x.LastFailedBody
	}
	return ""
}

func (x *FacebookPage) GetLastConversionSynced() int64 {
	if x != nil && x.LastConversionSynced != nil {
		return *x.LastConversionSynced
	}
	return 0
}

func (x *FacebookPage) GetSyncConversionDisabled() int64 {
	if x != nil && x.SyncConversionDisabled != nil {
		return *x.SyncConversionDisabled
	}
	return 0
}

func (x *FacebookPage) GetDatasetId() string {
	if x != nil && x.DatasetId != nil {
		return *x.DatasetId
	}
	return ""
}

func (x *FacebookPage) GetIsBusiness() bool {
	if x != nil && x.IsBusiness != nil {
		return *x.IsBusiness
	}
	return false
}

func (x *FacebookPage) GetSystemUserToken() string {
	if x != nil && x.SystemUserToken != nil {
		return *x.SystemUserToken
	}
	return ""
}

type FbWebhookEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Object *string    `protobuf:"bytes,2,opt,name=object" json:"object,omitempty"` // instagram, page
	Entry  []*FbEntry `protobuf:"bytes,3,rep,name=entry" json:"entry,omitempty"`
}

func (x *FbWebhookEvent) Reset() {
	*x = FbWebhookEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbWebhookEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbWebhookEvent) ProtoMessage() {}

func (x *FbWebhookEvent) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbWebhookEvent.ProtoReflect.Descriptor instead.
func (*FbWebhookEvent) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{2}
}

func (x *FbWebhookEvent) GetObject() string {
	if x != nil && x.Object != nil {
		return *x.Object
	}
	return ""
}

func (x *FbWebhookEvent) GetEntry() []*FbEntry {
	if x != nil {
		return x.Entry
	}
	return nil
}

type FbEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *string        `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	Time      *int64         `protobuf:"varint,5,opt,name=time" json:"time,omitempty"`
	Messaging []*FbMessaging `protobuf:"bytes,6,rep,name=messaging" json:"messaging,omitempty"`
	Changes   []*FbChange    `protobuf:"bytes,7,rep,name=changes" json:"changes,omitempty"`
	Standby   []*FbMessaging `protobuf:"bytes,8,rep,name=standby" json:"standby,omitempty"`
}

func (x *FbEntry) Reset() {
	*x = FbEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbEntry) ProtoMessage() {}

func (x *FbEntry) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbEntry.ProtoReflect.Descriptor instead.
func (*FbEntry) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{3}
}

func (x *FbEntry) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *FbEntry) GetTime() int64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *FbEntry) GetMessaging() []*FbMessaging {
	if x != nil {
		return x.Messaging
	}
	return nil
}

func (x *FbEntry) GetChanges() []*FbChange {
	if x != nil {
		return x.Changes
	}
	return nil
}

func (x *FbEntry) GetStandby() []*FbMessaging {
	if x != nil {
		return x.Standby
	}
	return nil
}

type FbChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field *string        `protobuf:"bytes,2,opt,name=field" json:"field,omitempty"` // feed, comments
	Value *FbChangeValue `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (x *FbChange) Reset() {
	*x = FbChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbChange) ProtoMessage() {}

func (x *FbChange) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbChange.ProtoReflect.Descriptor instead.
func (*FbChange) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{4}
}

func (x *FbChange) GetField() string {
	if x != nil && x.Field != nil {
		return *x.Field
	}
	return ""
}

func (x *FbChange) GetValue() *FbChangeValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type FbFrom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	From     *string `protobuf:"bytes,2,opt,name=from" json:"from,omitempty"`
	Username *string `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
}

func (x *FbFrom) Reset() {
	*x = FbFrom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbFrom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbFrom) ProtoMessage() {}

func (x *FbFrom) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbFrom.ProtoReflect.Descriptor instead.
func (*FbFrom) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{5}
}

func (x *FbFrom) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *FbFrom) GetFrom() string {
	if x != nil && x.From != nil {
		return *x.From
	}
	return ""
}

func (x *FbFrom) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

type FbChangeValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EditedTime       *int64         `protobuf:"varint,3,opt,name=edited_time,json=editedTime" json:"edited_time,omitempty"`
	From             *FbFrom        `protobuf:"bytes,4,opt,name=from" json:"from,omitempty"`
	Post             *FbPagePost    `protobuf:"bytes,5,opt,name=post" json:"post,omitempty"`
	IsHidden         *bool          `protobuf:"varint,6,opt,name=is_hidden,json=isHidden" json:"is_hidden,omitempty"`
	Link             *string        `protobuf:"bytes,7,opt,name=link" json:"link,omitempty"`
	Message          *string        `protobuf:"bytes,8,opt,name=message" json:"message,omitempty"`
	Photo            *string        `protobuf:"bytes,9,opt,name=photo" json:"photo,omitempty"`
	Photos           []string       `protobuf:"bytes,10,rep,name=photos" json:"photos,omitempty"`
	PostId           *string        `protobuf:"bytes,11,opt,name=post_id,json=postId" json:"post_id,omitempty"`
	Story            *string        `protobuf:"bytes,12,opt,name=story" json:"story,omitempty"`
	Title            *string        `protobuf:"bytes,13,opt,name=title" json:"title,omitempty"`
	Video            *string        `protobuf:"bytes,14,opt,name=video" json:"video,omitempty"`
	VideoFlagReason  *string        `protobuf:"bytes,15,opt,name=video_flag_reason,json=videoFlagReason" json:"video_flag_reason,omitempty"`
	Action           *string        `protobuf:"bytes,16,opt,name=action" json:"action,omitempty"`
	AlbumId          *string        `protobuf:"bytes,17,opt,name=album_id,json=albumId" json:"album_id,omitempty"`
	CommentId        *string        `protobuf:"bytes,18,opt,name=comment_id,json=commentId" json:"comment_id,omitempty"`
	CreatedTime      *int64         `protobuf:"varint,19,opt,name=created_time,json=createdTime" json:"created_time,omitempty"`
	EventId          *string        `protobuf:"bytes,20,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	Item             *string        `protobuf:"bytes,21,opt,name=item" json:"item,omitempty"`
	OpenGraphStoryId *string        `protobuf:"bytes,22,opt,name=open_graph_story_id,json=openGraphStoryId" json:"open_graph_story_id,omitempty"`
	ParentId         *string        `protobuf:"bytes,23,opt,name=parent_id,json=parentId" json:"parent_id,omitempty"`
	PhotoId          *string        `protobuf:"bytes,24,opt,name=photo_id,json=photoId" json:"photo_id,omitempty"`
	ReactionType     *string        `protobuf:"bytes,25,opt,name=reaction_type,json=reactionType" json:"reaction_type,omitempty"`
	Published        *int32         `protobuf:"varint,26,opt,name=published" json:"published,omitempty"`
	RecipientId      *string        `protobuf:"bytes,27,opt,name=recipient_id,json=recipientId" json:"recipient_id,omitempty"`
	ShareId          *string        `protobuf:"bytes,28,opt,name=share_id,json=shareId" json:"share_id,omitempty"`
	Verb             *string        `protobuf:"bytes,29,opt,name=verb" json:"verb,omitempty"` // remove
	VideoId          *string        `protobuf:"bytes,30,opt,name=video_id,json=videoId" json:"video_id,omitempty"`
	Media            *IgMedia       `protobuf:"bytes,31,opt,name=media" json:"media,omitempty"`
	Id               *string        `protobuf:"bytes,32,opt,name=id" json:"id,omitempty"`
	Text             *string        `protobuf:"bytes,33,opt,name=text" json:"text,omitempty"`
	MediaId          *string        `protobuf:"bytes,34,opt,name=media_id,json=mediaId" json:"media_id,omitempty"`
	User             *FbChangeUser  `protobuf:"bytes,35,opt,name=user" json:"user,omitempty"` // https://developers.facebook.com/docs/messenger-platform/identity/custom-labels/?locale=vi_VN
	Label            *FbCustomLabel `protobuf:"bytes,36,opt,name=label" json:"label,omitempty"`
	// leadgen
	LeadgenId *string `protobuf:"bytes,40,opt,name=leadgen_id,json=leadgenId" json:"leadgen_id,omitempty"`
	PageId    *string `protobuf:"bytes,41,opt,name=page_id,json=pageId" json:"page_id,omitempty"`
	FormId    *string `protobuf:"bytes,42,opt,name=form_id,json=formId" json:"form_id,omitempty"`
	AdgroupId *string `protobuf:"bytes,43,opt,name=adgroup_id,json=adgroupId" json:"adgroup_id,omitempty"`
	AdId      *string `protobuf:"bytes,44,opt,name=ad_id,json=adId" json:"ad_id,omitempty"`
}

func (x *FbChangeValue) Reset() {
	*x = FbChangeValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbChangeValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbChangeValue) ProtoMessage() {}

func (x *FbChangeValue) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbChangeValue.ProtoReflect.Descriptor instead.
func (*FbChangeValue) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{6}
}

func (x *FbChangeValue) GetEditedTime() int64 {
	if x != nil && x.EditedTime != nil {
		return *x.EditedTime
	}
	return 0
}

func (x *FbChangeValue) GetFrom() *FbFrom {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *FbChangeValue) GetPost() *FbPagePost {
	if x != nil {
		return x.Post
	}
	return nil
}

func (x *FbChangeValue) GetIsHidden() bool {
	if x != nil && x.IsHidden != nil {
		return *x.IsHidden
	}
	return false
}

func (x *FbChangeValue) GetLink() string {
	if x != nil && x.Link != nil {
		return *x.Link
	}
	return ""
}

func (x *FbChangeValue) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *FbChangeValue) GetPhoto() string {
	if x != nil && x.Photo != nil {
		return *x.Photo
	}
	return ""
}

func (x *FbChangeValue) GetPhotos() []string {
	if x != nil {
		return x.Photos
	}
	return nil
}

func (x *FbChangeValue) GetPostId() string {
	if x != nil && x.PostId != nil {
		return *x.PostId
	}
	return ""
}

func (x *FbChangeValue) GetStory() string {
	if x != nil && x.Story != nil {
		return *x.Story
	}
	return ""
}

func (x *FbChangeValue) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *FbChangeValue) GetVideo() string {
	if x != nil && x.Video != nil {
		return *x.Video
	}
	return ""
}

func (x *FbChangeValue) GetVideoFlagReason() string {
	if x != nil && x.VideoFlagReason != nil {
		return *x.VideoFlagReason
	}
	return ""
}

func (x *FbChangeValue) GetAction() string {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return ""
}

func (x *FbChangeValue) GetAlbumId() string {
	if x != nil && x.AlbumId != nil {
		return *x.AlbumId
	}
	return ""
}

func (x *FbChangeValue) GetCommentId() string {
	if x != nil && x.CommentId != nil {
		return *x.CommentId
	}
	return ""
}

func (x *FbChangeValue) GetCreatedTime() int64 {
	if x != nil && x.CreatedTime != nil {
		return *x.CreatedTime
	}
	return 0
}

func (x *FbChangeValue) GetEventId() string {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return ""
}

func (x *FbChangeValue) GetItem() string {
	if x != nil && x.Item != nil {
		return *x.Item
	}
	return ""
}

func (x *FbChangeValue) GetOpenGraphStoryId() string {
	if x != nil && x.OpenGraphStoryId != nil {
		return *x.OpenGraphStoryId
	}
	return ""
}

func (x *FbChangeValue) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *FbChangeValue) GetPhotoId() string {
	if x != nil && x.PhotoId != nil {
		return *x.PhotoId
	}
	return ""
}

func (x *FbChangeValue) GetReactionType() string {
	if x != nil && x.ReactionType != nil {
		return *x.ReactionType
	}
	return ""
}

func (x *FbChangeValue) GetPublished() int32 {
	if x != nil && x.Published != nil {
		return *x.Published
	}
	return 0
}

func (x *FbChangeValue) GetRecipientId() string {
	if x != nil && x.RecipientId != nil {
		return *x.RecipientId
	}
	return ""
}

func (x *FbChangeValue) GetShareId() string {
	if x != nil && x.ShareId != nil {
		return *x.ShareId
	}
	return ""
}

func (x *FbChangeValue) GetVerb() string {
	if x != nil && x.Verb != nil {
		return *x.Verb
	}
	return ""
}

func (x *FbChangeValue) GetVideoId() string {
	if x != nil && x.VideoId != nil {
		return *x.VideoId
	}
	return ""
}

func (x *FbChangeValue) GetMedia() *IgMedia {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *FbChangeValue) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *FbChangeValue) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *FbChangeValue) GetMediaId() string {
	if x != nil && x.MediaId != nil {
		return *x.MediaId
	}
	return ""
}

func (x *FbChangeValue) GetUser() *FbChangeUser {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *FbChangeValue) GetLabel() *FbCustomLabel {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *FbChangeValue) GetLeadgenId() string {
	if x != nil && x.LeadgenId != nil {
		return *x.LeadgenId
	}
	return ""
}

func (x *FbChangeValue) GetPageId() string {
	if x != nil && x.PageId != nil {
		return *x.PageId
	}
	return ""
}

func (x *FbChangeValue) GetFormId() string {
	if x != nil && x.FormId != nil {
		return *x.FormId
	}
	return ""
}

func (x *FbChangeValue) GetAdgroupId() string {
	if x != nil && x.AdgroupId != nil {
		return *x.AdgroupId
	}
	return ""
}

func (x *FbChangeValue) GetAdId() string {
	if x != nil && x.AdId != nil {
		return *x.AdId
	}
	return ""
}

type FbCustomLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            *string `protobuf:"bytes,4,opt,name=id" json:"id,omitempty"`
	PageLabelName *string `protobuf:"bytes,5,opt,name=page_label_name,json=pageLabelName" json:"page_label_name,omitempty"`
}

func (x *FbCustomLabel) Reset() {
	*x = FbCustomLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbCustomLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbCustomLabel) ProtoMessage() {}

func (x *FbCustomLabel) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbCustomLabel.ProtoReflect.Descriptor instead.
func (*FbCustomLabel) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{7}
}

func (x *FbCustomLabel) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *FbCustomLabel) GetPageLabelName() string {
	if x != nil && x.PageLabelName != nil {
		return *x.PageLabelName
	}
	return ""
}

type FbChangeUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *string `protobuf:"bytes,4,opt,name=id" json:"id,omitempty"`
}

func (x *FbChangeUser) Reset() {
	*x = FbChangeUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbChangeUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbChangeUser) ProtoMessage() {}

func (x *FbChangeUser) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbChangeUser.ProtoReflect.Descriptor instead.
func (*FbChangeUser) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{8}
}

func (x *FbChangeUser) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

type IgMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               *string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	MediaProductType *string `protobuf:"bytes,4,opt,name=media_product_type,json=mediaProductType" json:"media_product_type,omitempty"`
}

func (x *IgMedia) Reset() {
	*x = IgMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IgMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IgMedia) ProtoMessage() {}

func (x *IgMedia) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IgMedia.ProtoReflect.Descriptor instead.
func (*IgMedia) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{9}
}

func (x *IgMedia) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *IgMedia) GetMediaProductType() string {
	if x != nil && x.MediaProductType != nil {
		return *x.MediaProductType
	}
	return ""
}

type FbPagePost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusType      *string `protobuf:"bytes,2,opt,name=status_type,json=statusType" json:"status_type,omitempty"`
	IsPublished     *bool   `protobuf:"varint,3,opt,name=is_published,json=isPublished" json:"is_published,omitempty"`
	UpdatedTime     *string `protobuf:"bytes,4,opt,name=updated_time,json=updatedTime" json:"updated_time,omitempty"`
	PermalinkUrl    *string `protobuf:"bytes,5,opt,name=permalink_url,json=permalinkUrl" json:"permalink_url,omitempty"`
	PromotionStatus *string `protobuf:"bytes,6,opt,name=promotion_status,json=promotionStatus" json:"promotion_status,omitempty"`
	Id              *string `protobuf:"bytes,7,opt,name=id" json:"id,omitempty"`
}

func (x *FbPagePost) Reset() {
	*x = FbPagePost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbPagePost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbPagePost) ProtoMessage() {}

func (x *FbPagePost) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbPagePost.ProtoReflect.Descriptor instead.
func (*FbPagePost) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{10}
}

func (x *FbPagePost) GetStatusType() string {
	if x != nil && x.StatusType != nil {
		return *x.StatusType
	}
	return ""
}

func (x *FbPagePost) GetIsPublished() bool {
	if x != nil && x.IsPublished != nil {
		return *x.IsPublished
	}
	return false
}

func (x *FbPagePost) GetUpdatedTime() string {
	if x != nil && x.UpdatedTime != nil {
		return *x.UpdatedTime
	}
	return ""
}

func (x *FbPagePost) GetPermalinkUrl() string {
	if x != nil && x.PermalinkUrl != nil {
		return *x.PermalinkUrl
	}
	return ""
}

func (x *FbPagePost) GetPromotionStatus() string {
	if x != nil && x.PromotionStatus != nil {
		return *x.PromotionStatus
	}
	return ""
}

func (x *FbPagePost) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

type FbMessaging struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sender       *FbSender      `protobuf:"bytes,2,opt,name=sender" json:"sender,omitempty"`
	Recipient    *FbRecipient   `protobuf:"bytes,3,opt,name=recipient" json:"recipient,omitempty"`
	Timestamp    *int64         `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	Message      *FbMessage     `protobuf:"bytes,5,opt,name=message" json:"message,omitempty"`
	Delivery     *FbDelivery    `protobuf:"bytes,6,opt,name=delivery" json:"delivery,omitempty"`
	MessageType  *string        `protobuf:"bytes,7,opt,name=message_type,json=messageType" json:"message_type,omitempty"`
	SenderAction *string        `protobuf:"bytes,8,opt,name=sender_action,json=senderAction" json:"sender_action,omitempty"` // typing_on, typing_off, mark_seen
	Read         *FbRead        `protobuf:"bytes,9,opt,name=read" json:"read,omitempty"`
	Postback     *FbPostback    `protobuf:"bytes,10,opt,name=postback" json:"postback,omitempty"`
	Referral     *FbReferral    `protobuf:"bytes,11,opt,name=referral" json:"referral,omitempty"`
	Tag          *string        `protobuf:"bytes,12,opt,name=tag" json:"tag,omitempty"` // HUMAN_AGENT
	Reaction     *IgReaction    `protobuf:"bytes,13,opt,name=reaction" json:"reaction,omitempty"`
	MessageEdit  *FbMessageEdit `protobuf:"bytes,14,opt,name=message_edit,json=messageEdit" json:"message_edit,omitempty"`
}

func (x *FbMessaging) Reset() {
	*x = FbMessaging{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbMessaging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbMessaging) ProtoMessage() {}

func (x *FbMessaging) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbMessaging.ProtoReflect.Descriptor instead.
func (*FbMessaging) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{11}
}

func (x *FbMessaging) GetSender() *FbSender {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *FbMessaging) GetRecipient() *FbRecipient {
	if x != nil {
		return x.Recipient
	}
	return nil
}

func (x *FbMessaging) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *FbMessaging) GetMessage() *FbMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *FbMessaging) GetDelivery() *FbDelivery {
	if x != nil {
		return x.Delivery
	}
	return nil
}

func (x *FbMessaging) GetMessageType() string {
	if x != nil && x.MessageType != nil {
		return *x.MessageType
	}
	return ""
}

func (x *FbMessaging) GetSenderAction() string {
	if x != nil && x.SenderAction != nil {
		return *x.SenderAction
	}
	return ""
}

func (x *FbMessaging) GetRead() *FbRead {
	if x != nil {
		return x.Read
	}
	return nil
}

func (x *FbMessaging) GetPostback() *FbPostback {
	if x != nil {
		return x.Postback
	}
	return nil
}

func (x *FbMessaging) GetReferral() *FbReferral {
	if x != nil {
		return x.Referral
	}
	return nil
}

func (x *FbMessaging) GetTag() string {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return ""
}

func (x *FbMessaging) GetReaction() *IgReaction {
	if x != nil {
		return x.Reaction
	}
	return nil
}

func (x *FbMessaging) GetMessageEdit() *FbMessageEdit {
	if x != nil {
		return x.MessageEdit
	}
	return nil
}

type FbMessageEdit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mid     *string `protobuf:"bytes,4,opt,name=mid" json:"mid,omitempty"`
	Text    *string `protobuf:"bytes,5,opt,name=text" json:"text,omitempty"`
	NumEdit *int64  `protobuf:"varint,6,opt,name=num_edit,json=numEdit" json:"num_edit,omitempty"`
}

func (x *FbMessageEdit) Reset() {
	*x = FbMessageEdit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbMessageEdit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbMessageEdit) ProtoMessage() {}

func (x *FbMessageEdit) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbMessageEdit.ProtoReflect.Descriptor instead.
func (*FbMessageEdit) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{12}
}

func (x *FbMessageEdit) GetMid() string {
	if x != nil && x.Mid != nil {
		return *x.Mid
	}
	return ""
}

func (x *FbMessageEdit) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *FbMessageEdit) GetNumEdit() int64 {
	if x != nil && x.NumEdit != nil {
		return *x.NumEdit
	}
	return 0
}

type IgReaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mid      *string `protobuf:"bytes,5,opt,name=mid" json:"mid,omitempty"`
	Action   *string `protobuf:"bytes,6,opt,name=action" json:"action,omitempty"`
	Reaction *string `protobuf:"bytes,7,opt,name=reaction" json:"reaction,omitempty"`
	Emoji    *string `protobuf:"bytes,8,opt,name=emoji" json:"emoji,omitempty"`
}

func (x *IgReaction) Reset() {
	*x = IgReaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IgReaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IgReaction) ProtoMessage() {}

func (x *IgReaction) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IgReaction.ProtoReflect.Descriptor instead.
func (*IgReaction) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{13}
}

func (x *IgReaction) GetMid() string {
	if x != nil && x.Mid != nil {
		return *x.Mid
	}
	return ""
}

func (x *IgReaction) GetAction() string {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return ""
}

func (x *IgReaction) GetReaction() string {
	if x != nil && x.Reaction != nil {
		return *x.Reaction
	}
	return ""
}

func (x *IgReaction) GetEmoji() string {
	if x != nil && x.Emoji != nil {
		return *x.Emoji
	}
	return ""
}

type FbPostback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload  *string     `protobuf:"bytes,2,opt,name=payload" json:"payload,omitempty"`
	Referral *FbReferral `protobuf:"bytes,3,opt,name=referral" json:"referral,omitempty"`
	Title    *string     `protobuf:"bytes,4,opt,name=title" json:"title,omitempty"`
	Mid      *string     `protobuf:"bytes,5,opt,name=mid" json:"mid,omitempty"`
}

func (x *FbPostback) Reset() {
	*x = FbPostback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbPostback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbPostback) ProtoMessage() {}

func (x *FbPostback) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbPostback.ProtoReflect.Descriptor instead.
func (*FbPostback) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{14}
}

func (x *FbPostback) GetPayload() string {
	if x != nil && x.Payload != nil {
		return *x.Payload
	}
	return ""
}

func (x *FbPostback) GetReferral() *FbReferral {
	if x != nil {
		return x.Referral
	}
	return nil
}

func (x *FbPostback) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *FbPostback) GetMid() string {
	if x != nil && x.Mid != nil {
		return *x.Mid
	}
	return ""
}

type AdsContextData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhotoUrl  *string `protobuf:"bytes,5,opt,name=photo_url,json=photoUrl" json:"photo_url,omitempty"`
	PostId    *string `protobuf:"bytes,6,opt,name=post_id,json=postId" json:"post_id,omitempty"`
	AdTitle   *string `protobuf:"bytes,7,opt,name=ad_title,json=adTitle" json:"ad_title,omitempty"`
	VideoUrl  *string `protobuf:"bytes,8,opt,name=video_url,json=videoUrl" json:"video_url,omitempty"`
	ProductId *string `protobuf:"bytes,9,opt,name=product_id,json=productId" json:"product_id,omitempty"`
}

func (x *AdsContextData) Reset() {
	*x = AdsContextData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdsContextData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdsContextData) ProtoMessage() {}

func (x *AdsContextData) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdsContextData.ProtoReflect.Descriptor instead.
func (*AdsContextData) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{15}
}

func (x *AdsContextData) GetPhotoUrl() string {
	if x != nil && x.PhotoUrl != nil {
		return *x.PhotoUrl
	}
	return ""
}

func (x *AdsContextData) GetPostId() string {
	if x != nil && x.PostId != nil {
		return *x.PostId
	}
	return ""
}

func (x *AdsContextData) GetAdTitle() string {
	if x != nil && x.AdTitle != nil {
		return *x.AdTitle
	}
	return ""
}

func (x *AdsContextData) GetVideoUrl() string {
	if x != nil && x.VideoUrl != nil {
		return *x.VideoUrl
	}
	return ""
}

func (x *AdsContextData) GetProductId() string {
	if x != nil && x.ProductId != nil {
		return *x.ProductId
	}
	return ""
}

type FbReferral struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ref            *string         `protobuf:"bytes,2,opt,name=ref" json:"ref,omitempty"`
	Source         *string         `protobuf:"bytes,3,opt,name=source" json:"source,omitempty"` // SHORTLINK, ADS
	Type           *string         `protobuf:"bytes,4,opt,name=type" json:"type,omitempty"`     // OPEN_THREAD
	AdsContextData *AdsContextData `protobuf:"bytes,5,opt,name=ads_context_data,json=adsContextData" json:"ads_context_data,omitempty"`
	AdId           *string         `protobuf:"bytes,6,opt,name=ad_id,json=adId" json:"ad_id,omitempty"`
	RefererUri     *string         `protobuf:"bytes,7,opt,name=referer_uri,json=refererUri" json:"referer_uri,omitempty"`
	IsGuestUser    *bool           `protobuf:"varint,8,opt,name=is_guest_user,json=isGuestUser" json:"is_guest_user,omitempty"`
	Product        *FbProduct      `protobuf:"bytes,9,opt,name=product" json:"product,omitempty"`
}

func (x *FbReferral) Reset() {
	*x = FbReferral{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbReferral) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbReferral) ProtoMessage() {}

func (x *FbReferral) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbReferral.ProtoReflect.Descriptor instead.
func (*FbReferral) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{16}
}

func (x *FbReferral) GetRef() string {
	if x != nil && x.Ref != nil {
		return *x.Ref
	}
	return ""
}

func (x *FbReferral) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *FbReferral) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *FbReferral) GetAdsContextData() *AdsContextData {
	if x != nil {
		return x.AdsContextData
	}
	return nil
}

func (x *FbReferral) GetAdId() string {
	if x != nil && x.AdId != nil {
		return *x.AdId
	}
	return ""
}

func (x *FbReferral) GetRefererUri() string {
	if x != nil && x.RefererUri != nil {
		return *x.RefererUri
	}
	return ""
}

func (x *FbReferral) GetIsGuestUser() bool {
	if x != nil && x.IsGuestUser != nil {
		return *x.IsGuestUser
	}
	return false
}

func (x *FbReferral) GetProduct() *FbProduct {
	if x != nil {
		return x.Product
	}
	return nil
}

type FbMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mid          *string         `protobuf:"bytes,2,opt,name=mid" json:"mid,omitempty"`
	Text         *string         `protobuf:"bytes,3,opt,name=text" json:"text,omitempty"`
	Attachments  []*FbAttachment `protobuf:"bytes,4,rep,name=attachments" json:"attachments,omitempty"`
	Read         *FbRead         `protobuf:"bytes,5,opt,name=read" json:"read,omitempty"`
	Attachment   *FbAttachment   `protobuf:"bytes,6,opt,name=attachment" json:"attachment,omitempty"`
	IsEcho       *bool           `protobuf:"varint,7,opt,name=is_echo,json=isEcho" json:"is_echo,omitempty"`
	AppId        *int64          `protobuf:"varint,8,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Metadata     *string         `protobuf:"bytes,9,opt,name=metadata" json:"metadata,omitempty"`
	QuickReplies []*QuickReply   `protobuf:"bytes,10,rep,name=quick_replies,json=quickReplies" json:"quick_replies,omitempty"`
	QuickReply   *QuickReply     `protobuf:"bytes,11,opt,name=quick_reply,json=quickReply" json:"quick_reply,omitempty"` // response from fb
	IsSupported  *string         `protobuf:"bytes,12,opt,name=is_supported,json=isSupported" json:"is_supported,omitempty"`
	IsDeleted    *bool           `protobuf:"varint,13,opt,name=is_deleted,json=isDeleted" json:"is_deleted,omitempty"`
	ReplyTo      *ReplyTo        `protobuf:"bytes,14,opt,name=reply_to,json=replyTo" json:"reply_to,omitempty"`
	// optional FbMessageRef referral = 15;
	Referral *FbReferral `protobuf:"bytes,16,opt,name=referral" json:"referral,omitempty"`
}

func (x *FbMessage) Reset() {
	*x = FbMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbMessage) ProtoMessage() {}

func (x *FbMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbMessage.ProtoReflect.Descriptor instead.
func (*FbMessage) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{17}
}

func (x *FbMessage) GetMid() string {
	if x != nil && x.Mid != nil {
		return *x.Mid
	}
	return ""
}

func (x *FbMessage) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *FbMessage) GetAttachments() []*FbAttachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *FbMessage) GetRead() *FbRead {
	if x != nil {
		return x.Read
	}
	return nil
}

func (x *FbMessage) GetAttachment() *FbAttachment {
	if x != nil {
		return x.Attachment
	}
	return nil
}

func (x *FbMessage) GetIsEcho() bool {
	if x != nil && x.IsEcho != nil {
		return *x.IsEcho
	}
	return false
}

func (x *FbMessage) GetAppId() int64 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *FbMessage) GetMetadata() string {
	if x != nil && x.Metadata != nil {
		return *x.Metadata
	}
	return ""
}

func (x *FbMessage) GetQuickReplies() []*QuickReply {
	if x != nil {
		return x.QuickReplies
	}
	return nil
}

func (x *FbMessage) GetQuickReply() *QuickReply {
	if x != nil {
		return x.QuickReply
	}
	return nil
}

func (x *FbMessage) GetIsSupported() string {
	if x != nil && x.IsSupported != nil {
		return *x.IsSupported
	}
	return ""
}

func (x *FbMessage) GetIsDeleted() bool {
	if x != nil && x.IsDeleted != nil {
		return *x.IsDeleted
	}
	return false
}

func (x *FbMessage) GetReplyTo() *ReplyTo {
	if x != nil {
		return x.ReplyTo
	}
	return nil
}

func (x *FbMessage) GetReferral() *FbReferral {
	if x != nil {
		return x.Referral
	}
	return nil
}

type ReplyTo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mid   *string       `protobuf:"bytes,4,opt,name=mid" json:"mid,omitempty"`
	Story *FbReplyStory `protobuf:"bytes,5,opt,name=story" json:"story,omitempty"`
}

func (x *ReplyTo) Reset() {
	*x = ReplyTo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyTo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyTo) ProtoMessage() {}

func (x *ReplyTo) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyTo.ProtoReflect.Descriptor instead.
func (*ReplyTo) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{18}
}

func (x *ReplyTo) GetMid() string {
	if x != nil && x.Mid != nil {
		return *x.Mid
	}
	return ""
}

func (x *ReplyTo) GetStory() *FbReplyStory {
	if x != nil {
		return x.Story
	}
	return nil
}

type FbReplyStory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url *string `protobuf:"bytes,5,opt,name=url" json:"url,omitempty"`
	Id  *string `protobuf:"bytes,6,opt,name=id" json:"id,omitempty"`
}

func (x *FbReplyStory) Reset() {
	*x = FbReplyStory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbReplyStory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbReplyStory) ProtoMessage() {}

func (x *FbReplyStory) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbReplyStory.ProtoReflect.Descriptor instead.
func (*FbReplyStory) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{19}
}

func (x *FbReplyStory) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *FbReplyStory) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

type QuickReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContentType *string `protobuf:"bytes,2,opt,name=content_type,json=contentType" json:"content_type,omitempty"` // text
	Title       *string `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Payload     *string `protobuf:"bytes,4,opt,name=payload" json:"payload,omitempty"`
	ImageUrl    *string `protobuf:"bytes,5,opt,name=image_url,json=imageUrl" json:"image_url,omitempty"`
}

func (x *QuickReply) Reset() {
	*x = QuickReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuickReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuickReply) ProtoMessage() {}

func (x *QuickReply) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuickReply.ProtoReflect.Descriptor instead.
func (*QuickReply) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{20}
}

func (x *QuickReply) GetContentType() string {
	if x != nil && x.ContentType != nil {
		return *x.ContentType
	}
	return ""
}

func (x *QuickReply) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *QuickReply) GetPayload() string {
	if x != nil && x.Payload != nil {
		return *x.Payload
	}
	return ""
}

func (x *QuickReply) GetImageUrl() string {
	if x != nil && x.ImageUrl != nil {
		return *x.ImageUrl
	}
	return ""
}

type FbSender struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      *string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	UserRef *string `protobuf:"bytes,3,opt,name=user_ref,json=userRef" json:"user_ref,omitempty"`
}

func (x *FbSender) Reset() {
	*x = FbSender{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbSender) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbSender) ProtoMessage() {}

func (x *FbSender) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbSender.ProtoReflect.Descriptor instead.
func (*FbSender) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{21}
}

func (x *FbSender) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *FbSender) GetUserRef() string {
	if x != nil && x.UserRef != nil {
		return *x.UserRef
	}
	return ""
}

type FbRecipient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	// https://developers.facebook.com/docs/messenger-platform/discovery/private-replies
	PostId    *string `protobuf:"bytes,3,opt,name=post_id,json=postId" json:"post_id,omitempty"`
	CommentId *string `protobuf:"bytes,4,opt,name=comment_id,json=commentId" json:"comment_id,omitempty"`
	UserRef   *string `protobuf:"bytes,5,opt,name=user_ref,json=userRef" json:"user_ref,omitempty"`
}

func (x *FbRecipient) Reset() {
	*x = FbRecipient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbRecipient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbRecipient) ProtoMessage() {}

func (x *FbRecipient) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbRecipient.ProtoReflect.Descriptor instead.
func (*FbRecipient) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{22}
}

func (x *FbRecipient) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *FbRecipient) GetPostId() string {
	if x != nil && x.PostId != nil {
		return *x.PostId
	}
	return ""
}

func (x *FbRecipient) GetCommentId() string {
	if x != nil && x.CommentId != nil {
		return *x.CommentId
	}
	return ""
}

func (x *FbRecipient) GetUserRef() string {
	if x != nil && x.UserRef != nil {
		return *x.UserRef
	}
	return ""
}

type FbAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Url  *string `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
}

func (x *FbAction) Reset() {
	*x = FbAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbAction) ProtoMessage() {}

func (x *FbAction) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbAction.ProtoReflect.Descriptor instead.
func (*FbAction) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{23}
}

func (x *FbAction) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *FbAction) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

type FbAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    *string    `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"` // template, fallback
	Payload *FbPayload `protobuf:"bytes,3,opt,name=payload" json:"payload,omitempty"`
	Title   *string    `protobuf:"bytes,4,opt,name=title" json:"title,omitempty"`
	URL     *string    `protobuf:"bytes,5,opt,name=URL" json:"URL,omitempty"`
}

func (x *FbAttachment) Reset() {
	*x = FbAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbAttachment) ProtoMessage() {}

func (x *FbAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbAttachment.ProtoReflect.Descriptor instead.
func (*FbAttachment) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{24}
}

func (x *FbAttachment) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *FbAttachment) GetPayload() *FbPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *FbAttachment) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *FbAttachment) GetURL() string {
	if x != nil && x.URL != nil {
		return *x.URL
	}
	return ""
}

type Summary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subtotal     *float32 `protobuf:"fixed32,2,opt,name=subtotal" json:"subtotal,omitempty"`
	ShippingCost *float32 `protobuf:"fixed32,3,opt,name=shipping_cost,json=shippingCost" json:"shipping_cost,omitempty"`
	TotalTax     *float32 `protobuf:"fixed32,4,opt,name=total_tax,json=totalTax" json:"total_tax,omitempty"`
	TotalCost    *float32 `protobuf:"fixed32,5,opt,name=total_cost,json=totalCost" json:"total_cost,omitempty"`
}

func (x *Summary) Reset() {
	*x = Summary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Summary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Summary) ProtoMessage() {}

func (x *Summary) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Summary.ProtoReflect.Descriptor instead.
func (*Summary) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{25}
}

func (x *Summary) GetSubtotal() float32 {
	if x != nil && x.Subtotal != nil {
		return *x.Subtotal
	}
	return 0
}

func (x *Summary) GetShippingCost() float32 {
	if x != nil && x.ShippingCost != nil {
		return *x.ShippingCost
	}
	return 0
}

func (x *Summary) GetTotalTax() float32 {
	if x != nil && x.TotalTax != nil {
		return *x.TotalTax
	}
	return 0
}

func (x *Summary) GetTotalCost() float32 {
	if x != nil && x.TotalCost != nil {
		return *x.TotalCost
	}
	return 0
}

type Adjustment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   *string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Amount *float32 `protobuf:"fixed32,3,opt,name=amount" json:"amount,omitempty"`
}

func (x *Adjustment) Reset() {
	*x = Adjustment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Adjustment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Adjustment) ProtoMessage() {}

func (x *Adjustment) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Adjustment.ProtoReflect.Descriptor instead.
func (*Adjustment) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{26}
}

func (x *Adjustment) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Adjustment) GetAmount() float32 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Street_1   *string `protobuf:"bytes,2,opt,name=street_1,json=street1" json:"street_1,omitempty"`
	Street_2   *string `protobuf:"bytes,3,opt,name=street_2,json=street2" json:"street_2,omitempty"`
	City       *string `protobuf:"bytes,4,opt,name=city" json:"city,omitempty"`
	PostalCode *string `protobuf:"bytes,5,opt,name=postal_code,json=postalCode" json:"postal_code,omitempty"`
	State      *string `protobuf:"bytes,6,opt,name=state" json:"state,omitempty"`
	Country    *string `protobuf:"bytes,7,opt,name=country" json:"country,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{27}
}

func (x *Address) GetStreet_1() string {
	if x != nil && x.Street_1 != nil {
		return *x.Street_1
	}
	return ""
}

func (x *Address) GetStreet_2() string {
	if x != nil && x.Street_2 != nil {
		return *x.Street_2
	}
	return ""
}

func (x *Address) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *Address) GetPostalCode() string {
	if x != nil && x.PostalCode != nil {
		return *x.PostalCode
	}
	return ""
}

func (x *Address) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *Address) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

type GenericElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title         *string   `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	ItemUrl       *string   `protobuf:"bytes,3,opt,name=item_url,json=itemUrl" json:"item_url,omitempty"`
	ImageUrl      *string   `protobuf:"bytes,4,opt,name=image_url,json=imageUrl" json:"image_url,omitempty"`
	Subtitle      *string   `protobuf:"bytes,5,opt,name=subtitle" json:"subtitle,omitempty"`
	DefaultAction *Button   `protobuf:"bytes,6,opt,name=default_action,json=defaultAction" json:"default_action,omitempty"`
	Id            *string   `protobuf:"bytes,7,opt,name=id" json:"id,omitempty"` // fbproduct id
	Buttons       []*Button `protobuf:"bytes,8,rep,name=buttons" json:"buttons,omitempty"`
	Quantity      *int64    `protobuf:"varint,9,opt,name=quantity" json:"quantity,omitempty"`
	Currency      *string   `protobuf:"bytes,10,opt,name=currency" json:"currency,omitempty"`
	Price         *float32  `protobuf:"fixed32,11,opt,name=price" json:"price,omitempty"`
}

func (x *GenericElement) Reset() {
	*x = GenericElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericElement) ProtoMessage() {}

func (x *GenericElement) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericElement.ProtoReflect.Descriptor instead.
func (*GenericElement) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{28}
}

func (x *GenericElement) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *GenericElement) GetItemUrl() string {
	if x != nil && x.ItemUrl != nil {
		return *x.ItemUrl
	}
	return ""
}

func (x *GenericElement) GetImageUrl() string {
	if x != nil && x.ImageUrl != nil {
		return *x.ImageUrl
	}
	return ""
}

func (x *GenericElement) GetSubtitle() string {
	if x != nil && x.Subtitle != nil {
		return *x.Subtitle
	}
	return ""
}

func (x *GenericElement) GetDefaultAction() *Button {
	if x != nil {
		return x.DefaultAction
	}
	return nil
}

func (x *GenericElement) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *GenericElement) GetButtons() []*Button {
	if x != nil {
		return x.Buttons
	}
	return nil
}

func (x *GenericElement) GetQuantity() int64 {
	if x != nil && x.Quantity != nil {
		return *x.Quantity
	}
	return 0
}

func (x *GenericElement) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *GenericElement) GetPrice() float32 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

type FbPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url           *string           `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	IsReuseable   *bool             `protobuf:"varint,3,opt,name=is_reuseable,json=isReuseable" json:"is_reuseable,omitempty"`
	TemplateType  *string           `protobuf:"bytes,4,opt,name=template_type,json=templateType" json:"template_type,omitempty"`
	Sharable      *bool             `protobuf:"varint,5,opt,name=sharable" json:"sharable,omitempty"`
	Elements      []*GenericElement `protobuf:"bytes,6,rep,name=elements" json:"elements,omitempty"`
	Text          *string           `protobuf:"bytes,7,opt,name=text" json:"text,omitempty"` // for call btn
	Buttons       []*Button         `protobuf:"bytes,8,rep,name=buttons" json:"buttons,omitempty"`
	Address       *Address          `protobuf:"bytes,10,opt,name=address" json:"address,omitempty"`
	Summary       *Summary          `protobuf:"bytes,11,opt,name=summary" json:"summary,omitempty"`
	Adjustments   []*Adjustment     `protobuf:"bytes,12,rep,name=adjustments" json:"adjustments,omitempty"`
	RecipientName *string           `protobuf:"bytes,13,opt,name=recipient_name,json=recipientName" json:"recipient_name,omitempty"`
	OrderNumber   *string           `protobuf:"bytes,14,opt,name=order_number,json=orderNumber" json:"order_number,omitempty"`
	Currency      *string           `protobuf:"bytes,15,opt,name=currency" json:"currency,omitempty"`
	PaymentMethod *string           `protobuf:"bytes,16,opt,name=payment_method,json=paymentMethod" json:"payment_method,omitempty"`
	OrderUrl      *string           `protobuf:"bytes,17,opt,name=order_url,json=orderUrl" json:"order_url,omitempty"`
	Timestamp     *string           `protobuf:"bytes,18,opt,name=timestamp" json:"timestamp,omitempty"`
	Product       *FbProducts       `protobuf:"bytes,19,opt,name=product" json:"product,omitempty"`
	Title         *string           `protobuf:"bytes,20,opt,name=title" json:"title,omitempty"`
}

func (x *FbPayload) Reset() {
	*x = FbPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbPayload) ProtoMessage() {}

func (x *FbPayload) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbPayload.ProtoReflect.Descriptor instead.
func (*FbPayload) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{29}
}

func (x *FbPayload) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *FbPayload) GetIsReuseable() bool {
	if x != nil && x.IsReuseable != nil {
		return *x.IsReuseable
	}
	return false
}

func (x *FbPayload) GetTemplateType() string {
	if x != nil && x.TemplateType != nil {
		return *x.TemplateType
	}
	return ""
}

func (x *FbPayload) GetSharable() bool {
	if x != nil && x.Sharable != nil {
		return *x.Sharable
	}
	return false
}

func (x *FbPayload) GetElements() []*GenericElement {
	if x != nil {
		return x.Elements
	}
	return nil
}

func (x *FbPayload) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *FbPayload) GetButtons() []*Button {
	if x != nil {
		return x.Buttons
	}
	return nil
}

func (x *FbPayload) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *FbPayload) GetSummary() *Summary {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *FbPayload) GetAdjustments() []*Adjustment {
	if x != nil {
		return x.Adjustments
	}
	return nil
}

func (x *FbPayload) GetRecipientName() string {
	if x != nil && x.RecipientName != nil {
		return *x.RecipientName
	}
	return ""
}

func (x *FbPayload) GetOrderNumber() string {
	if x != nil && x.OrderNumber != nil {
		return *x.OrderNumber
	}
	return ""
}

func (x *FbPayload) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *FbPayload) GetPaymentMethod() string {
	if x != nil && x.PaymentMethod != nil {
		return *x.PaymentMethod
	}
	return ""
}

func (x *FbPayload) GetOrderUrl() string {
	if x != nil && x.OrderUrl != nil {
		return *x.OrderUrl
	}
	return ""
}

func (x *FbPayload) GetTimestamp() string {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return ""
}

func (x *FbPayload) GetProduct() *FbProducts {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *FbPayload) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

type FbProducts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Elements []*FbProduct `protobuf:"bytes,3,rep,name=elements" json:"elements,omitempty"`
}

func (x *FbProducts) Reset() {
	*x = FbProducts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbProducts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbProducts) ProtoMessage() {}

func (x *FbProducts) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbProducts.ProtoReflect.Descriptor instead.
func (*FbProducts) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{30}
}

func (x *FbProducts) GetElements() []*FbProduct {
	if x != nil {
		return x.Elements
	}
	return nil
}

type FbProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         *string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	RetailerId *string `protobuf:"bytes,4,opt,name=retailer_id,json=retailerId" json:"retailer_id,omitempty"`
	ImageUrl   *string `protobuf:"bytes,5,opt,name=image_url,json=imageUrl" json:"image_url,omitempty"`
	Title      *string `protobuf:"bytes,6,opt,name=title" json:"title,omitempty"`
	Subtitle   *string `protobuf:"bytes,7,opt,name=subtitle" json:"subtitle,omitempty"`
}

func (x *FbProduct) Reset() {
	*x = FbProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbProduct) ProtoMessage() {}

func (x *FbProduct) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbProduct.ProtoReflect.Descriptor instead.
func (*FbProduct) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{31}
}

func (x *FbProduct) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *FbProduct) GetRetailerId() string {
	if x != nil && x.RetailerId != nil {
		return *x.RetailerId
	}
	return ""
}

func (x *FbProduct) GetImageUrl() string {
	if x != nil && x.ImageUrl != nil {
		return *x.ImageUrl
	}
	return ""
}

func (x *FbProduct) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *FbProduct) GetSubtitle() string {
	if x != nil && x.Subtitle != nil {
		return *x.Subtitle
	}
	return ""
}

type Button struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                *string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"` // web_url, postback
	Title               *string `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Payload             *string `protobuf:"bytes,4,opt,name=payload" json:"payload,omitempty"`
	Url                 *string `protobuf:"bytes,5,opt,name=url" json:"url,omitempty"`
	WebviewHeightRatio  *string `protobuf:"bytes,6,opt,name=webview_height_ratio,json=webviewHeightRatio" json:"webview_height_ratio,omitempty"`   // <compact|tall|full>
	MessengerExtensions *bool   `protobuf:"varint,7,opt,name=messenger_extensions,json=messengerExtensions" json:"messenger_extensions,omitempty"` // <true|false>
	FallbackUrl         *string `protobuf:"bytes,8,opt,name=fallback_url,json=fallbackUrl" json:"fallback_url,omitempty"`                          //<URL_TO_FALLBACK_TO>"
	WebviewShareButton  *string `protobuf:"bytes,9,opt,name=webview_share_button,json=webviewShareButton" json:"webview_share_button,omitempty"`
}

func (x *Button) Reset() {
	*x = Button{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Button) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Button) ProtoMessage() {}

func (x *Button) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Button.ProtoReflect.Descriptor instead.
func (*Button) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{32}
}

func (x *Button) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *Button) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Button) GetPayload() string {
	if x != nil && x.Payload != nil {
		return *x.Payload
	}
	return ""
}

func (x *Button) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *Button) GetWebviewHeightRatio() string {
	if x != nil && x.WebviewHeightRatio != nil {
		return *x.WebviewHeightRatio
	}
	return ""
}

func (x *Button) GetMessengerExtensions() bool {
	if x != nil && x.MessengerExtensions != nil {
		return *x.MessengerExtensions
	}
	return false
}

func (x *Button) GetFallbackUrl() string {
	if x != nil && x.FallbackUrl != nil {
		return *x.FallbackUrl
	}
	return ""
}

func (x *Button) GetWebviewShareButton() string {
	if x != nil && x.WebviewShareButton != nil {
		return *x.WebviewShareButton
	}
	return ""
}

type FbRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Watermark *int64 `protobuf:"varint,2,opt,name=watermark" json:"watermark,omitempty"`
	Seq       *int32 `protobuf:"varint,3,opt,name=seq" json:"seq,omitempty"`
}

func (x *FbRead) Reset() {
	*x = FbRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbRead) ProtoMessage() {}

func (x *FbRead) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbRead.ProtoReflect.Descriptor instead.
func (*FbRead) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{33}
}

func (x *FbRead) GetWatermark() int64 {
	if x != nil && x.Watermark != nil {
		return *x.Watermark
	}
	return 0
}

func (x *FbRead) GetSeq() int32 {
	if x != nil && x.Seq != nil {
		return *x.Seq
	}
	return 0
}

type FbDelivery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mids      []string `protobuf:"bytes,2,rep,name=mids" json:"mids,omitempty"`
	Watermark *int64   `protobuf:"varint,3,opt,name=watermark" json:"watermark,omitempty"`
	Seq       *int32   `protobuf:"varint,4,opt,name=seq" json:"seq,omitempty"`
}

func (x *FbDelivery) Reset() {
	*x = FbDelivery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbDelivery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbDelivery) ProtoMessage() {}

func (x *FbDelivery) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbDelivery.ProtoReflect.Descriptor instead.
func (*FbDelivery) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{34}
}

func (x *FbDelivery) GetMids() []string {
	if x != nil {
		return x.Mids
	}
	return nil
}

func (x *FbDelivery) GetWatermark() int64 {
	if x != nil && x.Watermark != nil {
		return *x.Watermark
	}
	return 0
}

func (x *FbDelivery) GetSeq() int32 {
	if x != nil && x.Seq != nil {
		return *x.Seq
	}
	return 0
}

type FbSendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecipientId *string `protobuf:"bytes,2,opt,name=recipient_id,json=recipientId" json:"recipient_id,omitempty"`
	MessageId   *string `protobuf:"bytes,3,opt,name=message_id,json=messageId" json:"message_id,omitempty"`
}

func (x *FbSendResponse) Reset() {
	*x = FbSendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbSendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbSendResponse) ProtoMessage() {}

func (x *FbSendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbSendResponse.ProtoReflect.Descriptor instead.
func (*FbSendResponse) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{35}
}

func (x *FbSendResponse) GetRecipientId() string {
	if x != nil && x.RecipientId != nil {
		return *x.RecipientId
	}
	return ""
}

func (x *FbSendResponse) GetMessageId() string {
	if x != nil && x.MessageId != nil {
		return *x.MessageId
	}
	return ""
}

type Conversation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *string `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Id        *string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	PageId    *string `protobuf:"bytes,4,opt,name=page_id,json=pageId" json:"page_id,omitempty"`
	Created   *int64  `protobuf:"varint,5,opt,name=created" json:"created,omitempty"`
	Fbuserid  *string `protobuf:"bytes,6,opt,name=fbuserid" json:"fbuserid,omitempty"`
	Sbuserid  *string `protobuf:"bytes,7,opt,name=sbuserid" json:"sbuserid,omitempty"`
}

func (x *Conversation) Reset() {
	*x = Conversation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conversation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conversation) ProtoMessage() {}

func (x *Conversation) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conversation.ProtoReflect.Descriptor instead.
func (*Conversation) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{36}
}

func (x *Conversation) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *Conversation) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Conversation) GetPageId() string {
	if x != nil && x.PageId != nil {
		return *x.PageId
	}
	return ""
}

func (x *Conversation) GetCreated() int64 {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return 0
}

func (x *Conversation) GetFbuserid() string {
	if x != nil && x.Fbuserid != nil {
		return *x.Fbuserid
	}
	return ""
}

func (x *Conversation) GetSbuserid() string {
	if x != nil && x.Sbuserid != nil {
		return *x.Sbuserid
	}
	return ""
}

type FbPagePicture struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *FbPagePictureData `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (x *FbPagePicture) Reset() {
	*x = FbPagePicture{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbPagePicture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbPagePicture) ProtoMessage() {}

func (x *FbPagePicture) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbPagePicture.ProtoReflect.Descriptor instead.
func (*FbPagePicture) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{37}
}

func (x *FbPagePicture) GetData() *FbPagePictureData {
	if x != nil {
		return x.Data
	}
	return nil
}

type FbPagePictureData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url *string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
}

func (x *FbPagePictureData) Reset() {
	*x = FbPagePictureData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbPagePictureData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbPagePictureData) ProtoMessage() {}

func (x *FbPagePictureData) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbPagePictureData.ProtoReflect.Descriptor instead.
func (*FbPagePictureData) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{38}
}

func (x *FbPagePictureData) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

type FbPageEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                     *string        `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Picture                  *FbPagePicture `protobuf:"bytes,3,opt,name=picture" json:"picture,omitempty"`
	Id                       *string        `protobuf:"bytes,5,opt,name=id" json:"id,omitempty"`
	AccessToken              *string        `protobuf:"bytes,6,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
	InstagramBusinessAccount *InstagramUser `protobuf:"bytes,7,opt,name=instagram_business_account,json=instagramBusinessAccount" json:"instagram_business_account,omitempty"`
}

func (x *FbPageEntry) Reset() {
	*x = FbPageEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbPageEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbPageEntry) ProtoMessage() {}

func (x *FbPageEntry) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbPageEntry.ProtoReflect.Descriptor instead.
func (*FbPageEntry) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{39}
}

func (x *FbPageEntry) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *FbPageEntry) GetPicture() *FbPagePicture {
	if x != nil {
		return x.Picture
	}
	return nil
}

func (x *FbPageEntry) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *FbPageEntry) GetAccessToken() string {
	if x != nil && x.AccessToken != nil {
		return *x.AccessToken
	}
	return ""
}

func (x *FbPageEntry) GetInstagramBusinessAccount() *InstagramUser {
	if x != nil {
		return x.InstagramBusinessAccount
	}
	return nil
}

type FbCursors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Before *string `protobuf:"bytes,2,opt,name=before" json:"before,omitempty"`
	After  *string `protobuf:"bytes,3,opt,name=after" json:"after,omitempty"`
}

func (x *FbCursors) Reset() {
	*x = FbCursors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbCursors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbCursors) ProtoMessage() {}

func (x *FbCursors) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbCursors.ProtoReflect.Descriptor instead.
func (*FbCursors) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{40}
}

func (x *FbCursors) GetBefore() string {
	if x != nil && x.Before != nil {
		return *x.Before
	}
	return ""
}

func (x *FbCursors) GetAfter() string {
	if x != nil && x.After != nil {
		return *x.After
	}
	return ""
}

type FbPaging struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cursors *FbCursors `protobuf:"bytes,2,opt,name=cursors" json:"cursors,omitempty"`
	Next    *string    `protobuf:"bytes,3,opt,name=next" json:"next,omitempty"`
}

func (x *FbPaging) Reset() {
	*x = FbPaging{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbPaging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbPaging) ProtoMessage() {}

func (x *FbPaging) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbPaging.ProtoReflect.Descriptor instead.
func (*FbPaging) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{41}
}

func (x *FbPaging) GetCursors() *FbCursors {
	if x != nil {
		return x.Cursors
	}
	return nil
}

func (x *FbPaging) GetNext() string {
	if x != nil && x.Next != nil {
		return *x.Next
	}
	return ""
}

type FbPageRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data   []*FbPageEntry `protobuf:"bytes,2,rep,name=data" json:"data,omitempty"`
	Paging *FbPaging      `protobuf:"bytes,3,opt,name=paging" json:"paging,omitempty"`
}

func (x *FbPageRet) Reset() {
	*x = FbPageRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbPageRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbPageRet) ProtoMessage() {}

func (x *FbPageRet) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbPageRet.ProtoReflect.Descriptor instead.
func (*FbPageRet) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{42}
}

func (x *FbPageRet) GetData() []*FbPageEntry {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *FbPageRet) GetPaging() *FbPaging {
	if x != nil {
		return x.Paging
	}
	return nil
}

type FbProfilePicData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height       *int64  `protobuf:"varint,2,opt,name=height" json:"height,omitempty"`
	Width        *int64  `protobuf:"varint,3,opt,name=width" json:"width,omitempty"`
	IsSilhouette *bool   `protobuf:"varint,4,opt,name=is_silhouette,json=isSilhouette" json:"is_silhouette,omitempty"`
	Url          *string `protobuf:"bytes,5,opt,name=url" json:"url,omitempty"`
}

func (x *FbProfilePicData) Reset() {
	*x = FbProfilePicData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbProfilePicData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbProfilePicData) ProtoMessage() {}

func (x *FbProfilePicData) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbProfilePicData.ProtoReflect.Descriptor instead.
func (*FbProfilePicData) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{43}
}

func (x *FbProfilePicData) GetHeight() int64 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *FbProfilePicData) GetWidth() int64 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *FbProfilePicData) GetIsSilhouette() bool {
	if x != nil && x.IsSilhouette != nil {
		return *x.IsSilhouette
	}
	return false
}

func (x *FbProfilePicData) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

type FbProfilePic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *FbProfilePicData `protobuf:"bytes,2,opt,name=Data" json:"Data,omitempty"`
}

func (x *FbProfilePic) Reset() {
	*x = FbProfilePic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbProfilePic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbProfilePic) ProtoMessage() {}

func (x *FbProfilePic) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbProfilePic.ProtoReflect.Descriptor instead.
func (*FbProfilePic) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{44}
}

func (x *FbProfilePic) GetData() *FbProfilePicData {
	if x != nil {
		return x.Data
	}
	return nil
}

type FacebookUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstName  *string       `protobuf:"bytes,2,opt,name=first_name,json=firstName" json:"first_name,omitempty"`
	MiddleName *string       `protobuf:"bytes,3,opt,name=middle_name,json=middleName" json:"middle_name,omitempty"`
	LastName   *string       `protobuf:"bytes,4,opt,name=last_name,json=lastName" json:"last_name,omitempty"`
	ProfilePic *string       `protobuf:"bytes,5,opt,name=profile_pic,json=profilePic" json:"profile_pic,omitempty"`
	Locale     *string       `protobuf:"bytes,6,opt,name=locale" json:"locale,omitempty"`
	Timezone   *float32      `protobuf:"fixed32,7,opt,name=timezone" json:"timezone,omitempty"`
	Gender     *string       `protobuf:"bytes,8,opt,name=gender" json:"gender,omitempty"`
	Picture    *FbProfilePic `protobuf:"bytes,9,opt,name=picture" json:"picture,omitempty"`
	Email      *string       `protobuf:"bytes,10,opt,name=email" json:"email,omitempty"`
	Name       *string       `protobuf:"bytes,11,opt,name=name" json:"name,omitempty"`
}

func (x *FacebookUser) Reset() {
	*x = FacebookUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FacebookUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FacebookUser) ProtoMessage() {}

func (x *FacebookUser) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FacebookUser.ProtoReflect.Descriptor instead.
func (*FacebookUser) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{45}
}

func (x *FacebookUser) GetFirstName() string {
	if x != nil && x.FirstName != nil {
		return *x.FirstName
	}
	return ""
}

func (x *FacebookUser) GetMiddleName() string {
	if x != nil && x.MiddleName != nil {
		return *x.MiddleName
	}
	return ""
}

func (x *FacebookUser) GetLastName() string {
	if x != nil && x.LastName != nil {
		return *x.LastName
	}
	return ""
}

func (x *FacebookUser) GetProfilePic() string {
	if x != nil && x.ProfilePic != nil {
		return *x.ProfilePic
	}
	return ""
}

func (x *FacebookUser) GetLocale() string {
	if x != nil && x.Locale != nil {
		return *x.Locale
	}
	return ""
}

func (x *FacebookUser) GetTimezone() float32 {
	if x != nil && x.Timezone != nil {
		return *x.Timezone
	}
	return 0
}

func (x *FacebookUser) GetGender() string {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return ""
}

func (x *FacebookUser) GetPicture() *FbProfilePic {
	if x != nil {
		return x.Picture
	}
	return nil
}

func (x *FacebookUser) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *FacebookUser) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type FacebookGuestUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      *string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Name    *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Picture *string `protobuf:"bytes,9,opt,name=picture" json:"picture,omitempty"`
}

func (x *FacebookGuestUser) Reset() {
	*x = FacebookGuestUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FacebookGuestUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FacebookGuestUser) ProtoMessage() {}

func (x *FacebookGuestUser) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FacebookGuestUser.ProtoReflect.Descriptor instead.
func (*FacebookGuestUser) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{46}
}

func (x *FacebookGuestUser) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *FacebookGuestUser) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *FacebookGuestUser) GetPicture() string {
	if x != nil && x.Picture != nil {
		return *x.Picture
	}
	return ""
}

type InstagramUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *string `protobuf:"bytes,4,opt,name=id" json:"id,omitempty"`
	Username             *string `protobuf:"bytes,5,opt,name=username" json:"username,omitempty"`
	ProfilePictureUrl    *string `protobuf:"bytes,6,opt,name=profile_picture_url,json=profilePictureUrl" json:"profile_picture_url,omitempty"`
	Name                 *string `protobuf:"bytes,7,opt,name=name" json:"name,omitempty"`
	IgId                 *int64  `protobuf:"varint,8,opt,name=ig_id,json=igId" json:"ig_id,omitempty"`
	FollowersCount       *int64  `protobuf:"varint,9,opt,name=followers_count,json=followersCount" json:"followers_count,omitempty"`
	FollowsCount         *int64  `protobuf:"varint,10,opt,name=follows_count,json=followsCount" json:"follows_count,omitempty"`
	MediaCount           *int64  `protobuf:"varint,11,opt,name=media_count,json=mediaCount" json:"media_count,omitempty"`
	Website              *string `protobuf:"bytes,12,opt,name=website" json:"website,omitempty"`
	IsVerifiedUser       *bool   `protobuf:"varint,13,opt,name=is_verified_user,json=isVerifiedUser" json:"is_verified_user,omitempty"`
	IsUserFollowBusiness *bool   `protobuf:"varint,14,opt,name=is_user_follow_business,json=isUserFollowBusiness" json:"is_user_follow_business,omitempty"`
	IsBusinessFollowUser *bool   `protobuf:"varint,15,opt,name=is_business_follow_user,json=isBusinessFollowUser" json:"is_business_follow_user,omitempty"`
	ProfilePic           *string `protobuf:"bytes,16,opt,name=profile_pic,json=profilePic" json:"profile_pic,omitempty"`
}

func (x *InstagramUser) Reset() {
	*x = InstagramUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstagramUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstagramUser) ProtoMessage() {}

func (x *InstagramUser) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstagramUser.ProtoReflect.Descriptor instead.
func (*InstagramUser) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{47}
}

func (x *InstagramUser) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *InstagramUser) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *InstagramUser) GetProfilePictureUrl() string {
	if x != nil && x.ProfilePictureUrl != nil {
		return *x.ProfilePictureUrl
	}
	return ""
}

func (x *InstagramUser) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *InstagramUser) GetIgId() int64 {
	if x != nil && x.IgId != nil {
		return *x.IgId
	}
	return 0
}

func (x *InstagramUser) GetFollowersCount() int64 {
	if x != nil && x.FollowersCount != nil {
		return *x.FollowersCount
	}
	return 0
}

func (x *InstagramUser) GetFollowsCount() int64 {
	if x != nil && x.FollowsCount != nil {
		return *x.FollowsCount
	}
	return 0
}

func (x *InstagramUser) GetMediaCount() int64 {
	if x != nil && x.MediaCount != nil {
		return *x.MediaCount
	}
	return 0
}

func (x *InstagramUser) GetWebsite() string {
	if x != nil && x.Website != nil {
		return *x.Website
	}
	return ""
}

func (x *InstagramUser) GetIsVerifiedUser() bool {
	if x != nil && x.IsVerifiedUser != nil {
		return *x.IsVerifiedUser
	}
	return false
}

func (x *InstagramUser) GetIsUserFollowBusiness() bool {
	if x != nil && x.IsUserFollowBusiness != nil {
		return *x.IsUserFollowBusiness
	}
	return false
}

func (x *InstagramUser) GetIsBusinessFollowUser() bool {
	if x != nil && x.IsBusinessFollowUser != nil {
		return *x.IsBusinessFollowUser
	}
	return false
}

func (x *InstagramUser) GetProfilePic() string {
	if x != nil && x.ProfilePic != nil {
		return *x.ProfilePic
	}
	return ""
}

type Fb2SbEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fbmid           *string `protobuf:"bytes,2,opt,name=fbmid" json:"fbmid,omitempty"`
	AccountId       *string `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	ConversationId  *string `protobuf:"bytes,4,opt,name=conversation_id,json=conversationId" json:"conversation_id,omitempty"`
	Sbmid           *string `protobuf:"bytes,5,opt,name=sbmid" json:"sbmid,omitempty"`
	PageId          *string `protobuf:"bytes,6,opt,name=page_id,json=pageId" json:"page_id,omitempty"`
	AttachmentIndex *int32  `protobuf:"varint,7,opt,name=attachment_index,json=attachmentIndex" json:"attachment_index,omitempty"` // subiz
}

func (x *Fb2SbEvent) Reset() {
	*x = Fb2SbEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fb2SbEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fb2SbEvent) ProtoMessage() {}

func (x *Fb2SbEvent) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fb2SbEvent.ProtoReflect.Descriptor instead.
func (*Fb2SbEvent) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{48}
}

func (x *Fb2SbEvent) GetFbmid() string {
	if x != nil && x.Fbmid != nil {
		return *x.Fbmid
	}
	return ""
}

func (x *Fb2SbEvent) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *Fb2SbEvent) GetConversationId() string {
	if x != nil && x.ConversationId != nil {
		return *x.ConversationId
	}
	return ""
}

func (x *Fb2SbEvent) GetSbmid() string {
	if x != nil && x.Sbmid != nil {
		return *x.Sbmid
	}
	return ""
}

func (x *Fb2SbEvent) GetPageId() string {
	if x != nil && x.PageId != nil {
		return *x.PageId
	}
	return ""
}

func (x *Fb2SbEvent) GetAttachmentIndex() int32 {
	if x != nil && x.AttachmentIndex != nil {
		return *x.AttachmentIndex
	}
	return 0
}

type LongLivedAccessToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken *string `protobuf:"bytes,2,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
	TokenType   *string `protobuf:"bytes,3,opt,name=token_type,json=tokenType" json:"token_type,omitempty"`
	ExpiresIn   *int32  `protobuf:"varint,5,opt,name=expires_in,json=expiresIn" json:"expires_in,omitempty"`
}

func (x *LongLivedAccessToken) Reset() {
	*x = LongLivedAccessToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LongLivedAccessToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LongLivedAccessToken) ProtoMessage() {}

func (x *LongLivedAccessToken) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LongLivedAccessToken.ProtoReflect.Descriptor instead.
func (*LongLivedAccessToken) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{49}
}

func (x *LongLivedAccessToken) GetAccessToken() string {
	if x != nil && x.AccessToken != nil {
		return *x.AccessToken
	}
	return ""
}

func (x *LongLivedAccessToken) GetTokenType() string {
	if x != nil && x.TokenType != nil {
		return *x.TokenType
	}
	return ""
}

func (x *LongLivedAccessToken) GetExpiresIn() int32 {
	if x != nil && x.ExpiresIn != nil {
		return *x.ExpiresIn
	}
	return 0
}

type SubscribeRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success *bool `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (x *SubscribeRet) Reset() {
	*x = SubscribeRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRet) ProtoMessage() {}

func (x *SubscribeRet) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRet.ProtoReflect.Descriptor instead.
func (*SubscribeRet) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{50}
}

func (x *SubscribeRet) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

type SubscribeAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscribedFields []string `protobuf:"bytes,2,rep,name=subscribed_fields,json=subscribedFields" json:"subscribed_fields,omitempty"`
}

func (x *SubscribeAppRequest) Reset() {
	*x = SubscribeAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeAppRequest) ProtoMessage() {}

func (x *SubscribeAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeAppRequest.ProtoReflect.Descriptor instead.
func (*SubscribeAppRequest) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{51}
}

func (x *SubscribeAppRequest) GetSubscribedFields() []string {
	if x != nil {
		return x.SubscribedFields
	}
	return nil
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code         *int32  `protobuf:"varint,3,opt,name=code" json:"code,omitempty"`
	ErrorSubcode *int32  `protobuf:"varint,4,opt,name=error_subcode,json=errorSubcode" json:"error_subcode,omitempty"`
	FbtraceId    *string `protobuf:"bytes,5,opt,name=fbtrace_id,json=fbtraceId" json:"fbtrace_id,omitempty"`
	Message      *string `protobuf:"bytes,6,opt,name=message" json:"message,omitempty"`
	Type         *string `protobuf:"bytes,7,opt,name=type" json:"type,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{52}
}

func (x *Error) GetCode() int32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *Error) GetErrorSubcode() int32 {
	if x != nil && x.ErrorSubcode != nil {
		return *x.ErrorSubcode
	}
	return 0
}

func (x *Error) GetFbtraceId() string {
	if x != nil && x.FbtraceId != nil {
		return *x.FbtraceId
	}
	return ""
}

func (x *Error) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *Error) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

type FbResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *Error `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (x *FbResponse) Reset() {
	*x = FbResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbResponse) ProtoMessage() {}

func (x *FbResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbResponse.ProtoReflect.Descriptor instead.
func (*FbResponse) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{53}
}

func (x *FbResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type FbProductItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	ImageUrl *string `protobuf:"bytes,4,opt,name=image_url,json=imageUrl" json:"image_url,omitempty"`
	Name     *string `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Price    *string `protobuf:"bytes,6,opt,name=price" json:"price,omitempty"`
	Url      *string `protobuf:"bytes,7,opt,name=url" json:"url,omitempty"`
}

func (x *FbProductItem) Reset() {
	*x = FbProductItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbProductItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbProductItem) ProtoMessage() {}

func (x *FbProductItem) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbProductItem.ProtoReflect.Descriptor instead.
func (*FbProductItem) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{54}
}

func (x *FbProductItem) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *FbProductItem) GetImageUrl() string {
	if x != nil && x.ImageUrl != nil {
		return *x.ImageUrl
	}
	return ""
}

func (x *FbProductItem) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *FbProductItem) GetPrice() string {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return ""
}

func (x *FbProductItem) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

type FbPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            *string          `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"` // pageid
	Conversations *FbConversations `protobuf:"bytes,4,opt,name=conversations" json:"conversations,omitempty"`
}

func (x *FbPage) Reset() {
	*x = FbPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbPage) ProtoMessage() {}

func (x *FbPage) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbPage.ProtoReflect.Descriptor instead.
func (*FbPage) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{55}
}

func (x *FbPage) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *FbPage) GetConversations() *FbConversations {
	if x != nil {
		return x.Conversations
	}
	return nil
}

type FbConversations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error  *Error            `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Data   []*FbConversation `protobuf:"bytes,3,rep,name=data" json:"data,omitempty"`
	Paging *FbPaging         `protobuf:"bytes,4,opt,name=paging" json:"paging,omitempty"`
}

func (x *FbConversations) Reset() {
	*x = FbConversations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbConversations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbConversations) ProtoMessage() {}

func (x *FbConversations) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbConversations.ProtoReflect.Descriptor instead.
func (*FbConversations) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{56}
}

func (x *FbConversations) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *FbConversations) GetData() []*FbConversation {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *FbConversations) GetPaging() *FbPaging {
	if x != nil {
		return x.Paging
	}
	return nil
}

type FbLeads struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error  *Error    `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Data   []*FbLead `protobuf:"bytes,3,rep,name=data" json:"data,omitempty"`
	Paging *FbPaging `protobuf:"bytes,4,opt,name=paging" json:"paging,omitempty"`
}

func (x *FbLeads) Reset() {
	*x = FbLeads{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbLeads) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbLeads) ProtoMessage() {}

func (x *FbLeads) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbLeads.ProtoReflect.Descriptor instead.
func (*FbLeads) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{57}
}

func (x *FbLeads) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *FbLeads) GetData() []*FbLead {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *FbLeads) GetPaging() *FbPaging {
	if x != nil {
		return x.Paging
	}
	return nil
}

type FbFieldData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   *string  `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Values []string `protobuf:"bytes,4,rep,name=values" json:"values,omitempty"`
}

func (x *FbFieldData) Reset() {
	*x = FbFieldData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbFieldData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbFieldData) ProtoMessage() {}

func (x *FbFieldData) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbFieldData.ProtoReflect.Descriptor instead.
func (*FbFieldData) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{58}
}

func (x *FbFieldData) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *FbFieldData) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type FbLead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedTime *string        `protobuf:"bytes,10,opt,name=created_time,json=createdTime" json:"created_time,omitempty"`
	Id          *string        `protobuf:"bytes,11,opt,name=id" json:"id,omitempty"`
	AdId        *string        `protobuf:"bytes,12,opt,name=ad_id,json=adId" json:"ad_id,omitempty"`
	FormId      *string        `protobuf:"bytes,13,opt,name=form_id,json=formId" json:"form_id,omitempty"`
	FieldData   []*FbFieldData `protobuf:"bytes,14,rep,name=field_data,json=fieldData" json:"field_data,omitempty"`
}

func (x *FbLead) Reset() {
	*x = FbLead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbLead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbLead) ProtoMessage() {}

func (x *FbLead) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbLead.ProtoReflect.Descriptor instead.
func (*FbLead) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{59}
}

func (x *FbLead) GetCreatedTime() string {
	if x != nil && x.CreatedTime != nil {
		return *x.CreatedTime
	}
	return ""
}

func (x *FbLead) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *FbLead) GetAdId() string {
	if x != nil && x.AdId != nil {
		return *x.AdId
	}
	return ""
}

func (x *FbLead) GetFormId() string {
	if x != nil && x.FormId != nil {
		return *x.FormId
	}
	return ""
}

func (x *FbLead) GetFieldData() []*FbFieldData {
	if x != nil {
		return x.FieldData
	}
	return nil
}

type FbConversation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *string     `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Link         *string     `protobuf:"bytes,3,opt,name=link" json:"link,omitempty"`
	UpdatedTime  *string     `protobuf:"bytes,5,opt,name=updated_time,json=updatedTime" json:"updated_time,omitempty"`
	MessageCount *int64      `protobuf:"varint,6,opt,name=message_count,json=messageCount" json:"message_count,omitempty"`
	Participants *FbProfiles `protobuf:"bytes,7,opt,name=participants" json:"participants,omitempty"`
	Senders      *FbProfiles `protobuf:"bytes,8,opt,name=senders" json:"senders,omitempty"`
	CanReply     *bool       `protobuf:"varint,9,opt,name=can_reply,json=canReply" json:"can_reply,omitempty"`
	IsSubscribed *bool       `protobuf:"varint,10,opt,name=is_subscribed,json=isSubscribed" json:"is_subscribed,omitempty"`
}

func (x *FbConversation) Reset() {
	*x = FbConversation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbConversation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbConversation) ProtoMessage() {}

func (x *FbConversation) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbConversation.ProtoReflect.Descriptor instead.
func (*FbConversation) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{60}
}

func (x *FbConversation) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *FbConversation) GetLink() string {
	if x != nil && x.Link != nil {
		return *x.Link
	}
	return ""
}

func (x *FbConversation) GetUpdatedTime() string {
	if x != nil && x.UpdatedTime != nil {
		return *x.UpdatedTime
	}
	return ""
}

func (x *FbConversation) GetMessageCount() int64 {
	if x != nil && x.MessageCount != nil {
		return *x.MessageCount
	}
	return 0
}

func (x *FbConversation) GetParticipants() *FbProfiles {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *FbConversation) GetSenders() *FbProfiles {
	if x != nil {
		return x.Senders
	}
	return nil
}

func (x *FbConversation) GetCanReply() bool {
	if x != nil && x.CanReply != nil {
		return *x.CanReply
	}
	return false
}

func (x *FbConversation) GetIsSubscribed() bool {
	if x != nil && x.IsSubscribed != nil {
		return *x.IsSubscribed
	}
	return false
}

type FbProfiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error  *Error       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Data   []*FbProfile `protobuf:"bytes,2,rep,name=data" json:"data,omitempty"`
	Paging *FbPaging    `protobuf:"bytes,4,opt,name=paging" json:"paging,omitempty"`
}

func (x *FbProfiles) Reset() {
	*x = FbProfiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbProfiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbProfiles) ProtoMessage() {}

func (x *FbProfiles) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbProfiles.ProtoReflect.Descriptor instead.
func (*FbProfiles) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{61}
}

func (x *FbProfiles) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *FbProfiles) GetData() []*FbProfile {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *FbProfiles) GetPaging() *FbPaging {
	if x != nil {
		return x.Paging
	}
	return nil
}

type FbProfileData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*FbProfile `protobuf:"bytes,3,rep,name=data" json:"data,omitempty"`
}

func (x *FbProfileData) Reset() {
	*x = FbProfileData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbProfileData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbProfileData) ProtoMessage() {}

func (x *FbProfileData) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbProfileData.ProtoReflect.Descriptor instead.
func (*FbProfileData) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{62}
}

func (x *FbProfileData) GetData() []*FbProfile {
	if x != nil {
		return x.Data
	}
	return nil
}

type FbProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Email *string `protobuf:"bytes,4,opt,name=email" json:"email,omitempty"`
	Id    *string `protobuf:"bytes,5,opt,name=id" json:"id,omitempty"`
}

func (x *FbProfile) Reset() {
	*x = FbProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbProfile) ProtoMessage() {}

func (x *FbProfile) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbProfile.ProtoReflect.Descriptor instead.
func (*FbProfile) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{63}
}

func (x *FbProfile) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *FbProfile) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *FbProfile) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

type FbConversationMessageAttachemnts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error  *Error                             `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Data   []*FbConversationMessageAttachment `protobuf:"bytes,2,rep,name=data" json:"data,omitempty"`
	Paging *FbPaging                          `protobuf:"bytes,4,opt,name=paging" json:"paging,omitempty"`
}

func (x *FbConversationMessageAttachemnts) Reset() {
	*x = FbConversationMessageAttachemnts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbConversationMessageAttachemnts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbConversationMessageAttachemnts) ProtoMessage() {}

func (x *FbConversationMessageAttachemnts) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbConversationMessageAttachemnts.ProtoReflect.Descriptor instead.
func (*FbConversationMessageAttachemnts) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{64}
}

func (x *FbConversationMessageAttachemnts) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *FbConversationMessageAttachemnts) GetData() []*FbConversationMessageAttachment {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *FbConversationMessageAttachemnts) GetPaging() *FbPaging {
	if x != nil {
		return x.Paging
	}
	return nil
}

type FbConversationMessageAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *string      `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	MimeType  *string      `protobuf:"bytes,4,opt,name=mime_type,json=mimeType" json:"mime_type,omitempty"`
	Name      *string      `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Size      *int64       `protobuf:"varint,6,opt,name=size" json:"size,omitempty"`
	FileUrl   *string      `protobuf:"bytes,7,opt,name=file_url,json=fileUrl" json:"file_url,omitempty"`
	ImageData *FbImageData `protobuf:"bytes,8,opt,name=image_data,json=imageData" json:"image_data,omitempty"`
}

func (x *FbConversationMessageAttachment) Reset() {
	*x = FbConversationMessageAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbConversationMessageAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbConversationMessageAttachment) ProtoMessage() {}

func (x *FbConversationMessageAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbConversationMessageAttachment.ProtoReflect.Descriptor instead.
func (*FbConversationMessageAttachment) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{65}
}

func (x *FbConversationMessageAttachment) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *FbConversationMessageAttachment) GetMimeType() string {
	if x != nil && x.MimeType != nil {
		return *x.MimeType
	}
	return ""
}

func (x *FbConversationMessageAttachment) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *FbConversationMessageAttachment) GetSize() int64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *FbConversationMessageAttachment) GetFileUrl() string {
	if x != nil && x.FileUrl != nil {
		return *x.FileUrl
	}
	return ""
}

func (x *FbConversationMessageAttachment) GetImageData() *FbImageData {
	if x != nil {
		return x.ImageData
	}
	return nil
}

type FbImageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width           *int64  `protobuf:"varint,2,opt,name=width" json:"width,omitempty"`
	Height          *int64  `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
	MaxWidth        *int64  `protobuf:"varint,4,opt,name=max_width,json=maxWidth" json:"max_width,omitempty"`
	MaxHeight       *int64  `protobuf:"varint,5,opt,name=max_height,json=maxHeight" json:"max_height,omitempty"`
	Url             *string `protobuf:"bytes,6,opt,name=url" json:"url,omitempty"`
	PreviewUrl      *string `protobuf:"bytes,7,opt,name=preview_url,json=previewUrl" json:"preview_url,omitempty"`
	ImageType       *int64  `protobuf:"varint,8,opt,name=image_type,json=imageType" json:"image_type,omitempty"`
	RenderAsSticker *bool   `protobuf:"varint,9,opt,name=render_as_sticker,json=renderAsSticker" json:"render_as_sticker,omitempty"`
}

func (x *FbImageData) Reset() {
	*x = FbImageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbImageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbImageData) ProtoMessage() {}

func (x *FbImageData) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbImageData.ProtoReflect.Descriptor instead.
func (*FbImageData) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{66}
}

func (x *FbImageData) GetWidth() int64 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *FbImageData) GetHeight() int64 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *FbImageData) GetMaxWidth() int64 {
	if x != nil && x.MaxWidth != nil {
		return *x.MaxWidth
	}
	return 0
}

func (x *FbImageData) GetMaxHeight() int64 {
	if x != nil && x.MaxHeight != nil {
		return *x.MaxHeight
	}
	return 0
}

func (x *FbImageData) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *FbImageData) GetPreviewUrl() string {
	if x != nil && x.PreviewUrl != nil {
		return *x.PreviewUrl
	}
	return ""
}

func (x *FbImageData) GetImageType() int64 {
	if x != nil && x.ImageType != nil {
		return *x.ImageType
	}
	return 0
}

func (x *FbImageData) GetRenderAsSticker() bool {
	if x != nil && x.RenderAsSticker != nil {
		return *x.RenderAsSticker
	}
	return false
}

type FbConversationMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error  *Error                   `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Data   []*FbConversationMessage `protobuf:"bytes,2,rep,name=data" json:"data,omitempty"`
	Paging *FbPaging                `protobuf:"bytes,4,opt,name=paging" json:"paging,omitempty"`
}

func (x *FbConversationMessages) Reset() {
	*x = FbConversationMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbConversationMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbConversationMessages) ProtoMessage() {}

func (x *FbConversationMessages) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbConversationMessages.ProtoReflect.Descriptor instead.
func (*FbConversationMessages) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{67}
}

func (x *FbConversationMessages) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *FbConversationMessages) GetData() []*FbConversationMessage {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *FbConversationMessages) GetPaging() *FbPaging {
	if x != nil {
		return x.Paging
	}
	return nil
}

type FbConversationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedTime *string                           `protobuf:"bytes,2,opt,name=created_time,json=createdTime" json:"created_time,omitempty"`
	From        *FbProfile                        `protobuf:"bytes,3,opt,name=from" json:"from,omitempty"`
	Id          *string                           `protobuf:"bytes,4,opt,name=id" json:"id,omitempty"`
	Message     *string                           `protobuf:"bytes,5,opt,name=message" json:"message,omitempty"`
	To          *FbProfileData                    `protobuf:"bytes,6,opt,name=to" json:"to,omitempty"`
	Attachments *FbConversationMessageAttachemnts `protobuf:"bytes,7,opt,name=attachments" json:"attachments,omitempty"`
}

func (x *FbConversationMessage) Reset() {
	*x = FbConversationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fabikon_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbConversationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbConversationMessage) ProtoMessage() {}

func (x *FbConversationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fabikon_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbConversationMessage.ProtoReflect.Descriptor instead.
func (*FbConversationMessage) Descriptor() ([]byte, []int) {
	return file_fabikon_proto_rawDescGZIP(), []int{68}
}

func (x *FbConversationMessage) GetCreatedTime() string {
	if x != nil && x.CreatedTime != nil {
		return *x.CreatedTime
	}
	return ""
}

func (x *FbConversationMessage) GetFrom() *FbProfile {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *FbConversationMessage) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *FbConversationMessage) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *FbConversationMessage) GetTo() *FbProfileData {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *FbConversationMessage) GetAttachments() *FbConversationMessageAttachemnts {
	if x != nil {
		return x.Attachments
	}
	return nil
}

var File_fabikon_proto protoreflect.FileDescriptor

var file_fabikon_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x22, 0x59, 0x0a, 0x0f, 0x46, 0x61, 0x63, 0x65,
	0x62, 0x6f, 0x6f, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0xb8, 0x08, 0x0a, 0x0c, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b,
	0x5f, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6c, 0x61, 0x73,
	0x74, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x48, 0x6f, 0x6f, 0x6b, 0x12, 0x24, 0x0a,
	0x0e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x50, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x67,
	0x72, 0x61, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x43, 0x0a, 0x11, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x67,
	0x72, 0x61, 0x6d, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x67, 0x72, 0x61, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x6c, 0x61,
	0x73, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x41, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x74, 0x12, 0x3e, 0x0a, 0x1c, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x6c,
	0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x74, 0x12, 0x3c, 0x0a, 0x1b, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x6c, 0x61,
	0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x41, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x73, 0x79, 0x6e, 0x63,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x50,
	0x0a, 0x0e, 0x46, 0x62, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x26, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f,
	0x6e, 0x2e, 0x46, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x22, 0xbe, 0x01, 0x0a, 0x07, 0x46, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x32, 0x0a, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x46, 0x62,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e,
	0x46, 0x62, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x12, 0x2e, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x46, 0x62, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x62,
	0x79, 0x22, 0x4e, 0x0a, 0x08, 0x46, 0x62, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x46, 0x62, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x48, 0x0a, 0x06, 0x46, 0x62, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xfe, 0x08, 0x0a, 0x0d,
	0x46, 0x62, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66,
	0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x46, 0x62, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x12, 0x27, 0x0a, 0x04, 0x70, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x46, 0x62, 0x50, 0x61,
	0x67, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e,
	0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x12, 0x2a, 0x0a, 0x11, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x12, 0x2d, 0x0a, 0x13, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f,
	0x70, 0x65, 0x6e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x68, 0x6f, 0x74, 0x6f, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x68, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x65, 0x72, 0x62,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x65, 0x72, 0x62, 0x12, 0x19, 0x0a, 0x08,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e,
	0x2e, 0x49, 0x67, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x69, 0x64, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x12, 0x29,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66,
	0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x46, 0x62, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b,
	0x6f, 0x6e, 0x2e, 0x46, 0x62, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x64, 0x67,
	0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x65, 0x61,
	0x64, 0x67, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x61, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x0d,
	0x46, 0x62, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a,
	0x0f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x67, 0x65, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x1e, 0x0a, 0x0c, 0x46, 0x62, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x47, 0x0a, 0x07, 0x49, 0x67, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xd3,
	0x01, 0x0a, 0x0a, 0x46, 0x62, 0x50, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x65, 0x72,
	0x6d, 0x61, 0x6c, 0x69, 0x6e, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0xb6, 0x04, 0x0a, 0x0b, 0x46, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x46,
	0x62, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x32, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x46, 0x62, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x2c, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x46, 0x62, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x2f, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x46, 0x62, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x04, 0x72, 0x65, 0x61, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e,
	0x2e, 0x46, 0x62, 0x52, 0x65, 0x61, 0x64, 0x52, 0x04, 0x72, 0x65, 0x61, 0x64, 0x12, 0x2f, 0x0a,
	0x08, 0x70, 0x6f, 0x73, 0x74, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x46, 0x62, 0x50, 0x6f, 0x73, 0x74,
	0x62, 0x61, 0x63, 0x6b, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x2f,
	0x0a, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x46, 0x62, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x61, 0x6c, 0x52, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x12,
	0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61,
	0x67, 0x12, 0x2f, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x49, 0x67,
	0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x64,
	0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b,
	0x6f, 0x6e, 0x2e, 0x46, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x64, 0x69, 0x74,
	0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x64, 0x69, 0x74, 0x22, 0x50, 0x0a,
	0x0d, 0x46, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x64, 0x69, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x64, 0x69, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x45, 0x64, 0x69, 0x74, 0x22,
	0x68, 0x0a, 0x0a, 0x49, 0x67, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x22, 0x7f, 0x0a, 0x0a, 0x46, 0x62, 0x50,
	0x6f, 0x73, 0x74, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x2f, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x46, 0x62,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x52, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x69, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x0e, 0x41,
	0x64, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x22, 0x95, 0x02, 0x0a, 0x0a, 0x46,
	0x62, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x10, 0x61, 0x64, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x73, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x61, 0x64, 0x73, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x13, 0x0a, 0x05, 0x61, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x55, 0x72, 0x69,
	0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x67, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x47, 0x75, 0x65, 0x73, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e,
	0x46, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x22, 0xa2, 0x04, 0x0a, 0x09, 0x46, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x61,
	0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x46, 0x62, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x23, 0x0a, 0x04, 0x72, 0x65, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x46, 0x62, 0x52, 0x65, 0x61, 0x64, 0x52, 0x04,
	0x72, 0x65, 0x61, 0x64, 0x12, 0x35, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b,
	0x6f, 0x6e, 0x2e, 0x46, 0x62, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x73, 0x5f, 0x65, 0x63, 0x68, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73,
	0x45, 0x63, 0x68, 0x6f, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x0d, 0x71, 0x75, 0x69, 0x63, 0x6b,
	0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x52, 0x0c, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65,
	0x73, 0x12, 0x34, 0x0a, 0x0b, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e,
	0x2e, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x0a, 0x71, 0x75, 0x69,
	0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69,
	0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x08, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66, 0x61,
	0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x52, 0x07, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x12, 0x2f, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x61, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b,
	0x6f, 0x6e, 0x2e, 0x46, 0x62, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x52, 0x08, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x22, 0x48, 0x0a, 0x07, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x54, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x46, 0x62,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x22, 0x30, 0x0a, 0x0c, 0x46, 0x62, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x7c, 0x0a, 0x0a, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72,
	0x6c, 0x22, 0x35, 0x0a, 0x08, 0x46, 0x62, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x22, 0x70, 0x0a, 0x0b, 0x46, 0x62, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x22, 0x30, 0x0a, 0x08, 0x46, 0x62,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x78, 0x0a, 0x0c,
	0x46, 0x62, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x2c, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x46, 0x62, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x55, 0x52, 0x4c, 0x22, 0x86, 0x01, 0x0a, 0x07, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x78,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x78,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x22,
	0x38, 0x0a, 0x0a, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa4, 0x01, 0x0a, 0x07, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f,
	0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x31,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x32, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x22, 0xbb, 0x02, 0x0a, 0x0e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x74, 0x65,
	0x6d, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x36, 0x0a,
	0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e,
	0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x07, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e,
	0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x07, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x91,
	0x05, 0x0a, 0x09, 0x46, 0x62, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x75, 0x73, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x52, 0x65, 0x75, 0x73, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x68, 0x61, 0x72, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x62,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66,
	0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x07, 0x62,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f,
	0x6e, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x2a, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x35,
	0x0a, 0x0b, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x41, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2d, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x46, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x22, 0x3c, 0x0a, 0x0a, 0x46, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x12, 0x2e, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x46, 0x62, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0x8b, 0x01, 0x0a, 0x09, 0x46, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x98,
	0x02, 0x0a, 0x06, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x30, 0x0a, 0x14, 0x77, 0x65, 0x62, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x77,
	0x65, 0x62, 0x76, 0x69, 0x65, 0x77, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x12, 0x31, 0x0a, 0x14, 0x6d, 0x65, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x6d, 0x65, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x30, 0x0a, 0x14, 0x77, 0x65, 0x62, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x77, 0x65, 0x62, 0x76, 0x69, 0x65, 0x77, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x22, 0x38, 0x0a, 0x06, 0x46, 0x62, 0x52,
	0x65, 0x61, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72,
	0x6b, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x73, 0x65, 0x71, 0x22, 0x50, 0x0a, 0x0a, 0x46, 0x62, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x6d, 0x69, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x72, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x73, 0x65, 0x71, 0x22, 0x52, 0x0a, 0x0e, 0x46, 0x62, 0x53, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0xa8, 0x01, 0x0a, 0x0c, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x62, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x62, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x62, 0x75, 0x73,
	0x65, 0x72, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x62, 0x75, 0x73,
	0x65, 0x72, 0x69, 0x64, 0x22, 0x3f, 0x0a, 0x0d, 0x46, 0x62, 0x50, 0x61, 0x67, 0x65, 0x50, 0x69,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x46, 0x62,
	0x50, 0x61, 0x67, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x25, 0x0a, 0x11, 0x46, 0x62, 0x50, 0x61, 0x67, 0x65, 0x50,
	0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xdc, 0x01, 0x0a,
	0x0b, 0x46, 0x62, 0x50, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x30, 0x0a, 0x07, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x46, 0x62, 0x50, 0x61,
	0x67, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x07, 0x70, 0x69, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x54, 0x0a, 0x1a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x72,
	0x61, 0x6d, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x61, 0x62, 0x69,
	0x6b, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x18, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x39, 0x0a, 0x09, 0x46,
	0x62, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x22, 0x4c, 0x0a, 0x08, 0x46, 0x62, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x46, 0x62,
	0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x73, 0x52, 0x07, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x65, 0x78, 0x74, 0x22, 0x60, 0x0a, 0x09, 0x46, 0x62, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x74, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x46, 0x62, 0x50, 0x61, 0x67, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x06, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x61,
	0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x46, 0x62, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x06,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x22, 0x77, 0x0a, 0x10, 0x46, 0x62, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73,
	0x69, 0x6c, 0x68, 0x6f, 0x75, 0x65, 0x74, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x69, 0x73, 0x53, 0x69, 0x6c, 0x68, 0x6f, 0x75, 0x65, 0x74, 0x74, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22,
	0x3d, 0x0a, 0x0c, 0x46, 0x62, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x12,
	0x2d, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x46, 0x62, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x50, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0xb3,
	0x02, 0x0a, 0x0c, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x70, 0x69, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x61, 0x62,
	0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x46, 0x62, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69,
	0x63, 0x52, 0x07, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x51, 0x0a, 0x11, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b,
	0x47, 0x75, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x22, 0xd6, 0x03, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x69, 0x67, 0x49, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x69, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63,
	0x22, 0xc4, 0x01, 0x0a, 0x0a, 0x46, 0x62, 0x32, 0x53, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x62, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x66, 0x62, 0x6d, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x62, 0x6d, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x62,
	0x6d, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x77, 0x0a, 0x14, 0x4c, 0x6f, 0x6e, 0x67, 0x4c,
	0x69, 0x76, 0x65, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x49, 0x6e,
	0x22, 0x28, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x42, 0x0a, 0x13, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x8d,
	0x01, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x75, 0x62, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x62, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x62, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x32,
	0x0a, 0x0a, 0x46, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x66, 0x61,
	0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x78, 0x0a, 0x0d, 0x46, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x58, 0x0a, 0x06,
	0x46, 0x62, 0x50, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x46, 0x62, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x0f, 0x46, 0x62, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x66, 0x61, 0x62, 0x69,
	0x6b, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x46, 0x62, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a,
	0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x46, 0x62, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x52, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x22, 0x7f, 0x0a, 0x07, 0x46, 0x62, 0x4c, 0x65,
	0x61, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f,
	0x6e, 0x2e, 0x46, 0x62, 0x4c, 0x65, 0x61, 0x64, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x29,
	0x0a, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x46, 0x62, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x52, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x22, 0x39, 0x0a, 0x0b, 0x46, 0x62, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x06, 0x46, 0x62, 0x4c, 0x65, 0x61, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x61, 0x64, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64,
	0x12, 0x33, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x46,
	0x62, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0xa6, 0x02, 0x0a, 0x0e, 0x46, 0x62, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x21, 0x0a, 0x0c,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x61, 0x62,
	0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x46, 0x62, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52,
	0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x2d, 0x0a,
	0x07, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x46, 0x62, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x52, 0x07, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x69, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x22, 0x85,
	0x01, 0x0a, 0x0a, 0x46, 0x62, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x24, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x66,
	0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x46, 0x62, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x06, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x61,
	0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x46, 0x62, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x06,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x22, 0x37, 0x0a, 0x0d, 0x46, 0x62, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e,
	0x46, 0x62, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x45, 0x0a, 0x09, 0x46, 0x62, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb1, 0x01, 0x0a, 0x20, 0x46, 0x62, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x6d, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x66, 0x61, 0x62,
	0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x3c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x46, 0x62, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x29, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x46, 0x62, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x52, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x22, 0xc6, 0x01, 0x0a, 0x1f, 0x46,
	0x62, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x33,
	0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x46, 0x62, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x22, 0xf5, 0x01, 0x0a, 0x0b, 0x46, 0x62, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x55, 0x72, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x5f, 0x73, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x41, 0x73, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x22, 0x9d, 0x01, 0x0a, 0x16,
	0x46, 0x62, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x61, 0x62,
	0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x46, 0x62, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x29, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x2e, 0x46, 0x62, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x52, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x22, 0x81, 0x02, 0x0a, 0x15,
	0x46, 0x62, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e,
	0x2e, 0x46, 0x62, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x02, 0x74, 0x6f,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e,
	0x2e, 0x46, 0x62, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x02,
	0x74, 0x6f, 0x12, 0x4b, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x66, 0x61, 0x62, 0x69, 0x6b, 0x6f,
	0x6e, 0x2e, 0x46, 0x62, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x6d, 0x6e,
	0x74, 0x73, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42,
	0x21, 0x5a, 0x1f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x75,
	0x62, 0x69, 0x7a, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2f, 0x66, 0x61, 0x62, 0x69, 0x6b,
	0x6f, 0x6e,
}

var (
	file_fabikon_proto_rawDescOnce sync.Once
	file_fabikon_proto_rawDescData = file_fabikon_proto_rawDesc
)

func file_fabikon_proto_rawDescGZIP() []byte {
	file_fabikon_proto_rawDescOnce.Do(func() {
		file_fabikon_proto_rawDescData = protoimpl.X.CompressGZIP(file_fabikon_proto_rawDescData)
	})
	return file_fabikon_proto_rawDescData
}

var file_fabikon_proto_msgTypes = make([]protoimpl.MessageInfo, 69)
var file_fabikon_proto_goTypes = []interface{}{
	(*FacebookDataset)(nil),                  // 0: fabikon.FacebookDataset
	(*FacebookPage)(nil),                     // 1: fabikon.FacebookPage
	(*FbWebhookEvent)(nil),                   // 2: fabikon.FbWebhookEvent
	(*FbEntry)(nil),                          // 3: fabikon.FbEntry
	(*FbChange)(nil),                         // 4: fabikon.FbChange
	(*FbFrom)(nil),                           // 5: fabikon.FbFrom
	(*FbChangeValue)(nil),                    // 6: fabikon.FbChangeValue
	(*FbCustomLabel)(nil),                    // 7: fabikon.FbCustomLabel
	(*FbChangeUser)(nil),                     // 8: fabikon.FbChangeUser
	(*IgMedia)(nil),                          // 9: fabikon.IgMedia
	(*FbPagePost)(nil),                       // 10: fabikon.FbPagePost
	(*FbMessaging)(nil),                      // 11: fabikon.FbMessaging
	(*FbMessageEdit)(nil),                    // 12: fabikon.FbMessageEdit
	(*IgReaction)(nil),                       // 13: fabikon.IgReaction
	(*FbPostback)(nil),                       // 14: fabikon.FbPostback
	(*AdsContextData)(nil),                   // 15: fabikon.AdsContextData
	(*FbReferral)(nil),                       // 16: fabikon.FbReferral
	(*FbMessage)(nil),                        // 17: fabikon.FbMessage
	(*ReplyTo)(nil),                          // 18: fabikon.ReplyTo
	(*FbReplyStory)(nil),                     // 19: fabikon.FbReplyStory
	(*QuickReply)(nil),                       // 20: fabikon.QuickReply
	(*FbSender)(nil),                         // 21: fabikon.FbSender
	(*FbRecipient)(nil),                      // 22: fabikon.FbRecipient
	(*FbAction)(nil),                         // 23: fabikon.FbAction
	(*FbAttachment)(nil),                     // 24: fabikon.FbAttachment
	(*Summary)(nil),                          // 25: fabikon.Summary
	(*Adjustment)(nil),                       // 26: fabikon.Adjustment
	(*Address)(nil),                          // 27: fabikon.Address
	(*GenericElement)(nil),                   // 28: fabikon.GenericElement
	(*FbPayload)(nil),                        // 29: fabikon.FbPayload
	(*FbProducts)(nil),                       // 30: fabikon.FbProducts
	(*FbProduct)(nil),                        // 31: fabikon.FbProduct
	(*Button)(nil),                           // 32: fabikon.Button
	(*FbRead)(nil),                           // 33: fabikon.FbRead
	(*FbDelivery)(nil),                       // 34: fabikon.FbDelivery
	(*FbSendResponse)(nil),                   // 35: fabikon.FbSendResponse
	(*Conversation)(nil),                     // 36: fabikon.Conversation
	(*FbPagePicture)(nil),                    // 37: fabikon.FbPagePicture
	(*FbPagePictureData)(nil),                // 38: fabikon.FbPagePictureData
	(*FbPageEntry)(nil),                      // 39: fabikon.FbPageEntry
	(*FbCursors)(nil),                        // 40: fabikon.FbCursors
	(*FbPaging)(nil),                         // 41: fabikon.FbPaging
	(*FbPageRet)(nil),                        // 42: fabikon.FbPageRet
	(*FbProfilePicData)(nil),                 // 43: fabikon.FbProfilePicData
	(*FbProfilePic)(nil),                     // 44: fabikon.FbProfilePic
	(*FacebookUser)(nil),                     // 45: fabikon.FacebookUser
	(*FacebookGuestUser)(nil),                // 46: fabikon.FacebookGuestUser
	(*InstagramUser)(nil),                    // 47: fabikon.InstagramUser
	(*Fb2SbEvent)(nil),                       // 48: fabikon.Fb2SbEvent
	(*LongLivedAccessToken)(nil),             // 49: fabikon.LongLivedAccessToken
	(*SubscribeRet)(nil),                     // 50: fabikon.SubscribeRet
	(*SubscribeAppRequest)(nil),              // 51: fabikon.SubscribeAppRequest
	(*Error)(nil),                            // 52: fabikon.Error
	(*FbResponse)(nil),                       // 53: fabikon.FbResponse
	(*FbProductItem)(nil),                    // 54: fabikon.FbProductItem
	(*FbPage)(nil),                           // 55: fabikon.FbPage
	(*FbConversations)(nil),                  // 56: fabikon.FbConversations
	(*FbLeads)(nil),                          // 57: fabikon.FbLeads
	(*FbFieldData)(nil),                      // 58: fabikon.FbFieldData
	(*FbLead)(nil),                           // 59: fabikon.FbLead
	(*FbConversation)(nil),                   // 60: fabikon.FbConversation
	(*FbProfiles)(nil),                       // 61: fabikon.FbProfiles
	(*FbProfileData)(nil),                    // 62: fabikon.FbProfileData
	(*FbProfile)(nil),                        // 63: fabikon.FbProfile
	(*FbConversationMessageAttachemnts)(nil), // 64: fabikon.FbConversationMessageAttachemnts
	(*FbConversationMessageAttachment)(nil),  // 65: fabikon.FbConversationMessageAttachment
	(*FbImageData)(nil),                      // 66: fabikon.FbImageData
	(*FbConversationMessages)(nil),           // 67: fabikon.FbConversationMessages
	(*FbConversationMessage)(nil),            // 68: fabikon.FbConversationMessage
}
var file_fabikon_proto_depIdxs = []int32{
	47, // 0: fabikon.FacebookPage.instagram_account:type_name -> fabikon.InstagramUser
	3,  // 1: fabikon.FbWebhookEvent.entry:type_name -> fabikon.FbEntry
	11, // 2: fabikon.FbEntry.messaging:type_name -> fabikon.FbMessaging
	4,  // 3: fabikon.FbEntry.changes:type_name -> fabikon.FbChange
	11, // 4: fabikon.FbEntry.standby:type_name -> fabikon.FbMessaging
	6,  // 5: fabikon.FbChange.value:type_name -> fabikon.FbChangeValue
	5,  // 6: fabikon.FbChangeValue.from:type_name -> fabikon.FbFrom
	10, // 7: fabikon.FbChangeValue.post:type_name -> fabikon.FbPagePost
	9,  // 8: fabikon.FbChangeValue.media:type_name -> fabikon.IgMedia
	8,  // 9: fabikon.FbChangeValue.user:type_name -> fabikon.FbChangeUser
	7,  // 10: fabikon.FbChangeValue.label:type_name -> fabikon.FbCustomLabel
	21, // 11: fabikon.FbMessaging.sender:type_name -> fabikon.FbSender
	22, // 12: fabikon.FbMessaging.recipient:type_name -> fabikon.FbRecipient
	17, // 13: fabikon.FbMessaging.message:type_name -> fabikon.FbMessage
	34, // 14: fabikon.FbMessaging.delivery:type_name -> fabikon.FbDelivery
	33, // 15: fabikon.FbMessaging.read:type_name -> fabikon.FbRead
	14, // 16: fabikon.FbMessaging.postback:type_name -> fabikon.FbPostback
	16, // 17: fabikon.FbMessaging.referral:type_name -> fabikon.FbReferral
	13, // 18: fabikon.FbMessaging.reaction:type_name -> fabikon.IgReaction
	12, // 19: fabikon.FbMessaging.message_edit:type_name -> fabikon.FbMessageEdit
	16, // 20: fabikon.FbPostback.referral:type_name -> fabikon.FbReferral
	15, // 21: fabikon.FbReferral.ads_context_data:type_name -> fabikon.AdsContextData
	31, // 22: fabikon.FbReferral.product:type_name -> fabikon.FbProduct
	24, // 23: fabikon.FbMessage.attachments:type_name -> fabikon.FbAttachment
	33, // 24: fabikon.FbMessage.read:type_name -> fabikon.FbRead
	24, // 25: fabikon.FbMessage.attachment:type_name -> fabikon.FbAttachment
	20, // 26: fabikon.FbMessage.quick_replies:type_name -> fabikon.QuickReply
	20, // 27: fabikon.FbMessage.quick_reply:type_name -> fabikon.QuickReply
	18, // 28: fabikon.FbMessage.reply_to:type_name -> fabikon.ReplyTo
	16, // 29: fabikon.FbMessage.referral:type_name -> fabikon.FbReferral
	19, // 30: fabikon.ReplyTo.story:type_name -> fabikon.FbReplyStory
	29, // 31: fabikon.FbAttachment.payload:type_name -> fabikon.FbPayload
	32, // 32: fabikon.GenericElement.default_action:type_name -> fabikon.Button
	32, // 33: fabikon.GenericElement.buttons:type_name -> fabikon.Button
	28, // 34: fabikon.FbPayload.elements:type_name -> fabikon.GenericElement
	32, // 35: fabikon.FbPayload.buttons:type_name -> fabikon.Button
	27, // 36: fabikon.FbPayload.address:type_name -> fabikon.Address
	25, // 37: fabikon.FbPayload.summary:type_name -> fabikon.Summary
	26, // 38: fabikon.FbPayload.adjustments:type_name -> fabikon.Adjustment
	30, // 39: fabikon.FbPayload.product:type_name -> fabikon.FbProducts
	31, // 40: fabikon.FbProducts.elements:type_name -> fabikon.FbProduct
	38, // 41: fabikon.FbPagePicture.data:type_name -> fabikon.FbPagePictureData
	37, // 42: fabikon.FbPageEntry.picture:type_name -> fabikon.FbPagePicture
	47, // 43: fabikon.FbPageEntry.instagram_business_account:type_name -> fabikon.InstagramUser
	40, // 44: fabikon.FbPaging.cursors:type_name -> fabikon.FbCursors
	39, // 45: fabikon.FbPageRet.data:type_name -> fabikon.FbPageEntry
	41, // 46: fabikon.FbPageRet.paging:type_name -> fabikon.FbPaging
	43, // 47: fabikon.FbProfilePic.Data:type_name -> fabikon.FbProfilePicData
	44, // 48: fabikon.FacebookUser.picture:type_name -> fabikon.FbProfilePic
	52, // 49: fabikon.FbResponse.error:type_name -> fabikon.Error
	56, // 50: fabikon.FbPage.conversations:type_name -> fabikon.FbConversations
	52, // 51: fabikon.FbConversations.error:type_name -> fabikon.Error
	60, // 52: fabikon.FbConversations.data:type_name -> fabikon.FbConversation
	41, // 53: fabikon.FbConversations.paging:type_name -> fabikon.FbPaging
	52, // 54: fabikon.FbLeads.error:type_name -> fabikon.Error
	59, // 55: fabikon.FbLeads.data:type_name -> fabikon.FbLead
	41, // 56: fabikon.FbLeads.paging:type_name -> fabikon.FbPaging
	58, // 57: fabikon.FbLead.field_data:type_name -> fabikon.FbFieldData
	61, // 58: fabikon.FbConversation.participants:type_name -> fabikon.FbProfiles
	61, // 59: fabikon.FbConversation.senders:type_name -> fabikon.FbProfiles
	52, // 60: fabikon.FbProfiles.error:type_name -> fabikon.Error
	63, // 61: fabikon.FbProfiles.data:type_name -> fabikon.FbProfile
	41, // 62: fabikon.FbProfiles.paging:type_name -> fabikon.FbPaging
	63, // 63: fabikon.FbProfileData.data:type_name -> fabikon.FbProfile
	52, // 64: fabikon.FbConversationMessageAttachemnts.error:type_name -> fabikon.Error
	65, // 65: fabikon.FbConversationMessageAttachemnts.data:type_name -> fabikon.FbConversationMessageAttachment
	41, // 66: fabikon.FbConversationMessageAttachemnts.paging:type_name -> fabikon.FbPaging
	66, // 67: fabikon.FbConversationMessageAttachment.image_data:type_name -> fabikon.FbImageData
	52, // 68: fabikon.FbConversationMessages.error:type_name -> fabikon.Error
	68, // 69: fabikon.FbConversationMessages.data:type_name -> fabikon.FbConversationMessage
	41, // 70: fabikon.FbConversationMessages.paging:type_name -> fabikon.FbPaging
	63, // 71: fabikon.FbConversationMessage.from:type_name -> fabikon.FbProfile
	62, // 72: fabikon.FbConversationMessage.to:type_name -> fabikon.FbProfileData
	64, // 73: fabikon.FbConversationMessage.attachments:type_name -> fabikon.FbConversationMessageAttachemnts
	74, // [74:74] is the sub-list for method output_type
	74, // [74:74] is the sub-list for method input_type
	74, // [74:74] is the sub-list for extension type_name
	74, // [74:74] is the sub-list for extension extendee
	0,  // [0:74] is the sub-list for field type_name
}

func init() { file_fabikon_proto_init() }
func file_fabikon_proto_init() {
	if File_fabikon_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fabikon_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FacebookDataset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FacebookPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbWebhookEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbFrom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbChangeValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbCustomLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbChangeUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IgMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbPagePost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbMessaging); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbMessageEdit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IgReaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbPostback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdsContextData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbReferral); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyTo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbReplyStory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuickReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbSender); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbRecipient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Summary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Adjustment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbProducts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Button); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbDelivery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbSendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conversation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbPagePicture); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbPagePictureData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbPageEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbCursors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbPaging); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbPageRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbProfilePicData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbProfilePic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FacebookUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FacebookGuestUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstagramUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fb2SbEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LongLivedAccessToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbProductItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbConversations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbLeads); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbFieldData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbLead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbConversation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbProfiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbProfileData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbConversationMessageAttachemnts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbConversationMessageAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbImageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbConversationMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fabikon_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbConversationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fabikon_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   69,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fabikon_proto_goTypes,
		DependencyIndexes: file_fabikon_proto_depIdxs,
		MessageInfos:      file_fabikon_proto_msgTypes,
	}.Build()
	File_fabikon_proto = out.File
	file_fabikon_proto_rawDesc = nil
	file_fabikon_proto_goTypes = nil
	file_fabikon_proto_depIdxs = nil
}
