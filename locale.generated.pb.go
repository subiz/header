// CODE GENERATED BY lang.js. DO NOT MODIFY

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.0
// source: locale.generated.proto

package header

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type I18NString struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Af_NA         string                 `protobuf:"bytes,11,opt,name=af_NA,json=afNA,proto3" json:"af_NA,omitempty"`        // Afrikaans (Namibia)
	Af_ZA         string                 `protobuf:"bytes,12,opt,name=af_ZA,json=afZA,proto3" json:"af_ZA,omitempty"`        // Afrikaans (South Africa)
	Ar_AR         string                 `protobuf:"bytes,13,opt,name=ar_AR,json=arAR,proto3" json:"ar_AR,omitempty"`        // Arabic
	Ar_MA         string                 `protobuf:"bytes,14,opt,name=ar_MA,json=arMA,proto3" json:"ar_MA,omitempty"`        // Arabic (Morocco)
	Ar_SA         string                 `protobuf:"bytes,15,opt,name=ar_SA,json=arSA,proto3" json:"ar_SA,omitempty"`        // Arabic (Saudi Arabia)
	Ay_BO         string                 `protobuf:"bytes,16,opt,name=ay_BO,json=ayBO,proto3" json:"ay_BO,omitempty"`        // Aymara
	Az_AZ         string                 `protobuf:"bytes,17,opt,name=az_AZ,json=azAZ,proto3" json:"az_AZ,omitempty"`        // Azerbaijani
	Be_BY         string                 `protobuf:"bytes,18,opt,name=be_BY,json=beBY,proto3" json:"be_BY,omitempty"`        // Belarusian
	Bg_BG         string                 `protobuf:"bytes,19,opt,name=bg_BG,json=bgBG,proto3" json:"bg_BG,omitempty"`        // Bulgarian
	Bn_IN         string                 `protobuf:"bytes,20,opt,name=bn_IN,json=bnIN,proto3" json:"bn_IN,omitempty"`        // Bengali (India)
	Bn_BD         string                 `protobuf:"bytes,21,opt,name=bn_BD,json=bnBD,proto3" json:"bn_BD,omitempty"`        // Bengali (Bangladesh)
	Bs_BA         string                 `protobuf:"bytes,22,opt,name=bs_BA,json=bsBA,proto3" json:"bs_BA,omitempty"`        // Bosnian
	Ca_ES         string                 `protobuf:"bytes,23,opt,name=ca_ES,json=caES,proto3" json:"ca_ES,omitempty"`        // Catalan
	Ck_US         string                 `protobuf:"bytes,24,opt,name=ck_US,json=ckUS,proto3" json:"ck_US,omitempty"`        // Cherokee
	Cs_CZ         string                 `protobuf:"bytes,25,opt,name=cs_CZ,json=csCZ,proto3" json:"cs_CZ,omitempty"`        // Czech
	Cy_GB         string                 `protobuf:"bytes,26,opt,name=cy_GB,json=cyGB,proto3" json:"cy_GB,omitempty"`        // Welsh
	Da_DK         string                 `protobuf:"bytes,27,opt,name=da_DK,json=daDK,proto3" json:"da_DK,omitempty"`        // Danish
	De_AT         string                 `protobuf:"bytes,28,opt,name=de_AT,json=deAT,proto3" json:"de_AT,omitempty"`        // German (Austria)
	De_DE         string                 `protobuf:"bytes,29,opt,name=de_DE,json=deDE,proto3" json:"de_DE,omitempty"`        // German (Germany)
	De_CH         string                 `protobuf:"bytes,30,opt,name=de_CH,json=deCH,proto3" json:"de_CH,omitempty"`        // German (Switzerland)
	El_GR         string                 `protobuf:"bytes,31,opt,name=el_GR,json=elGR,proto3" json:"el_GR,omitempty"`        // Greek (Greece)
	En_GB         string                 `protobuf:"bytes,32,opt,name=en_GB,json=enGB,proto3" json:"en_GB,omitempty"`        // English (UK)
	En_AU         string                 `protobuf:"bytes,33,opt,name=en_AU,json=enAU,proto3" json:"en_AU,omitempty"`        // English (Australia)
	En_CA         string                 `protobuf:"bytes,34,opt,name=en_CA,json=enCA,proto3" json:"en_CA,omitempty"`        // English (Canada)
	En_IE         string                 `protobuf:"bytes,35,opt,name=en_IE,json=enIE,proto3" json:"en_IE,omitempty"`        // English (Ireland)
	En_IN         string                 `protobuf:"bytes,36,opt,name=en_IN,json=enIN,proto3" json:"en_IN,omitempty"`        // English (India)
	En_PI         string                 `protobuf:"bytes,37,opt,name=en_PI,json=enPI,proto3" json:"en_PI,omitempty"`        // English (Pirate)
	En_UD         string                 `protobuf:"bytes,38,opt,name=en_UD,json=enUD,proto3" json:"en_UD,omitempty"`        // English (Upside Down)
	En_US         string                 `protobuf:"bytes,39,opt,name=en_US,json=enUS,proto3" json:"en_US,omitempty"`        // English (US)
	En_ZA         string                 `protobuf:"bytes,40,opt,name=en_ZA,json=enZA,proto3" json:"en_ZA,omitempty"`        // English (South Africa)
	Eo_EO         string                 `protobuf:"bytes,41,opt,name=eo_EO,json=eoEO,proto3" json:"eo_EO,omitempty"`        // Esperanto
	Es_AR         string                 `protobuf:"bytes,42,opt,name=es_AR,json=esAR,proto3" json:"es_AR,omitempty"`        // Spanish (Argentina)
	Es_419        string                 `protobuf:"bytes,43,opt,name=es_419,json=es419,proto3" json:"es_419,omitempty"`     // Spanish (Latin America)
	Es_CL         string                 `protobuf:"bytes,44,opt,name=es_CL,json=esCL,proto3" json:"es_CL,omitempty"`        // Spanish (Chile)
	Es_CO         string                 `protobuf:"bytes,45,opt,name=es_CO,json=esCO,proto3" json:"es_CO,omitempty"`        // Spanish (Colombia)
	Es_EC         string                 `protobuf:"bytes,46,opt,name=es_EC,json=esEC,proto3" json:"es_EC,omitempty"`        // Spanish (Ecuador)
	Es_ES         string                 `protobuf:"bytes,47,opt,name=es_ES,json=esES,proto3" json:"es_ES,omitempty"`        // Spanish (Spain)
	Es_LA         string                 `protobuf:"bytes,48,opt,name=es_LA,json=esLA,proto3" json:"es_LA,omitempty"`        // Spanish (Latin America)
	Es_NI         string                 `protobuf:"bytes,49,opt,name=es_NI,json=esNI,proto3" json:"es_NI,omitempty"`        // Spanish (Nicaragua)
	Es_MX         string                 `protobuf:"bytes,50,opt,name=es_MX,json=esMX,proto3" json:"es_MX,omitempty"`        // Spanish (Mexico)
	Es_US         string                 `protobuf:"bytes,51,opt,name=es_US,json=esUS,proto3" json:"es_US,omitempty"`        // Spanish (United States)
	Es_VE         string                 `protobuf:"bytes,52,opt,name=es_VE,json=esVE,proto3" json:"es_VE,omitempty"`        // Spanish (Venezuela)
	Et_EE         string                 `protobuf:"bytes,53,opt,name=et_EE,json=etEE,proto3" json:"et_EE,omitempty"`        // Estonian (Estonia)
	Eu_ES         string                 `protobuf:"bytes,54,opt,name=eu_ES,json=euES,proto3" json:"eu_ES,omitempty"`        // Basque
	Fa_IR         string                 `protobuf:"bytes,55,opt,name=fa_IR,json=faIR,proto3" json:"fa_IR,omitempty"`        // Persian
	Fb_LT         string                 `protobuf:"bytes,56,opt,name=fb_LT,json=fbLT,proto3" json:"fb_LT,omitempty"`        // Leet
	Fi_FI         string                 `protobuf:"bytes,57,opt,name=fi_FI,json=fiFI,proto3" json:"fi_FI,omitempty"`        // Finnish
	Fo_FO         string                 `protobuf:"bytes,58,opt,name=fo_FO,json=foFO,proto3" json:"fo_FO,omitempty"`        // Faroese (Faroe Islands)
	Fr_CA         string                 `protobuf:"bytes,59,opt,name=fr_CA,json=frCA,proto3" json:"fr_CA,omitempty"`        // French (Canada)
	Fr_FR         string                 `protobuf:"bytes,60,opt,name=fr_FR,json=frFR,proto3" json:"fr_FR,omitempty"`        // French (France)
	Fr_BE         string                 `protobuf:"bytes,61,opt,name=fr_BE,json=frBE,proto3" json:"fr_BE,omitempty"`        // French (Belgium)
	Fr_CH         string                 `protobuf:"bytes,62,opt,name=fr_CH,json=frCH,proto3" json:"fr_CH,omitempty"`        // French (Switzerland)
	Fy_NL         string                 `protobuf:"bytes,63,opt,name=fy_NL,json=fyNL,proto3" json:"fy_NL,omitempty"`        // Frisian (West)
	Ga_IE         string                 `protobuf:"bytes,64,opt,name=ga_IE,json=gaIE,proto3" json:"ga_IE,omitempty"`        // Irish
	Gl_ES         string                 `protobuf:"bytes,65,opt,name=gl_ES,json=glES,proto3" json:"gl_ES,omitempty"`        // Galician
	Gn_PY         string                 `protobuf:"bytes,66,opt,name=gn_PY,json=gnPY,proto3" json:"gn_PY,omitempty"`        // Guarani
	Gu_IN         string                 `protobuf:"bytes,67,opt,name=gu_IN,json=guIN,proto3" json:"gu_IN,omitempty"`        // Gujarati
	Gx_GR         string                 `protobuf:"bytes,68,opt,name=gx_GR,json=gxGR,proto3" json:"gx_GR,omitempty"`        // Classical Greek
	He_IL         string                 `protobuf:"bytes,69,opt,name=he_IL,json=heIL,proto3" json:"he_IL,omitempty"`        // Hebrew
	Hi_IN         string                 `protobuf:"bytes,70,opt,name=hi_IN,json=hiIN,proto3" json:"hi_IN,omitempty"`        // Hindi
	Hr_HR         string                 `protobuf:"bytes,71,opt,name=hr_HR,json=hrHR,proto3" json:"hr_HR,omitempty"`        // Croatian
	Hu_HU         string                 `protobuf:"bytes,72,opt,name=hu_HU,json=huHU,proto3" json:"hu_HU,omitempty"`        // Hungarian
	Hy_AM         string                 `protobuf:"bytes,73,opt,name=hy_AM,json=hyAM,proto3" json:"hy_AM,omitempty"`        // Armenian (Armenia)
	Id_ID         string                 `protobuf:"bytes,74,opt,name=id_ID,json=idID,proto3" json:"id_ID,omitempty"`        // Indonesian
	Is_IS         string                 `protobuf:"bytes,75,opt,name=is_IS,json=isIS,proto3" json:"is_IS,omitempty"`        // Icelandic (Iceland)
	It_IT         string                 `protobuf:"bytes,76,opt,name=it_IT,json=itIT,proto3" json:"it_IT,omitempty"`        // Italian
	Ja_JP         string                 `protobuf:"bytes,77,opt,name=ja_JP,json=jaJP,proto3" json:"ja_JP,omitempty"`        // Japanese (Japan)
	Jv_ID         string                 `protobuf:"bytes,78,opt,name=jv_ID,json=jvID,proto3" json:"jv_ID,omitempty"`        // Javanese
	Ka_GE         string                 `protobuf:"bytes,79,opt,name=ka_GE,json=kaGE,proto3" json:"ka_GE,omitempty"`        // Georgian
	Kk_KZ         string                 `protobuf:"bytes,80,opt,name=kk_KZ,json=kkKZ,proto3" json:"kk_KZ,omitempty"`        // Kazakh
	Km_KH         string                 `protobuf:"bytes,81,opt,name=km_KH,json=kmKH,proto3" json:"km_KH,omitempty"`        // Khmer
	Kn_IN         string                 `protobuf:"bytes,82,opt,name=kn_IN,json=knIN,proto3" json:"kn_IN,omitempty"`        // Kannada (India)
	Ko_KR         string                 `protobuf:"bytes,83,opt,name=ko_KR,json=koKR,proto3" json:"ko_KR,omitempty"`        // Korean (Korea)
	Ku_TR         string                 `protobuf:"bytes,84,opt,name=ku_TR,json=kuTR,proto3" json:"ku_TR,omitempty"`        // Kurdish
	La_VA         string                 `protobuf:"bytes,85,opt,name=la_VA,json=laVA,proto3" json:"la_VA,omitempty"`        // Latin
	Li_NL         string                 `protobuf:"bytes,86,opt,name=li_NL,json=liNL,proto3" json:"li_NL,omitempty"`        // Limburgish
	Lt_LT         string                 `protobuf:"bytes,87,opt,name=lt_LT,json=ltLT,proto3" json:"lt_LT,omitempty"`        // Lithuanian
	Lv_LV         string                 `protobuf:"bytes,88,opt,name=lv_LV,json=lvLV,proto3" json:"lv_LV,omitempty"`        // Latvian
	Mg_MG         string                 `protobuf:"bytes,89,opt,name=mg_MG,json=mgMG,proto3" json:"mg_MG,omitempty"`        // Malagasy
	Mk_MK         string                 `protobuf:"bytes,90,opt,name=mk_MK,json=mkMK,proto3" json:"mk_MK,omitempty"`        // Macedonian (Macedonian)
	Ml_IN         string                 `protobuf:"bytes,91,opt,name=ml_IN,json=mlIN,proto3" json:"ml_IN,omitempty"`        // Malayalam
	Mn_MN         string                 `protobuf:"bytes,92,opt,name=mn_MN,json=mnMN,proto3" json:"mn_MN,omitempty"`        // Mongolian
	Mr_IN         string                 `protobuf:"bytes,93,opt,name=mr_IN,json=mrIN,proto3" json:"mr_IN,omitempty"`        // Marathi
	Ms_MY         string                 `protobuf:"bytes,94,opt,name=ms_MY,json=msMY,proto3" json:"ms_MY,omitempty"`        // Malay
	Mt_MT         string                 `protobuf:"bytes,95,opt,name=mt_MT,json=mtMT,proto3" json:"mt_MT,omitempty"`        // Maltese
	Nb_NO         string                 `protobuf:"bytes,96,opt,name=nb_NO,json=nbNO,proto3" json:"nb_NO,omitempty"`        // Norwegian (bokmal)
	Ne_NP         string                 `protobuf:"bytes,97,opt,name=ne_NP,json=neNP,proto3" json:"ne_NP,omitempty"`        // Nepali
	Nl_BE         string                 `protobuf:"bytes,98,opt,name=nl_BE,json=nlBE,proto3" json:"nl_BE,omitempty"`        // Dutch (Belgium)
	Nl_NL         string                 `protobuf:"bytes,99,opt,name=nl_NL,json=nlNL,proto3" json:"nl_NL,omitempty"`        // Dutch (Netherlands)
	Nn_NO         string                 `protobuf:"bytes,100,opt,name=nn_NO,json=nnNO,proto3" json:"nn_NO,omitempty"`       // Norwegian (nynorsk)
	Or_IN         string                 `protobuf:"bytes,101,opt,name=or_IN,json=orIN,proto3" json:"or_IN,omitempty"`       // Oriya
	Pa_IN         string                 `protobuf:"bytes,102,opt,name=pa_IN,json=paIN,proto3" json:"pa_IN,omitempty"`       // Punjabi (India)
	Pl_PL         string                 `protobuf:"bytes,103,opt,name=pl_PL,json=plPL,proto3" json:"pl_PL,omitempty"`       // Polish
	Ps_AF         string                 `protobuf:"bytes,104,opt,name=ps_AF,json=psAF,proto3" json:"ps_AF,omitempty"`       // Pashto
	Pt_BR         string                 `protobuf:"bytes,105,opt,name=pt_BR,json=ptBR,proto3" json:"pt_BR,omitempty"`       // Portuguese (Brazil)
	Pt_PT         string                 `protobuf:"bytes,106,opt,name=pt_PT,json=ptPT,proto3" json:"pt_PT,omitempty"`       // Portuguese (Portugal)
	Qu_PE         string                 `protobuf:"bytes,107,opt,name=qu_PE,json=quPE,proto3" json:"qu_PE,omitempty"`       // Quechua
	Rm_CH         string                 `protobuf:"bytes,108,opt,name=rm_CH,json=rmCH,proto3" json:"rm_CH,omitempty"`       // Romansh
	Ro_RO         string                 `protobuf:"bytes,109,opt,name=ro_RO,json=roRO,proto3" json:"ro_RO,omitempty"`       // Romanian
	Ru_RU         string                 `protobuf:"bytes,110,opt,name=ru_RU,json=ruRU,proto3" json:"ru_RU,omitempty"`       // Russian
	Sa_IN         string                 `protobuf:"bytes,111,opt,name=sa_IN,json=saIN,proto3" json:"sa_IN,omitempty"`       // Sanskrit
	Se_NO         string                 `protobuf:"bytes,112,opt,name=se_NO,json=seNO,proto3" json:"se_NO,omitempty"`       // Northern Sámi
	Si_LK         string                 `protobuf:"bytes,113,opt,name=si_LK,json=siLK,proto3" json:"si_LK,omitempty"`       // Sinhala (Sri Lanka)
	Sk_SK         string                 `protobuf:"bytes,114,opt,name=sk_SK,json=skSK,proto3" json:"sk_SK,omitempty"`       // Slovak (Slovakia)
	Sl_SI         string                 `protobuf:"bytes,115,opt,name=sl_SI,json=slSI,proto3" json:"sl_SI,omitempty"`       // Slovenian
	So_SO         string                 `protobuf:"bytes,116,opt,name=so_SO,json=soSO,proto3" json:"so_SO,omitempty"`       // Somali
	Sq_AL         string                 `protobuf:"bytes,117,opt,name=sq_AL,json=sqAL,proto3" json:"sq_AL,omitempty"`       // Albanian
	Sr_RS         string                 `protobuf:"bytes,118,opt,name=sr_RS,json=srRS,proto3" json:"sr_RS,omitempty"`       // Serbian (Serbia)
	Sv_SE         string                 `protobuf:"bytes,119,opt,name=sv_SE,json=svSE,proto3" json:"sv_SE,omitempty"`       // Swedish
	Sw_KE         string                 `protobuf:"bytes,120,opt,name=sw_KE,json=swKE,proto3" json:"sw_KE,omitempty"`       // Swahili (Kenya)
	Ta_IN         string                 `protobuf:"bytes,121,opt,name=ta_IN,json=taIN,proto3" json:"ta_IN,omitempty"`       // Tamil
	Te_IN         string                 `protobuf:"bytes,122,opt,name=te_IN,json=teIN,proto3" json:"te_IN,omitempty"`       // Telugu
	Tg_TJ         string                 `protobuf:"bytes,123,opt,name=tg_TJ,json=tgTJ,proto3" json:"tg_TJ,omitempty"`       // Tajik
	Th_TH         string                 `protobuf:"bytes,124,opt,name=th_TH,json=thTH,proto3" json:"th_TH,omitempty"`       // Thai (Thailand)
	Tl_PH         string                 `protobuf:"bytes,125,opt,name=tl_PH,json=tlPH,proto3" json:"tl_PH,omitempty"`       // Filipino
	Tr_TR         string                 `protobuf:"bytes,126,opt,name=tr_TR,json=trTR,proto3" json:"tr_TR,omitempty"`       // Turkish
	Tt_RU         string                 `protobuf:"bytes,127,opt,name=tt_RU,json=ttRU,proto3" json:"tt_RU,omitempty"`       // Tatar
	Uk_UA         string                 `protobuf:"bytes,128,opt,name=uk_UA,json=ukUA,proto3" json:"uk_UA,omitempty"`       // Ukrainian
	Ur_PK         string                 `protobuf:"bytes,129,opt,name=ur_PK,json=urPK,proto3" json:"ur_PK,omitempty"`       // Urdu
	Uz_UZ         string                 `protobuf:"bytes,130,opt,name=uz_UZ,json=uzUZ,proto3" json:"uz_UZ,omitempty"`       // Uzbek
	Vi_VN         string                 `protobuf:"bytes,131,opt,name=vi_VN,json=viVN,proto3" json:"vi_VN,omitempty"`       // Vietnamese
	Xh_ZA         string                 `protobuf:"bytes,132,opt,name=xh_ZA,json=xhZA,proto3" json:"xh_ZA,omitempty"`       // Xhosa
	Yi_DE         string                 `protobuf:"bytes,133,opt,name=yi_DE,json=yiDE,proto3" json:"yi_DE,omitempty"`       // Yiddish (German)
	Zh_Hans       string                 `protobuf:"bytes,134,opt,name=zh_Hans,json=zhHans,proto3" json:"zh_Hans,omitempty"` // Chinese Simplified
	Zh_Hant       string                 `protobuf:"bytes,135,opt,name=zh_Hant,json=zhHant,proto3" json:"zh_Hant,omitempty"` // Chinese Traditional
	Zh_CN         string                 `protobuf:"bytes,136,opt,name=zh_CN,json=zhCN,proto3" json:"zh_CN,omitempty"`       // Chinese Simplified (China)
	Zh_HK         string                 `protobuf:"bytes,137,opt,name=zh_HK,json=zhHK,proto3" json:"zh_HK,omitempty"`       // Chinese Traditional (Hong Kong)
	Zh_SG         string                 `protobuf:"bytes,138,opt,name=zh_SG,json=zhSG,proto3" json:"zh_SG,omitempty"`       // Chinese Simplified (Singapore)
	Zh_TW         string                 `protobuf:"bytes,139,opt,name=zh_TW,json=zhTW,proto3" json:"zh_TW,omitempty"`       // Chinese Traditional (Taiwan)
	Zu_ZA         string                 `protobuf:"bytes,140,opt,name=zu_ZA,json=zuZA,proto3" json:"zu_ZA,omitempty"`       // Zulu
	Lo_LA         string                 `protobuf:"bytes,141,opt,name=lo_LA,json=loLA,proto3" json:"lo_LA,omitempty"`       // Lao
	Aa_ER         string                 `protobuf:"bytes,142,opt,name=aa_ER,json=aaER,proto3" json:"aa_ER,omitempty"`       // Afar
	En_SG         string                 `protobuf:"bytes,143,opt,name=en_SG,json=enSG,proto3" json:"en_SG,omitempty"`       // English (Singapore)
	Custom        string                 `protobuf:"bytes,250,opt,name=custom,proto3" json:"custom,omitempty"`
	Key           string                 `protobuf:"bytes,251,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *I18NString) Reset() {
	*x = I18NString{}
	mi := &file_locale_generated_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *I18NString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*I18NString) ProtoMessage() {}

func (x *I18NString) ProtoReflect() protoreflect.Message {
	mi := &file_locale_generated_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use I18NString.ProtoReflect.Descriptor instead.
func (*I18NString) Descriptor() ([]byte, []int) {
	return file_locale_generated_proto_rawDescGZIP(), []int{0}
}

func (x *I18NString) GetAf_NA() string {
	if x != nil {
		return x.Af_NA
	}
	return ""
}

func (x *I18NString) GetAf_ZA() string {
	if x != nil {
		return x.Af_ZA
	}
	return ""
}

func (x *I18NString) GetAr_AR() string {
	if x != nil {
		return x.Ar_AR
	}
	return ""
}

func (x *I18NString) GetAr_MA() string {
	if x != nil {
		return x.Ar_MA
	}
	return ""
}

func (x *I18NString) GetAr_SA() string {
	if x != nil {
		return x.Ar_SA
	}
	return ""
}

func (x *I18NString) GetAy_BO() string {
	if x != nil {
		return x.Ay_BO
	}
	return ""
}

func (x *I18NString) GetAz_AZ() string {
	if x != nil {
		return x.Az_AZ
	}
	return ""
}

func (x *I18NString) GetBe_BY() string {
	if x != nil {
		return x.Be_BY
	}
	return ""
}

func (x *I18NString) GetBg_BG() string {
	if x != nil {
		return x.Bg_BG
	}
	return ""
}

func (x *I18NString) GetBn_IN() string {
	if x != nil {
		return x.Bn_IN
	}
	return ""
}

func (x *I18NString) GetBn_BD() string {
	if x != nil {
		return x.Bn_BD
	}
	return ""
}

func (x *I18NString) GetBs_BA() string {
	if x != nil {
		return x.Bs_BA
	}
	return ""
}

func (x *I18NString) GetCa_ES() string {
	if x != nil {
		return x.Ca_ES
	}
	return ""
}

func (x *I18NString) GetCk_US() string {
	if x != nil {
		return x.Ck_US
	}
	return ""
}

func (x *I18NString) GetCs_CZ() string {
	if x != nil {
		return x.Cs_CZ
	}
	return ""
}

func (x *I18NString) GetCy_GB() string {
	if x != nil {
		return x.Cy_GB
	}
	return ""
}

func (x *I18NString) GetDa_DK() string {
	if x != nil {
		return x.Da_DK
	}
	return ""
}

func (x *I18NString) GetDe_AT() string {
	if x != nil {
		return x.De_AT
	}
	return ""
}

func (x *I18NString) GetDe_DE() string {
	if x != nil {
		return x.De_DE
	}
	return ""
}

func (x *I18NString) GetDe_CH() string {
	if x != nil {
		return x.De_CH
	}
	return ""
}

func (x *I18NString) GetEl_GR() string {
	if x != nil {
		return x.El_GR
	}
	return ""
}

func (x *I18NString) GetEn_GB() string {
	if x != nil {
		return x.En_GB
	}
	return ""
}

func (x *I18NString) GetEn_AU() string {
	if x != nil {
		return x.En_AU
	}
	return ""
}

func (x *I18NString) GetEn_CA() string {
	if x != nil {
		return x.En_CA
	}
	return ""
}

func (x *I18NString) GetEn_IE() string {
	if x != nil {
		return x.En_IE
	}
	return ""
}

func (x *I18NString) GetEn_IN() string {
	if x != nil {
		return x.En_IN
	}
	return ""
}

func (x *I18NString) GetEn_PI() string {
	if x != nil {
		return x.En_PI
	}
	return ""
}

func (x *I18NString) GetEn_UD() string {
	if x != nil {
		return x.En_UD
	}
	return ""
}

func (x *I18NString) GetEn_US() string {
	if x != nil {
		return x.En_US
	}
	return ""
}

func (x *I18NString) GetEn_ZA() string {
	if x != nil {
		return x.En_ZA
	}
	return ""
}

func (x *I18NString) GetEo_EO() string {
	if x != nil {
		return x.Eo_EO
	}
	return ""
}

func (x *I18NString) GetEs_AR() string {
	if x != nil {
		return x.Es_AR
	}
	return ""
}

func (x *I18NString) GetEs_419() string {
	if x != nil {
		return x.Es_419
	}
	return ""
}

func (x *I18NString) GetEs_CL() string {
	if x != nil {
		return x.Es_CL
	}
	return ""
}

func (x *I18NString) GetEs_CO() string {
	if x != nil {
		return x.Es_CO
	}
	return ""
}

func (x *I18NString) GetEs_EC() string {
	if x != nil {
		return x.Es_EC
	}
	return ""
}

func (x *I18NString) GetEs_ES() string {
	if x != nil {
		return x.Es_ES
	}
	return ""
}

func (x *I18NString) GetEs_LA() string {
	if x != nil {
		return x.Es_LA
	}
	return ""
}

func (x *I18NString) GetEs_NI() string {
	if x != nil {
		return x.Es_NI
	}
	return ""
}

func (x *I18NString) GetEs_MX() string {
	if x != nil {
		return x.Es_MX
	}
	return ""
}

func (x *I18NString) GetEs_US() string {
	if x != nil {
		return x.Es_US
	}
	return ""
}

func (x *I18NString) GetEs_VE() string {
	if x != nil {
		return x.Es_VE
	}
	return ""
}

func (x *I18NString) GetEt_EE() string {
	if x != nil {
		return x.Et_EE
	}
	return ""
}

func (x *I18NString) GetEu_ES() string {
	if x != nil {
		return x.Eu_ES
	}
	return ""
}

func (x *I18NString) GetFa_IR() string {
	if x != nil {
		return x.Fa_IR
	}
	return ""
}

func (x *I18NString) GetFb_LT() string {
	if x != nil {
		return x.Fb_LT
	}
	return ""
}

func (x *I18NString) GetFi_FI() string {
	if x != nil {
		return x.Fi_FI
	}
	return ""
}

func (x *I18NString) GetFo_FO() string {
	if x != nil {
		return x.Fo_FO
	}
	return ""
}

func (x *I18NString) GetFr_CA() string {
	if x != nil {
		return x.Fr_CA
	}
	return ""
}

func (x *I18NString) GetFr_FR() string {
	if x != nil {
		return x.Fr_FR
	}
	return ""
}

func (x *I18NString) GetFr_BE() string {
	if x != nil {
		return x.Fr_BE
	}
	return ""
}

func (x *I18NString) GetFr_CH() string {
	if x != nil {
		return x.Fr_CH
	}
	return ""
}

func (x *I18NString) GetFy_NL() string {
	if x != nil {
		return x.Fy_NL
	}
	return ""
}

func (x *I18NString) GetGa_IE() string {
	if x != nil {
		return x.Ga_IE
	}
	return ""
}

func (x *I18NString) GetGl_ES() string {
	if x != nil {
		return x.Gl_ES
	}
	return ""
}

func (x *I18NString) GetGn_PY() string {
	if x != nil {
		return x.Gn_PY
	}
	return ""
}

func (x *I18NString) GetGu_IN() string {
	if x != nil {
		return x.Gu_IN
	}
	return ""
}

func (x *I18NString) GetGx_GR() string {
	if x != nil {
		return x.Gx_GR
	}
	return ""
}

func (x *I18NString) GetHe_IL() string {
	if x != nil {
		return x.He_IL
	}
	return ""
}

func (x *I18NString) GetHi_IN() string {
	if x != nil {
		return x.Hi_IN
	}
	return ""
}

func (x *I18NString) GetHr_HR() string {
	if x != nil {
		return x.Hr_HR
	}
	return ""
}

func (x *I18NString) GetHu_HU() string {
	if x != nil {
		return x.Hu_HU
	}
	return ""
}

func (x *I18NString) GetHy_AM() string {
	if x != nil {
		return x.Hy_AM
	}
	return ""
}

func (x *I18NString) GetId_ID() string {
	if x != nil {
		return x.Id_ID
	}
	return ""
}

func (x *I18NString) GetIs_IS() string {
	if x != nil {
		return x.Is_IS
	}
	return ""
}

func (x *I18NString) GetIt_IT() string {
	if x != nil {
		return x.It_IT
	}
	return ""
}

func (x *I18NString) GetJa_JP() string {
	if x != nil {
		return x.Ja_JP
	}
	return ""
}

func (x *I18NString) GetJv_ID() string {
	if x != nil {
		return x.Jv_ID
	}
	return ""
}

func (x *I18NString) GetKa_GE() string {
	if x != nil {
		return x.Ka_GE
	}
	return ""
}

func (x *I18NString) GetKk_KZ() string {
	if x != nil {
		return x.Kk_KZ
	}
	return ""
}

func (x *I18NString) GetKm_KH() string {
	if x != nil {
		return x.Km_KH
	}
	return ""
}

func (x *I18NString) GetKn_IN() string {
	if x != nil {
		return x.Kn_IN
	}
	return ""
}

func (x *I18NString) GetKo_KR() string {
	if x != nil {
		return x.Ko_KR
	}
	return ""
}

func (x *I18NString) GetKu_TR() string {
	if x != nil {
		return x.Ku_TR
	}
	return ""
}

func (x *I18NString) GetLa_VA() string {
	if x != nil {
		return x.La_VA
	}
	return ""
}

func (x *I18NString) GetLi_NL() string {
	if x != nil {
		return x.Li_NL
	}
	return ""
}

func (x *I18NString) GetLt_LT() string {
	if x != nil {
		return x.Lt_LT
	}
	return ""
}

func (x *I18NString) GetLv_LV() string {
	if x != nil {
		return x.Lv_LV
	}
	return ""
}

func (x *I18NString) GetMg_MG() string {
	if x != nil {
		return x.Mg_MG
	}
	return ""
}

func (x *I18NString) GetMk_MK() string {
	if x != nil {
		return x.Mk_MK
	}
	return ""
}

func (x *I18NString) GetMl_IN() string {
	if x != nil {
		return x.Ml_IN
	}
	return ""
}

func (x *I18NString) GetMn_MN() string {
	if x != nil {
		return x.Mn_MN
	}
	return ""
}

func (x *I18NString) GetMr_IN() string {
	if x != nil {
		return x.Mr_IN
	}
	return ""
}

func (x *I18NString) GetMs_MY() string {
	if x != nil {
		return x.Ms_MY
	}
	return ""
}

func (x *I18NString) GetMt_MT() string {
	if x != nil {
		return x.Mt_MT
	}
	return ""
}

func (x *I18NString) GetNb_NO() string {
	if x != nil {
		return x.Nb_NO
	}
	return ""
}

func (x *I18NString) GetNe_NP() string {
	if x != nil {
		return x.Ne_NP
	}
	return ""
}

func (x *I18NString) GetNl_BE() string {
	if x != nil {
		return x.Nl_BE
	}
	return ""
}

func (x *I18NString) GetNl_NL() string {
	if x != nil {
		return x.Nl_NL
	}
	return ""
}

func (x *I18NString) GetNn_NO() string {
	if x != nil {
		return x.Nn_NO
	}
	return ""
}

func (x *I18NString) GetOr_IN() string {
	if x != nil {
		return x.Or_IN
	}
	return ""
}

func (x *I18NString) GetPa_IN() string {
	if x != nil {
		return x.Pa_IN
	}
	return ""
}

func (x *I18NString) GetPl_PL() string {
	if x != nil {
		return x.Pl_PL
	}
	return ""
}

func (x *I18NString) GetPs_AF() string {
	if x != nil {
		return x.Ps_AF
	}
	return ""
}

func (x *I18NString) GetPt_BR() string {
	if x != nil {
		return x.Pt_BR
	}
	return ""
}

func (x *I18NString) GetPt_PT() string {
	if x != nil {
		return x.Pt_PT
	}
	return ""
}

func (x *I18NString) GetQu_PE() string {
	if x != nil {
		return x.Qu_PE
	}
	return ""
}

func (x *I18NString) GetRm_CH() string {
	if x != nil {
		return x.Rm_CH
	}
	return ""
}

func (x *I18NString) GetRo_RO() string {
	if x != nil {
		return x.Ro_RO
	}
	return ""
}

func (x *I18NString) GetRu_RU() string {
	if x != nil {
		return x.Ru_RU
	}
	return ""
}

func (x *I18NString) GetSa_IN() string {
	if x != nil {
		return x.Sa_IN
	}
	return ""
}

func (x *I18NString) GetSe_NO() string {
	if x != nil {
		return x.Se_NO
	}
	return ""
}

func (x *I18NString) GetSi_LK() string {
	if x != nil {
		return x.Si_LK
	}
	return ""
}

func (x *I18NString) GetSk_SK() string {
	if x != nil {
		return x.Sk_SK
	}
	return ""
}

func (x *I18NString) GetSl_SI() string {
	if x != nil {
		return x.Sl_SI
	}
	return ""
}

func (x *I18NString) GetSo_SO() string {
	if x != nil {
		return x.So_SO
	}
	return ""
}

func (x *I18NString) GetSq_AL() string {
	if x != nil {
		return x.Sq_AL
	}
	return ""
}

func (x *I18NString) GetSr_RS() string {
	if x != nil {
		return x.Sr_RS
	}
	return ""
}

func (x *I18NString) GetSv_SE() string {
	if x != nil {
		return x.Sv_SE
	}
	return ""
}

func (x *I18NString) GetSw_KE() string {
	if x != nil {
		return x.Sw_KE
	}
	return ""
}

func (x *I18NString) GetTa_IN() string {
	if x != nil {
		return x.Ta_IN
	}
	return ""
}

func (x *I18NString) GetTe_IN() string {
	if x != nil {
		return x.Te_IN
	}
	return ""
}

func (x *I18NString) GetTg_TJ() string {
	if x != nil {
		return x.Tg_TJ
	}
	return ""
}

func (x *I18NString) GetTh_TH() string {
	if x != nil {
		return x.Th_TH
	}
	return ""
}

func (x *I18NString) GetTl_PH() string {
	if x != nil {
		return x.Tl_PH
	}
	return ""
}

func (x *I18NString) GetTr_TR() string {
	if x != nil {
		return x.Tr_TR
	}
	return ""
}

func (x *I18NString) GetTt_RU() string {
	if x != nil {
		return x.Tt_RU
	}
	return ""
}

func (x *I18NString) GetUk_UA() string {
	if x != nil {
		return x.Uk_UA
	}
	return ""
}

func (x *I18NString) GetUr_PK() string {
	if x != nil {
		return x.Ur_PK
	}
	return ""
}

func (x *I18NString) GetUz_UZ() string {
	if x != nil {
		return x.Uz_UZ
	}
	return ""
}

func (x *I18NString) GetVi_VN() string {
	if x != nil {
		return x.Vi_VN
	}
	return ""
}

func (x *I18NString) GetXh_ZA() string {
	if x != nil {
		return x.Xh_ZA
	}
	return ""
}

func (x *I18NString) GetYi_DE() string {
	if x != nil {
		return x.Yi_DE
	}
	return ""
}

func (x *I18NString) GetZh_Hans() string {
	if x != nil {
		return x.Zh_Hans
	}
	return ""
}

func (x *I18NString) GetZh_Hant() string {
	if x != nil {
		return x.Zh_Hant
	}
	return ""
}

func (x *I18NString) GetZh_CN() string {
	if x != nil {
		return x.Zh_CN
	}
	return ""
}

func (x *I18NString) GetZh_HK() string {
	if x != nil {
		return x.Zh_HK
	}
	return ""
}

func (x *I18NString) GetZh_SG() string {
	if x != nil {
		return x.Zh_SG
	}
	return ""
}

func (x *I18NString) GetZh_TW() string {
	if x != nil {
		return x.Zh_TW
	}
	return ""
}

func (x *I18NString) GetZu_ZA() string {
	if x != nil {
		return x.Zu_ZA
	}
	return ""
}

func (x *I18NString) GetLo_LA() string {
	if x != nil {
		return x.Lo_LA
	}
	return ""
}

func (x *I18NString) GetAa_ER() string {
	if x != nil {
		return x.Aa_ER
	}
	return ""
}

func (x *I18NString) GetEn_SG() string {
	if x != nil {
		return x.En_SG
	}
	return ""
}

func (x *I18NString) GetCustom() string {
	if x != nil {
		return x.Custom
	}
	return ""
}

func (x *I18NString) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type Price struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Currency      string                 `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	FPV           int64                  `protobuf:"varint,3,opt,name=FPV,proto3" json:"FPV,omitempty"` // fixed point arithmetic value, see https://en.wikipedia.org/wiki/Fixed-point_arithmetic
	AFN           float32                `protobuf:"fixed32,10,opt,name=AFN,proto3" json:"AFN,omitempty"`
	EUR           float32                `protobuf:"fixed32,11,opt,name=EUR,proto3" json:"EUR,omitempty"`
	ALL           float32                `protobuf:"fixed32,12,opt,name=ALL,proto3" json:"ALL,omitempty"`
	DZD           float32                `protobuf:"fixed32,13,opt,name=DZD,proto3" json:"DZD,omitempty"`
	USD           float32                `protobuf:"fixed32,14,opt,name=USD,proto3" json:"USD,omitempty"`
	AOA           float32                `protobuf:"fixed32,15,opt,name=AOA,proto3" json:"AOA,omitempty"`
	XCD           float32                `protobuf:"fixed32,16,opt,name=XCD,proto3" json:"XCD,omitempty"`
	ARS           float32                `protobuf:"fixed32,17,opt,name=ARS,proto3" json:"ARS,omitempty"`
	AMD           float32                `protobuf:"fixed32,18,opt,name=AMD,proto3" json:"AMD,omitempty"`
	AWG           float32                `protobuf:"fixed32,19,opt,name=AWG,proto3" json:"AWG,omitempty"`
	AUD           float32                `protobuf:"fixed32,20,opt,name=AUD,proto3" json:"AUD,omitempty"`
	AZN           float32                `protobuf:"fixed32,21,opt,name=AZN,proto3" json:"AZN,omitempty"`
	BSD           float32                `protobuf:"fixed32,22,opt,name=BSD,proto3" json:"BSD,omitempty"`
	BHD           float32                `protobuf:"fixed32,23,opt,name=BHD,proto3" json:"BHD,omitempty"`
	BDT           float32                `protobuf:"fixed32,24,opt,name=BDT,proto3" json:"BDT,omitempty"`
	BBD           float32                `protobuf:"fixed32,25,opt,name=BBD,proto3" json:"BBD,omitempty"`
	BYN           float32                `protobuf:"fixed32,26,opt,name=BYN,proto3" json:"BYN,omitempty"`
	BZD           float32                `protobuf:"fixed32,27,opt,name=BZD,proto3" json:"BZD,omitempty"`
	XOF           float32                `protobuf:"fixed32,28,opt,name=XOF,proto3" json:"XOF,omitempty"`
	BMD           float32                `protobuf:"fixed32,29,opt,name=BMD,proto3" json:"BMD,omitempty"`
	INR           float32                `protobuf:"fixed32,30,opt,name=INR,proto3" json:"INR,omitempty"`
	BTN           float32                `protobuf:"fixed32,31,opt,name=BTN,proto3" json:"BTN,omitempty"`
	BOB           float32                `protobuf:"fixed32,32,opt,name=BOB,proto3" json:"BOB,omitempty"`
	BOV           float32                `protobuf:"fixed32,33,opt,name=BOV,proto3" json:"BOV,omitempty"`
	BAM           float32                `protobuf:"fixed32,34,opt,name=BAM,proto3" json:"BAM,omitempty"`
	BWP           float32                `protobuf:"fixed32,35,opt,name=BWP,proto3" json:"BWP,omitempty"`
	NOK           float32                `protobuf:"fixed32,36,opt,name=NOK,proto3" json:"NOK,omitempty"`
	BRL           float32                `protobuf:"fixed32,37,opt,name=BRL,proto3" json:"BRL,omitempty"`
	BND           float32                `protobuf:"fixed32,38,opt,name=BND,proto3" json:"BND,omitempty"`
	BGN           float32                `protobuf:"fixed32,39,opt,name=BGN,proto3" json:"BGN,omitempty"`
	BIF           float32                `protobuf:"fixed32,40,opt,name=BIF,proto3" json:"BIF,omitempty"`
	CVE           float32                `protobuf:"fixed32,41,opt,name=CVE,proto3" json:"CVE,omitempty"`
	KHR           float32                `protobuf:"fixed32,42,opt,name=KHR,proto3" json:"KHR,omitempty"`
	XAF           float32                `protobuf:"fixed32,43,opt,name=XAF,proto3" json:"XAF,omitempty"`
	CAD           float32                `protobuf:"fixed32,44,opt,name=CAD,proto3" json:"CAD,omitempty"`
	KYD           float32                `protobuf:"fixed32,45,opt,name=KYD,proto3" json:"KYD,omitempty"`
	CLP           float32                `protobuf:"fixed32,46,opt,name=CLP,proto3" json:"CLP,omitempty"`
	CLF           float32                `protobuf:"fixed32,47,opt,name=CLF,proto3" json:"CLF,omitempty"`
	CNY           float32                `protobuf:"fixed32,48,opt,name=CNY,proto3" json:"CNY,omitempty"`
	COP           float32                `protobuf:"fixed32,49,opt,name=COP,proto3" json:"COP,omitempty"`
	COU           float32                `protobuf:"fixed32,50,opt,name=COU,proto3" json:"COU,omitempty"`
	KMF           float32                `protobuf:"fixed32,51,opt,name=KMF,proto3" json:"KMF,omitempty"`
	CDF           float32                `protobuf:"fixed32,52,opt,name=CDF,proto3" json:"CDF,omitempty"`
	NZD           float32                `protobuf:"fixed32,53,opt,name=NZD,proto3" json:"NZD,omitempty"`
	CRC           float32                `protobuf:"fixed32,54,opt,name=CRC,proto3" json:"CRC,omitempty"`
	HRK           float32                `protobuf:"fixed32,55,opt,name=HRK,proto3" json:"HRK,omitempty"`
	CUP           float32                `protobuf:"fixed32,56,opt,name=CUP,proto3" json:"CUP,omitempty"`
	CUC           float32                `protobuf:"fixed32,57,opt,name=CUC,proto3" json:"CUC,omitempty"`
	ANG           float32                `protobuf:"fixed32,58,opt,name=ANG,proto3" json:"ANG,omitempty"`
	CZK           float32                `protobuf:"fixed32,59,opt,name=CZK,proto3" json:"CZK,omitempty"`
	DKK           float32                `protobuf:"fixed32,60,opt,name=DKK,proto3" json:"DKK,omitempty"`
	DJF           float32                `protobuf:"fixed32,61,opt,name=DJF,proto3" json:"DJF,omitempty"`
	DOP           float32                `protobuf:"fixed32,62,opt,name=DOP,proto3" json:"DOP,omitempty"`
	EGP           float32                `protobuf:"fixed32,63,opt,name=EGP,proto3" json:"EGP,omitempty"`
	SVC           float32                `protobuf:"fixed32,64,opt,name=SVC,proto3" json:"SVC,omitempty"`
	ERN           float32                `protobuf:"fixed32,65,opt,name=ERN,proto3" json:"ERN,omitempty"`
	SZL           float32                `protobuf:"fixed32,66,opt,name=SZL,proto3" json:"SZL,omitempty"`
	ETB           float32                `protobuf:"fixed32,67,opt,name=ETB,proto3" json:"ETB,omitempty"`
	FKP           float32                `protobuf:"fixed32,68,opt,name=FKP,proto3" json:"FKP,omitempty"`
	FJD           float32                `protobuf:"fixed32,69,opt,name=FJD,proto3" json:"FJD,omitempty"`
	XPF           float32                `protobuf:"fixed32,70,opt,name=XPF,proto3" json:"XPF,omitempty"`
	GMD           float32                `protobuf:"fixed32,71,opt,name=GMD,proto3" json:"GMD,omitempty"`
	GEL           float32                `protobuf:"fixed32,72,opt,name=GEL,proto3" json:"GEL,omitempty"`
	GHS           float32                `protobuf:"fixed32,73,opt,name=GHS,proto3" json:"GHS,omitempty"`
	GIP           float32                `protobuf:"fixed32,74,opt,name=GIP,proto3" json:"GIP,omitempty"`
	GTQ           float32                `protobuf:"fixed32,75,opt,name=GTQ,proto3" json:"GTQ,omitempty"`
	GBP           float32                `protobuf:"fixed32,76,opt,name=GBP,proto3" json:"GBP,omitempty"`
	GNF           float32                `protobuf:"fixed32,77,opt,name=GNF,proto3" json:"GNF,omitempty"`
	GYD           float32                `protobuf:"fixed32,78,opt,name=GYD,proto3" json:"GYD,omitempty"`
	HTG           float32                `protobuf:"fixed32,79,opt,name=HTG,proto3" json:"HTG,omitempty"`
	HNL           float32                `protobuf:"fixed32,80,opt,name=HNL,proto3" json:"HNL,omitempty"`
	HKD           float32                `protobuf:"fixed32,81,opt,name=HKD,proto3" json:"HKD,omitempty"`
	HUF           float32                `protobuf:"fixed32,82,opt,name=HUF,proto3" json:"HUF,omitempty"`
	ISK           float32                `protobuf:"fixed32,83,opt,name=ISK,proto3" json:"ISK,omitempty"`
	IDR           float32                `protobuf:"fixed32,84,opt,name=IDR,proto3" json:"IDR,omitempty"`
	XDR           float32                `protobuf:"fixed32,85,opt,name=XDR,proto3" json:"XDR,omitempty"`
	IRR           float32                `protobuf:"fixed32,86,opt,name=IRR,proto3" json:"IRR,omitempty"`
	IQD           float32                `protobuf:"fixed32,87,opt,name=IQD,proto3" json:"IQD,omitempty"`
	ILS           float32                `protobuf:"fixed32,88,opt,name=ILS,proto3" json:"ILS,omitempty"`
	JMD           float32                `protobuf:"fixed32,89,opt,name=JMD,proto3" json:"JMD,omitempty"`
	JPY           float32                `protobuf:"fixed32,90,opt,name=JPY,proto3" json:"JPY,omitempty"`
	JOD           float32                `protobuf:"fixed32,91,opt,name=JOD,proto3" json:"JOD,omitempty"`
	KZT           float32                `protobuf:"fixed32,92,opt,name=KZT,proto3" json:"KZT,omitempty"`
	KES           float32                `protobuf:"fixed32,93,opt,name=KES,proto3" json:"KES,omitempty"`
	KPW           float32                `protobuf:"fixed32,94,opt,name=KPW,proto3" json:"KPW,omitempty"`
	KRW           float32                `protobuf:"fixed32,95,opt,name=KRW,proto3" json:"KRW,omitempty"`
	KWD           float32                `protobuf:"fixed32,96,opt,name=KWD,proto3" json:"KWD,omitempty"`
	KGS           float32                `protobuf:"fixed32,97,opt,name=KGS,proto3" json:"KGS,omitempty"`
	LAK           float32                `protobuf:"fixed32,98,opt,name=LAK,proto3" json:"LAK,omitempty"`
	LBP           float32                `protobuf:"fixed32,99,opt,name=LBP,proto3" json:"LBP,omitempty"`
	LSL           float32                `protobuf:"fixed32,100,opt,name=LSL,proto3" json:"LSL,omitempty"`
	ZAR           float32                `protobuf:"fixed32,101,opt,name=ZAR,proto3" json:"ZAR,omitempty"`
	LRD           float32                `protobuf:"fixed32,102,opt,name=LRD,proto3" json:"LRD,omitempty"`
	LYD           float32                `protobuf:"fixed32,103,opt,name=LYD,proto3" json:"LYD,omitempty"`
	CHF           float32                `protobuf:"fixed32,104,opt,name=CHF,proto3" json:"CHF,omitempty"`
	MOP           float32                `protobuf:"fixed32,105,opt,name=MOP,proto3" json:"MOP,omitempty"`
	MKD           float32                `protobuf:"fixed32,106,opt,name=MKD,proto3" json:"MKD,omitempty"`
	MGA           float32                `protobuf:"fixed32,107,opt,name=MGA,proto3" json:"MGA,omitempty"`
	MWK           float32                `protobuf:"fixed32,108,opt,name=MWK,proto3" json:"MWK,omitempty"`
	MYR           float32                `protobuf:"fixed32,109,opt,name=MYR,proto3" json:"MYR,omitempty"`
	MVR           float32                `protobuf:"fixed32,110,opt,name=MVR,proto3" json:"MVR,omitempty"`
	MRU           float32                `protobuf:"fixed32,111,opt,name=MRU,proto3" json:"MRU,omitempty"`
	MUR           float32                `protobuf:"fixed32,112,opt,name=MUR,proto3" json:"MUR,omitempty"`
	XUA           float32                `protobuf:"fixed32,113,opt,name=XUA,proto3" json:"XUA,omitempty"`
	MXN           float32                `protobuf:"fixed32,114,opt,name=MXN,proto3" json:"MXN,omitempty"`
	MXV           float32                `protobuf:"fixed32,115,opt,name=MXV,proto3" json:"MXV,omitempty"`
	MDL           float32                `protobuf:"fixed32,116,opt,name=MDL,proto3" json:"MDL,omitempty"`
	MNT           float32                `protobuf:"fixed32,117,opt,name=MNT,proto3" json:"MNT,omitempty"`
	MAD           float32                `protobuf:"fixed32,118,opt,name=MAD,proto3" json:"MAD,omitempty"`
	MZN           float32                `protobuf:"fixed32,119,opt,name=MZN,proto3" json:"MZN,omitempty"`
	MMK           float32                `protobuf:"fixed32,120,opt,name=MMK,proto3" json:"MMK,omitempty"`
	NAD           float32                `protobuf:"fixed32,121,opt,name=NAD,proto3" json:"NAD,omitempty"`
	NPR           float32                `protobuf:"fixed32,122,opt,name=NPR,proto3" json:"NPR,omitempty"`
	NIO           float32                `protobuf:"fixed32,123,opt,name=NIO,proto3" json:"NIO,omitempty"`
	NGN           float32                `protobuf:"fixed32,124,opt,name=NGN,proto3" json:"NGN,omitempty"`
	OMR           float32                `protobuf:"fixed32,125,opt,name=OMR,proto3" json:"OMR,omitempty"`
	PKR           float32                `protobuf:"fixed32,126,opt,name=PKR,proto3" json:"PKR,omitempty"`
	PAB           float32                `protobuf:"fixed32,127,opt,name=PAB,proto3" json:"PAB,omitempty"`
	PGK           float32                `protobuf:"fixed32,128,opt,name=PGK,proto3" json:"PGK,omitempty"`
	PYG           float32                `protobuf:"fixed32,129,opt,name=PYG,proto3" json:"PYG,omitempty"`
	PEN           float32                `protobuf:"fixed32,130,opt,name=PEN,proto3" json:"PEN,omitempty"`
	PHP           float32                `protobuf:"fixed32,131,opt,name=PHP,proto3" json:"PHP,omitempty"`
	PLN           float32                `protobuf:"fixed32,132,opt,name=PLN,proto3" json:"PLN,omitempty"`
	QAR           float32                `protobuf:"fixed32,133,opt,name=QAR,proto3" json:"QAR,omitempty"`
	RON           float32                `protobuf:"fixed32,134,opt,name=RON,proto3" json:"RON,omitempty"`
	RUB           float32                `protobuf:"fixed32,135,opt,name=RUB,proto3" json:"RUB,omitempty"`
	RWF           float32                `protobuf:"fixed32,136,opt,name=RWF,proto3" json:"RWF,omitempty"`
	SHP           float32                `protobuf:"fixed32,137,opt,name=SHP,proto3" json:"SHP,omitempty"`
	WST           float32                `protobuf:"fixed32,138,opt,name=WST,proto3" json:"WST,omitempty"`
	STN           float32                `protobuf:"fixed32,139,opt,name=STN,proto3" json:"STN,omitempty"`
	SAR           float32                `protobuf:"fixed32,140,opt,name=SAR,proto3" json:"SAR,omitempty"`
	RSD           float32                `protobuf:"fixed32,141,opt,name=RSD,proto3" json:"RSD,omitempty"`
	SCR           float32                `protobuf:"fixed32,142,opt,name=SCR,proto3" json:"SCR,omitempty"`
	SLL           float32                `protobuf:"fixed32,143,opt,name=SLL,proto3" json:"SLL,omitempty"`
	SGD           float32                `protobuf:"fixed32,144,opt,name=SGD,proto3" json:"SGD,omitempty"`
	XSU           float32                `protobuf:"fixed32,145,opt,name=XSU,proto3" json:"XSU,omitempty"`
	SBD           float32                `protobuf:"fixed32,146,opt,name=SBD,proto3" json:"SBD,omitempty"`
	SOS           float32                `protobuf:"fixed32,147,opt,name=SOS,proto3" json:"SOS,omitempty"`
	SSP           float32                `protobuf:"fixed32,148,opt,name=SSP,proto3" json:"SSP,omitempty"`
	LKR           float32                `protobuf:"fixed32,149,opt,name=LKR,proto3" json:"LKR,omitempty"`
	SDG           float32                `protobuf:"fixed32,150,opt,name=SDG,proto3" json:"SDG,omitempty"`
	SRD           float32                `protobuf:"fixed32,151,opt,name=SRD,proto3" json:"SRD,omitempty"`
	SEK           float32                `protobuf:"fixed32,152,opt,name=SEK,proto3" json:"SEK,omitempty"`
	CHE           float32                `protobuf:"fixed32,153,opt,name=CHE,proto3" json:"CHE,omitempty"`
	CHW           float32                `protobuf:"fixed32,154,opt,name=CHW,proto3" json:"CHW,omitempty"`
	SYP           float32                `protobuf:"fixed32,155,opt,name=SYP,proto3" json:"SYP,omitempty"`
	TWD           float32                `protobuf:"fixed32,156,opt,name=TWD,proto3" json:"TWD,omitempty"`
	TJS           float32                `protobuf:"fixed32,157,opt,name=TJS,proto3" json:"TJS,omitempty"`
	TZS           float32                `protobuf:"fixed32,158,opt,name=TZS,proto3" json:"TZS,omitempty"`
	THB           float32                `protobuf:"fixed32,159,opt,name=THB,proto3" json:"THB,omitempty"`
	TOP           float32                `protobuf:"fixed32,160,opt,name=TOP,proto3" json:"TOP,omitempty"`
	TTD           float32                `protobuf:"fixed32,161,opt,name=TTD,proto3" json:"TTD,omitempty"`
	TND           float32                `protobuf:"fixed32,162,opt,name=TND,proto3" json:"TND,omitempty"`
	TRY           float32                `protobuf:"fixed32,163,opt,name=TRY,proto3" json:"TRY,omitempty"`
	TMT           float32                `protobuf:"fixed32,164,opt,name=TMT,proto3" json:"TMT,omitempty"`
	UGX           float32                `protobuf:"fixed32,165,opt,name=UGX,proto3" json:"UGX,omitempty"`
	UAH           float32                `protobuf:"fixed32,166,opt,name=UAH,proto3" json:"UAH,omitempty"`
	AED           float32                `protobuf:"fixed32,167,opt,name=AED,proto3" json:"AED,omitempty"`
	USN           float32                `protobuf:"fixed32,168,opt,name=USN,proto3" json:"USN,omitempty"`
	UYU           float32                `protobuf:"fixed32,169,opt,name=UYU,proto3" json:"UYU,omitempty"`
	UYI           float32                `protobuf:"fixed32,170,opt,name=UYI,proto3" json:"UYI,omitempty"`
	UYW           float32                `protobuf:"fixed32,171,opt,name=UYW,proto3" json:"UYW,omitempty"`
	UZS           float32                `protobuf:"fixed32,172,opt,name=UZS,proto3" json:"UZS,omitempty"`
	VUV           float32                `protobuf:"fixed32,173,opt,name=VUV,proto3" json:"VUV,omitempty"`
	VES           float32                `protobuf:"fixed32,174,opt,name=VES,proto3" json:"VES,omitempty"`
	VED           float32                `protobuf:"fixed32,175,opt,name=VED,proto3" json:"VED,omitempty"`
	VND           float32                `protobuf:"fixed32,176,opt,name=VND,proto3" json:"VND,omitempty"`
	YER           float32                `protobuf:"fixed32,177,opt,name=YER,proto3" json:"YER,omitempty"`
	ZMW           float32                `protobuf:"fixed32,178,opt,name=ZMW,proto3" json:"ZMW,omitempty"`
	ZWL           float32                `protobuf:"fixed32,179,opt,name=ZWL,proto3" json:"ZWL,omitempty"`
	XBA           float32                `protobuf:"fixed32,180,opt,name=XBA,proto3" json:"XBA,omitempty"`
	XBB           float32                `protobuf:"fixed32,181,opt,name=XBB,proto3" json:"XBB,omitempty"`
	XBC           float32                `protobuf:"fixed32,182,opt,name=XBC,proto3" json:"XBC,omitempty"`
	XBD           float32                `protobuf:"fixed32,183,opt,name=XBD,proto3" json:"XBD,omitempty"`
	XTS           float32                `protobuf:"fixed32,184,opt,name=XTS,proto3" json:"XTS,omitempty"`
	XXX           float32                `protobuf:"fixed32,185,opt,name=XXX,proto3" json:"XXX,omitempty"`
	XAU           float32                `protobuf:"fixed32,186,opt,name=XAU,proto3" json:"XAU,omitempty"`
	XPD           float32                `protobuf:"fixed32,187,opt,name=XPD,proto3" json:"XPD,omitempty"`
	XPT           float32                `protobuf:"fixed32,188,opt,name=XPT,proto3" json:"XPT,omitempty"`
	XAG           float32                `protobuf:"fixed32,189,opt,name=XAG,proto3" json:"XAG,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Price) Reset() {
	*x = Price{}
	mi := &file_locale_generated_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Price) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Price) ProtoMessage() {}

func (x *Price) ProtoReflect() protoreflect.Message {
	mi := &file_locale_generated_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Price.ProtoReflect.Descriptor instead.
func (*Price) Descriptor() ([]byte, []int) {
	return file_locale_generated_proto_rawDescGZIP(), []int{1}
}

func (x *Price) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Price) GetFPV() int64 {
	if x != nil {
		return x.FPV
	}
	return 0
}

func (x *Price) GetAFN() float32 {
	if x != nil {
		return x.AFN
	}
	return 0
}

func (x *Price) GetEUR() float32 {
	if x != nil {
		return x.EUR
	}
	return 0
}

func (x *Price) GetALL() float32 {
	if x != nil {
		return x.ALL
	}
	return 0
}

func (x *Price) GetDZD() float32 {
	if x != nil {
		return x.DZD
	}
	return 0
}

func (x *Price) GetUSD() float32 {
	if x != nil {
		return x.USD
	}
	return 0
}

func (x *Price) GetAOA() float32 {
	if x != nil {
		return x.AOA
	}
	return 0
}

func (x *Price) GetXCD() float32 {
	if x != nil {
		return x.XCD
	}
	return 0
}

func (x *Price) GetARS() float32 {
	if x != nil {
		return x.ARS
	}
	return 0
}

func (x *Price) GetAMD() float32 {
	if x != nil {
		return x.AMD
	}
	return 0
}

func (x *Price) GetAWG() float32 {
	if x != nil {
		return x.AWG
	}
	return 0
}

func (x *Price) GetAUD() float32 {
	if x != nil {
		return x.AUD
	}
	return 0
}

func (x *Price) GetAZN() float32 {
	if x != nil {
		return x.AZN
	}
	return 0
}

func (x *Price) GetBSD() float32 {
	if x != nil {
		return x.BSD
	}
	return 0
}

func (x *Price) GetBHD() float32 {
	if x != nil {
		return x.BHD
	}
	return 0
}

func (x *Price) GetBDT() float32 {
	if x != nil {
		return x.BDT
	}
	return 0
}

func (x *Price) GetBBD() float32 {
	if x != nil {
		return x.BBD
	}
	return 0
}

func (x *Price) GetBYN() float32 {
	if x != nil {
		return x.BYN
	}
	return 0
}

func (x *Price) GetBZD() float32 {
	if x != nil {
		return x.BZD
	}
	return 0
}

func (x *Price) GetXOF() float32 {
	if x != nil {
		return x.XOF
	}
	return 0
}

func (x *Price) GetBMD() float32 {
	if x != nil {
		return x.BMD
	}
	return 0
}

func (x *Price) GetINR() float32 {
	if x != nil {
		return x.INR
	}
	return 0
}

func (x *Price) GetBTN() float32 {
	if x != nil {
		return x.BTN
	}
	return 0
}

func (x *Price) GetBOB() float32 {
	if x != nil {
		return x.BOB
	}
	return 0
}

func (x *Price) GetBOV() float32 {
	if x != nil {
		return x.BOV
	}
	return 0
}

func (x *Price) GetBAM() float32 {
	if x != nil {
		return x.BAM
	}
	return 0
}

func (x *Price) GetBWP() float32 {
	if x != nil {
		return x.BWP
	}
	return 0
}

func (x *Price) GetNOK() float32 {
	if x != nil {
		return x.NOK
	}
	return 0
}

func (x *Price) GetBRL() float32 {
	if x != nil {
		return x.BRL
	}
	return 0
}

func (x *Price) GetBND() float32 {
	if x != nil {
		return x.BND
	}
	return 0
}

func (x *Price) GetBGN() float32 {
	if x != nil {
		return x.BGN
	}
	return 0
}

func (x *Price) GetBIF() float32 {
	if x != nil {
		return x.BIF
	}
	return 0
}

func (x *Price) GetCVE() float32 {
	if x != nil {
		return x.CVE
	}
	return 0
}

func (x *Price) GetKHR() float32 {
	if x != nil {
		return x.KHR
	}
	return 0
}

func (x *Price) GetXAF() float32 {
	if x != nil {
		return x.XAF
	}
	return 0
}

func (x *Price) GetCAD() float32 {
	if x != nil {
		return x.CAD
	}
	return 0
}

func (x *Price) GetKYD() float32 {
	if x != nil {
		return x.KYD
	}
	return 0
}

func (x *Price) GetCLP() float32 {
	if x != nil {
		return x.CLP
	}
	return 0
}

func (x *Price) GetCLF() float32 {
	if x != nil {
		return x.CLF
	}
	return 0
}

func (x *Price) GetCNY() float32 {
	if x != nil {
		return x.CNY
	}
	return 0
}

func (x *Price) GetCOP() float32 {
	if x != nil {
		return x.COP
	}
	return 0
}

func (x *Price) GetCOU() float32 {
	if x != nil {
		return x.COU
	}
	return 0
}

func (x *Price) GetKMF() float32 {
	if x != nil {
		return x.KMF
	}
	return 0
}

func (x *Price) GetCDF() float32 {
	if x != nil {
		return x.CDF
	}
	return 0
}

func (x *Price) GetNZD() float32 {
	if x != nil {
		return x.NZD
	}
	return 0
}

func (x *Price) GetCRC() float32 {
	if x != nil {
		return x.CRC
	}
	return 0
}

func (x *Price) GetHRK() float32 {
	if x != nil {
		return x.HRK
	}
	return 0
}

func (x *Price) GetCUP() float32 {
	if x != nil {
		return x.CUP
	}
	return 0
}

func (x *Price) GetCUC() float32 {
	if x != nil {
		return x.CUC
	}
	return 0
}

func (x *Price) GetANG() float32 {
	if x != nil {
		return x.ANG
	}
	return 0
}

func (x *Price) GetCZK() float32 {
	if x != nil {
		return x.CZK
	}
	return 0
}

func (x *Price) GetDKK() float32 {
	if x != nil {
		return x.DKK
	}
	return 0
}

func (x *Price) GetDJF() float32 {
	if x != nil {
		return x.DJF
	}
	return 0
}

func (x *Price) GetDOP() float32 {
	if x != nil {
		return x.DOP
	}
	return 0
}

func (x *Price) GetEGP() float32 {
	if x != nil {
		return x.EGP
	}
	return 0
}

func (x *Price) GetSVC() float32 {
	if x != nil {
		return x.SVC
	}
	return 0
}

func (x *Price) GetERN() float32 {
	if x != nil {
		return x.ERN
	}
	return 0
}

func (x *Price) GetSZL() float32 {
	if x != nil {
		return x.SZL
	}
	return 0
}

func (x *Price) GetETB() float32 {
	if x != nil {
		return x.ETB
	}
	return 0
}

func (x *Price) GetFKP() float32 {
	if x != nil {
		return x.FKP
	}
	return 0
}

func (x *Price) GetFJD() float32 {
	if x != nil {
		return x.FJD
	}
	return 0
}

func (x *Price) GetXPF() float32 {
	if x != nil {
		return x.XPF
	}
	return 0
}

func (x *Price) GetGMD() float32 {
	if x != nil {
		return x.GMD
	}
	return 0
}

func (x *Price) GetGEL() float32 {
	if x != nil {
		return x.GEL
	}
	return 0
}

func (x *Price) GetGHS() float32 {
	if x != nil {
		return x.GHS
	}
	return 0
}

func (x *Price) GetGIP() float32 {
	if x != nil {
		return x.GIP
	}
	return 0
}

func (x *Price) GetGTQ() float32 {
	if x != nil {
		return x.GTQ
	}
	return 0
}

func (x *Price) GetGBP() float32 {
	if x != nil {
		return x.GBP
	}
	return 0
}

func (x *Price) GetGNF() float32 {
	if x != nil {
		return x.GNF
	}
	return 0
}

func (x *Price) GetGYD() float32 {
	if x != nil {
		return x.GYD
	}
	return 0
}

func (x *Price) GetHTG() float32 {
	if x != nil {
		return x.HTG
	}
	return 0
}

func (x *Price) GetHNL() float32 {
	if x != nil {
		return x.HNL
	}
	return 0
}

func (x *Price) GetHKD() float32 {
	if x != nil {
		return x.HKD
	}
	return 0
}

func (x *Price) GetHUF() float32 {
	if x != nil {
		return x.HUF
	}
	return 0
}

func (x *Price) GetISK() float32 {
	if x != nil {
		return x.ISK
	}
	return 0
}

func (x *Price) GetIDR() float32 {
	if x != nil {
		return x.IDR
	}
	return 0
}

func (x *Price) GetXDR() float32 {
	if x != nil {
		return x.XDR
	}
	return 0
}

func (x *Price) GetIRR() float32 {
	if x != nil {
		return x.IRR
	}
	return 0
}

func (x *Price) GetIQD() float32 {
	if x != nil {
		return x.IQD
	}
	return 0
}

func (x *Price) GetILS() float32 {
	if x != nil {
		return x.ILS
	}
	return 0
}

func (x *Price) GetJMD() float32 {
	if x != nil {
		return x.JMD
	}
	return 0
}

func (x *Price) GetJPY() float32 {
	if x != nil {
		return x.JPY
	}
	return 0
}

func (x *Price) GetJOD() float32 {
	if x != nil {
		return x.JOD
	}
	return 0
}

func (x *Price) GetKZT() float32 {
	if x != nil {
		return x.KZT
	}
	return 0
}

func (x *Price) GetKES() float32 {
	if x != nil {
		return x.KES
	}
	return 0
}

func (x *Price) GetKPW() float32 {
	if x != nil {
		return x.KPW
	}
	return 0
}

func (x *Price) GetKRW() float32 {
	if x != nil {
		return x.KRW
	}
	return 0
}

func (x *Price) GetKWD() float32 {
	if x != nil {
		return x.KWD
	}
	return 0
}

func (x *Price) GetKGS() float32 {
	if x != nil {
		return x.KGS
	}
	return 0
}

func (x *Price) GetLAK() float32 {
	if x != nil {
		return x.LAK
	}
	return 0
}

func (x *Price) GetLBP() float32 {
	if x != nil {
		return x.LBP
	}
	return 0
}

func (x *Price) GetLSL() float32 {
	if x != nil {
		return x.LSL
	}
	return 0
}

func (x *Price) GetZAR() float32 {
	if x != nil {
		return x.ZAR
	}
	return 0
}

func (x *Price) GetLRD() float32 {
	if x != nil {
		return x.LRD
	}
	return 0
}

func (x *Price) GetLYD() float32 {
	if x != nil {
		return x.LYD
	}
	return 0
}

func (x *Price) GetCHF() float32 {
	if x != nil {
		return x.CHF
	}
	return 0
}

func (x *Price) GetMOP() float32 {
	if x != nil {
		return x.MOP
	}
	return 0
}

func (x *Price) GetMKD() float32 {
	if x != nil {
		return x.MKD
	}
	return 0
}

func (x *Price) GetMGA() float32 {
	if x != nil {
		return x.MGA
	}
	return 0
}

func (x *Price) GetMWK() float32 {
	if x != nil {
		return x.MWK
	}
	return 0
}

func (x *Price) GetMYR() float32 {
	if x != nil {
		return x.MYR
	}
	return 0
}

func (x *Price) GetMVR() float32 {
	if x != nil {
		return x.MVR
	}
	return 0
}

func (x *Price) GetMRU() float32 {
	if x != nil {
		return x.MRU
	}
	return 0
}

func (x *Price) GetMUR() float32 {
	if x != nil {
		return x.MUR
	}
	return 0
}

func (x *Price) GetXUA() float32 {
	if x != nil {
		return x.XUA
	}
	return 0
}

func (x *Price) GetMXN() float32 {
	if x != nil {
		return x.MXN
	}
	return 0
}

func (x *Price) GetMXV() float32 {
	if x != nil {
		return x.MXV
	}
	return 0
}

func (x *Price) GetMDL() float32 {
	if x != nil {
		return x.MDL
	}
	return 0
}

func (x *Price) GetMNT() float32 {
	if x != nil {
		return x.MNT
	}
	return 0
}

func (x *Price) GetMAD() float32 {
	if x != nil {
		return x.MAD
	}
	return 0
}

func (x *Price) GetMZN() float32 {
	if x != nil {
		return x.MZN
	}
	return 0
}

func (x *Price) GetMMK() float32 {
	if x != nil {
		return x.MMK
	}
	return 0
}

func (x *Price) GetNAD() float32 {
	if x != nil {
		return x.NAD
	}
	return 0
}

func (x *Price) GetNPR() float32 {
	if x != nil {
		return x.NPR
	}
	return 0
}

func (x *Price) GetNIO() float32 {
	if x != nil {
		return x.NIO
	}
	return 0
}

func (x *Price) GetNGN() float32 {
	if x != nil {
		return x.NGN
	}
	return 0
}

func (x *Price) GetOMR() float32 {
	if x != nil {
		return x.OMR
	}
	return 0
}

func (x *Price) GetPKR() float32 {
	if x != nil {
		return x.PKR
	}
	return 0
}

func (x *Price) GetPAB() float32 {
	if x != nil {
		return x.PAB
	}
	return 0
}

func (x *Price) GetPGK() float32 {
	if x != nil {
		return x.PGK
	}
	return 0
}

func (x *Price) GetPYG() float32 {
	if x != nil {
		return x.PYG
	}
	return 0
}

func (x *Price) GetPEN() float32 {
	if x != nil {
		return x.PEN
	}
	return 0
}

func (x *Price) GetPHP() float32 {
	if x != nil {
		return x.PHP
	}
	return 0
}

func (x *Price) GetPLN() float32 {
	if x != nil {
		return x.PLN
	}
	return 0
}

func (x *Price) GetQAR() float32 {
	if x != nil {
		return x.QAR
	}
	return 0
}

func (x *Price) GetRON() float32 {
	if x != nil {
		return x.RON
	}
	return 0
}

func (x *Price) GetRUB() float32 {
	if x != nil {
		return x.RUB
	}
	return 0
}

func (x *Price) GetRWF() float32 {
	if x != nil {
		return x.RWF
	}
	return 0
}

func (x *Price) GetSHP() float32 {
	if x != nil {
		return x.SHP
	}
	return 0
}

func (x *Price) GetWST() float32 {
	if x != nil {
		return x.WST
	}
	return 0
}

func (x *Price) GetSTN() float32 {
	if x != nil {
		return x.STN
	}
	return 0
}

func (x *Price) GetSAR() float32 {
	if x != nil {
		return x.SAR
	}
	return 0
}

func (x *Price) GetRSD() float32 {
	if x != nil {
		return x.RSD
	}
	return 0
}

func (x *Price) GetSCR() float32 {
	if x != nil {
		return x.SCR
	}
	return 0
}

func (x *Price) GetSLL() float32 {
	if x != nil {
		return x.SLL
	}
	return 0
}

func (x *Price) GetSGD() float32 {
	if x != nil {
		return x.SGD
	}
	return 0
}

func (x *Price) GetXSU() float32 {
	if x != nil {
		return x.XSU
	}
	return 0
}

func (x *Price) GetSBD() float32 {
	if x != nil {
		return x.SBD
	}
	return 0
}

func (x *Price) GetSOS() float32 {
	if x != nil {
		return x.SOS
	}
	return 0
}

func (x *Price) GetSSP() float32 {
	if x != nil {
		return x.SSP
	}
	return 0
}

func (x *Price) GetLKR() float32 {
	if x != nil {
		return x.LKR
	}
	return 0
}

func (x *Price) GetSDG() float32 {
	if x != nil {
		return x.SDG
	}
	return 0
}

func (x *Price) GetSRD() float32 {
	if x != nil {
		return x.SRD
	}
	return 0
}

func (x *Price) GetSEK() float32 {
	if x != nil {
		return x.SEK
	}
	return 0
}

func (x *Price) GetCHE() float32 {
	if x != nil {
		return x.CHE
	}
	return 0
}

func (x *Price) GetCHW() float32 {
	if x != nil {
		return x.CHW
	}
	return 0
}

func (x *Price) GetSYP() float32 {
	if x != nil {
		return x.SYP
	}
	return 0
}

func (x *Price) GetTWD() float32 {
	if x != nil {
		return x.TWD
	}
	return 0
}

func (x *Price) GetTJS() float32 {
	if x != nil {
		return x.TJS
	}
	return 0
}

func (x *Price) GetTZS() float32 {
	if x != nil {
		return x.TZS
	}
	return 0
}

func (x *Price) GetTHB() float32 {
	if x != nil {
		return x.THB
	}
	return 0
}

func (x *Price) GetTOP() float32 {
	if x != nil {
		return x.TOP
	}
	return 0
}

func (x *Price) GetTTD() float32 {
	if x != nil {
		return x.TTD
	}
	return 0
}

func (x *Price) GetTND() float32 {
	if x != nil {
		return x.TND
	}
	return 0
}

func (x *Price) GetTRY() float32 {
	if x != nil {
		return x.TRY
	}
	return 0
}

func (x *Price) GetTMT() float32 {
	if x != nil {
		return x.TMT
	}
	return 0
}

func (x *Price) GetUGX() float32 {
	if x != nil {
		return x.UGX
	}
	return 0
}

func (x *Price) GetUAH() float32 {
	if x != nil {
		return x.UAH
	}
	return 0
}

func (x *Price) GetAED() float32 {
	if x != nil {
		return x.AED
	}
	return 0
}

func (x *Price) GetUSN() float32 {
	if x != nil {
		return x.USN
	}
	return 0
}

func (x *Price) GetUYU() float32 {
	if x != nil {
		return x.UYU
	}
	return 0
}

func (x *Price) GetUYI() float32 {
	if x != nil {
		return x.UYI
	}
	return 0
}

func (x *Price) GetUYW() float32 {
	if x != nil {
		return x.UYW
	}
	return 0
}

func (x *Price) GetUZS() float32 {
	if x != nil {
		return x.UZS
	}
	return 0
}

func (x *Price) GetVUV() float32 {
	if x != nil {
		return x.VUV
	}
	return 0
}

func (x *Price) GetVES() float32 {
	if x != nil {
		return x.VES
	}
	return 0
}

func (x *Price) GetVED() float32 {
	if x != nil {
		return x.VED
	}
	return 0
}

func (x *Price) GetVND() float32 {
	if x != nil {
		return x.VND
	}
	return 0
}

func (x *Price) GetYER() float32 {
	if x != nil {
		return x.YER
	}
	return 0
}

func (x *Price) GetZMW() float32 {
	if x != nil {
		return x.ZMW
	}
	return 0
}

func (x *Price) GetZWL() float32 {
	if x != nil {
		return x.ZWL
	}
	return 0
}

func (x *Price) GetXBA() float32 {
	if x != nil {
		return x.XBA
	}
	return 0
}

func (x *Price) GetXBB() float32 {
	if x != nil {
		return x.XBB
	}
	return 0
}

func (x *Price) GetXBC() float32 {
	if x != nil {
		return x.XBC
	}
	return 0
}

func (x *Price) GetXBD() float32 {
	if x != nil {
		return x.XBD
	}
	return 0
}

func (x *Price) GetXTS() float32 {
	if x != nil {
		return x.XTS
	}
	return 0
}

func (x *Price) GetXXX() float32 {
	if x != nil {
		return x.XXX
	}
	return 0
}

func (x *Price) GetXAU() float32 {
	if x != nil {
		return x.XAU
	}
	return 0
}

func (x *Price) GetXPD() float32 {
	if x != nil {
		return x.XPD
	}
	return 0
}

func (x *Price) GetXPT() float32 {
	if x != nil {
		return x.XPT
	}
	return 0
}

func (x *Price) GetXAG() float32 {
	if x != nil {
		return x.XAG
	}
	return 0
}

var File_locale_generated_proto protoreflect.FileDescriptor

const file_locale_generated_proto_rawDesc = "" +
	"\n" +
	"\x16locale.generated.proto\x12\x06header\"\xbb\x16\n" +
	"\n" +
	"I18nString\x12\x13\n" +
	"\x05af_NA\x18\v \x01(\tR\x04afNA\x12\x13\n" +
	"\x05af_ZA\x18\f \x01(\tR\x04afZA\x12\x13\n" +
	"\x05ar_AR\x18\r \x01(\tR\x04arAR\x12\x13\n" +
	"\x05ar_MA\x18\x0e \x01(\tR\x04arMA\x12\x13\n" +
	"\x05ar_SA\x18\x0f \x01(\tR\x04arSA\x12\x13\n" +
	"\x05ay_BO\x18\x10 \x01(\tR\x04ayBO\x12\x13\n" +
	"\x05az_AZ\x18\x11 \x01(\tR\x04azAZ\x12\x13\n" +
	"\x05be_BY\x18\x12 \x01(\tR\x04beBY\x12\x13\n" +
	"\x05bg_BG\x18\x13 \x01(\tR\x04bgBG\x12\x13\n" +
	"\x05bn_IN\x18\x14 \x01(\tR\x04bnIN\x12\x13\n" +
	"\x05bn_BD\x18\x15 \x01(\tR\x04bnBD\x12\x13\n" +
	"\x05bs_BA\x18\x16 \x01(\tR\x04bsBA\x12\x13\n" +
	"\x05ca_ES\x18\x17 \x01(\tR\x04caES\x12\x13\n" +
	"\x05ck_US\x18\x18 \x01(\tR\x04ckUS\x12\x13\n" +
	"\x05cs_CZ\x18\x19 \x01(\tR\x04csCZ\x12\x13\n" +
	"\x05cy_GB\x18\x1a \x01(\tR\x04cyGB\x12\x13\n" +
	"\x05da_DK\x18\x1b \x01(\tR\x04daDK\x12\x13\n" +
	"\x05de_AT\x18\x1c \x01(\tR\x04deAT\x12\x13\n" +
	"\x05de_DE\x18\x1d \x01(\tR\x04deDE\x12\x13\n" +
	"\x05de_CH\x18\x1e \x01(\tR\x04deCH\x12\x13\n" +
	"\x05el_GR\x18\x1f \x01(\tR\x04elGR\x12\x13\n" +
	"\x05en_GB\x18  \x01(\tR\x04enGB\x12\x13\n" +
	"\x05en_AU\x18! \x01(\tR\x04enAU\x12\x13\n" +
	"\x05en_CA\x18\" \x01(\tR\x04enCA\x12\x13\n" +
	"\x05en_IE\x18# \x01(\tR\x04enIE\x12\x13\n" +
	"\x05en_IN\x18$ \x01(\tR\x04enIN\x12\x13\n" +
	"\x05en_PI\x18% \x01(\tR\x04enPI\x12\x13\n" +
	"\x05en_UD\x18& \x01(\tR\x04enUD\x12\x13\n" +
	"\x05en_US\x18' \x01(\tR\x04enUS\x12\x13\n" +
	"\x05en_ZA\x18( \x01(\tR\x04enZA\x12\x13\n" +
	"\x05eo_EO\x18) \x01(\tR\x04eoEO\x12\x13\n" +
	"\x05es_AR\x18* \x01(\tR\x04esAR\x12\x15\n" +
	"\x06es_419\x18+ \x01(\tR\x05es419\x12\x13\n" +
	"\x05es_CL\x18, \x01(\tR\x04esCL\x12\x13\n" +
	"\x05es_CO\x18- \x01(\tR\x04esCO\x12\x13\n" +
	"\x05es_EC\x18. \x01(\tR\x04esEC\x12\x13\n" +
	"\x05es_ES\x18/ \x01(\tR\x04esES\x12\x13\n" +
	"\x05es_LA\x180 \x01(\tR\x04esLA\x12\x13\n" +
	"\x05es_NI\x181 \x01(\tR\x04esNI\x12\x13\n" +
	"\x05es_MX\x182 \x01(\tR\x04esMX\x12\x13\n" +
	"\x05es_US\x183 \x01(\tR\x04esUS\x12\x13\n" +
	"\x05es_VE\x184 \x01(\tR\x04esVE\x12\x13\n" +
	"\x05et_EE\x185 \x01(\tR\x04etEE\x12\x13\n" +
	"\x05eu_ES\x186 \x01(\tR\x04euES\x12\x13\n" +
	"\x05fa_IR\x187 \x01(\tR\x04faIR\x12\x13\n" +
	"\x05fb_LT\x188 \x01(\tR\x04fbLT\x12\x13\n" +
	"\x05fi_FI\x189 \x01(\tR\x04fiFI\x12\x13\n" +
	"\x05fo_FO\x18: \x01(\tR\x04foFO\x12\x13\n" +
	"\x05fr_CA\x18; \x01(\tR\x04frCA\x12\x13\n" +
	"\x05fr_FR\x18< \x01(\tR\x04frFR\x12\x13\n" +
	"\x05fr_BE\x18= \x01(\tR\x04frBE\x12\x13\n" +
	"\x05fr_CH\x18> \x01(\tR\x04frCH\x12\x13\n" +
	"\x05fy_NL\x18? \x01(\tR\x04fyNL\x12\x13\n" +
	"\x05ga_IE\x18@ \x01(\tR\x04gaIE\x12\x13\n" +
	"\x05gl_ES\x18A \x01(\tR\x04glES\x12\x13\n" +
	"\x05gn_PY\x18B \x01(\tR\x04gnPY\x12\x13\n" +
	"\x05gu_IN\x18C \x01(\tR\x04guIN\x12\x13\n" +
	"\x05gx_GR\x18D \x01(\tR\x04gxGR\x12\x13\n" +
	"\x05he_IL\x18E \x01(\tR\x04heIL\x12\x13\n" +
	"\x05hi_IN\x18F \x01(\tR\x04hiIN\x12\x13\n" +
	"\x05hr_HR\x18G \x01(\tR\x04hrHR\x12\x13\n" +
	"\x05hu_HU\x18H \x01(\tR\x04huHU\x12\x13\n" +
	"\x05hy_AM\x18I \x01(\tR\x04hyAM\x12\x13\n" +
	"\x05id_ID\x18J \x01(\tR\x04idID\x12\x13\n" +
	"\x05is_IS\x18K \x01(\tR\x04isIS\x12\x13\n" +
	"\x05it_IT\x18L \x01(\tR\x04itIT\x12\x13\n" +
	"\x05ja_JP\x18M \x01(\tR\x04jaJP\x12\x13\n" +
	"\x05jv_ID\x18N \x01(\tR\x04jvID\x12\x13\n" +
	"\x05ka_GE\x18O \x01(\tR\x04kaGE\x12\x13\n" +
	"\x05kk_KZ\x18P \x01(\tR\x04kkKZ\x12\x13\n" +
	"\x05km_KH\x18Q \x01(\tR\x04kmKH\x12\x13\n" +
	"\x05kn_IN\x18R \x01(\tR\x04knIN\x12\x13\n" +
	"\x05ko_KR\x18S \x01(\tR\x04koKR\x12\x13\n" +
	"\x05ku_TR\x18T \x01(\tR\x04kuTR\x12\x13\n" +
	"\x05la_VA\x18U \x01(\tR\x04laVA\x12\x13\n" +
	"\x05li_NL\x18V \x01(\tR\x04liNL\x12\x13\n" +
	"\x05lt_LT\x18W \x01(\tR\x04ltLT\x12\x13\n" +
	"\x05lv_LV\x18X \x01(\tR\x04lvLV\x12\x13\n" +
	"\x05mg_MG\x18Y \x01(\tR\x04mgMG\x12\x13\n" +
	"\x05mk_MK\x18Z \x01(\tR\x04mkMK\x12\x13\n" +
	"\x05ml_IN\x18[ \x01(\tR\x04mlIN\x12\x13\n" +
	"\x05mn_MN\x18\\ \x01(\tR\x04mnMN\x12\x13\n" +
	"\x05mr_IN\x18] \x01(\tR\x04mrIN\x12\x13\n" +
	"\x05ms_MY\x18^ \x01(\tR\x04msMY\x12\x13\n" +
	"\x05mt_MT\x18_ \x01(\tR\x04mtMT\x12\x13\n" +
	"\x05nb_NO\x18` \x01(\tR\x04nbNO\x12\x13\n" +
	"\x05ne_NP\x18a \x01(\tR\x04neNP\x12\x13\n" +
	"\x05nl_BE\x18b \x01(\tR\x04nlBE\x12\x13\n" +
	"\x05nl_NL\x18c \x01(\tR\x04nlNL\x12\x13\n" +
	"\x05nn_NO\x18d \x01(\tR\x04nnNO\x12\x13\n" +
	"\x05or_IN\x18e \x01(\tR\x04orIN\x12\x13\n" +
	"\x05pa_IN\x18f \x01(\tR\x04paIN\x12\x13\n" +
	"\x05pl_PL\x18g \x01(\tR\x04plPL\x12\x13\n" +
	"\x05ps_AF\x18h \x01(\tR\x04psAF\x12\x13\n" +
	"\x05pt_BR\x18i \x01(\tR\x04ptBR\x12\x13\n" +
	"\x05pt_PT\x18j \x01(\tR\x04ptPT\x12\x13\n" +
	"\x05qu_PE\x18k \x01(\tR\x04quPE\x12\x13\n" +
	"\x05rm_CH\x18l \x01(\tR\x04rmCH\x12\x13\n" +
	"\x05ro_RO\x18m \x01(\tR\x04roRO\x12\x13\n" +
	"\x05ru_RU\x18n \x01(\tR\x04ruRU\x12\x13\n" +
	"\x05sa_IN\x18o \x01(\tR\x04saIN\x12\x13\n" +
	"\x05se_NO\x18p \x01(\tR\x04seNO\x12\x13\n" +
	"\x05si_LK\x18q \x01(\tR\x04siLK\x12\x13\n" +
	"\x05sk_SK\x18r \x01(\tR\x04skSK\x12\x13\n" +
	"\x05sl_SI\x18s \x01(\tR\x04slSI\x12\x13\n" +
	"\x05so_SO\x18t \x01(\tR\x04soSO\x12\x13\n" +
	"\x05sq_AL\x18u \x01(\tR\x04sqAL\x12\x13\n" +
	"\x05sr_RS\x18v \x01(\tR\x04srRS\x12\x13\n" +
	"\x05sv_SE\x18w \x01(\tR\x04svSE\x12\x13\n" +
	"\x05sw_KE\x18x \x01(\tR\x04swKE\x12\x13\n" +
	"\x05ta_IN\x18y \x01(\tR\x04taIN\x12\x13\n" +
	"\x05te_IN\x18z \x01(\tR\x04teIN\x12\x13\n" +
	"\x05tg_TJ\x18{ \x01(\tR\x04tgTJ\x12\x13\n" +
	"\x05th_TH\x18| \x01(\tR\x04thTH\x12\x13\n" +
	"\x05tl_PH\x18} \x01(\tR\x04tlPH\x12\x13\n" +
	"\x05tr_TR\x18~ \x01(\tR\x04trTR\x12\x13\n" +
	"\x05tt_RU\x18\x7f \x01(\tR\x04ttRU\x12\x14\n" +
	"\x05uk_UA\x18\x80\x01 \x01(\tR\x04ukUA\x12\x14\n" +
	"\x05ur_PK\x18\x81\x01 \x01(\tR\x04urPK\x12\x14\n" +
	"\x05uz_UZ\x18\x82\x01 \x01(\tR\x04uzUZ\x12\x14\n" +
	"\x05vi_VN\x18\x83\x01 \x01(\tR\x04viVN\x12\x14\n" +
	"\x05xh_ZA\x18\x84\x01 \x01(\tR\x04xhZA\x12\x14\n" +
	"\x05yi_DE\x18\x85\x01 \x01(\tR\x04yiDE\x12\x18\n" +
	"\azh_Hans\x18\x86\x01 \x01(\tR\x06zhHans\x12\x18\n" +
	"\azh_Hant\x18\x87\x01 \x01(\tR\x06zhHant\x12\x14\n" +
	"\x05zh_CN\x18\x88\x01 \x01(\tR\x04zhCN\x12\x14\n" +
	"\x05zh_HK\x18\x89\x01 \x01(\tR\x04zhHK\x12\x14\n" +
	"\x05zh_SG\x18\x8a\x01 \x01(\tR\x04zhSG\x12\x14\n" +
	"\x05zh_TW\x18\x8b\x01 \x01(\tR\x04zhTW\x12\x14\n" +
	"\x05zu_ZA\x18\x8c\x01 \x01(\tR\x04zuZA\x12\x14\n" +
	"\x05lo_LA\x18\x8d\x01 \x01(\tR\x04loLA\x12\x14\n" +
	"\x05aa_ER\x18\x8e\x01 \x01(\tR\x04aaER\x12\x14\n" +
	"\x05en_SG\x18\x8f\x01 \x01(\tR\x04enSG\x12\x17\n" +
	"\x06custom\x18\xfa\x01 \x01(\tR\x06custom\x12\x11\n" +
	"\x03key\x18\xfb\x01 \x01(\tR\x03key\"\x9b\x1a\n" +
	"\x05Price\x12\x1a\n" +
	"\bcurrency\x18\x02 \x01(\tR\bcurrency\x12\x10\n" +
	"\x03FPV\x18\x03 \x01(\x03R\x03FPV\x12\x10\n" +
	"\x03AFN\x18\n" +
	" \x01(\x02R\x03AFN\x12\x10\n" +
	"\x03EUR\x18\v \x01(\x02R\x03EUR\x12\x10\n" +
	"\x03ALL\x18\f \x01(\x02R\x03ALL\x12\x10\n" +
	"\x03DZD\x18\r \x01(\x02R\x03DZD\x12\x10\n" +
	"\x03USD\x18\x0e \x01(\x02R\x03USD\x12\x10\n" +
	"\x03AOA\x18\x0f \x01(\x02R\x03AOA\x12\x10\n" +
	"\x03XCD\x18\x10 \x01(\x02R\x03XCD\x12\x10\n" +
	"\x03ARS\x18\x11 \x01(\x02R\x03ARS\x12\x10\n" +
	"\x03AMD\x18\x12 \x01(\x02R\x03AMD\x12\x10\n" +
	"\x03AWG\x18\x13 \x01(\x02R\x03AWG\x12\x10\n" +
	"\x03AUD\x18\x14 \x01(\x02R\x03AUD\x12\x10\n" +
	"\x03AZN\x18\x15 \x01(\x02R\x03AZN\x12\x10\n" +
	"\x03BSD\x18\x16 \x01(\x02R\x03BSD\x12\x10\n" +
	"\x03BHD\x18\x17 \x01(\x02R\x03BHD\x12\x10\n" +
	"\x03BDT\x18\x18 \x01(\x02R\x03BDT\x12\x10\n" +
	"\x03BBD\x18\x19 \x01(\x02R\x03BBD\x12\x10\n" +
	"\x03BYN\x18\x1a \x01(\x02R\x03BYN\x12\x10\n" +
	"\x03BZD\x18\x1b \x01(\x02R\x03BZD\x12\x10\n" +
	"\x03XOF\x18\x1c \x01(\x02R\x03XOF\x12\x10\n" +
	"\x03BMD\x18\x1d \x01(\x02R\x03BMD\x12\x10\n" +
	"\x03INR\x18\x1e \x01(\x02R\x03INR\x12\x10\n" +
	"\x03BTN\x18\x1f \x01(\x02R\x03BTN\x12\x10\n" +
	"\x03BOB\x18  \x01(\x02R\x03BOB\x12\x10\n" +
	"\x03BOV\x18! \x01(\x02R\x03BOV\x12\x10\n" +
	"\x03BAM\x18\" \x01(\x02R\x03BAM\x12\x10\n" +
	"\x03BWP\x18# \x01(\x02R\x03BWP\x12\x10\n" +
	"\x03NOK\x18$ \x01(\x02R\x03NOK\x12\x10\n" +
	"\x03BRL\x18% \x01(\x02R\x03BRL\x12\x10\n" +
	"\x03BND\x18& \x01(\x02R\x03BND\x12\x10\n" +
	"\x03BGN\x18' \x01(\x02R\x03BGN\x12\x10\n" +
	"\x03BIF\x18( \x01(\x02R\x03BIF\x12\x10\n" +
	"\x03CVE\x18) \x01(\x02R\x03CVE\x12\x10\n" +
	"\x03KHR\x18* \x01(\x02R\x03KHR\x12\x10\n" +
	"\x03XAF\x18+ \x01(\x02R\x03XAF\x12\x10\n" +
	"\x03CAD\x18, \x01(\x02R\x03CAD\x12\x10\n" +
	"\x03KYD\x18- \x01(\x02R\x03KYD\x12\x10\n" +
	"\x03CLP\x18. \x01(\x02R\x03CLP\x12\x10\n" +
	"\x03CLF\x18/ \x01(\x02R\x03CLF\x12\x10\n" +
	"\x03CNY\x180 \x01(\x02R\x03CNY\x12\x10\n" +
	"\x03COP\x181 \x01(\x02R\x03COP\x12\x10\n" +
	"\x03COU\x182 \x01(\x02R\x03COU\x12\x10\n" +
	"\x03KMF\x183 \x01(\x02R\x03KMF\x12\x10\n" +
	"\x03CDF\x184 \x01(\x02R\x03CDF\x12\x10\n" +
	"\x03NZD\x185 \x01(\x02R\x03NZD\x12\x10\n" +
	"\x03CRC\x186 \x01(\x02R\x03CRC\x12\x10\n" +
	"\x03HRK\x187 \x01(\x02R\x03HRK\x12\x10\n" +
	"\x03CUP\x188 \x01(\x02R\x03CUP\x12\x10\n" +
	"\x03CUC\x189 \x01(\x02R\x03CUC\x12\x10\n" +
	"\x03ANG\x18: \x01(\x02R\x03ANG\x12\x10\n" +
	"\x03CZK\x18; \x01(\x02R\x03CZK\x12\x10\n" +
	"\x03DKK\x18< \x01(\x02R\x03DKK\x12\x10\n" +
	"\x03DJF\x18= \x01(\x02R\x03DJF\x12\x10\n" +
	"\x03DOP\x18> \x01(\x02R\x03DOP\x12\x10\n" +
	"\x03EGP\x18? \x01(\x02R\x03EGP\x12\x10\n" +
	"\x03SVC\x18@ \x01(\x02R\x03SVC\x12\x10\n" +
	"\x03ERN\x18A \x01(\x02R\x03ERN\x12\x10\n" +
	"\x03SZL\x18B \x01(\x02R\x03SZL\x12\x10\n" +
	"\x03ETB\x18C \x01(\x02R\x03ETB\x12\x10\n" +
	"\x03FKP\x18D \x01(\x02R\x03FKP\x12\x10\n" +
	"\x03FJD\x18E \x01(\x02R\x03FJD\x12\x10\n" +
	"\x03XPF\x18F \x01(\x02R\x03XPF\x12\x10\n" +
	"\x03GMD\x18G \x01(\x02R\x03GMD\x12\x10\n" +
	"\x03GEL\x18H \x01(\x02R\x03GEL\x12\x10\n" +
	"\x03GHS\x18I \x01(\x02R\x03GHS\x12\x10\n" +
	"\x03GIP\x18J \x01(\x02R\x03GIP\x12\x10\n" +
	"\x03GTQ\x18K \x01(\x02R\x03GTQ\x12\x10\n" +
	"\x03GBP\x18L \x01(\x02R\x03GBP\x12\x10\n" +
	"\x03GNF\x18M \x01(\x02R\x03GNF\x12\x10\n" +
	"\x03GYD\x18N \x01(\x02R\x03GYD\x12\x10\n" +
	"\x03HTG\x18O \x01(\x02R\x03HTG\x12\x10\n" +
	"\x03HNL\x18P \x01(\x02R\x03HNL\x12\x10\n" +
	"\x03HKD\x18Q \x01(\x02R\x03HKD\x12\x10\n" +
	"\x03HUF\x18R \x01(\x02R\x03HUF\x12\x10\n" +
	"\x03ISK\x18S \x01(\x02R\x03ISK\x12\x10\n" +
	"\x03IDR\x18T \x01(\x02R\x03IDR\x12\x10\n" +
	"\x03XDR\x18U \x01(\x02R\x03XDR\x12\x10\n" +
	"\x03IRR\x18V \x01(\x02R\x03IRR\x12\x10\n" +
	"\x03IQD\x18W \x01(\x02R\x03IQD\x12\x10\n" +
	"\x03ILS\x18X \x01(\x02R\x03ILS\x12\x10\n" +
	"\x03JMD\x18Y \x01(\x02R\x03JMD\x12\x10\n" +
	"\x03JPY\x18Z \x01(\x02R\x03JPY\x12\x10\n" +
	"\x03JOD\x18[ \x01(\x02R\x03JOD\x12\x10\n" +
	"\x03KZT\x18\\ \x01(\x02R\x03KZT\x12\x10\n" +
	"\x03KES\x18] \x01(\x02R\x03KES\x12\x10\n" +
	"\x03KPW\x18^ \x01(\x02R\x03KPW\x12\x10\n" +
	"\x03KRW\x18_ \x01(\x02R\x03KRW\x12\x10\n" +
	"\x03KWD\x18` \x01(\x02R\x03KWD\x12\x10\n" +
	"\x03KGS\x18a \x01(\x02R\x03KGS\x12\x10\n" +
	"\x03LAK\x18b \x01(\x02R\x03LAK\x12\x10\n" +
	"\x03LBP\x18c \x01(\x02R\x03LBP\x12\x10\n" +
	"\x03LSL\x18d \x01(\x02R\x03LSL\x12\x10\n" +
	"\x03ZAR\x18e \x01(\x02R\x03ZAR\x12\x10\n" +
	"\x03LRD\x18f \x01(\x02R\x03LRD\x12\x10\n" +
	"\x03LYD\x18g \x01(\x02R\x03LYD\x12\x10\n" +
	"\x03CHF\x18h \x01(\x02R\x03CHF\x12\x10\n" +
	"\x03MOP\x18i \x01(\x02R\x03MOP\x12\x10\n" +
	"\x03MKD\x18j \x01(\x02R\x03MKD\x12\x10\n" +
	"\x03MGA\x18k \x01(\x02R\x03MGA\x12\x10\n" +
	"\x03MWK\x18l \x01(\x02R\x03MWK\x12\x10\n" +
	"\x03MYR\x18m \x01(\x02R\x03MYR\x12\x10\n" +
	"\x03MVR\x18n \x01(\x02R\x03MVR\x12\x10\n" +
	"\x03MRU\x18o \x01(\x02R\x03MRU\x12\x10\n" +
	"\x03MUR\x18p \x01(\x02R\x03MUR\x12\x10\n" +
	"\x03XUA\x18q \x01(\x02R\x03XUA\x12\x10\n" +
	"\x03MXN\x18r \x01(\x02R\x03MXN\x12\x10\n" +
	"\x03MXV\x18s \x01(\x02R\x03MXV\x12\x10\n" +
	"\x03MDL\x18t \x01(\x02R\x03MDL\x12\x10\n" +
	"\x03MNT\x18u \x01(\x02R\x03MNT\x12\x10\n" +
	"\x03MAD\x18v \x01(\x02R\x03MAD\x12\x10\n" +
	"\x03MZN\x18w \x01(\x02R\x03MZN\x12\x10\n" +
	"\x03MMK\x18x \x01(\x02R\x03MMK\x12\x10\n" +
	"\x03NAD\x18y \x01(\x02R\x03NAD\x12\x10\n" +
	"\x03NPR\x18z \x01(\x02R\x03NPR\x12\x10\n" +
	"\x03NIO\x18{ \x01(\x02R\x03NIO\x12\x10\n" +
	"\x03NGN\x18| \x01(\x02R\x03NGN\x12\x10\n" +
	"\x03OMR\x18} \x01(\x02R\x03OMR\x12\x10\n" +
	"\x03PKR\x18~ \x01(\x02R\x03PKR\x12\x10\n" +
	"\x03PAB\x18\x7f \x01(\x02R\x03PAB\x12\x11\n" +
	"\x03PGK\x18\x80\x01 \x01(\x02R\x03PGK\x12\x11\n" +
	"\x03PYG\x18\x81\x01 \x01(\x02R\x03PYG\x12\x11\n" +
	"\x03PEN\x18\x82\x01 \x01(\x02R\x03PEN\x12\x11\n" +
	"\x03PHP\x18\x83\x01 \x01(\x02R\x03PHP\x12\x11\n" +
	"\x03PLN\x18\x84\x01 \x01(\x02R\x03PLN\x12\x11\n" +
	"\x03QAR\x18\x85\x01 \x01(\x02R\x03QAR\x12\x11\n" +
	"\x03RON\x18\x86\x01 \x01(\x02R\x03RON\x12\x11\n" +
	"\x03RUB\x18\x87\x01 \x01(\x02R\x03RUB\x12\x11\n" +
	"\x03RWF\x18\x88\x01 \x01(\x02R\x03RWF\x12\x11\n" +
	"\x03SHP\x18\x89\x01 \x01(\x02R\x03SHP\x12\x11\n" +
	"\x03WST\x18\x8a\x01 \x01(\x02R\x03WST\x12\x11\n" +
	"\x03STN\x18\x8b\x01 \x01(\x02R\x03STN\x12\x11\n" +
	"\x03SAR\x18\x8c\x01 \x01(\x02R\x03SAR\x12\x11\n" +
	"\x03RSD\x18\x8d\x01 \x01(\x02R\x03RSD\x12\x11\n" +
	"\x03SCR\x18\x8e\x01 \x01(\x02R\x03SCR\x12\x11\n" +
	"\x03SLL\x18\x8f\x01 \x01(\x02R\x03SLL\x12\x11\n" +
	"\x03SGD\x18\x90\x01 \x01(\x02R\x03SGD\x12\x11\n" +
	"\x03XSU\x18\x91\x01 \x01(\x02R\x03XSU\x12\x11\n" +
	"\x03SBD\x18\x92\x01 \x01(\x02R\x03SBD\x12\x11\n" +
	"\x03SOS\x18\x93\x01 \x01(\x02R\x03SOS\x12\x11\n" +
	"\x03SSP\x18\x94\x01 \x01(\x02R\x03SSP\x12\x11\n" +
	"\x03LKR\x18\x95\x01 \x01(\x02R\x03LKR\x12\x11\n" +
	"\x03SDG\x18\x96\x01 \x01(\x02R\x03SDG\x12\x11\n" +
	"\x03SRD\x18\x97\x01 \x01(\x02R\x03SRD\x12\x11\n" +
	"\x03SEK\x18\x98\x01 \x01(\x02R\x03SEK\x12\x11\n" +
	"\x03CHE\x18\x99\x01 \x01(\x02R\x03CHE\x12\x11\n" +
	"\x03CHW\x18\x9a\x01 \x01(\x02R\x03CHW\x12\x11\n" +
	"\x03SYP\x18\x9b\x01 \x01(\x02R\x03SYP\x12\x11\n" +
	"\x03TWD\x18\x9c\x01 \x01(\x02R\x03TWD\x12\x11\n" +
	"\x03TJS\x18\x9d\x01 \x01(\x02R\x03TJS\x12\x11\n" +
	"\x03TZS\x18\x9e\x01 \x01(\x02R\x03TZS\x12\x11\n" +
	"\x03THB\x18\x9f\x01 \x01(\x02R\x03THB\x12\x11\n" +
	"\x03TOP\x18\xa0\x01 \x01(\x02R\x03TOP\x12\x11\n" +
	"\x03TTD\x18\xa1\x01 \x01(\x02R\x03TTD\x12\x11\n" +
	"\x03TND\x18\xa2\x01 \x01(\x02R\x03TND\x12\x11\n" +
	"\x03TRY\x18\xa3\x01 \x01(\x02R\x03TRY\x12\x11\n" +
	"\x03TMT\x18\xa4\x01 \x01(\x02R\x03TMT\x12\x11\n" +
	"\x03UGX\x18\xa5\x01 \x01(\x02R\x03UGX\x12\x11\n" +
	"\x03UAH\x18\xa6\x01 \x01(\x02R\x03UAH\x12\x11\n" +
	"\x03AED\x18\xa7\x01 \x01(\x02R\x03AED\x12\x11\n" +
	"\x03USN\x18\xa8\x01 \x01(\x02R\x03USN\x12\x11\n" +
	"\x03UYU\x18\xa9\x01 \x01(\x02R\x03UYU\x12\x11\n" +
	"\x03UYI\x18\xaa\x01 \x01(\x02R\x03UYI\x12\x11\n" +
	"\x03UYW\x18\xab\x01 \x01(\x02R\x03UYW\x12\x11\n" +
	"\x03UZS\x18\xac\x01 \x01(\x02R\x03UZS\x12\x11\n" +
	"\x03VUV\x18\xad\x01 \x01(\x02R\x03VUV\x12\x11\n" +
	"\x03VES\x18\xae\x01 \x01(\x02R\x03VES\x12\x11\n" +
	"\x03VED\x18\xaf\x01 \x01(\x02R\x03VED\x12\x11\n" +
	"\x03VND\x18\xb0\x01 \x01(\x02R\x03VND\x12\x11\n" +
	"\x03YER\x18\xb1\x01 \x01(\x02R\x03YER\x12\x11\n" +
	"\x03ZMW\x18\xb2\x01 \x01(\x02R\x03ZMW\x12\x11\n" +
	"\x03ZWL\x18\xb3\x01 \x01(\x02R\x03ZWL\x12\x11\n" +
	"\x03XBA\x18\xb4\x01 \x01(\x02R\x03XBA\x12\x11\n" +
	"\x03XBB\x18\xb5\x01 \x01(\x02R\x03XBB\x12\x11\n" +
	"\x03XBC\x18\xb6\x01 \x01(\x02R\x03XBC\x12\x11\n" +
	"\x03XBD\x18\xb7\x01 \x01(\x02R\x03XBD\x12\x11\n" +
	"\x03XTS\x18\xb8\x01 \x01(\x02R\x03XTS\x12\x11\n" +
	"\x03XXX\x18\xb9\x01 \x01(\x02R\x03XXX\x12\x11\n" +
	"\x03XAU\x18\xba\x01 \x01(\x02R\x03XAU\x12\x11\n" +
	"\x03XPD\x18\xbb\x01 \x01(\x02R\x03XPD\x12\x11\n" +
	"\x03XPT\x18\xbc\x01 \x01(\x02R\x03XPT\x12\x11\n" +
	"\x03XAG\x18\xbd\x01 \x01(\x02R\x03XAGB\x19Z\x17github.com/subiz/headerb\x06proto3"

var (
	file_locale_generated_proto_rawDescOnce sync.Once
	file_locale_generated_proto_rawDescData []byte
)

func file_locale_generated_proto_rawDescGZIP() []byte {
	file_locale_generated_proto_rawDescOnce.Do(func() {
		file_locale_generated_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_locale_generated_proto_rawDesc), len(file_locale_generated_proto_rawDesc)))
	})
	return file_locale_generated_proto_rawDescData
}

var file_locale_generated_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_locale_generated_proto_goTypes = []any{
	(*I18NString)(nil), // 0: header.I18nString
	(*Price)(nil),      // 1: header.Price
}
var file_locale_generated_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_locale_generated_proto_init() }
func file_locale_generated_proto_init() {
	if File_locale_generated_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_locale_generated_proto_rawDesc), len(file_locale_generated_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_locale_generated_proto_goTypes,
		DependencyIndexes: file_locale_generated_proto_depIdxs,
		MessageInfos:      file_locale_generated_proto_msgTypes,
	}.Build()
	File_locale_generated_proto = out.File
	file_locale_generated_proto_goTypes = nil
	file_locale_generated_proto_depIdxs = nil
}
