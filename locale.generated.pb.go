// CODE GENERATED BY lang.js. DO NOT MODIFY

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.1
// source: locale.generated.proto

package header

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type I18NString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Af_NA   string `protobuf:"bytes,11,opt,name=af_NA,json=afNA,proto3" json:"af_NA,omitempty"`        // Afrikaans (Namibia)
	Af_ZA   string `protobuf:"bytes,12,opt,name=af_ZA,json=afZA,proto3" json:"af_ZA,omitempty"`        // Afrikaans (South Africa)
	Ar_AR   string `protobuf:"bytes,13,opt,name=ar_AR,json=arAR,proto3" json:"ar_AR,omitempty"`        // Arabic
	Ar_MA   string `protobuf:"bytes,14,opt,name=ar_MA,json=arMA,proto3" json:"ar_MA,omitempty"`        // Arabic (Morocco)
	Ar_SA   string `protobuf:"bytes,15,opt,name=ar_SA,json=arSA,proto3" json:"ar_SA,omitempty"`        // Arabic (Saudi Arabia)
	Ay_BO   string `protobuf:"bytes,16,opt,name=ay_BO,json=ayBO,proto3" json:"ay_BO,omitempty"`        // Aymara
	Az_AZ   string `protobuf:"bytes,17,opt,name=az_AZ,json=azAZ,proto3" json:"az_AZ,omitempty"`        // Azerbaijani
	Be_BY   string `protobuf:"bytes,18,opt,name=be_BY,json=beBY,proto3" json:"be_BY,omitempty"`        // Belarusian
	Bg_BG   string `protobuf:"bytes,19,opt,name=bg_BG,json=bgBG,proto3" json:"bg_BG,omitempty"`        // Bulgarian
	Bn_IN   string `protobuf:"bytes,20,opt,name=bn_IN,json=bnIN,proto3" json:"bn_IN,omitempty"`        // Bengali (India)
	Bn_BD   string `protobuf:"bytes,21,opt,name=bn_BD,json=bnBD,proto3" json:"bn_BD,omitempty"`        // Bengali (Bangladesh)
	Bs_BA   string `protobuf:"bytes,22,opt,name=bs_BA,json=bsBA,proto3" json:"bs_BA,omitempty"`        // Bosnian
	Ca_ES   string `protobuf:"bytes,23,opt,name=ca_ES,json=caES,proto3" json:"ca_ES,omitempty"`        // Catalan
	Ck_US   string `protobuf:"bytes,24,opt,name=ck_US,json=ckUS,proto3" json:"ck_US,omitempty"`        // Cherokee
	Cs_CZ   string `protobuf:"bytes,25,opt,name=cs_CZ,json=csCZ,proto3" json:"cs_CZ,omitempty"`        // Czech
	Cy_GB   string `protobuf:"bytes,26,opt,name=cy_GB,json=cyGB,proto3" json:"cy_GB,omitempty"`        // Welsh
	Da_DK   string `protobuf:"bytes,27,opt,name=da_DK,json=daDK,proto3" json:"da_DK,omitempty"`        // Danish
	De_AT   string `protobuf:"bytes,28,opt,name=de_AT,json=deAT,proto3" json:"de_AT,omitempty"`        // German (Austria)
	De_DE   string `protobuf:"bytes,29,opt,name=de_DE,json=deDE,proto3" json:"de_DE,omitempty"`        // German (Germany)
	De_CH   string `protobuf:"bytes,30,opt,name=de_CH,json=deCH,proto3" json:"de_CH,omitempty"`        // German (Switzerland)
	El_GR   string `protobuf:"bytes,31,opt,name=el_GR,json=elGR,proto3" json:"el_GR,omitempty"`        // Greek (Greece)
	En_GB   string `protobuf:"bytes,32,opt,name=en_GB,json=enGB,proto3" json:"en_GB,omitempty"`        // English (UK)
	En_AU   string `protobuf:"bytes,33,opt,name=en_AU,json=enAU,proto3" json:"en_AU,omitempty"`        // English (Australia)
	En_CA   string `protobuf:"bytes,34,opt,name=en_CA,json=enCA,proto3" json:"en_CA,omitempty"`        // English (Canada)
	En_IE   string `protobuf:"bytes,35,opt,name=en_IE,json=enIE,proto3" json:"en_IE,omitempty"`        // English (Ireland)
	En_IN   string `protobuf:"bytes,36,opt,name=en_IN,json=enIN,proto3" json:"en_IN,omitempty"`        // English (India)
	En_PI   string `protobuf:"bytes,37,opt,name=en_PI,json=enPI,proto3" json:"en_PI,omitempty"`        // English (Pirate)
	En_UD   string `protobuf:"bytes,38,opt,name=en_UD,json=enUD,proto3" json:"en_UD,omitempty"`        // English (Upside Down)
	En_US   string `protobuf:"bytes,39,opt,name=en_US,json=enUS,proto3" json:"en_US,omitempty"`        // English (US)
	En_ZA   string `protobuf:"bytes,40,opt,name=en_ZA,json=enZA,proto3" json:"en_ZA,omitempty"`        // English (South Africa)
	Eo_EO   string `protobuf:"bytes,41,opt,name=eo_EO,json=eoEO,proto3" json:"eo_EO,omitempty"`        // Esperanto
	Es_AR   string `protobuf:"bytes,42,opt,name=es_AR,json=esAR,proto3" json:"es_AR,omitempty"`        // Spanish (Argentina)
	Es_419  string `protobuf:"bytes,43,opt,name=es_419,json=es419,proto3" json:"es_419,omitempty"`     // Spanish (Latin America)
	Es_CL   string `protobuf:"bytes,44,opt,name=es_CL,json=esCL,proto3" json:"es_CL,omitempty"`        // Spanish (Chile)
	Es_CO   string `protobuf:"bytes,45,opt,name=es_CO,json=esCO,proto3" json:"es_CO,omitempty"`        // Spanish (Colombia)
	Es_EC   string `protobuf:"bytes,46,opt,name=es_EC,json=esEC,proto3" json:"es_EC,omitempty"`        // Spanish (Ecuador)
	Es_ES   string `protobuf:"bytes,47,opt,name=es_ES,json=esES,proto3" json:"es_ES,omitempty"`        // Spanish (Spain)
	Es_LA   string `protobuf:"bytes,48,opt,name=es_LA,json=esLA,proto3" json:"es_LA,omitempty"`        // Spanish (Latin America)
	Es_NI   string `protobuf:"bytes,49,opt,name=es_NI,json=esNI,proto3" json:"es_NI,omitempty"`        // Spanish (Nicaragua)
	Es_MX   string `protobuf:"bytes,50,opt,name=es_MX,json=esMX,proto3" json:"es_MX,omitempty"`        // Spanish (Mexico)
	Es_US   string `protobuf:"bytes,51,opt,name=es_US,json=esUS,proto3" json:"es_US,omitempty"`        // Spanish (United States)
	Es_VE   string `protobuf:"bytes,52,opt,name=es_VE,json=esVE,proto3" json:"es_VE,omitempty"`        // Spanish (Venezuela)
	Et_EE   string `protobuf:"bytes,53,opt,name=et_EE,json=etEE,proto3" json:"et_EE,omitempty"`        // Estonian (Estonia)
	Eu_ES   string `protobuf:"bytes,54,opt,name=eu_ES,json=euES,proto3" json:"eu_ES,omitempty"`        // Basque
	Fa_IR   string `protobuf:"bytes,55,opt,name=fa_IR,json=faIR,proto3" json:"fa_IR,omitempty"`        // Persian
	Fb_LT   string `protobuf:"bytes,56,opt,name=fb_LT,json=fbLT,proto3" json:"fb_LT,omitempty"`        // Leet
	Fi_FI   string `protobuf:"bytes,57,opt,name=fi_FI,json=fiFI,proto3" json:"fi_FI,omitempty"`        // Finnish
	Fo_FO   string `protobuf:"bytes,58,opt,name=fo_FO,json=foFO,proto3" json:"fo_FO,omitempty"`        // Faroese
	Fr_CA   string `protobuf:"bytes,59,opt,name=fr_CA,json=frCA,proto3" json:"fr_CA,omitempty"`        // French (Canada)
	Fr_FR   string `protobuf:"bytes,60,opt,name=fr_FR,json=frFR,proto3" json:"fr_FR,omitempty"`        // French (France)
	Fr_BE   string `protobuf:"bytes,61,opt,name=fr_BE,json=frBE,proto3" json:"fr_BE,omitempty"`        // French (Belgium)
	Fr_CH   string `protobuf:"bytes,62,opt,name=fr_CH,json=frCH,proto3" json:"fr_CH,omitempty"`        // French (Switzerland)
	Fy_NL   string `protobuf:"bytes,63,opt,name=fy_NL,json=fyNL,proto3" json:"fy_NL,omitempty"`        // Frisian (West)
	Ga_IE   string `protobuf:"bytes,64,opt,name=ga_IE,json=gaIE,proto3" json:"ga_IE,omitempty"`        // Irish (Gaelic)
	Gl_ES   string `protobuf:"bytes,65,opt,name=gl_ES,json=glES,proto3" json:"gl_ES,omitempty"`        // Galician
	Gn_PY   string `protobuf:"bytes,66,opt,name=gn_PY,json=gnPY,proto3" json:"gn_PY,omitempty"`        // Guarani
	Gu_IN   string `protobuf:"bytes,67,opt,name=gu_IN,json=guIN,proto3" json:"gu_IN,omitempty"`        // Gujarati
	Gx_GR   string `protobuf:"bytes,68,opt,name=gx_GR,json=gxGR,proto3" json:"gx_GR,omitempty"`        // Classical Greek
	He_IL   string `protobuf:"bytes,69,opt,name=he_IL,json=heIL,proto3" json:"he_IL,omitempty"`        // Hebrew
	Hi_IN   string `protobuf:"bytes,70,opt,name=hi_IN,json=hiIN,proto3" json:"hi_IN,omitempty"`        // Hindi
	Hr_HR   string `protobuf:"bytes,71,opt,name=hr_HR,json=hrHR,proto3" json:"hr_HR,omitempty"`        // Croatian
	Hu_HU   string `protobuf:"bytes,72,opt,name=hu_HU,json=huHU,proto3" json:"hu_HU,omitempty"`        // Hungarian
	Hy_AM   string `protobuf:"bytes,73,opt,name=hy_AM,json=hyAM,proto3" json:"hy_AM,omitempty"`        // Armenian
	Id_ID   string `protobuf:"bytes,74,opt,name=id_ID,json=idID,proto3" json:"id_ID,omitempty"`        // Indonesian
	Is_IS   string `protobuf:"bytes,75,opt,name=is_IS,json=isIS,proto3" json:"is_IS,omitempty"`        // Icelandic (Iceland)
	It_IT   string `protobuf:"bytes,76,opt,name=it_IT,json=itIT,proto3" json:"it_IT,omitempty"`        // Italian
	Ja_JP   string `protobuf:"bytes,77,opt,name=ja_JP,json=jaJP,proto3" json:"ja_JP,omitempty"`        // Japanese
	Jv_ID   string `protobuf:"bytes,78,opt,name=jv_ID,json=jvID,proto3" json:"jv_ID,omitempty"`        // Javanese
	Ka_GE   string `protobuf:"bytes,79,opt,name=ka_GE,json=kaGE,proto3" json:"ka_GE,omitempty"`        // Georgian
	Kk_KZ   string `protobuf:"bytes,80,opt,name=kk_KZ,json=kkKZ,proto3" json:"kk_KZ,omitempty"`        // Kazakh
	Km_KH   string `protobuf:"bytes,81,opt,name=km_KH,json=kmKH,proto3" json:"km_KH,omitempty"`        // Khmer
	Kn_IN   string `protobuf:"bytes,82,opt,name=kn_IN,json=knIN,proto3" json:"kn_IN,omitempty"`        // Kannada (India)
	Ko_KR   string `protobuf:"bytes,83,opt,name=ko_KR,json=koKR,proto3" json:"ko_KR,omitempty"`        // Korean (Korea)
	Ku_TR   string `protobuf:"bytes,84,opt,name=ku_TR,json=kuTR,proto3" json:"ku_TR,omitempty"`        // Kurdish
	La_VA   string `protobuf:"bytes,85,opt,name=la_VA,json=laVA,proto3" json:"la_VA,omitempty"`        // Latin
	Li_NL   string `protobuf:"bytes,86,opt,name=li_NL,json=liNL,proto3" json:"li_NL,omitempty"`        // Limburgish
	Lt_LT   string `protobuf:"bytes,87,opt,name=lt_LT,json=ltLT,proto3" json:"lt_LT,omitempty"`        // Lithuanian
	Lv_LV   string `protobuf:"bytes,88,opt,name=lv_LV,json=lvLV,proto3" json:"lv_LV,omitempty"`        // Latvian
	Mg_MG   string `protobuf:"bytes,89,opt,name=mg_MG,json=mgMG,proto3" json:"mg_MG,omitempty"`        // Malagasy
	Mk_MK   string `protobuf:"bytes,90,opt,name=mk_MK,json=mkMK,proto3" json:"mk_MK,omitempty"`        // Macedonian (Macedonian)
	Ml_IN   string `protobuf:"bytes,91,opt,name=ml_IN,json=mlIN,proto3" json:"ml_IN,omitempty"`        // Malayalam
	Mn_MN   string `protobuf:"bytes,92,opt,name=mn_MN,json=mnMN,proto3" json:"mn_MN,omitempty"`        // Mongolian
	Mr_IN   string `protobuf:"bytes,93,opt,name=mr_IN,json=mrIN,proto3" json:"mr_IN,omitempty"`        // Marathi
	Ms_MY   string `protobuf:"bytes,94,opt,name=ms_MY,json=msMY,proto3" json:"ms_MY,omitempty"`        // Malay
	Mt_MT   string `protobuf:"bytes,95,opt,name=mt_MT,json=mtMT,proto3" json:"mt_MT,omitempty"`        // Maltese
	Nb_NO   string `protobuf:"bytes,96,opt,name=nb_NO,json=nbNO,proto3" json:"nb_NO,omitempty"`        // Norwegian (bokmal)
	Ne_NP   string `protobuf:"bytes,97,opt,name=ne_NP,json=neNP,proto3" json:"ne_NP,omitempty"`        // Nepali
	Nl_BE   string `protobuf:"bytes,98,opt,name=nl_BE,json=nlBE,proto3" json:"nl_BE,omitempty"`        // Dutch (Belgium)
	Nl_NL   string `protobuf:"bytes,99,opt,name=nl_NL,json=nlNL,proto3" json:"nl_NL,omitempty"`        // Dutch (Netherlands)
	Nn_NO   string `protobuf:"bytes,100,opt,name=nn_NO,json=nnNO,proto3" json:"nn_NO,omitempty"`       // Norwegian (nynorsk)
	Or_IN   string `protobuf:"bytes,101,opt,name=or_IN,json=orIN,proto3" json:"or_IN,omitempty"`       // Oriya
	Pa_IN   string `protobuf:"bytes,102,opt,name=pa_IN,json=paIN,proto3" json:"pa_IN,omitempty"`       // Punjabi (India)
	Pl_PL   string `protobuf:"bytes,103,opt,name=pl_PL,json=plPL,proto3" json:"pl_PL,omitempty"`       // Polish
	Ps_AF   string `protobuf:"bytes,104,opt,name=ps_AF,json=psAF,proto3" json:"ps_AF,omitempty"`       // Pashto
	Pt_BR   string `protobuf:"bytes,105,opt,name=pt_BR,json=ptBR,proto3" json:"pt_BR,omitempty"`       // Portuguese (Brazil)
	Pt_PT   string `protobuf:"bytes,106,opt,name=pt_PT,json=ptPT,proto3" json:"pt_PT,omitempty"`       // Portuguese (Portugal)
	Qu_PE   string `protobuf:"bytes,107,opt,name=qu_PE,json=quPE,proto3" json:"qu_PE,omitempty"`       // Quechua
	Rm_CH   string `protobuf:"bytes,108,opt,name=rm_CH,json=rmCH,proto3" json:"rm_CH,omitempty"`       // Romansh
	Ro_RO   string `protobuf:"bytes,109,opt,name=ro_RO,json=roRO,proto3" json:"ro_RO,omitempty"`       // Romanian
	Ru_RU   string `protobuf:"bytes,110,opt,name=ru_RU,json=ruRU,proto3" json:"ru_RU,omitempty"`       // Russian
	Sa_IN   string `protobuf:"bytes,111,opt,name=sa_IN,json=saIN,proto3" json:"sa_IN,omitempty"`       // Sanskrit
	Se_NO   string `protobuf:"bytes,112,opt,name=se_NO,json=seNO,proto3" json:"se_NO,omitempty"`       // Northern Sámi
	Si_LK   string `protobuf:"bytes,113,opt,name=si_LK,json=siLK,proto3" json:"si_LK,omitempty"`       // Sinhala (Sri Lanka)
	Sk_SK   string `protobuf:"bytes,114,opt,name=sk_SK,json=skSK,proto3" json:"sk_SK,omitempty"`       // Slovak (Slovakia)
	Sl_SI   string `protobuf:"bytes,115,opt,name=sl_SI,json=slSI,proto3" json:"sl_SI,omitempty"`       // Slovenian
	So_SO   string `protobuf:"bytes,116,opt,name=so_SO,json=soSO,proto3" json:"so_SO,omitempty"`       // Somali
	Sq_AL   string `protobuf:"bytes,117,opt,name=sq_AL,json=sqAL,proto3" json:"sq_AL,omitempty"`       // Albanian
	Sr_RS   string `protobuf:"bytes,118,opt,name=sr_RS,json=srRS,proto3" json:"sr_RS,omitempty"`       // Serbian (Serbia)
	Sv_SE   string `protobuf:"bytes,119,opt,name=sv_SE,json=svSE,proto3" json:"sv_SE,omitempty"`       // Swedish
	Sw_KE   string `protobuf:"bytes,120,opt,name=sw_KE,json=swKE,proto3" json:"sw_KE,omitempty"`       // Swahili (Kenya)
	Ta_IN   string `protobuf:"bytes,121,opt,name=ta_IN,json=taIN,proto3" json:"ta_IN,omitempty"`       // Tamil
	Te_IN   string `protobuf:"bytes,122,opt,name=te_IN,json=teIN,proto3" json:"te_IN,omitempty"`       // Telugu
	Tg_TJ   string `protobuf:"bytes,123,opt,name=tg_TJ,json=tgTJ,proto3" json:"tg_TJ,omitempty"`       // Tajik
	Th_TH   string `protobuf:"bytes,124,opt,name=th_TH,json=thTH,proto3" json:"th_TH,omitempty"`       // Thai (Thailand)
	Tl_PH   string `protobuf:"bytes,125,opt,name=tl_PH,json=tlPH,proto3" json:"tl_PH,omitempty"`       // Filipino
	Tr_TR   string `protobuf:"bytes,126,opt,name=tr_TR,json=trTR,proto3" json:"tr_TR,omitempty"`       // Turkish
	Tt_RU   string `protobuf:"bytes,127,opt,name=tt_RU,json=ttRU,proto3" json:"tt_RU,omitempty"`       // Tatar
	Uk_UA   string `protobuf:"bytes,128,opt,name=uk_UA,json=ukUA,proto3" json:"uk_UA,omitempty"`       // Ukrainian
	Ur_PK   string `protobuf:"bytes,129,opt,name=ur_PK,json=urPK,proto3" json:"ur_PK,omitempty"`       // Urdu
	Uz_UZ   string `protobuf:"bytes,130,opt,name=uz_UZ,json=uzUZ,proto3" json:"uz_UZ,omitempty"`       // Uzbek
	Vi_VN   string `protobuf:"bytes,131,opt,name=vi_VN,json=viVN,proto3" json:"vi_VN,omitempty"`       // Vietnamese
	Xh_ZA   string `protobuf:"bytes,132,opt,name=xh_ZA,json=xhZA,proto3" json:"xh_ZA,omitempty"`       // Xhosa
	Yi_DE   string `protobuf:"bytes,133,opt,name=yi_DE,json=yiDE,proto3" json:"yi_DE,omitempty"`       // Yiddish (German)
	Zh_Hans string `protobuf:"bytes,134,opt,name=zh_Hans,json=zhHans,proto3" json:"zh_Hans,omitempty"` // Chinese Simplified
	Zh_Hant string `protobuf:"bytes,135,opt,name=zh_Hant,json=zhHant,proto3" json:"zh_Hant,omitempty"` // Chinese Traditional
	Zh_CN   string `protobuf:"bytes,136,opt,name=zh_CN,json=zhCN,proto3" json:"zh_CN,omitempty"`       // Chinese Simplified (China)
	Zh_HK   string `protobuf:"bytes,137,opt,name=zh_HK,json=zhHK,proto3" json:"zh_HK,omitempty"`       // Chinese Traditional (Hong Kong)
	Zh_SG   string `protobuf:"bytes,138,opt,name=zh_SG,json=zhSG,proto3" json:"zh_SG,omitempty"`       // Chinese Simplified (Singapore)
	Zh_TW   string `protobuf:"bytes,139,opt,name=zh_TW,json=zhTW,proto3" json:"zh_TW,omitempty"`       // Chinese Traditional (Taiwan)
	Zu_ZA   string `protobuf:"bytes,140,opt,name=zu_ZA,json=zuZA,proto3" json:"zu_ZA,omitempty"`       // Zulu
	Custom  string `protobuf:"bytes,250,opt,name=custom,proto3" json:"custom,omitempty"`
	Key     string `protobuf:"bytes,251,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *I18NString) Reset() {
	*x = I18NString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_locale_generated_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *I18NString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*I18NString) ProtoMessage() {}

func (x *I18NString) ProtoReflect() protoreflect.Message {
	mi := &file_locale_generated_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use I18NString.ProtoReflect.Descriptor instead.
func (*I18NString) Descriptor() ([]byte, []int) {
	return file_locale_generated_proto_rawDescGZIP(), []int{0}
}

func (x *I18NString) GetAf_NA() string {
	if x != nil {
		return x.Af_NA
	}
	return ""
}

func (x *I18NString) GetAf_ZA() string {
	if x != nil {
		return x.Af_ZA
	}
	return ""
}

func (x *I18NString) GetAr_AR() string {
	if x != nil {
		return x.Ar_AR
	}
	return ""
}

func (x *I18NString) GetAr_MA() string {
	if x != nil {
		return x.Ar_MA
	}
	return ""
}

func (x *I18NString) GetAr_SA() string {
	if x != nil {
		return x.Ar_SA
	}
	return ""
}

func (x *I18NString) GetAy_BO() string {
	if x != nil {
		return x.Ay_BO
	}
	return ""
}

func (x *I18NString) GetAz_AZ() string {
	if x != nil {
		return x.Az_AZ
	}
	return ""
}

func (x *I18NString) GetBe_BY() string {
	if x != nil {
		return x.Be_BY
	}
	return ""
}

func (x *I18NString) GetBg_BG() string {
	if x != nil {
		return x.Bg_BG
	}
	return ""
}

func (x *I18NString) GetBn_IN() string {
	if x != nil {
		return x.Bn_IN
	}
	return ""
}

func (x *I18NString) GetBn_BD() string {
	if x != nil {
		return x.Bn_BD
	}
	return ""
}

func (x *I18NString) GetBs_BA() string {
	if x != nil {
		return x.Bs_BA
	}
	return ""
}

func (x *I18NString) GetCa_ES() string {
	if x != nil {
		return x.Ca_ES
	}
	return ""
}

func (x *I18NString) GetCk_US() string {
	if x != nil {
		return x.Ck_US
	}
	return ""
}

func (x *I18NString) GetCs_CZ() string {
	if x != nil {
		return x.Cs_CZ
	}
	return ""
}

func (x *I18NString) GetCy_GB() string {
	if x != nil {
		return x.Cy_GB
	}
	return ""
}

func (x *I18NString) GetDa_DK() string {
	if x != nil {
		return x.Da_DK
	}
	return ""
}

func (x *I18NString) GetDe_AT() string {
	if x != nil {
		return x.De_AT
	}
	return ""
}

func (x *I18NString) GetDe_DE() string {
	if x != nil {
		return x.De_DE
	}
	return ""
}

func (x *I18NString) GetDe_CH() string {
	if x != nil {
		return x.De_CH
	}
	return ""
}

func (x *I18NString) GetEl_GR() string {
	if x != nil {
		return x.El_GR
	}
	return ""
}

func (x *I18NString) GetEn_GB() string {
	if x != nil {
		return x.En_GB
	}
	return ""
}

func (x *I18NString) GetEn_AU() string {
	if x != nil {
		return x.En_AU
	}
	return ""
}

func (x *I18NString) GetEn_CA() string {
	if x != nil {
		return x.En_CA
	}
	return ""
}

func (x *I18NString) GetEn_IE() string {
	if x != nil {
		return x.En_IE
	}
	return ""
}

func (x *I18NString) GetEn_IN() string {
	if x != nil {
		return x.En_IN
	}
	return ""
}

func (x *I18NString) GetEn_PI() string {
	if x != nil {
		return x.En_PI
	}
	return ""
}

func (x *I18NString) GetEn_UD() string {
	if x != nil {
		return x.En_UD
	}
	return ""
}

func (x *I18NString) GetEn_US() string {
	if x != nil {
		return x.En_US
	}
	return ""
}

func (x *I18NString) GetEn_ZA() string {
	if x != nil {
		return x.En_ZA
	}
	return ""
}

func (x *I18NString) GetEo_EO() string {
	if x != nil {
		return x.Eo_EO
	}
	return ""
}

func (x *I18NString) GetEs_AR() string {
	if x != nil {
		return x.Es_AR
	}
	return ""
}

func (x *I18NString) GetEs_419() string {
	if x != nil {
		return x.Es_419
	}
	return ""
}

func (x *I18NString) GetEs_CL() string {
	if x != nil {
		return x.Es_CL
	}
	return ""
}

func (x *I18NString) GetEs_CO() string {
	if x != nil {
		return x.Es_CO
	}
	return ""
}

func (x *I18NString) GetEs_EC() string {
	if x != nil {
		return x.Es_EC
	}
	return ""
}

func (x *I18NString) GetEs_ES() string {
	if x != nil {
		return x.Es_ES
	}
	return ""
}

func (x *I18NString) GetEs_LA() string {
	if x != nil {
		return x.Es_LA
	}
	return ""
}

func (x *I18NString) GetEs_NI() string {
	if x != nil {
		return x.Es_NI
	}
	return ""
}

func (x *I18NString) GetEs_MX() string {
	if x != nil {
		return x.Es_MX
	}
	return ""
}

func (x *I18NString) GetEs_US() string {
	if x != nil {
		return x.Es_US
	}
	return ""
}

func (x *I18NString) GetEs_VE() string {
	if x != nil {
		return x.Es_VE
	}
	return ""
}

func (x *I18NString) GetEt_EE() string {
	if x != nil {
		return x.Et_EE
	}
	return ""
}

func (x *I18NString) GetEu_ES() string {
	if x != nil {
		return x.Eu_ES
	}
	return ""
}

func (x *I18NString) GetFa_IR() string {
	if x != nil {
		return x.Fa_IR
	}
	return ""
}

func (x *I18NString) GetFb_LT() string {
	if x != nil {
		return x.Fb_LT
	}
	return ""
}

func (x *I18NString) GetFi_FI() string {
	if x != nil {
		return x.Fi_FI
	}
	return ""
}

func (x *I18NString) GetFo_FO() string {
	if x != nil {
		return x.Fo_FO
	}
	return ""
}

func (x *I18NString) GetFr_CA() string {
	if x != nil {
		return x.Fr_CA
	}
	return ""
}

func (x *I18NString) GetFr_FR() string {
	if x != nil {
		return x.Fr_FR
	}
	return ""
}

func (x *I18NString) GetFr_BE() string {
	if x != nil {
		return x.Fr_BE
	}
	return ""
}

func (x *I18NString) GetFr_CH() string {
	if x != nil {
		return x.Fr_CH
	}
	return ""
}

func (x *I18NString) GetFy_NL() string {
	if x != nil {
		return x.Fy_NL
	}
	return ""
}

func (x *I18NString) GetGa_IE() string {
	if x != nil {
		return x.Ga_IE
	}
	return ""
}

func (x *I18NString) GetGl_ES() string {
	if x != nil {
		return x.Gl_ES
	}
	return ""
}

func (x *I18NString) GetGn_PY() string {
	if x != nil {
		return x.Gn_PY
	}
	return ""
}

func (x *I18NString) GetGu_IN() string {
	if x != nil {
		return x.Gu_IN
	}
	return ""
}

func (x *I18NString) GetGx_GR() string {
	if x != nil {
		return x.Gx_GR
	}
	return ""
}

func (x *I18NString) GetHe_IL() string {
	if x != nil {
		return x.He_IL
	}
	return ""
}

func (x *I18NString) GetHi_IN() string {
	if x != nil {
		return x.Hi_IN
	}
	return ""
}

func (x *I18NString) GetHr_HR() string {
	if x != nil {
		return x.Hr_HR
	}
	return ""
}

func (x *I18NString) GetHu_HU() string {
	if x != nil {
		return x.Hu_HU
	}
	return ""
}

func (x *I18NString) GetHy_AM() string {
	if x != nil {
		return x.Hy_AM
	}
	return ""
}

func (x *I18NString) GetId_ID() string {
	if x != nil {
		return x.Id_ID
	}
	return ""
}

func (x *I18NString) GetIs_IS() string {
	if x != nil {
		return x.Is_IS
	}
	return ""
}

func (x *I18NString) GetIt_IT() string {
	if x != nil {
		return x.It_IT
	}
	return ""
}

func (x *I18NString) GetJa_JP() string {
	if x != nil {
		return x.Ja_JP
	}
	return ""
}

func (x *I18NString) GetJv_ID() string {
	if x != nil {
		return x.Jv_ID
	}
	return ""
}

func (x *I18NString) GetKa_GE() string {
	if x != nil {
		return x.Ka_GE
	}
	return ""
}

func (x *I18NString) GetKk_KZ() string {
	if x != nil {
		return x.Kk_KZ
	}
	return ""
}

func (x *I18NString) GetKm_KH() string {
	if x != nil {
		return x.Km_KH
	}
	return ""
}

func (x *I18NString) GetKn_IN() string {
	if x != nil {
		return x.Kn_IN
	}
	return ""
}

func (x *I18NString) GetKo_KR() string {
	if x != nil {
		return x.Ko_KR
	}
	return ""
}

func (x *I18NString) GetKu_TR() string {
	if x != nil {
		return x.Ku_TR
	}
	return ""
}

func (x *I18NString) GetLa_VA() string {
	if x != nil {
		return x.La_VA
	}
	return ""
}

func (x *I18NString) GetLi_NL() string {
	if x != nil {
		return x.Li_NL
	}
	return ""
}

func (x *I18NString) GetLt_LT() string {
	if x != nil {
		return x.Lt_LT
	}
	return ""
}

func (x *I18NString) GetLv_LV() string {
	if x != nil {
		return x.Lv_LV
	}
	return ""
}

func (x *I18NString) GetMg_MG() string {
	if x != nil {
		return x.Mg_MG
	}
	return ""
}

func (x *I18NString) GetMk_MK() string {
	if x != nil {
		return x.Mk_MK
	}
	return ""
}

func (x *I18NString) GetMl_IN() string {
	if x != nil {
		return x.Ml_IN
	}
	return ""
}

func (x *I18NString) GetMn_MN() string {
	if x != nil {
		return x.Mn_MN
	}
	return ""
}

func (x *I18NString) GetMr_IN() string {
	if x != nil {
		return x.Mr_IN
	}
	return ""
}

func (x *I18NString) GetMs_MY() string {
	if x != nil {
		return x.Ms_MY
	}
	return ""
}

func (x *I18NString) GetMt_MT() string {
	if x != nil {
		return x.Mt_MT
	}
	return ""
}

func (x *I18NString) GetNb_NO() string {
	if x != nil {
		return x.Nb_NO
	}
	return ""
}

func (x *I18NString) GetNe_NP() string {
	if x != nil {
		return x.Ne_NP
	}
	return ""
}

func (x *I18NString) GetNl_BE() string {
	if x != nil {
		return x.Nl_BE
	}
	return ""
}

func (x *I18NString) GetNl_NL() string {
	if x != nil {
		return x.Nl_NL
	}
	return ""
}

func (x *I18NString) GetNn_NO() string {
	if x != nil {
		return x.Nn_NO
	}
	return ""
}

func (x *I18NString) GetOr_IN() string {
	if x != nil {
		return x.Or_IN
	}
	return ""
}

func (x *I18NString) GetPa_IN() string {
	if x != nil {
		return x.Pa_IN
	}
	return ""
}

func (x *I18NString) GetPl_PL() string {
	if x != nil {
		return x.Pl_PL
	}
	return ""
}

func (x *I18NString) GetPs_AF() string {
	if x != nil {
		return x.Ps_AF
	}
	return ""
}

func (x *I18NString) GetPt_BR() string {
	if x != nil {
		return x.Pt_BR
	}
	return ""
}

func (x *I18NString) GetPt_PT() string {
	if x != nil {
		return x.Pt_PT
	}
	return ""
}

func (x *I18NString) GetQu_PE() string {
	if x != nil {
		return x.Qu_PE
	}
	return ""
}

func (x *I18NString) GetRm_CH() string {
	if x != nil {
		return x.Rm_CH
	}
	return ""
}

func (x *I18NString) GetRo_RO() string {
	if x != nil {
		return x.Ro_RO
	}
	return ""
}

func (x *I18NString) GetRu_RU() string {
	if x != nil {
		return x.Ru_RU
	}
	return ""
}

func (x *I18NString) GetSa_IN() string {
	if x != nil {
		return x.Sa_IN
	}
	return ""
}

func (x *I18NString) GetSe_NO() string {
	if x != nil {
		return x.Se_NO
	}
	return ""
}

func (x *I18NString) GetSi_LK() string {
	if x != nil {
		return x.Si_LK
	}
	return ""
}

func (x *I18NString) GetSk_SK() string {
	if x != nil {
		return x.Sk_SK
	}
	return ""
}

func (x *I18NString) GetSl_SI() string {
	if x != nil {
		return x.Sl_SI
	}
	return ""
}

func (x *I18NString) GetSo_SO() string {
	if x != nil {
		return x.So_SO
	}
	return ""
}

func (x *I18NString) GetSq_AL() string {
	if x != nil {
		return x.Sq_AL
	}
	return ""
}

func (x *I18NString) GetSr_RS() string {
	if x != nil {
		return x.Sr_RS
	}
	return ""
}

func (x *I18NString) GetSv_SE() string {
	if x != nil {
		return x.Sv_SE
	}
	return ""
}

func (x *I18NString) GetSw_KE() string {
	if x != nil {
		return x.Sw_KE
	}
	return ""
}

func (x *I18NString) GetTa_IN() string {
	if x != nil {
		return x.Ta_IN
	}
	return ""
}

func (x *I18NString) GetTe_IN() string {
	if x != nil {
		return x.Te_IN
	}
	return ""
}

func (x *I18NString) GetTg_TJ() string {
	if x != nil {
		return x.Tg_TJ
	}
	return ""
}

func (x *I18NString) GetTh_TH() string {
	if x != nil {
		return x.Th_TH
	}
	return ""
}

func (x *I18NString) GetTl_PH() string {
	if x != nil {
		return x.Tl_PH
	}
	return ""
}

func (x *I18NString) GetTr_TR() string {
	if x != nil {
		return x.Tr_TR
	}
	return ""
}

func (x *I18NString) GetTt_RU() string {
	if x != nil {
		return x.Tt_RU
	}
	return ""
}

func (x *I18NString) GetUk_UA() string {
	if x != nil {
		return x.Uk_UA
	}
	return ""
}

func (x *I18NString) GetUr_PK() string {
	if x != nil {
		return x.Ur_PK
	}
	return ""
}

func (x *I18NString) GetUz_UZ() string {
	if x != nil {
		return x.Uz_UZ
	}
	return ""
}

func (x *I18NString) GetVi_VN() string {
	if x != nil {
		return x.Vi_VN
	}
	return ""
}

func (x *I18NString) GetXh_ZA() string {
	if x != nil {
		return x.Xh_ZA
	}
	return ""
}

func (x *I18NString) GetYi_DE() string {
	if x != nil {
		return x.Yi_DE
	}
	return ""
}

func (x *I18NString) GetZh_Hans() string {
	if x != nil {
		return x.Zh_Hans
	}
	return ""
}

func (x *I18NString) GetZh_Hant() string {
	if x != nil {
		return x.Zh_Hant
	}
	return ""
}

func (x *I18NString) GetZh_CN() string {
	if x != nil {
		return x.Zh_CN
	}
	return ""
}

func (x *I18NString) GetZh_HK() string {
	if x != nil {
		return x.Zh_HK
	}
	return ""
}

func (x *I18NString) GetZh_SG() string {
	if x != nil {
		return x.Zh_SG
	}
	return ""
}

func (x *I18NString) GetZh_TW() string {
	if x != nil {
		return x.Zh_TW
	}
	return ""
}

func (x *I18NString) GetZu_ZA() string {
	if x != nil {
		return x.Zu_ZA
	}
	return ""
}

func (x *I18NString) GetCustom() string {
	if x != nil {
		return x.Custom
	}
	return ""
}

func (x *I18NString) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type Price struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currency string  `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	FPV      int64   `protobuf:"varint,3,opt,name=FPV,proto3" json:"FPV,omitempty"` // fixed point arithmetic value, see https://en.wikipedia.org/wiki/Fixed-point_arithmetic
	AFN      float32 `protobuf:"fixed32,10,opt,name=AFN,proto3" json:"AFN,omitempty"`
	EUR      float32 `protobuf:"fixed32,11,opt,name=EUR,proto3" json:"EUR,omitempty"`
	ALL      float32 `protobuf:"fixed32,12,opt,name=ALL,proto3" json:"ALL,omitempty"`
	DZD      float32 `protobuf:"fixed32,13,opt,name=DZD,proto3" json:"DZD,omitempty"`
	USD      float32 `protobuf:"fixed32,14,opt,name=USD,proto3" json:"USD,omitempty"`
	AOA      float32 `protobuf:"fixed32,15,opt,name=AOA,proto3" json:"AOA,omitempty"`
	XCD      float32 `protobuf:"fixed32,16,opt,name=XCD,proto3" json:"XCD,omitempty"`
	ARS      float32 `protobuf:"fixed32,17,opt,name=ARS,proto3" json:"ARS,omitempty"`
	AMD      float32 `protobuf:"fixed32,18,opt,name=AMD,proto3" json:"AMD,omitempty"`
	AWG      float32 `protobuf:"fixed32,19,opt,name=AWG,proto3" json:"AWG,omitempty"`
	AUD      float32 `protobuf:"fixed32,20,opt,name=AUD,proto3" json:"AUD,omitempty"`
	AZN      float32 `protobuf:"fixed32,21,opt,name=AZN,proto3" json:"AZN,omitempty"`
	BSD      float32 `protobuf:"fixed32,22,opt,name=BSD,proto3" json:"BSD,omitempty"`
	BHD      float32 `protobuf:"fixed32,23,opt,name=BHD,proto3" json:"BHD,omitempty"`
	BDT      float32 `protobuf:"fixed32,24,opt,name=BDT,proto3" json:"BDT,omitempty"`
	BBD      float32 `protobuf:"fixed32,25,opt,name=BBD,proto3" json:"BBD,omitempty"`
	BYN      float32 `protobuf:"fixed32,26,opt,name=BYN,proto3" json:"BYN,omitempty"`
	BZD      float32 `protobuf:"fixed32,27,opt,name=BZD,proto3" json:"BZD,omitempty"`
	XOF      float32 `protobuf:"fixed32,28,opt,name=XOF,proto3" json:"XOF,omitempty"`
	BMD      float32 `protobuf:"fixed32,29,opt,name=BMD,proto3" json:"BMD,omitempty"`
	INR      float32 `protobuf:"fixed32,30,opt,name=INR,proto3" json:"INR,omitempty"`
	BTN      float32 `protobuf:"fixed32,31,opt,name=BTN,proto3" json:"BTN,omitempty"`
	BOB      float32 `protobuf:"fixed32,32,opt,name=BOB,proto3" json:"BOB,omitempty"`
	BOV      float32 `protobuf:"fixed32,33,opt,name=BOV,proto3" json:"BOV,omitempty"`
	BAM      float32 `protobuf:"fixed32,34,opt,name=BAM,proto3" json:"BAM,omitempty"`
	BWP      float32 `protobuf:"fixed32,35,opt,name=BWP,proto3" json:"BWP,omitempty"`
	NOK      float32 `protobuf:"fixed32,36,opt,name=NOK,proto3" json:"NOK,omitempty"`
	BRL      float32 `protobuf:"fixed32,37,opt,name=BRL,proto3" json:"BRL,omitempty"`
	BND      float32 `protobuf:"fixed32,38,opt,name=BND,proto3" json:"BND,omitempty"`
	BGN      float32 `protobuf:"fixed32,39,opt,name=BGN,proto3" json:"BGN,omitempty"`
	BIF      float32 `protobuf:"fixed32,40,opt,name=BIF,proto3" json:"BIF,omitempty"`
	CVE      float32 `protobuf:"fixed32,41,opt,name=CVE,proto3" json:"CVE,omitempty"`
	KHR      float32 `protobuf:"fixed32,42,opt,name=KHR,proto3" json:"KHR,omitempty"`
	XAF      float32 `protobuf:"fixed32,43,opt,name=XAF,proto3" json:"XAF,omitempty"`
	CAD      float32 `protobuf:"fixed32,44,opt,name=CAD,proto3" json:"CAD,omitempty"`
	KYD      float32 `protobuf:"fixed32,45,opt,name=KYD,proto3" json:"KYD,omitempty"`
	CLP      float32 `protobuf:"fixed32,46,opt,name=CLP,proto3" json:"CLP,omitempty"`
	CLF      float32 `protobuf:"fixed32,47,opt,name=CLF,proto3" json:"CLF,omitempty"`
	CNY      float32 `protobuf:"fixed32,48,opt,name=CNY,proto3" json:"CNY,omitempty"`
	COP      float32 `protobuf:"fixed32,49,opt,name=COP,proto3" json:"COP,omitempty"`
	COU      float32 `protobuf:"fixed32,50,opt,name=COU,proto3" json:"COU,omitempty"`
	KMF      float32 `protobuf:"fixed32,51,opt,name=KMF,proto3" json:"KMF,omitempty"`
	CDF      float32 `protobuf:"fixed32,52,opt,name=CDF,proto3" json:"CDF,omitempty"`
	NZD      float32 `protobuf:"fixed32,53,opt,name=NZD,proto3" json:"NZD,omitempty"`
	CRC      float32 `protobuf:"fixed32,54,opt,name=CRC,proto3" json:"CRC,omitempty"`
	HRK      float32 `protobuf:"fixed32,55,opt,name=HRK,proto3" json:"HRK,omitempty"`
	CUP      float32 `protobuf:"fixed32,56,opt,name=CUP,proto3" json:"CUP,omitempty"`
	CUC      float32 `protobuf:"fixed32,57,opt,name=CUC,proto3" json:"CUC,omitempty"`
	ANG      float32 `protobuf:"fixed32,58,opt,name=ANG,proto3" json:"ANG,omitempty"`
	CZK      float32 `protobuf:"fixed32,59,opt,name=CZK,proto3" json:"CZK,omitempty"`
	DKK      float32 `protobuf:"fixed32,60,opt,name=DKK,proto3" json:"DKK,omitempty"`
	DJF      float32 `protobuf:"fixed32,61,opt,name=DJF,proto3" json:"DJF,omitempty"`
	DOP      float32 `protobuf:"fixed32,62,opt,name=DOP,proto3" json:"DOP,omitempty"`
	EGP      float32 `protobuf:"fixed32,63,opt,name=EGP,proto3" json:"EGP,omitempty"`
	SVC      float32 `protobuf:"fixed32,64,opt,name=SVC,proto3" json:"SVC,omitempty"`
	ERN      float32 `protobuf:"fixed32,65,opt,name=ERN,proto3" json:"ERN,omitempty"`
	SZL      float32 `protobuf:"fixed32,66,opt,name=SZL,proto3" json:"SZL,omitempty"`
	ETB      float32 `protobuf:"fixed32,67,opt,name=ETB,proto3" json:"ETB,omitempty"`
	FKP      float32 `protobuf:"fixed32,68,opt,name=FKP,proto3" json:"FKP,omitempty"`
	FJD      float32 `protobuf:"fixed32,69,opt,name=FJD,proto3" json:"FJD,omitempty"`
	XPF      float32 `protobuf:"fixed32,70,opt,name=XPF,proto3" json:"XPF,omitempty"`
	GMD      float32 `protobuf:"fixed32,71,opt,name=GMD,proto3" json:"GMD,omitempty"`
	GEL      float32 `protobuf:"fixed32,72,opt,name=GEL,proto3" json:"GEL,omitempty"`
	GHS      float32 `protobuf:"fixed32,73,opt,name=GHS,proto3" json:"GHS,omitempty"`
	GIP      float32 `protobuf:"fixed32,74,opt,name=GIP,proto3" json:"GIP,omitempty"`
	GTQ      float32 `protobuf:"fixed32,75,opt,name=GTQ,proto3" json:"GTQ,omitempty"`
	GBP      float32 `protobuf:"fixed32,76,opt,name=GBP,proto3" json:"GBP,omitempty"`
	GNF      float32 `protobuf:"fixed32,77,opt,name=GNF,proto3" json:"GNF,omitempty"`
	GYD      float32 `protobuf:"fixed32,78,opt,name=GYD,proto3" json:"GYD,omitempty"`
	HTG      float32 `protobuf:"fixed32,79,opt,name=HTG,proto3" json:"HTG,omitempty"`
	HNL      float32 `protobuf:"fixed32,80,opt,name=HNL,proto3" json:"HNL,omitempty"`
	HKD      float32 `protobuf:"fixed32,81,opt,name=HKD,proto3" json:"HKD,omitempty"`
	HUF      float32 `protobuf:"fixed32,82,opt,name=HUF,proto3" json:"HUF,omitempty"`
	ISK      float32 `protobuf:"fixed32,83,opt,name=ISK,proto3" json:"ISK,omitempty"`
	IDR      float32 `protobuf:"fixed32,84,opt,name=IDR,proto3" json:"IDR,omitempty"`
	XDR      float32 `protobuf:"fixed32,85,opt,name=XDR,proto3" json:"XDR,omitempty"`
	IRR      float32 `protobuf:"fixed32,86,opt,name=IRR,proto3" json:"IRR,omitempty"`
	IQD      float32 `protobuf:"fixed32,87,opt,name=IQD,proto3" json:"IQD,omitempty"`
	ILS      float32 `protobuf:"fixed32,88,opt,name=ILS,proto3" json:"ILS,omitempty"`
	JMD      float32 `protobuf:"fixed32,89,opt,name=JMD,proto3" json:"JMD,omitempty"`
	JPY      float32 `protobuf:"fixed32,90,opt,name=JPY,proto3" json:"JPY,omitempty"`
	JOD      float32 `protobuf:"fixed32,91,opt,name=JOD,proto3" json:"JOD,omitempty"`
	KZT      float32 `protobuf:"fixed32,92,opt,name=KZT,proto3" json:"KZT,omitempty"`
	KES      float32 `protobuf:"fixed32,93,opt,name=KES,proto3" json:"KES,omitempty"`
	KPW      float32 `protobuf:"fixed32,94,opt,name=KPW,proto3" json:"KPW,omitempty"`
	KRW      float32 `protobuf:"fixed32,95,opt,name=KRW,proto3" json:"KRW,omitempty"`
	KWD      float32 `protobuf:"fixed32,96,opt,name=KWD,proto3" json:"KWD,omitempty"`
	KGS      float32 `protobuf:"fixed32,97,opt,name=KGS,proto3" json:"KGS,omitempty"`
	LAK      float32 `protobuf:"fixed32,98,opt,name=LAK,proto3" json:"LAK,omitempty"`
	LBP      float32 `protobuf:"fixed32,99,opt,name=LBP,proto3" json:"LBP,omitempty"`
	LSL      float32 `protobuf:"fixed32,100,opt,name=LSL,proto3" json:"LSL,omitempty"`
	ZAR      float32 `protobuf:"fixed32,101,opt,name=ZAR,proto3" json:"ZAR,omitempty"`
	LRD      float32 `protobuf:"fixed32,102,opt,name=LRD,proto3" json:"LRD,omitempty"`
	LYD      float32 `protobuf:"fixed32,103,opt,name=LYD,proto3" json:"LYD,omitempty"`
	CHF      float32 `protobuf:"fixed32,104,opt,name=CHF,proto3" json:"CHF,omitempty"`
	MOP      float32 `protobuf:"fixed32,105,opt,name=MOP,proto3" json:"MOP,omitempty"`
	MKD      float32 `protobuf:"fixed32,106,opt,name=MKD,proto3" json:"MKD,omitempty"`
	MGA      float32 `protobuf:"fixed32,107,opt,name=MGA,proto3" json:"MGA,omitempty"`
	MWK      float32 `protobuf:"fixed32,108,opt,name=MWK,proto3" json:"MWK,omitempty"`
	MYR      float32 `protobuf:"fixed32,109,opt,name=MYR,proto3" json:"MYR,omitempty"`
	MVR      float32 `protobuf:"fixed32,110,opt,name=MVR,proto3" json:"MVR,omitempty"`
	MRU      float32 `protobuf:"fixed32,111,opt,name=MRU,proto3" json:"MRU,omitempty"`
	MUR      float32 `protobuf:"fixed32,112,opt,name=MUR,proto3" json:"MUR,omitempty"`
	XUA      float32 `protobuf:"fixed32,113,opt,name=XUA,proto3" json:"XUA,omitempty"`
	MXN      float32 `protobuf:"fixed32,114,opt,name=MXN,proto3" json:"MXN,omitempty"`
	MXV      float32 `protobuf:"fixed32,115,opt,name=MXV,proto3" json:"MXV,omitempty"`
	MDL      float32 `protobuf:"fixed32,116,opt,name=MDL,proto3" json:"MDL,omitempty"`
	MNT      float32 `protobuf:"fixed32,117,opt,name=MNT,proto3" json:"MNT,omitempty"`
	MAD      float32 `protobuf:"fixed32,118,opt,name=MAD,proto3" json:"MAD,omitempty"`
	MZN      float32 `protobuf:"fixed32,119,opt,name=MZN,proto3" json:"MZN,omitempty"`
	MMK      float32 `protobuf:"fixed32,120,opt,name=MMK,proto3" json:"MMK,omitempty"`
	NAD      float32 `protobuf:"fixed32,121,opt,name=NAD,proto3" json:"NAD,omitempty"`
	NPR      float32 `protobuf:"fixed32,122,opt,name=NPR,proto3" json:"NPR,omitempty"`
	NIO      float32 `protobuf:"fixed32,123,opt,name=NIO,proto3" json:"NIO,omitempty"`
	NGN      float32 `protobuf:"fixed32,124,opt,name=NGN,proto3" json:"NGN,omitempty"`
	OMR      float32 `protobuf:"fixed32,125,opt,name=OMR,proto3" json:"OMR,omitempty"`
	PKR      float32 `protobuf:"fixed32,126,opt,name=PKR,proto3" json:"PKR,omitempty"`
	PAB      float32 `protobuf:"fixed32,127,opt,name=PAB,proto3" json:"PAB,omitempty"`
	PGK      float32 `protobuf:"fixed32,128,opt,name=PGK,proto3" json:"PGK,omitempty"`
	PYG      float32 `protobuf:"fixed32,129,opt,name=PYG,proto3" json:"PYG,omitempty"`
	PEN      float32 `protobuf:"fixed32,130,opt,name=PEN,proto3" json:"PEN,omitempty"`
	PHP      float32 `protobuf:"fixed32,131,opt,name=PHP,proto3" json:"PHP,omitempty"`
	PLN      float32 `protobuf:"fixed32,132,opt,name=PLN,proto3" json:"PLN,omitempty"`
	QAR      float32 `protobuf:"fixed32,133,opt,name=QAR,proto3" json:"QAR,omitempty"`
	RON      float32 `protobuf:"fixed32,134,opt,name=RON,proto3" json:"RON,omitempty"`
	RUB      float32 `protobuf:"fixed32,135,opt,name=RUB,proto3" json:"RUB,omitempty"`
	RWF      float32 `protobuf:"fixed32,136,opt,name=RWF,proto3" json:"RWF,omitempty"`
	SHP      float32 `protobuf:"fixed32,137,opt,name=SHP,proto3" json:"SHP,omitempty"`
	WST      float32 `protobuf:"fixed32,138,opt,name=WST,proto3" json:"WST,omitempty"`
	STN      float32 `protobuf:"fixed32,139,opt,name=STN,proto3" json:"STN,omitempty"`
	SAR      float32 `protobuf:"fixed32,140,opt,name=SAR,proto3" json:"SAR,omitempty"`
	RSD      float32 `protobuf:"fixed32,141,opt,name=RSD,proto3" json:"RSD,omitempty"`
	SCR      float32 `protobuf:"fixed32,142,opt,name=SCR,proto3" json:"SCR,omitempty"`
	SLL      float32 `protobuf:"fixed32,143,opt,name=SLL,proto3" json:"SLL,omitempty"`
	SGD      float32 `protobuf:"fixed32,144,opt,name=SGD,proto3" json:"SGD,omitempty"`
	XSU      float32 `protobuf:"fixed32,145,opt,name=XSU,proto3" json:"XSU,omitempty"`
	SBD      float32 `protobuf:"fixed32,146,opt,name=SBD,proto3" json:"SBD,omitempty"`
	SOS      float32 `protobuf:"fixed32,147,opt,name=SOS,proto3" json:"SOS,omitempty"`
	SSP      float32 `protobuf:"fixed32,148,opt,name=SSP,proto3" json:"SSP,omitempty"`
	LKR      float32 `protobuf:"fixed32,149,opt,name=LKR,proto3" json:"LKR,omitempty"`
	SDG      float32 `protobuf:"fixed32,150,opt,name=SDG,proto3" json:"SDG,omitempty"`
	SRD      float32 `protobuf:"fixed32,151,opt,name=SRD,proto3" json:"SRD,omitempty"`
	SEK      float32 `protobuf:"fixed32,152,opt,name=SEK,proto3" json:"SEK,omitempty"`
	CHE      float32 `protobuf:"fixed32,153,opt,name=CHE,proto3" json:"CHE,omitempty"`
	CHW      float32 `protobuf:"fixed32,154,opt,name=CHW,proto3" json:"CHW,omitempty"`
	SYP      float32 `protobuf:"fixed32,155,opt,name=SYP,proto3" json:"SYP,omitempty"`
	TWD      float32 `protobuf:"fixed32,156,opt,name=TWD,proto3" json:"TWD,omitempty"`
	TJS      float32 `protobuf:"fixed32,157,opt,name=TJS,proto3" json:"TJS,omitempty"`
	TZS      float32 `protobuf:"fixed32,158,opt,name=TZS,proto3" json:"TZS,omitempty"`
	THB      float32 `protobuf:"fixed32,159,opt,name=THB,proto3" json:"THB,omitempty"`
	TOP      float32 `protobuf:"fixed32,160,opt,name=TOP,proto3" json:"TOP,omitempty"`
	TTD      float32 `protobuf:"fixed32,161,opt,name=TTD,proto3" json:"TTD,omitempty"`
	TND      float32 `protobuf:"fixed32,162,opt,name=TND,proto3" json:"TND,omitempty"`
	TRY      float32 `protobuf:"fixed32,163,opt,name=TRY,proto3" json:"TRY,omitempty"`
	TMT      float32 `protobuf:"fixed32,164,opt,name=TMT,proto3" json:"TMT,omitempty"`
	UGX      float32 `protobuf:"fixed32,165,opt,name=UGX,proto3" json:"UGX,omitempty"`
	UAH      float32 `protobuf:"fixed32,166,opt,name=UAH,proto3" json:"UAH,omitempty"`
	AED      float32 `protobuf:"fixed32,167,opt,name=AED,proto3" json:"AED,omitempty"`
	USN      float32 `protobuf:"fixed32,168,opt,name=USN,proto3" json:"USN,omitempty"`
	UYU      float32 `protobuf:"fixed32,169,opt,name=UYU,proto3" json:"UYU,omitempty"`
	UYI      float32 `protobuf:"fixed32,170,opt,name=UYI,proto3" json:"UYI,omitempty"`
	UYW      float32 `protobuf:"fixed32,171,opt,name=UYW,proto3" json:"UYW,omitempty"`
	UZS      float32 `protobuf:"fixed32,172,opt,name=UZS,proto3" json:"UZS,omitempty"`
	VUV      float32 `protobuf:"fixed32,173,opt,name=VUV,proto3" json:"VUV,omitempty"`
	VES      float32 `protobuf:"fixed32,174,opt,name=VES,proto3" json:"VES,omitempty"`
	VED      float32 `protobuf:"fixed32,175,opt,name=VED,proto3" json:"VED,omitempty"`
	VND      float32 `protobuf:"fixed32,176,opt,name=VND,proto3" json:"VND,omitempty"`
	YER      float32 `protobuf:"fixed32,177,opt,name=YER,proto3" json:"YER,omitempty"`
	ZMW      float32 `protobuf:"fixed32,178,opt,name=ZMW,proto3" json:"ZMW,omitempty"`
	ZWL      float32 `protobuf:"fixed32,179,opt,name=ZWL,proto3" json:"ZWL,omitempty"`
	XBA      float32 `protobuf:"fixed32,180,opt,name=XBA,proto3" json:"XBA,omitempty"`
	XBB      float32 `protobuf:"fixed32,181,opt,name=XBB,proto3" json:"XBB,omitempty"`
	XBC      float32 `protobuf:"fixed32,182,opt,name=XBC,proto3" json:"XBC,omitempty"`
	XBD      float32 `protobuf:"fixed32,183,opt,name=XBD,proto3" json:"XBD,omitempty"`
	XTS      float32 `protobuf:"fixed32,184,opt,name=XTS,proto3" json:"XTS,omitempty"`
	XXX      float32 `protobuf:"fixed32,185,opt,name=XXX,proto3" json:"XXX,omitempty"`
	XAU      float32 `protobuf:"fixed32,186,opt,name=XAU,proto3" json:"XAU,omitempty"`
	XPD      float32 `protobuf:"fixed32,187,opt,name=XPD,proto3" json:"XPD,omitempty"`
	XPT      float32 `protobuf:"fixed32,188,opt,name=XPT,proto3" json:"XPT,omitempty"`
	XAG      float32 `protobuf:"fixed32,189,opt,name=XAG,proto3" json:"XAG,omitempty"`
}

func (x *Price) Reset() {
	*x = Price{}
	if protoimpl.UnsafeEnabled {
		mi := &file_locale_generated_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Price) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Price) ProtoMessage() {}

func (x *Price) ProtoReflect() protoreflect.Message {
	mi := &file_locale_generated_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Price.ProtoReflect.Descriptor instead.
func (*Price) Descriptor() ([]byte, []int) {
	return file_locale_generated_proto_rawDescGZIP(), []int{1}
}

func (x *Price) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Price) GetFPV() int64 {
	if x != nil {
		return x.FPV
	}
	return 0
}

func (x *Price) GetAFN() float32 {
	if x != nil {
		return x.AFN
	}
	return 0
}

func (x *Price) GetEUR() float32 {
	if x != nil {
		return x.EUR
	}
	return 0
}

func (x *Price) GetALL() float32 {
	if x != nil {
		return x.ALL
	}
	return 0
}

func (x *Price) GetDZD() float32 {
	if x != nil {
		return x.DZD
	}
	return 0
}

func (x *Price) GetUSD() float32 {
	if x != nil {
		return x.USD
	}
	return 0
}

func (x *Price) GetAOA() float32 {
	if x != nil {
		return x.AOA
	}
	return 0
}

func (x *Price) GetXCD() float32 {
	if x != nil {
		return x.XCD
	}
	return 0
}

func (x *Price) GetARS() float32 {
	if x != nil {
		return x.ARS
	}
	return 0
}

func (x *Price) GetAMD() float32 {
	if x != nil {
		return x.AMD
	}
	return 0
}

func (x *Price) GetAWG() float32 {
	if x != nil {
		return x.AWG
	}
	return 0
}

func (x *Price) GetAUD() float32 {
	if x != nil {
		return x.AUD
	}
	return 0
}

func (x *Price) GetAZN() float32 {
	if x != nil {
		return x.AZN
	}
	return 0
}

func (x *Price) GetBSD() float32 {
	if x != nil {
		return x.BSD
	}
	return 0
}

func (x *Price) GetBHD() float32 {
	if x != nil {
		return x.BHD
	}
	return 0
}

func (x *Price) GetBDT() float32 {
	if x != nil {
		return x.BDT
	}
	return 0
}

func (x *Price) GetBBD() float32 {
	if x != nil {
		return x.BBD
	}
	return 0
}

func (x *Price) GetBYN() float32 {
	if x != nil {
		return x.BYN
	}
	return 0
}

func (x *Price) GetBZD() float32 {
	if x != nil {
		return x.BZD
	}
	return 0
}

func (x *Price) GetXOF() float32 {
	if x != nil {
		return x.XOF
	}
	return 0
}

func (x *Price) GetBMD() float32 {
	if x != nil {
		return x.BMD
	}
	return 0
}

func (x *Price) GetINR() float32 {
	if x != nil {
		return x.INR
	}
	return 0
}

func (x *Price) GetBTN() float32 {
	if x != nil {
		return x.BTN
	}
	return 0
}

func (x *Price) GetBOB() float32 {
	if x != nil {
		return x.BOB
	}
	return 0
}

func (x *Price) GetBOV() float32 {
	if x != nil {
		return x.BOV
	}
	return 0
}

func (x *Price) GetBAM() float32 {
	if x != nil {
		return x.BAM
	}
	return 0
}

func (x *Price) GetBWP() float32 {
	if x != nil {
		return x.BWP
	}
	return 0
}

func (x *Price) GetNOK() float32 {
	if x != nil {
		return x.NOK
	}
	return 0
}

func (x *Price) GetBRL() float32 {
	if x != nil {
		return x.BRL
	}
	return 0
}

func (x *Price) GetBND() float32 {
	if x != nil {
		return x.BND
	}
	return 0
}

func (x *Price) GetBGN() float32 {
	if x != nil {
		return x.BGN
	}
	return 0
}

func (x *Price) GetBIF() float32 {
	if x != nil {
		return x.BIF
	}
	return 0
}

func (x *Price) GetCVE() float32 {
	if x != nil {
		return x.CVE
	}
	return 0
}

func (x *Price) GetKHR() float32 {
	if x != nil {
		return x.KHR
	}
	return 0
}

func (x *Price) GetXAF() float32 {
	if x != nil {
		return x.XAF
	}
	return 0
}

func (x *Price) GetCAD() float32 {
	if x != nil {
		return x.CAD
	}
	return 0
}

func (x *Price) GetKYD() float32 {
	if x != nil {
		return x.KYD
	}
	return 0
}

func (x *Price) GetCLP() float32 {
	if x != nil {
		return x.CLP
	}
	return 0
}

func (x *Price) GetCLF() float32 {
	if x != nil {
		return x.CLF
	}
	return 0
}

func (x *Price) GetCNY() float32 {
	if x != nil {
		return x.CNY
	}
	return 0
}

func (x *Price) GetCOP() float32 {
	if x != nil {
		return x.COP
	}
	return 0
}

func (x *Price) GetCOU() float32 {
	if x != nil {
		return x.COU
	}
	return 0
}

func (x *Price) GetKMF() float32 {
	if x != nil {
		return x.KMF
	}
	return 0
}

func (x *Price) GetCDF() float32 {
	if x != nil {
		return x.CDF
	}
	return 0
}

func (x *Price) GetNZD() float32 {
	if x != nil {
		return x.NZD
	}
	return 0
}

func (x *Price) GetCRC() float32 {
	if x != nil {
		return x.CRC
	}
	return 0
}

func (x *Price) GetHRK() float32 {
	if x != nil {
		return x.HRK
	}
	return 0
}

func (x *Price) GetCUP() float32 {
	if x != nil {
		return x.CUP
	}
	return 0
}

func (x *Price) GetCUC() float32 {
	if x != nil {
		return x.CUC
	}
	return 0
}

func (x *Price) GetANG() float32 {
	if x != nil {
		return x.ANG
	}
	return 0
}

func (x *Price) GetCZK() float32 {
	if x != nil {
		return x.CZK
	}
	return 0
}

func (x *Price) GetDKK() float32 {
	if x != nil {
		return x.DKK
	}
	return 0
}

func (x *Price) GetDJF() float32 {
	if x != nil {
		return x.DJF
	}
	return 0
}

func (x *Price) GetDOP() float32 {
	if x != nil {
		return x.DOP
	}
	return 0
}

func (x *Price) GetEGP() float32 {
	if x != nil {
		return x.EGP
	}
	return 0
}

func (x *Price) GetSVC() float32 {
	if x != nil {
		return x.SVC
	}
	return 0
}

func (x *Price) GetERN() float32 {
	if x != nil {
		return x.ERN
	}
	return 0
}

func (x *Price) GetSZL() float32 {
	if x != nil {
		return x.SZL
	}
	return 0
}

func (x *Price) GetETB() float32 {
	if x != nil {
		return x.ETB
	}
	return 0
}

func (x *Price) GetFKP() float32 {
	if x != nil {
		return x.FKP
	}
	return 0
}

func (x *Price) GetFJD() float32 {
	if x != nil {
		return x.FJD
	}
	return 0
}

func (x *Price) GetXPF() float32 {
	if x != nil {
		return x.XPF
	}
	return 0
}

func (x *Price) GetGMD() float32 {
	if x != nil {
		return x.GMD
	}
	return 0
}

func (x *Price) GetGEL() float32 {
	if x != nil {
		return x.GEL
	}
	return 0
}

func (x *Price) GetGHS() float32 {
	if x != nil {
		return x.GHS
	}
	return 0
}

func (x *Price) GetGIP() float32 {
	if x != nil {
		return x.GIP
	}
	return 0
}

func (x *Price) GetGTQ() float32 {
	if x != nil {
		return x.GTQ
	}
	return 0
}

func (x *Price) GetGBP() float32 {
	if x != nil {
		return x.GBP
	}
	return 0
}

func (x *Price) GetGNF() float32 {
	if x != nil {
		return x.GNF
	}
	return 0
}

func (x *Price) GetGYD() float32 {
	if x != nil {
		return x.GYD
	}
	return 0
}

func (x *Price) GetHTG() float32 {
	if x != nil {
		return x.HTG
	}
	return 0
}

func (x *Price) GetHNL() float32 {
	if x != nil {
		return x.HNL
	}
	return 0
}

func (x *Price) GetHKD() float32 {
	if x != nil {
		return x.HKD
	}
	return 0
}

func (x *Price) GetHUF() float32 {
	if x != nil {
		return x.HUF
	}
	return 0
}

func (x *Price) GetISK() float32 {
	if x != nil {
		return x.ISK
	}
	return 0
}

func (x *Price) GetIDR() float32 {
	if x != nil {
		return x.IDR
	}
	return 0
}

func (x *Price) GetXDR() float32 {
	if x != nil {
		return x.XDR
	}
	return 0
}

func (x *Price) GetIRR() float32 {
	if x != nil {
		return x.IRR
	}
	return 0
}

func (x *Price) GetIQD() float32 {
	if x != nil {
		return x.IQD
	}
	return 0
}

func (x *Price) GetILS() float32 {
	if x != nil {
		return x.ILS
	}
	return 0
}

func (x *Price) GetJMD() float32 {
	if x != nil {
		return x.JMD
	}
	return 0
}

func (x *Price) GetJPY() float32 {
	if x != nil {
		return x.JPY
	}
	return 0
}

func (x *Price) GetJOD() float32 {
	if x != nil {
		return x.JOD
	}
	return 0
}

func (x *Price) GetKZT() float32 {
	if x != nil {
		return x.KZT
	}
	return 0
}

func (x *Price) GetKES() float32 {
	if x != nil {
		return x.KES
	}
	return 0
}

func (x *Price) GetKPW() float32 {
	if x != nil {
		return x.KPW
	}
	return 0
}

func (x *Price) GetKRW() float32 {
	if x != nil {
		return x.KRW
	}
	return 0
}

func (x *Price) GetKWD() float32 {
	if x != nil {
		return x.KWD
	}
	return 0
}

func (x *Price) GetKGS() float32 {
	if x != nil {
		return x.KGS
	}
	return 0
}

func (x *Price) GetLAK() float32 {
	if x != nil {
		return x.LAK
	}
	return 0
}

func (x *Price) GetLBP() float32 {
	if x != nil {
		return x.LBP
	}
	return 0
}

func (x *Price) GetLSL() float32 {
	if x != nil {
		return x.LSL
	}
	return 0
}

func (x *Price) GetZAR() float32 {
	if x != nil {
		return x.ZAR
	}
	return 0
}

func (x *Price) GetLRD() float32 {
	if x != nil {
		return x.LRD
	}
	return 0
}

func (x *Price) GetLYD() float32 {
	if x != nil {
		return x.LYD
	}
	return 0
}

func (x *Price) GetCHF() float32 {
	if x != nil {
		return x.CHF
	}
	return 0
}

func (x *Price) GetMOP() float32 {
	if x != nil {
		return x.MOP
	}
	return 0
}

func (x *Price) GetMKD() float32 {
	if x != nil {
		return x.MKD
	}
	return 0
}

func (x *Price) GetMGA() float32 {
	if x != nil {
		return x.MGA
	}
	return 0
}

func (x *Price) GetMWK() float32 {
	if x != nil {
		return x.MWK
	}
	return 0
}

func (x *Price) GetMYR() float32 {
	if x != nil {
		return x.MYR
	}
	return 0
}

func (x *Price) GetMVR() float32 {
	if x != nil {
		return x.MVR
	}
	return 0
}

func (x *Price) GetMRU() float32 {
	if x != nil {
		return x.MRU
	}
	return 0
}

func (x *Price) GetMUR() float32 {
	if x != nil {
		return x.MUR
	}
	return 0
}

func (x *Price) GetXUA() float32 {
	if x != nil {
		return x.XUA
	}
	return 0
}

func (x *Price) GetMXN() float32 {
	if x != nil {
		return x.MXN
	}
	return 0
}

func (x *Price) GetMXV() float32 {
	if x != nil {
		return x.MXV
	}
	return 0
}

func (x *Price) GetMDL() float32 {
	if x != nil {
		return x.MDL
	}
	return 0
}

func (x *Price) GetMNT() float32 {
	if x != nil {
		return x.MNT
	}
	return 0
}

func (x *Price) GetMAD() float32 {
	if x != nil {
		return x.MAD
	}
	return 0
}

func (x *Price) GetMZN() float32 {
	if x != nil {
		return x.MZN
	}
	return 0
}

func (x *Price) GetMMK() float32 {
	if x != nil {
		return x.MMK
	}
	return 0
}

func (x *Price) GetNAD() float32 {
	if x != nil {
		return x.NAD
	}
	return 0
}

func (x *Price) GetNPR() float32 {
	if x != nil {
		return x.NPR
	}
	return 0
}

func (x *Price) GetNIO() float32 {
	if x != nil {
		return x.NIO
	}
	return 0
}

func (x *Price) GetNGN() float32 {
	if x != nil {
		return x.NGN
	}
	return 0
}

func (x *Price) GetOMR() float32 {
	if x != nil {
		return x.OMR
	}
	return 0
}

func (x *Price) GetPKR() float32 {
	if x != nil {
		return x.PKR
	}
	return 0
}

func (x *Price) GetPAB() float32 {
	if x != nil {
		return x.PAB
	}
	return 0
}

func (x *Price) GetPGK() float32 {
	if x != nil {
		return x.PGK
	}
	return 0
}

func (x *Price) GetPYG() float32 {
	if x != nil {
		return x.PYG
	}
	return 0
}

func (x *Price) GetPEN() float32 {
	if x != nil {
		return x.PEN
	}
	return 0
}

func (x *Price) GetPHP() float32 {
	if x != nil {
		return x.PHP
	}
	return 0
}

func (x *Price) GetPLN() float32 {
	if x != nil {
		return x.PLN
	}
	return 0
}

func (x *Price) GetQAR() float32 {
	if x != nil {
		return x.QAR
	}
	return 0
}

func (x *Price) GetRON() float32 {
	if x != nil {
		return x.RON
	}
	return 0
}

func (x *Price) GetRUB() float32 {
	if x != nil {
		return x.RUB
	}
	return 0
}

func (x *Price) GetRWF() float32 {
	if x != nil {
		return x.RWF
	}
	return 0
}

func (x *Price) GetSHP() float32 {
	if x != nil {
		return x.SHP
	}
	return 0
}

func (x *Price) GetWST() float32 {
	if x != nil {
		return x.WST
	}
	return 0
}

func (x *Price) GetSTN() float32 {
	if x != nil {
		return x.STN
	}
	return 0
}

func (x *Price) GetSAR() float32 {
	if x != nil {
		return x.SAR
	}
	return 0
}

func (x *Price) GetRSD() float32 {
	if x != nil {
		return x.RSD
	}
	return 0
}

func (x *Price) GetSCR() float32 {
	if x != nil {
		return x.SCR
	}
	return 0
}

func (x *Price) GetSLL() float32 {
	if x != nil {
		return x.SLL
	}
	return 0
}

func (x *Price) GetSGD() float32 {
	if x != nil {
		return x.SGD
	}
	return 0
}

func (x *Price) GetXSU() float32 {
	if x != nil {
		return x.XSU
	}
	return 0
}

func (x *Price) GetSBD() float32 {
	if x != nil {
		return x.SBD
	}
	return 0
}

func (x *Price) GetSOS() float32 {
	if x != nil {
		return x.SOS
	}
	return 0
}

func (x *Price) GetSSP() float32 {
	if x != nil {
		return x.SSP
	}
	return 0
}

func (x *Price) GetLKR() float32 {
	if x != nil {
		return x.LKR
	}
	return 0
}

func (x *Price) GetSDG() float32 {
	if x != nil {
		return x.SDG
	}
	return 0
}

func (x *Price) GetSRD() float32 {
	if x != nil {
		return x.SRD
	}
	return 0
}

func (x *Price) GetSEK() float32 {
	if x != nil {
		return x.SEK
	}
	return 0
}

func (x *Price) GetCHE() float32 {
	if x != nil {
		return x.CHE
	}
	return 0
}

func (x *Price) GetCHW() float32 {
	if x != nil {
		return x.CHW
	}
	return 0
}

func (x *Price) GetSYP() float32 {
	if x != nil {
		return x.SYP
	}
	return 0
}

func (x *Price) GetTWD() float32 {
	if x != nil {
		return x.TWD
	}
	return 0
}

func (x *Price) GetTJS() float32 {
	if x != nil {
		return x.TJS
	}
	return 0
}

func (x *Price) GetTZS() float32 {
	if x != nil {
		return x.TZS
	}
	return 0
}

func (x *Price) GetTHB() float32 {
	if x != nil {
		return x.THB
	}
	return 0
}

func (x *Price) GetTOP() float32 {
	if x != nil {
		return x.TOP
	}
	return 0
}

func (x *Price) GetTTD() float32 {
	if x != nil {
		return x.TTD
	}
	return 0
}

func (x *Price) GetTND() float32 {
	if x != nil {
		return x.TND
	}
	return 0
}

func (x *Price) GetTRY() float32 {
	if x != nil {
		return x.TRY
	}
	return 0
}

func (x *Price) GetTMT() float32 {
	if x != nil {
		return x.TMT
	}
	return 0
}

func (x *Price) GetUGX() float32 {
	if x != nil {
		return x.UGX
	}
	return 0
}

func (x *Price) GetUAH() float32 {
	if x != nil {
		return x.UAH
	}
	return 0
}

func (x *Price) GetAED() float32 {
	if x != nil {
		return x.AED
	}
	return 0
}

func (x *Price) GetUSN() float32 {
	if x != nil {
		return x.USN
	}
	return 0
}

func (x *Price) GetUYU() float32 {
	if x != nil {
		return x.UYU
	}
	return 0
}

func (x *Price) GetUYI() float32 {
	if x != nil {
		return x.UYI
	}
	return 0
}

func (x *Price) GetUYW() float32 {
	if x != nil {
		return x.UYW
	}
	return 0
}

func (x *Price) GetUZS() float32 {
	if x != nil {
		return x.UZS
	}
	return 0
}

func (x *Price) GetVUV() float32 {
	if x != nil {
		return x.VUV
	}
	return 0
}

func (x *Price) GetVES() float32 {
	if x != nil {
		return x.VES
	}
	return 0
}

func (x *Price) GetVED() float32 {
	if x != nil {
		return x.VED
	}
	return 0
}

func (x *Price) GetVND() float32 {
	if x != nil {
		return x.VND
	}
	return 0
}

func (x *Price) GetYER() float32 {
	if x != nil {
		return x.YER
	}
	return 0
}

func (x *Price) GetZMW() float32 {
	if x != nil {
		return x.ZMW
	}
	return 0
}

func (x *Price) GetZWL() float32 {
	if x != nil {
		return x.ZWL
	}
	return 0
}

func (x *Price) GetXBA() float32 {
	if x != nil {
		return x.XBA
	}
	return 0
}

func (x *Price) GetXBB() float32 {
	if x != nil {
		return x.XBB
	}
	return 0
}

func (x *Price) GetXBC() float32 {
	if x != nil {
		return x.XBC
	}
	return 0
}

func (x *Price) GetXBD() float32 {
	if x != nil {
		return x.XBD
	}
	return 0
}

func (x *Price) GetXTS() float32 {
	if x != nil {
		return x.XTS
	}
	return 0
}

func (x *Price) GetXXX() float32 {
	if x != nil {
		return x.XXX
	}
	return 0
}

func (x *Price) GetXAU() float32 {
	if x != nil {
		return x.XAU
	}
	return 0
}

func (x *Price) GetXPD() float32 {
	if x != nil {
		return x.XPD
	}
	return 0
}

func (x *Price) GetXPT() float32 {
	if x != nil {
		return x.XPT
	}
	return 0
}

func (x *Price) GetXAG() float32 {
	if x != nil {
		return x.XAG
	}
	return 0
}

var File_locale_generated_proto protoreflect.FileDescriptor

var file_locale_generated_proto_rawDesc = []byte{
	0x0a, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x22, 0xf9, 0x15, 0x0a, 0x0a, 0x49, 0x31, 0x38, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x13, 0x0a, 0x05, 0x61, 0x66, 0x5f, 0x4e, 0x41, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x61, 0x66, 0x4e, 0x41, 0x12, 0x13, 0x0a, 0x05, 0x61, 0x66, 0x5f, 0x5a, 0x41, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x66, 0x5a, 0x41, 0x12, 0x13, 0x0a, 0x05, 0x61, 0x72, 0x5f,
	0x41, 0x52, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x41, 0x52, 0x12, 0x13,
	0x0a, 0x05, 0x61, 0x72, 0x5f, 0x4d, 0x41, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61,
	0x72, 0x4d, 0x41, 0x12, 0x13, 0x0a, 0x05, 0x61, 0x72, 0x5f, 0x53, 0x41, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x53, 0x41, 0x12, 0x13, 0x0a, 0x05, 0x61, 0x79, 0x5f, 0x42,
	0x4f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x79, 0x42, 0x4f, 0x12, 0x13, 0x0a,
	0x05, 0x61, 0x7a, 0x5f, 0x41, 0x5a, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x7a,
	0x41, 0x5a, 0x12, 0x13, 0x0a, 0x05, 0x62, 0x65, 0x5f, 0x42, 0x59, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x62, 0x65, 0x42, 0x59, 0x12, 0x13, 0x0a, 0x05, 0x62, 0x67, 0x5f, 0x42, 0x47,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x67, 0x42, 0x47, 0x12, 0x13, 0x0a, 0x05,
	0x62, 0x6e, 0x5f, 0x49, 0x4e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6e, 0x49,
	0x4e, 0x12, 0x13, 0x0a, 0x05, 0x62, 0x6e, 0x5f, 0x42, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x62, 0x6e, 0x42, 0x44, 0x12, 0x13, 0x0a, 0x05, 0x62, 0x73, 0x5f, 0x42, 0x41, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x73, 0x42, 0x41, 0x12, 0x13, 0x0a, 0x05, 0x63,
	0x61, 0x5f, 0x45, 0x53, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x61, 0x45, 0x53,
	0x12, 0x13, 0x0a, 0x05, 0x63, 0x6b, 0x5f, 0x55, 0x53, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6b, 0x55, 0x53, 0x12, 0x13, 0x0a, 0x05, 0x63, 0x73, 0x5f, 0x43, 0x5a, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x73, 0x43, 0x5a, 0x12, 0x13, 0x0a, 0x05, 0x63, 0x79,
	0x5f, 0x47, 0x42, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x79, 0x47, 0x42, 0x12,
	0x13, 0x0a, 0x05, 0x64, 0x61, 0x5f, 0x44, 0x4b, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x61, 0x44, 0x4b, 0x12, 0x13, 0x0a, 0x05, 0x64, 0x65, 0x5f, 0x41, 0x54, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x41, 0x54, 0x12, 0x13, 0x0a, 0x05, 0x64, 0x65, 0x5f,
	0x44, 0x45, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x44, 0x45, 0x12, 0x13,
	0x0a, 0x05, 0x64, 0x65, 0x5f, 0x43, 0x48, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x65, 0x43, 0x48, 0x12, 0x13, 0x0a, 0x05, 0x65, 0x6c, 0x5f, 0x47, 0x52, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x65, 0x6c, 0x47, 0x52, 0x12, 0x13, 0x0a, 0x05, 0x65, 0x6e, 0x5f, 0x47,
	0x42, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x6e, 0x47, 0x42, 0x12, 0x13, 0x0a,
	0x05, 0x65, 0x6e, 0x5f, 0x41, 0x55, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x6e,
	0x41, 0x55, 0x12, 0x13, 0x0a, 0x05, 0x65, 0x6e, 0x5f, 0x43, 0x41, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x65, 0x6e, 0x43, 0x41, 0x12, 0x13, 0x0a, 0x05, 0x65, 0x6e, 0x5f, 0x49, 0x45,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x6e, 0x49, 0x45, 0x12, 0x13, 0x0a, 0x05,
	0x65, 0x6e, 0x5f, 0x49, 0x4e, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x6e, 0x49,
	0x4e, 0x12, 0x13, 0x0a, 0x05, 0x65, 0x6e, 0x5f, 0x50, 0x49, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x65, 0x6e, 0x50, 0x49, 0x12, 0x13, 0x0a, 0x05, 0x65, 0x6e, 0x5f, 0x55, 0x44, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x6e, 0x55, 0x44, 0x12, 0x13, 0x0a, 0x05, 0x65,
	0x6e, 0x5f, 0x55, 0x53, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x6e, 0x55, 0x53,
	0x12, 0x13, 0x0a, 0x05, 0x65, 0x6e, 0x5f, 0x5a, 0x41, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x65, 0x6e, 0x5a, 0x41, 0x12, 0x13, 0x0a, 0x05, 0x65, 0x6f, 0x5f, 0x45, 0x4f, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x6f, 0x45, 0x4f, 0x12, 0x13, 0x0a, 0x05, 0x65, 0x73,
	0x5f, 0x41, 0x52, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x73, 0x41, 0x52, 0x12,
	0x15, 0x0a, 0x06, 0x65, 0x73, 0x5f, 0x34, 0x31, 0x39, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x73, 0x34, 0x31, 0x39, 0x12, 0x13, 0x0a, 0x05, 0x65, 0x73, 0x5f, 0x43, 0x4c, 0x18,
	0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x73, 0x43, 0x4c, 0x12, 0x13, 0x0a, 0x05, 0x65,
	0x73, 0x5f, 0x43, 0x4f, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x73, 0x43, 0x4f,
	0x12, 0x13, 0x0a, 0x05, 0x65, 0x73, 0x5f, 0x45, 0x43, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x65, 0x73, 0x45, 0x43, 0x12, 0x13, 0x0a, 0x05, 0x65, 0x73, 0x5f, 0x45, 0x53, 0x18, 0x2f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x73, 0x45, 0x53, 0x12, 0x13, 0x0a, 0x05, 0x65, 0x73,
	0x5f, 0x4c, 0x41, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x73, 0x4c, 0x41, 0x12,
	0x13, 0x0a, 0x05, 0x65, 0x73, 0x5f, 0x4e, 0x49, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x65, 0x73, 0x4e, 0x49, 0x12, 0x13, 0x0a, 0x05, 0x65, 0x73, 0x5f, 0x4d, 0x58, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x73, 0x4d, 0x58, 0x12, 0x13, 0x0a, 0x05, 0x65, 0x73, 0x5f,
	0x55, 0x53, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x73, 0x55, 0x53, 0x12, 0x13,
	0x0a, 0x05, 0x65, 0x73, 0x5f, 0x56, 0x45, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65,
	0x73, 0x56, 0x45, 0x12, 0x13, 0x0a, 0x05, 0x65, 0x74, 0x5f, 0x45, 0x45, 0x18, 0x35, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x45, 0x45, 0x12, 0x13, 0x0a, 0x05, 0x65, 0x75, 0x5f, 0x45,
	0x53, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x75, 0x45, 0x53, 0x12, 0x13, 0x0a,
	0x05, 0x66, 0x61, 0x5f, 0x49, 0x52, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x61,
	0x49, 0x52, 0x12, 0x13, 0x0a, 0x05, 0x66, 0x62, 0x5f, 0x4c, 0x54, 0x18, 0x38, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x66, 0x62, 0x4c, 0x54, 0x12, 0x13, 0x0a, 0x05, 0x66, 0x69, 0x5f, 0x46, 0x49,
	0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x46, 0x49, 0x12, 0x13, 0x0a, 0x05,
	0x66, 0x6f, 0x5f, 0x46, 0x4f, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x6f, 0x46,
	0x4f, 0x12, 0x13, 0x0a, 0x05, 0x66, 0x72, 0x5f, 0x43, 0x41, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x66, 0x72, 0x43, 0x41, 0x12, 0x13, 0x0a, 0x05, 0x66, 0x72, 0x5f, 0x46, 0x52, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x46, 0x52, 0x12, 0x13, 0x0a, 0x05, 0x66,
	0x72, 0x5f, 0x42, 0x45, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x42, 0x45,
	0x12, 0x13, 0x0a, 0x05, 0x66, 0x72, 0x5f, 0x43, 0x48, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x66, 0x72, 0x43, 0x48, 0x12, 0x13, 0x0a, 0x05, 0x66, 0x79, 0x5f, 0x4e, 0x4c, 0x18, 0x3f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x79, 0x4e, 0x4c, 0x12, 0x13, 0x0a, 0x05, 0x67, 0x61,
	0x5f, 0x49, 0x45, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x61, 0x49, 0x45, 0x12,
	0x13, 0x0a, 0x05, 0x67, 0x6c, 0x5f, 0x45, 0x53, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x67, 0x6c, 0x45, 0x53, 0x12, 0x13, 0x0a, 0x05, 0x67, 0x6e, 0x5f, 0x50, 0x59, 0x18, 0x42, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x6e, 0x50, 0x59, 0x12, 0x13, 0x0a, 0x05, 0x67, 0x75, 0x5f,
	0x49, 0x4e, 0x18, 0x43, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x49, 0x4e, 0x12, 0x13,
	0x0a, 0x05, 0x67, 0x78, 0x5f, 0x47, 0x52, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67,
	0x78, 0x47, 0x52, 0x12, 0x13, 0x0a, 0x05, 0x68, 0x65, 0x5f, 0x49, 0x4c, 0x18, 0x45, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x68, 0x65, 0x49, 0x4c, 0x12, 0x13, 0x0a, 0x05, 0x68, 0x69, 0x5f, 0x49,
	0x4e, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x69, 0x49, 0x4e, 0x12, 0x13, 0x0a,
	0x05, 0x68, 0x72, 0x5f, 0x48, 0x52, 0x18, 0x47, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x72,
	0x48, 0x52, 0x12, 0x13, 0x0a, 0x05, 0x68, 0x75, 0x5f, 0x48, 0x55, 0x18, 0x48, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x75, 0x48, 0x55, 0x12, 0x13, 0x0a, 0x05, 0x68, 0x79, 0x5f, 0x41, 0x4d,
	0x18, 0x49, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x79, 0x41, 0x4d, 0x12, 0x13, 0x0a, 0x05,
	0x69, 0x64, 0x5f, 0x49, 0x44, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x64, 0x49,
	0x44, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x73, 0x5f, 0x49, 0x53, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x69, 0x73, 0x49, 0x53, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x74, 0x5f, 0x49, 0x54, 0x18,
	0x4c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x74, 0x49, 0x54, 0x12, 0x13, 0x0a, 0x05, 0x6a,
	0x61, 0x5f, 0x4a, 0x50, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6a, 0x61, 0x4a, 0x50,
	0x12, 0x13, 0x0a, 0x05, 0x6a, 0x76, 0x5f, 0x49, 0x44, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6a, 0x76, 0x49, 0x44, 0x12, 0x13, 0x0a, 0x05, 0x6b, 0x61, 0x5f, 0x47, 0x45, 0x18, 0x4f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x61, 0x47, 0x45, 0x12, 0x13, 0x0a, 0x05, 0x6b, 0x6b,
	0x5f, 0x4b, 0x5a, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x6b, 0x4b, 0x5a, 0x12,
	0x13, 0x0a, 0x05, 0x6b, 0x6d, 0x5f, 0x4b, 0x48, 0x18, 0x51, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6b, 0x6d, 0x4b, 0x48, 0x12, 0x13, 0x0a, 0x05, 0x6b, 0x6e, 0x5f, 0x49, 0x4e, 0x18, 0x52, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x6e, 0x49, 0x4e, 0x12, 0x13, 0x0a, 0x05, 0x6b, 0x6f, 0x5f,
	0x4b, 0x52, 0x18, 0x53, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x6f, 0x4b, 0x52, 0x12, 0x13,
	0x0a, 0x05, 0x6b, 0x75, 0x5f, 0x54, 0x52, 0x18, 0x54, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b,
	0x75, 0x54, 0x52, 0x12, 0x13, 0x0a, 0x05, 0x6c, 0x61, 0x5f, 0x56, 0x41, 0x18, 0x55, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x56, 0x41, 0x12, 0x13, 0x0a, 0x05, 0x6c, 0x69, 0x5f, 0x4e,
	0x4c, 0x18, 0x56, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x4e, 0x4c, 0x12, 0x13, 0x0a,
	0x05, 0x6c, 0x74, 0x5f, 0x4c, 0x54, 0x18, 0x57, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x74,
	0x4c, 0x54, 0x12, 0x13, 0x0a, 0x05, 0x6c, 0x76, 0x5f, 0x4c, 0x56, 0x18, 0x58, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6c, 0x76, 0x4c, 0x56, 0x12, 0x13, 0x0a, 0x05, 0x6d, 0x67, 0x5f, 0x4d, 0x47,
	0x18, 0x59, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x67, 0x4d, 0x47, 0x12, 0x13, 0x0a, 0x05,
	0x6d, 0x6b, 0x5f, 0x4d, 0x4b, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6b, 0x4d,
	0x4b, 0x12, 0x13, 0x0a, 0x05, 0x6d, 0x6c, 0x5f, 0x49, 0x4e, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6d, 0x6c, 0x49, 0x4e, 0x12, 0x13, 0x0a, 0x05, 0x6d, 0x6e, 0x5f, 0x4d, 0x4e, 0x18,
	0x5c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6e, 0x4d, 0x4e, 0x12, 0x13, 0x0a, 0x05, 0x6d,
	0x72, 0x5f, 0x49, 0x4e, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x72, 0x49, 0x4e,
	0x12, 0x13, 0x0a, 0x05, 0x6d, 0x73, 0x5f, 0x4d, 0x59, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6d, 0x73, 0x4d, 0x59, 0x12, 0x13, 0x0a, 0x05, 0x6d, 0x74, 0x5f, 0x4d, 0x54, 0x18, 0x5f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x74, 0x4d, 0x54, 0x12, 0x13, 0x0a, 0x05, 0x6e, 0x62,
	0x5f, 0x4e, 0x4f, 0x18, 0x60, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x62, 0x4e, 0x4f, 0x12,
	0x13, 0x0a, 0x05, 0x6e, 0x65, 0x5f, 0x4e, 0x50, 0x18, 0x61, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x65, 0x4e, 0x50, 0x12, 0x13, 0x0a, 0x05, 0x6e, 0x6c, 0x5f, 0x42, 0x45, 0x18, 0x62, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6c, 0x42, 0x45, 0x12, 0x13, 0x0a, 0x05, 0x6e, 0x6c, 0x5f,
	0x4e, 0x4c, 0x18, 0x63, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6c, 0x4e, 0x4c, 0x12, 0x13,
	0x0a, 0x05, 0x6e, 0x6e, 0x5f, 0x4e, 0x4f, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x6e, 0x4e, 0x4f, 0x12, 0x13, 0x0a, 0x05, 0x6f, 0x72, 0x5f, 0x49, 0x4e, 0x18, 0x65, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6f, 0x72, 0x49, 0x4e, 0x12, 0x13, 0x0a, 0x05, 0x70, 0x61, 0x5f, 0x49,
	0x4e, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x49, 0x4e, 0x12, 0x13, 0x0a,
	0x05, 0x70, 0x6c, 0x5f, 0x50, 0x4c, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6c,
	0x50, 0x4c, 0x12, 0x13, 0x0a, 0x05, 0x70, 0x73, 0x5f, 0x41, 0x46, 0x18, 0x68, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x73, 0x41, 0x46, 0x12, 0x13, 0x0a, 0x05, 0x70, 0x74, 0x5f, 0x42, 0x52,
	0x18, 0x69, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x74, 0x42, 0x52, 0x12, 0x13, 0x0a, 0x05,
	0x70, 0x74, 0x5f, 0x50, 0x54, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x74, 0x50,
	0x54, 0x12, 0x13, 0x0a, 0x05, 0x71, 0x75, 0x5f, 0x50, 0x45, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x71, 0x75, 0x50, 0x45, 0x12, 0x13, 0x0a, 0x05, 0x72, 0x6d, 0x5f, 0x43, 0x48, 0x18,
	0x6c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6d, 0x43, 0x48, 0x12, 0x13, 0x0a, 0x05, 0x72,
	0x6f, 0x5f, 0x52, 0x4f, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x52, 0x4f,
	0x12, 0x13, 0x0a, 0x05, 0x72, 0x75, 0x5f, 0x52, 0x55, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x72, 0x75, 0x52, 0x55, 0x12, 0x13, 0x0a, 0x05, 0x73, 0x61, 0x5f, 0x49, 0x4e, 0x18, 0x6f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x61, 0x49, 0x4e, 0x12, 0x13, 0x0a, 0x05, 0x73, 0x65,
	0x5f, 0x4e, 0x4f, 0x18, 0x70, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x65, 0x4e, 0x4f, 0x12,
	0x13, 0x0a, 0x05, 0x73, 0x69, 0x5f, 0x4c, 0x4b, 0x18, 0x71, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x73, 0x69, 0x4c, 0x4b, 0x12, 0x13, 0x0a, 0x05, 0x73, 0x6b, 0x5f, 0x53, 0x4b, 0x18, 0x72, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6b, 0x53, 0x4b, 0x12, 0x13, 0x0a, 0x05, 0x73, 0x6c, 0x5f,
	0x53, 0x49, 0x18, 0x73, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x53, 0x49, 0x12, 0x13,
	0x0a, 0x05, 0x73, 0x6f, 0x5f, 0x53, 0x4f, 0x18, 0x74, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73,
	0x6f, 0x53, 0x4f, 0x12, 0x13, 0x0a, 0x05, 0x73, 0x71, 0x5f, 0x41, 0x4c, 0x18, 0x75, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x73, 0x71, 0x41, 0x4c, 0x12, 0x13, 0x0a, 0x05, 0x73, 0x72, 0x5f, 0x52,
	0x53, 0x18, 0x76, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x72, 0x52, 0x53, 0x12, 0x13, 0x0a,
	0x05, 0x73, 0x76, 0x5f, 0x53, 0x45, 0x18, 0x77, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x76,
	0x53, 0x45, 0x12, 0x13, 0x0a, 0x05, 0x73, 0x77, 0x5f, 0x4b, 0x45, 0x18, 0x78, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x73, 0x77, 0x4b, 0x45, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x61, 0x5f, 0x49, 0x4e,
	0x18, 0x79, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x49, 0x4e, 0x12, 0x13, 0x0a, 0x05,
	0x74, 0x65, 0x5f, 0x49, 0x4e, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x49,
	0x4e, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x67, 0x5f, 0x54, 0x4a, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x67, 0x54, 0x4a, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x68, 0x5f, 0x54, 0x48, 0x18,
	0x7c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x68, 0x54, 0x48, 0x12, 0x13, 0x0a, 0x05, 0x74,
	0x6c, 0x5f, 0x50, 0x48, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x6c, 0x50, 0x48,
	0x12, 0x13, 0x0a, 0x05, 0x74, 0x72, 0x5f, 0x54, 0x52, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x72, 0x54, 0x52, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x74, 0x5f, 0x52, 0x55, 0x18, 0x7f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x74, 0x52, 0x55, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6b,
	0x5f, 0x55, 0x41, 0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6b, 0x55, 0x41,
	0x12, 0x14, 0x0a, 0x05, 0x75, 0x72, 0x5f, 0x50, 0x4b, 0x18, 0x81, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x72, 0x50, 0x4b, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x7a, 0x5f, 0x55, 0x5a, 0x18,
	0x82, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x7a, 0x55, 0x5a, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x69, 0x5f, 0x56, 0x4e, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x69,
	0x56, 0x4e, 0x12, 0x14, 0x0a, 0x05, 0x78, 0x68, 0x5f, 0x5a, 0x41, 0x18, 0x84, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x78, 0x68, 0x5a, 0x41, 0x12, 0x14, 0x0a, 0x05, 0x79, 0x69, 0x5f, 0x44,
	0x45, 0x18, 0x85, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x79, 0x69, 0x44, 0x45, 0x12, 0x18,
	0x0a, 0x07, 0x7a, 0x68, 0x5f, 0x48, 0x61, 0x6e, 0x73, 0x18, 0x86, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x7a, 0x68, 0x48, 0x61, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x7a, 0x68, 0x5f, 0x48,
	0x61, 0x6e, 0x74, 0x18, 0x87, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x7a, 0x68, 0x48, 0x61,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x7a, 0x68, 0x5f, 0x43, 0x4e, 0x18, 0x88, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x7a, 0x68, 0x43, 0x4e, 0x12, 0x14, 0x0a, 0x05, 0x7a, 0x68, 0x5f, 0x48,
	0x4b, 0x18, 0x89, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x68, 0x48, 0x4b, 0x12, 0x14,
	0x0a, 0x05, 0x7a, 0x68, 0x5f, 0x53, 0x47, 0x18, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x7a, 0x68, 0x53, 0x47, 0x12, 0x14, 0x0a, 0x05, 0x7a, 0x68, 0x5f, 0x54, 0x57, 0x18, 0x8b, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x68, 0x54, 0x57, 0x12, 0x14, 0x0a, 0x05, 0x7a, 0x75,
	0x5f, 0x5a, 0x41, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x75, 0x5a, 0x41,
	0x12, 0x17, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0xfa, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x11, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0xfb, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x9b, 0x1a, 0x0a,
	0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x46, 0x50, 0x56, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x46, 0x50, 0x56, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x46, 0x4e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x03, 0x41, 0x46, 0x4e, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x55, 0x52, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x03, 0x45, 0x55, 0x52, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x41, 0x4c, 0x4c, 0x12, 0x10, 0x0a, 0x03, 0x44, 0x5a,
	0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x44, 0x5a, 0x44, 0x12, 0x10, 0x0a, 0x03,
	0x55, 0x53, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x55, 0x53, 0x44, 0x12, 0x10,
	0x0a, 0x03, 0x41, 0x4f, 0x41, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x41, 0x4f, 0x41,
	0x12, 0x10, 0x0a, 0x03, 0x58, 0x43, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x58,
	0x43, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x52, 0x53, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x03, 0x41, 0x52, 0x53, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x4d, 0x44, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x03, 0x41, 0x4d, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x57, 0x47, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x03, 0x41, 0x57, 0x47, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x55, 0x44, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x41, 0x55, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x5a,
	0x4e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x41, 0x5a, 0x4e, 0x12, 0x10, 0x0a, 0x03,
	0x42, 0x53, 0x44, 0x18, 0x16, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x42, 0x53, 0x44, 0x12, 0x10,
	0x0a, 0x03, 0x42, 0x48, 0x44, 0x18, 0x17, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x42, 0x48, 0x44,
	0x12, 0x10, 0x0a, 0x03, 0x42, 0x44, 0x54, 0x18, 0x18, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x42,
	0x44, 0x54, 0x12, 0x10, 0x0a, 0x03, 0x42, 0x42, 0x44, 0x18, 0x19, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x03, 0x42, 0x42, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x42, 0x59, 0x4e, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x03, 0x42, 0x59, 0x4e, 0x12, 0x10, 0x0a, 0x03, 0x42, 0x5a, 0x44, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x03, 0x42, 0x5a, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x58, 0x4f, 0x46, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x58, 0x4f, 0x46, 0x12, 0x10, 0x0a, 0x03, 0x42, 0x4d,
	0x44, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x42, 0x4d, 0x44, 0x12, 0x10, 0x0a, 0x03,
	0x49, 0x4e, 0x52, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x49, 0x4e, 0x52, 0x12, 0x10,
	0x0a, 0x03, 0x42, 0x54, 0x4e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x42, 0x54, 0x4e,
	0x12, 0x10, 0x0a, 0x03, 0x42, 0x4f, 0x42, 0x18, 0x20, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x42,
	0x4f, 0x42, 0x12, 0x10, 0x0a, 0x03, 0x42, 0x4f, 0x56, 0x18, 0x21, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x03, 0x42, 0x4f, 0x56, 0x12, 0x10, 0x0a, 0x03, 0x42, 0x41, 0x4d, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x03, 0x42, 0x41, 0x4d, 0x12, 0x10, 0x0a, 0x03, 0x42, 0x57, 0x50, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x03, 0x42, 0x57, 0x50, 0x12, 0x10, 0x0a, 0x03, 0x4e, 0x4f, 0x4b, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x4e, 0x4f, 0x4b, 0x12, 0x10, 0x0a, 0x03, 0x42, 0x52,
	0x4c, 0x18, 0x25, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x42, 0x52, 0x4c, 0x12, 0x10, 0x0a, 0x03,
	0x42, 0x4e, 0x44, 0x18, 0x26, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x42, 0x4e, 0x44, 0x12, 0x10,
	0x0a, 0x03, 0x42, 0x47, 0x4e, 0x18, 0x27, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x42, 0x47, 0x4e,
	0x12, 0x10, 0x0a, 0x03, 0x42, 0x49, 0x46, 0x18, 0x28, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x42,
	0x49, 0x46, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x56, 0x45, 0x18, 0x29, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x03, 0x43, 0x56, 0x45, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x48, 0x52, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x03, 0x4b, 0x48, 0x52, 0x12, 0x10, 0x0a, 0x03, 0x58, 0x41, 0x46, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x03, 0x58, 0x41, 0x46, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x41, 0x44, 0x18,
	0x2c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x43, 0x41, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x59,
	0x44, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x4b, 0x59, 0x44, 0x12, 0x10, 0x0a, 0x03,
	0x43, 0x4c, 0x50, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x43, 0x4c, 0x50, 0x12, 0x10,
	0x0a, 0x03, 0x43, 0x4c, 0x46, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x43, 0x4c, 0x46,
	0x12, 0x10, 0x0a, 0x03, 0x43, 0x4e, 0x59, 0x18, 0x30, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x43,
	0x4e, 0x59, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x4f, 0x50, 0x18, 0x31, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x03, 0x43, 0x4f, 0x50, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x4f, 0x55, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x03, 0x43, 0x4f, 0x55, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x4d, 0x46, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x03, 0x4b, 0x4d, 0x46, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x44, 0x46, 0x18,
	0x34, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x43, 0x44, 0x46, 0x12, 0x10, 0x0a, 0x03, 0x4e, 0x5a,
	0x44, 0x18, 0x35, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x4e, 0x5a, 0x44, 0x12, 0x10, 0x0a, 0x03,
	0x43, 0x52, 0x43, 0x18, 0x36, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x43, 0x52, 0x43, 0x12, 0x10,
	0x0a, 0x03, 0x48, 0x52, 0x4b, 0x18, 0x37, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x48, 0x52, 0x4b,
	0x12, 0x10, 0x0a, 0x03, 0x43, 0x55, 0x50, 0x18, 0x38, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x43,
	0x55, 0x50, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x55, 0x43, 0x18, 0x39, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x03, 0x43, 0x55, 0x43, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x4e, 0x47, 0x18, 0x3a, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x03, 0x41, 0x4e, 0x47, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x5a, 0x4b, 0x18, 0x3b, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x03, 0x43, 0x5a, 0x4b, 0x12, 0x10, 0x0a, 0x03, 0x44, 0x4b, 0x4b, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x44, 0x4b, 0x4b, 0x12, 0x10, 0x0a, 0x03, 0x44, 0x4a,
	0x46, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x44, 0x4a, 0x46, 0x12, 0x10, 0x0a, 0x03,
	0x44, 0x4f, 0x50, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x44, 0x4f, 0x50, 0x12, 0x10,
	0x0a, 0x03, 0x45, 0x47, 0x50, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x45, 0x47, 0x50,
	0x12, 0x10, 0x0a, 0x03, 0x53, 0x56, 0x43, 0x18, 0x40, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x53,
	0x56, 0x43, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x52, 0x4e, 0x18, 0x41, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x03, 0x45, 0x52, 0x4e, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x5a, 0x4c, 0x18, 0x42, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x03, 0x53, 0x5a, 0x4c, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x54, 0x42, 0x18, 0x43, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x03, 0x45, 0x54, 0x42, 0x12, 0x10, 0x0a, 0x03, 0x46, 0x4b, 0x50, 0x18,
	0x44, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x46, 0x4b, 0x50, 0x12, 0x10, 0x0a, 0x03, 0x46, 0x4a,
	0x44, 0x18, 0x45, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x46, 0x4a, 0x44, 0x12, 0x10, 0x0a, 0x03,
	0x58, 0x50, 0x46, 0x18, 0x46, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x58, 0x50, 0x46, 0x12, 0x10,
	0x0a, 0x03, 0x47, 0x4d, 0x44, 0x18, 0x47, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x47, 0x4d, 0x44,
	0x12, 0x10, 0x0a, 0x03, 0x47, 0x45, 0x4c, 0x18, 0x48, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x47,
	0x45, 0x4c, 0x12, 0x10, 0x0a, 0x03, 0x47, 0x48, 0x53, 0x18, 0x49, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x03, 0x47, 0x48, 0x53, 0x12, 0x10, 0x0a, 0x03, 0x47, 0x49, 0x50, 0x18, 0x4a, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x03, 0x47, 0x49, 0x50, 0x12, 0x10, 0x0a, 0x03, 0x47, 0x54, 0x51, 0x18, 0x4b, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x03, 0x47, 0x54, 0x51, 0x12, 0x10, 0x0a, 0x03, 0x47, 0x42, 0x50, 0x18,
	0x4c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x47, 0x42, 0x50, 0x12, 0x10, 0x0a, 0x03, 0x47, 0x4e,
	0x46, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x47, 0x4e, 0x46, 0x12, 0x10, 0x0a, 0x03,
	0x47, 0x59, 0x44, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x47, 0x59, 0x44, 0x12, 0x10,
	0x0a, 0x03, 0x48, 0x54, 0x47, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x48, 0x54, 0x47,
	0x12, 0x10, 0x0a, 0x03, 0x48, 0x4e, 0x4c, 0x18, 0x50, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x48,
	0x4e, 0x4c, 0x12, 0x10, 0x0a, 0x03, 0x48, 0x4b, 0x44, 0x18, 0x51, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x03, 0x48, 0x4b, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x48, 0x55, 0x46, 0x18, 0x52, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x03, 0x48, 0x55, 0x46, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x53, 0x4b, 0x18, 0x53, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x03, 0x49, 0x53, 0x4b, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x44, 0x52, 0x18,
	0x54, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x49, 0x44, 0x52, 0x12, 0x10, 0x0a, 0x03, 0x58, 0x44,
	0x52, 0x18, 0x55, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x58, 0x44, 0x52, 0x12, 0x10, 0x0a, 0x03,
	0x49, 0x52, 0x52, 0x18, 0x56, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x49, 0x52, 0x52, 0x12, 0x10,
	0x0a, 0x03, 0x49, 0x51, 0x44, 0x18, 0x57, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x49, 0x51, 0x44,
	0x12, 0x10, 0x0a, 0x03, 0x49, 0x4c, 0x53, 0x18, 0x58, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x49,
	0x4c, 0x53, 0x12, 0x10, 0x0a, 0x03, 0x4a, 0x4d, 0x44, 0x18, 0x59, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x03, 0x4a, 0x4d, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x4a, 0x50, 0x59, 0x18, 0x5a, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x03, 0x4a, 0x50, 0x59, 0x12, 0x10, 0x0a, 0x03, 0x4a, 0x4f, 0x44, 0x18, 0x5b, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x03, 0x4a, 0x4f, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x5a, 0x54, 0x18,
	0x5c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x4b, 0x5a, 0x54, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x45,
	0x53, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x4b, 0x45, 0x53, 0x12, 0x10, 0x0a, 0x03,
	0x4b, 0x50, 0x57, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x4b, 0x50, 0x57, 0x12, 0x10,
	0x0a, 0x03, 0x4b, 0x52, 0x57, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x4b, 0x52, 0x57,
	0x12, 0x10, 0x0a, 0x03, 0x4b, 0x57, 0x44, 0x18, 0x60, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x4b,
	0x57, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x47, 0x53, 0x18, 0x61, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x03, 0x4b, 0x47, 0x53, 0x12, 0x10, 0x0a, 0x03, 0x4c, 0x41, 0x4b, 0x18, 0x62, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x03, 0x4c, 0x41, 0x4b, 0x12, 0x10, 0x0a, 0x03, 0x4c, 0x42, 0x50, 0x18, 0x63, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x03, 0x4c, 0x42, 0x50, 0x12, 0x10, 0x0a, 0x03, 0x4c, 0x53, 0x4c, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x4c, 0x53, 0x4c, 0x12, 0x10, 0x0a, 0x03, 0x5a, 0x41,
	0x52, 0x18, 0x65, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x5a, 0x41, 0x52, 0x12, 0x10, 0x0a, 0x03,
	0x4c, 0x52, 0x44, 0x18, 0x66, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x4c, 0x52, 0x44, 0x12, 0x10,
	0x0a, 0x03, 0x4c, 0x59, 0x44, 0x18, 0x67, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x4c, 0x59, 0x44,
	0x12, 0x10, 0x0a, 0x03, 0x43, 0x48, 0x46, 0x18, 0x68, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x43,
	0x48, 0x46, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x4f, 0x50, 0x18, 0x69, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x03, 0x4d, 0x4f, 0x50, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x4b, 0x44, 0x18, 0x6a, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x03, 0x4d, 0x4b, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x47, 0x41, 0x18, 0x6b, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x03, 0x4d, 0x47, 0x41, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x57, 0x4b, 0x18,
	0x6c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x4d, 0x57, 0x4b, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x59,
	0x52, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x4d, 0x59, 0x52, 0x12, 0x10, 0x0a, 0x03,
	0x4d, 0x56, 0x52, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x4d, 0x56, 0x52, 0x12, 0x10,
	0x0a, 0x03, 0x4d, 0x52, 0x55, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x4d, 0x52, 0x55,
	0x12, 0x10, 0x0a, 0x03, 0x4d, 0x55, 0x52, 0x18, 0x70, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x4d,
	0x55, 0x52, 0x12, 0x10, 0x0a, 0x03, 0x58, 0x55, 0x41, 0x18, 0x71, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x03, 0x58, 0x55, 0x41, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x58, 0x4e, 0x18, 0x72, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x03, 0x4d, 0x58, 0x4e, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x58, 0x56, 0x18, 0x73, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x03, 0x4d, 0x58, 0x56, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x44, 0x4c, 0x18,
	0x74, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x4d, 0x44, 0x4c, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x4e,
	0x54, 0x18, 0x75, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x4d, 0x4e, 0x54, 0x12, 0x10, 0x0a, 0x03,
	0x4d, 0x41, 0x44, 0x18, 0x76, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x4d, 0x41, 0x44, 0x12, 0x10,
	0x0a, 0x03, 0x4d, 0x5a, 0x4e, 0x18, 0x77, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x4d, 0x5a, 0x4e,
	0x12, 0x10, 0x0a, 0x03, 0x4d, 0x4d, 0x4b, 0x18, 0x78, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x4d,
	0x4d, 0x4b, 0x12, 0x10, 0x0a, 0x03, 0x4e, 0x41, 0x44, 0x18, 0x79, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x03, 0x4e, 0x41, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x4e, 0x50, 0x52, 0x18, 0x7a, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x03, 0x4e, 0x50, 0x52, 0x12, 0x10, 0x0a, 0x03, 0x4e, 0x49, 0x4f, 0x18, 0x7b, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x03, 0x4e, 0x49, 0x4f, 0x12, 0x10, 0x0a, 0x03, 0x4e, 0x47, 0x4e, 0x18,
	0x7c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x4e, 0x47, 0x4e, 0x12, 0x10, 0x0a, 0x03, 0x4f, 0x4d,
	0x52, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x4f, 0x4d, 0x52, 0x12, 0x10, 0x0a, 0x03,
	0x50, 0x4b, 0x52, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x50, 0x4b, 0x52, 0x12, 0x10,
	0x0a, 0x03, 0x50, 0x41, 0x42, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x50, 0x41, 0x42,
	0x12, 0x11, 0x0a, 0x03, 0x50, 0x47, 0x4b, 0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03,
	0x50, 0x47, 0x4b, 0x12, 0x11, 0x0a, 0x03, 0x50, 0x59, 0x47, 0x18, 0x81, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x03, 0x50, 0x59, 0x47, 0x12, 0x11, 0x0a, 0x03, 0x50, 0x45, 0x4e, 0x18, 0x82, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x50, 0x45, 0x4e, 0x12, 0x11, 0x0a, 0x03, 0x50, 0x48, 0x50,
	0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x50, 0x48, 0x50, 0x12, 0x11, 0x0a, 0x03,
	0x50, 0x4c, 0x4e, 0x18, 0x84, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x50, 0x4c, 0x4e, 0x12,
	0x11, 0x0a, 0x03, 0x51, 0x41, 0x52, 0x18, 0x85, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x51,
	0x41, 0x52, 0x12, 0x11, 0x0a, 0x03, 0x52, 0x4f, 0x4e, 0x18, 0x86, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x03, 0x52, 0x4f, 0x4e, 0x12, 0x11, 0x0a, 0x03, 0x52, 0x55, 0x42, 0x18, 0x87, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x03, 0x52, 0x55, 0x42, 0x12, 0x11, 0x0a, 0x03, 0x52, 0x57, 0x46, 0x18,
	0x88, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x52, 0x57, 0x46, 0x12, 0x11, 0x0a, 0x03, 0x53,
	0x48, 0x50, 0x18, 0x89, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x53, 0x48, 0x50, 0x12, 0x11,
	0x0a, 0x03, 0x57, 0x53, 0x54, 0x18, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x57, 0x53,
	0x54, 0x12, 0x11, 0x0a, 0x03, 0x53, 0x54, 0x4e, 0x18, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x03, 0x53, 0x54, 0x4e, 0x12, 0x11, 0x0a, 0x03, 0x53, 0x41, 0x52, 0x18, 0x8c, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x03, 0x53, 0x41, 0x52, 0x12, 0x11, 0x0a, 0x03, 0x52, 0x53, 0x44, 0x18, 0x8d,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x52, 0x53, 0x44, 0x12, 0x11, 0x0a, 0x03, 0x53, 0x43,
	0x52, 0x18, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x53, 0x43, 0x52, 0x12, 0x11, 0x0a,
	0x03, 0x53, 0x4c, 0x4c, 0x18, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x53, 0x4c, 0x4c,
	0x12, 0x11, 0x0a, 0x03, 0x53, 0x47, 0x44, 0x18, 0x90, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03,
	0x53, 0x47, 0x44, 0x12, 0x11, 0x0a, 0x03, 0x58, 0x53, 0x55, 0x18, 0x91, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x03, 0x58, 0x53, 0x55, 0x12, 0x11, 0x0a, 0x03, 0x53, 0x42, 0x44, 0x18, 0x92, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x53, 0x42, 0x44, 0x12, 0x11, 0x0a, 0x03, 0x53, 0x4f, 0x53,
	0x18, 0x93, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x53, 0x4f, 0x53, 0x12, 0x11, 0x0a, 0x03,
	0x53, 0x53, 0x50, 0x18, 0x94, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x53, 0x53, 0x50, 0x12,
	0x11, 0x0a, 0x03, 0x4c, 0x4b, 0x52, 0x18, 0x95, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x4c,
	0x4b, 0x52, 0x12, 0x11, 0x0a, 0x03, 0x53, 0x44, 0x47, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x03, 0x53, 0x44, 0x47, 0x12, 0x11, 0x0a, 0x03, 0x53, 0x52, 0x44, 0x18, 0x97, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x03, 0x53, 0x52, 0x44, 0x12, 0x11, 0x0a, 0x03, 0x53, 0x45, 0x4b, 0x18,
	0x98, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x53, 0x45, 0x4b, 0x12, 0x11, 0x0a, 0x03, 0x43,
	0x48, 0x45, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x43, 0x48, 0x45, 0x12, 0x11,
	0x0a, 0x03, 0x43, 0x48, 0x57, 0x18, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x43, 0x48,
	0x57, 0x12, 0x11, 0x0a, 0x03, 0x53, 0x59, 0x50, 0x18, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x03, 0x53, 0x59, 0x50, 0x12, 0x11, 0x0a, 0x03, 0x54, 0x57, 0x44, 0x18, 0x9c, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x03, 0x54, 0x57, 0x44, 0x12, 0x11, 0x0a, 0x03, 0x54, 0x4a, 0x53, 0x18, 0x9d,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x54, 0x4a, 0x53, 0x12, 0x11, 0x0a, 0x03, 0x54, 0x5a,
	0x53, 0x18, 0x9e, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x54, 0x5a, 0x53, 0x12, 0x11, 0x0a,
	0x03, 0x54, 0x48, 0x42, 0x18, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x54, 0x48, 0x42,
	0x12, 0x11, 0x0a, 0x03, 0x54, 0x4f, 0x50, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03,
	0x54, 0x4f, 0x50, 0x12, 0x11, 0x0a, 0x03, 0x54, 0x54, 0x44, 0x18, 0xa1, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x03, 0x54, 0x54, 0x44, 0x12, 0x11, 0x0a, 0x03, 0x54, 0x4e, 0x44, 0x18, 0xa2, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x54, 0x4e, 0x44, 0x12, 0x11, 0x0a, 0x03, 0x54, 0x52, 0x59,
	0x18, 0xa3, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x54, 0x52, 0x59, 0x12, 0x11, 0x0a, 0x03,
	0x54, 0x4d, 0x54, 0x18, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x54, 0x4d, 0x54, 0x12,
	0x11, 0x0a, 0x03, 0x55, 0x47, 0x58, 0x18, 0xa5, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x55,
	0x47, 0x58, 0x12, 0x11, 0x0a, 0x03, 0x55, 0x41, 0x48, 0x18, 0xa6, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x03, 0x55, 0x41, 0x48, 0x12, 0x11, 0x0a, 0x03, 0x41, 0x45, 0x44, 0x18, 0xa7, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x03, 0x41, 0x45, 0x44, 0x12, 0x11, 0x0a, 0x03, 0x55, 0x53, 0x4e, 0x18,
	0xa8, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x55, 0x53, 0x4e, 0x12, 0x11, 0x0a, 0x03, 0x55,
	0x59, 0x55, 0x18, 0xa9, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x55, 0x59, 0x55, 0x12, 0x11,
	0x0a, 0x03, 0x55, 0x59, 0x49, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x55, 0x59,
	0x49, 0x12, 0x11, 0x0a, 0x03, 0x55, 0x59, 0x57, 0x18, 0xab, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x03, 0x55, 0x59, 0x57, 0x12, 0x11, 0x0a, 0x03, 0x55, 0x5a, 0x53, 0x18, 0xac, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x03, 0x55, 0x5a, 0x53, 0x12, 0x11, 0x0a, 0x03, 0x56, 0x55, 0x56, 0x18, 0xad,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x56, 0x55, 0x56, 0x12, 0x11, 0x0a, 0x03, 0x56, 0x45,
	0x53, 0x18, 0xae, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x56, 0x45, 0x53, 0x12, 0x11, 0x0a,
	0x03, 0x56, 0x45, 0x44, 0x18, 0xaf, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x56, 0x45, 0x44,
	0x12, 0x11, 0x0a, 0x03, 0x56, 0x4e, 0x44, 0x18, 0xb0, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03,
	0x56, 0x4e, 0x44, 0x12, 0x11, 0x0a, 0x03, 0x59, 0x45, 0x52, 0x18, 0xb1, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x03, 0x59, 0x45, 0x52, 0x12, 0x11, 0x0a, 0x03, 0x5a, 0x4d, 0x57, 0x18, 0xb2, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x5a, 0x4d, 0x57, 0x12, 0x11, 0x0a, 0x03, 0x5a, 0x57, 0x4c,
	0x18, 0xb3, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x5a, 0x57, 0x4c, 0x12, 0x11, 0x0a, 0x03,
	0x58, 0x42, 0x41, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x58, 0x42, 0x41, 0x12,
	0x11, 0x0a, 0x03, 0x58, 0x42, 0x42, 0x18, 0xb5, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x58,
	0x42, 0x42, 0x12, 0x11, 0x0a, 0x03, 0x58, 0x42, 0x43, 0x18, 0xb6, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x03, 0x58, 0x42, 0x43, 0x12, 0x11, 0x0a, 0x03, 0x58, 0x42, 0x44, 0x18, 0xb7, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x03, 0x58, 0x42, 0x44, 0x12, 0x11, 0x0a, 0x03, 0x58, 0x54, 0x53, 0x18,
	0xb8, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x58, 0x54, 0x53, 0x12, 0x11, 0x0a, 0x03, 0x58,
	0x58, 0x58, 0x18, 0xb9, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x58, 0x58, 0x58, 0x12, 0x11,
	0x0a, 0x03, 0x58, 0x41, 0x55, 0x18, 0xba, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x58, 0x41,
	0x55, 0x12, 0x11, 0x0a, 0x03, 0x58, 0x50, 0x44, 0x18, 0xbb, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x03, 0x58, 0x50, 0x44, 0x12, 0x11, 0x0a, 0x03, 0x58, 0x50, 0x54, 0x18, 0xbc, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x03, 0x58, 0x50, 0x54, 0x12, 0x11, 0x0a, 0x03, 0x58, 0x41, 0x47, 0x18, 0xbd,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x58, 0x41, 0x47, 0x42, 0x19, 0x5a, 0x17, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x7a, 0x2f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_locale_generated_proto_rawDescOnce sync.Once
	file_locale_generated_proto_rawDescData = file_locale_generated_proto_rawDesc
)

func file_locale_generated_proto_rawDescGZIP() []byte {
	file_locale_generated_proto_rawDescOnce.Do(func() {
		file_locale_generated_proto_rawDescData = protoimpl.X.CompressGZIP(file_locale_generated_proto_rawDescData)
	})
	return file_locale_generated_proto_rawDescData
}

var file_locale_generated_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_locale_generated_proto_goTypes = []interface{}{
	(*I18NString)(nil), // 0: header.I18nString
	(*Price)(nil),      // 1: header.Price
}
var file_locale_generated_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_locale_generated_proto_init() }
func file_locale_generated_proto_init() {
	if File_locale_generated_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_locale_generated_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*I18NString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_locale_generated_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Price); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_locale_generated_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_locale_generated_proto_goTypes,
		DependencyIndexes: file_locale_generated_proto_depIdxs,
		MessageInfos:      file_locale_generated_proto_msgTypes,
	}.Build()
	File_locale_generated_proto = out.File
	file_locale_generated_proto_rawDesc = nil
	file_locale_generated_proto_goTypes = nil
	file_locale_generated_proto_depIdxs = nil
}
