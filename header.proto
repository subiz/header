syntax = "proto3";

package header;

option go_package = "github.com/subiz/header";

import "common.proto";
import "account.proto";
import "type.proto";
import "noti5.proto";
import "locale.generated.proto"; // run node lang.js to generate this file

message Empty {
	common.Context ctx = 1;
}

message Id {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3;
	string query = 4; // (bot category: orders)
}

message Ids {
	common.Context ctx = 1;
	string account_id = 2;
	repeated string ids = 3;
	repeated string signatures = 4; // crc32 IEEEE

	repeated int64 last_modifieds = 5; // ms
	string anchor = 6;
	int32 limit = 7;
}

message Notifications {
	common.Context ctx = 1;
	string account_id = 2;
	repeated Notification notifications = 4;
	int64 severity = 5; // 0: not important, 1 important;
	string next_anchor = 6;
	int64 last_seen = 7;
	int64 unread = 8;
}

message Notification {
	common.Context ctx = 1;
	string account_id = 2;
	string agent_id = 3;
	string topic = 10;
	string type = 5; // type
	string data = 8; //json
	int64 created = 6; // ms
	bool is_read = 9;

	bool is_instant = 12; // just display and disappear, no persit
	int64 severity = 13; // 0: not important, 1 important;
	string category = 14; // user, order
	int64 checkpoint = 15;
}

message CompactedNoti {
	common.Context ctx = 1;
	string account_id = 2;
	string agent_id = 3;
	string id = 4;
	int64 created = 5;
	repeated Notification notifications = 7;
	bool is_read = 8;
}

message CompactedNotiRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string agent_id = 3;
	string id = 4;
}

message CompactedNoties {
	common.Context ctx = 1;
	string account_id = 2;
	string agent_id = 3;
	repeated CompactedNoti notifications = 4;
	string anchor = 5;
	bool is_read = 8;
	int64 read_created = 9;
}

message ListNotiRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string agent_id = 3;
	int32 limit = 4;
	string anchor = 5;
	string category = 6;
}

message Attribute {
	string key = 4;
	int64 modified = 8;
	string modified_by = 5;

	string value = 9; // json encode primary value
	string text = 10;
	double number = 11;
	bool boolean = 12;
	string datetime = 13;
	repeated string list = 14; // remove
	repeated Attribute revisions = 15;
	repeated string other_values = 20;

	string type = 16;
	string by = 17; // required

	// to update
	enum Ops {
		upsert = 0; // DEFAULT: update + insert, remove all other value
		replace = 2; // only write if existed, remove all other value
		insert = 3; // only write if not existed, remove all other value

		delete = 4; // delete specific elemnt match the value

		push = 5; // add a new value (for array) // unique
	}
	string action = 18;
}

// alias => user
// user => aliases
message UserAlias {
	common.Context ctx = 1;
	string account_id = 2;
	string user_id = 3;
	string alias = 4;
}

message User {
	common.Context ctx = 1;
	string id = 3;
	string account_id = 4;
	repeated string aliases = 5;
	repeated Attribute attributes = 18;

	UserSession session = 40;
	repeated string lead_owners = 41;
	repeated UserLabel labels = 42;
	bool is_lead = 43;
	string type = 47; // empty = user, lead, customer
}

message ShippingAddresses {
	common.Context ctx = 1;
	string account_id = 2;
	string user_id = 3;
	repeated Address shipping_addresses = 4;
}

message UserLabel {
	string label = 2; // id

	string by = 3;
	int64 at = 5; // ms
}

message Label {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3; // user generated // key

	string title = 4;
	string description = 7;
	string created_by = 8;
	int64 created = 9; // ms

	string color = 10;

	string updated_by = 12;
	int64 updated = 11;

	bool disabled = 15;
	int64 deleted = 16;
}

message Labels {
	common.Context ctx = 1;
	string account_id = 2;
	repeated Label labels = 3;
}

message Users {
	repeated User users = 1;
	repeated Error errors = 2;
	string signature = 3;
	int64 hit = 4;
	int64 total = 5;

	int32 end_offset = 7;
}

message SessionCampaign {
	string name = 2;
	string source = 3;
	string medium = 4;
	string term = 5;
	string content = 6;
}

// create user request
message CreateRequest {
	string challenge_id = 3;
	string answer = 4;
}

message DeleteAttrRequest {
	common.Context ctx = 1;
	string key = 2;
}

message AttributeDefinitionListItem {
	// value
	string value = 4; // cannot be changed
	I18nString i18n_label = 7;
	string label = 8;
}

message AttributeDefinition {
	common.Context ctx = 1;
	string account_id = 2;

	string name = 3; // will be removed
	string description = 4;

	I18nString i18n_label = 16; //
	string label = 21;

	string type = 5;
	enum AttributeType {
		text = 0;
		number = 1;
		boolean = 2;
		datetime = 3;
	}

	bool multiple_line = 17;
	string select = 18; // radio, checkbox, dropdown
	bool is_image = 28;

	bool is_date_only = 29;
	repeated AttributeDefinitionListItem items = 19; // for select
	string default_value = 20;

	// repeated string options = 6;
	repeated string list_items = 6; // remove

	string key = 7;

	string kind = 8; // will be removed
	enum AttributeKind {
		system = 0; // only system read and write
		default = 1; // created but agent can write, but not remove
		custom = 2;
	}

	int64 updated = 9;
	string updated_by = 11;
	string validator = 10; // email, name, decimal

	// bool allow_multiples = 14; //
	bool allow_user_edit = 15;

	bool is_system = 22;
	bool is_readonly = 23;

	int64 created = 24;
	string created_by = 25;

	int64 archived = 26;
	int64 usage = 27; // number of user has this attribute
}

message AttributeDefinitions {
	common.Context ctx = 1;
	repeated AttributeDefinition attributes = 2;
}

message UserCreateResult {
	string id = 3;
	string mask = 5;
}

// remove
message Note {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3;

	string creator_id = 5;
	string text = 6;
	int64 created = 7;
	int64 updated = 8;
	string target_id = 9; // user_id
}

// remove
message Notes {
	common.Context ctx = 1;
	repeated Note notes = 3;
	string anchor = 4;
}

message UserNote {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3;
	string user_id = 4;

	string text = 6;
	int64 created = 7;
	int64 updated = 8;
	string created_by = 9;
	string updated_by = 10;
}

message UserRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string user_id = 3;
	string object_id = 4;
}

message ListNotesRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string user_id = 3;
}

message DeleteNoteRequest {
	string account_id = 2;
	string target_id = 3;
	string id = 4;
}

// TODO move params to common
message IntParams {
	int64 eq = 2;
	int64 neq = 3;
	int64 gt = 4;
	int64 gte = 5;
	int64 lt = 6;
	int64 lte = 7;
}

message StringParams {
	string eq = 2;
	repeated string in = 3;
	string contain = 4;
}

message IdParams {
	string id = 2;
	repeated string ids = 3;
}

message Params {
	repeated string args = 2;
}

message Location {
	string isp = 3;                 // filled
	string continent_name = 4;      // filled
	string country_code = 5;        // filled

	string city_name = 6;            // filled
	string country_name = 7;         // filled
	string continent_code = 8;      // filled
	float latitude = 9;             // filled
	float longitude = 10;            // filled
	string postal_code = 11;         // filled
}

message Locations {
	repeated Location locations = 2;
	repeated Error errors = 3;
}

message LocationParams {
	string query = 2;
	int64 limit = 3;
	string account_id = 4;
}

message Page {
	string id = 2;
	string name = 3;
	string url = 4;
}

message UserInfo {
	string id = 2;
	int64 updated = 3;
	User user = 4;
	Page viewing = 5;
	string source = 6;
	Location location = 7;
	int64 view_count = 8; // deprecated
	int64 duration = 9;
	int64 latest_event_created = 10;
	string user_session_id = 11;
	repeated Page view_pages = 12;
	int64 time_on_site = 13;
	bool is_focused = 14;
}

message UserInfoParams {
	string account_id = 15;
	string signature = 2;

	int32 limit = 3;
	int32 offset = 4;
	string order_by = 5;

	IdParams source = 6;
	IdParams page_id = 8;
	IdParams location_id = 7;

	IntParams view_count = 9;
	IntParams duration = 10;

	// location params
	StringParams country_code = 11;
	StringParams continent_code = 12;
	StringParams url = 13;
	IntParams time_on_site = 14;
}

enum HaveBeen {
	unknown = 0;
	increase = 1;
	decrease = 2;
	immutable = 3;
}

enum PK {
	id = 0;
	account_id = 1;
	domain = 2;
	facebook_page_id = 3;
	zalo_oa_id = 4;
};

message Key {
	string account_id = 2;
	string order_id = 3;
	string product_id = 4;
	string bill_id = 5;
	string order_comment_id = 6;
	string task_id = 7;
	string task_comment_id = 8;
}

message UserEventMetric {
	string account_id = 2;
	string user_id = 3;
	int64 created_hour = 4;
	string date = 5; // derived

	int64 event_count = 20;
}

message UserEventMetrics {
	repeated UserEventMetric metrics = 2;
}

message UserEventMetricsRequest {
	string account_id = 2;
	string user_id = 3;
	int64 created_hour_from = 4;
	int64 created_hour_to = 5;
	int32 tz = 6;
	string dim = 7;
}

message UserMetric {
	int64 active_user_num = 3; // live
	string have_been = 5; // live

	string account_id = 2;
	int64 created_hour = 6;
	string session_source = 7;
	string channel = 8;
	string channel_touchpoint = 9;
	string first_interact = 10;
	string date = 11; // derived
	int64 seen_hour = 12;

	int64 user_count = 65;
	int64 lead_count = 66;
}

message UserMetrics {
	repeated UserMetric metrics = 2;
}

message UserMetricsRequest {
	string account_id = 2;
	int64 created_hour_from = 3;
	int64 created_hour_to = 4;
	int64 seen_hour_from = 13;
	int64 seen_hour_to = 14;
	repeated string sources = 5;
	repeated string channels = 6;
	repeated string channel_touchpoints = 7;
	repeated string first_interacts = 8;
	repeated string session_sources = 15;
	repeated string not_channels = 16;
	account.BusinessHours business_hours = 17;
	account.BusinessHours not_business_hours = 18;
	int32 tz = 9;
	string dim = 10;
	string anchor = 11;
	int32 limit = 12;
}

message ConversationMetric {
	string account_id = 2;
	int64 created_hour = 3;
	string channel = 4;
	string channel_touchpoint = 5;
	repeated int32 ratings = 7;
	int32 last_rating = 8;
	int64 first_replied_count = 9;
	int64 first_replied_duration = 10;
	repeated string agent_ids = 11; // assigned
	repeated string agent_sent_ids = 12;
	string date = 13; // derived
	int64 tag_bits = 14; // only system
	string tag_strings = 15; // only system
	repeated string tags = 6;
	string tag = 16; // derived
	int64 latest_sent_hour = 17;

	int64 conversation_count = 65;
	int64 user_sent_count = 66;
	int64 not_reply_count = 67;
	int64 send_duration_sum = 68;
}

message ConversationMetrics {
	repeated ConversationMetric metrics = 2;
}

message ConversationMetricsRequest {
	string account_id = 2;
	int64 created_hour_from = 3;
	int64 created_hour_to = 4;
	int64 latest_sent_hour_from = 16;
	int64 latest_sent_hour_to = 17;
	repeated string channels = 5;
	repeated string channel_touchpoints = 6;
	repeated int32 ratings = 8;
	repeated string tags = 7; // and
	repeated string agent_ids = 9; // and
	repeated string agent_sent_ids = 14; // and
	int64 first_replied_duration_gt = 15;
	int64 send_duration_sum_gt = 21;
	repeated string not_channels = 18;
	account.BusinessHours business_hours = 19;
	account.BusinessHours not_business_hours = 20;
	int32 tz = 10;
	string dim = 11;
	string anchor = 12;
	int32 limit = 13;
}

message AgentMetric {
	string account_id = 2;
	int64 created_hour = 3;
	string channel = 6;
	string agent_id = 4;
	string date = 5; // derived
	int64 message_sent_count = 65;
	int64 conversation_count = 66;
	int64 first_replied_count = 67;
	int64 first_replied_duration = 68;
	int64 great_rating_count = 69;
	int64 not_reply_count = 70;
	int64 conversation_sent_count = 71;
}

message AgentMetrics {
	repeated AgentMetric metrics = 2;
}

message AgentMetricsRequest {
	string account_id = 2;
	int64 created_hour_from = 3;
	int64 created_hour_to = 4;
	repeated string agent_ids = 5;
	repeated string channels = 6;
	repeated string not_channels = 7;
	account.BusinessHours business_hours = 8;
	account.BusinessHours not_business_hours = 9;
	int32 tz = 10;
	string dim = 11;
}

message SourceMetric {
	string account_id = 2;
	string source = 3; // direct, referring, organic,social, advertising
	int64 active_user_num = 4;
	string have_been = 5;
}

message LocationMetric {
	string account_id = 2;
	Location location = 3;
	int64 active_user_num = 4;
	string have_been = 5;
}

message PageMetric {
	string account_id = 2;
	Page page = 3;
	int64 active_user_num = 4;
	string have_been = 5;
}

message UserReport {
	string account_id = 2;
	UserMetric total_user = 3;
	repeated SourceMetric top_source = 4;
	repeated LocationMetric top_location = 5;
	repeated PageMetric top_page = 6;
}

message SourceMetrics {
	repeated SourceMetric source_metrics = 2;
}

message LocationMetrics {
	repeated LocationMetric location_metrics = 2;
}

message PageMetrics {
	repeated PageMetric page_metrics = 2;
}

message ConcurrentUser {
	int64 unix_day = 2;
	int64 sum = 3;
	int64 num = 4;
	int64 highest = 5;
}

message ReportCCU {
	string account_id = 2;
	repeated ConcurrentUser ccus = 3;
}

///////////////////////
message Events {
	common.Context ctx = 1;
	repeated Event events = 4;
	int64 total = 2;
	string anchor = 3;
	int64 last_modified = 5;
}

message Event {
	common.Context ctx = 1;
	string user_id = 2; // TODO: remove
	string id = 3;
	string account_id = 4;
	int64 created = 8;
	int64 updated = 10;
	string type = 9;
	repeated string topics = 11; // TODO: remove
	string session_id = 12;
	common.By by = 50;
	message Data {
		account.Account account = 1;
		account.Agent agent = 2;
		Message message = 3;
		Conversation conversation = 4;
		Product product = 6;
		Topic topic = 7;
		account.Presence presence = 8;
		User user = 10;
		UnreadTopic unread_topic = 11; // todo: remove
		Notification notification = 14;
		AgentGroup agent_group = 18;
		Note note = 23;
		// Ticket ticket = 24;
		// Automation automation = 25;
		Event event = 26;
		AutomationEvent automation_event = 30;
		// notibox.Notibox notibox = 32;
		noti5.Setting notification_setting = 34;
		Rule rule = 36;
		AttributeDefinition user_attribute = 37;
		Tag tag = 38;
		UserMetric total_user = 39;
		Bot bot = 40;
		BotRunResponse bot_run_response = 41;
		Integration integration = 42;
		BotTerminated bot_terminated = 43;
		Webhook webhook = 44;
		UserAlias user_alias = 45;
		Conversion conversion = 47;
		CompactedNoties compacted_noties = 51;
		Site site = 52;
		WebpageCheck webpage_check = 53;
		LangMessage language_message = 54;
		Label label = 55;
		UserView user_view = 56;
		LoginSession login_session = 57;
		ProductFeed product_feed = 58;
		ProductCollection product_collection = 59;
		Order order = 60;
		Currency currency = 61;
		ShopSetting shop_setting = 62;
		Address shipping_address = 63;
		OrderStatusUpdated order_status = 65;
		Bill bill = 66;
		Order order_from = 67;
		Event current = 68;
		OrderHistoryEntry order_history_entry = 69;
		UserOrderConfirmation user_order_confirmation = 70;
		Pipeline pipeline = 71;
		OrderPipelineUpdated order_pipeline_updated = 72;
		Task task = 73;
		TaskHistoryEntry task_history_entry = 74;
		OrderPipelineStage order_pipeline_stage = 75;
		ConversationModal conversation_modal = 76;
		ConversationAutomation conversation_automation = 77;
	}
	Data data = 20;
}

message EventParams {
	string type = 2;
	string account_id = 3;
}

message ListUserEventsRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string user_id = 3;
	string query = 4;
	string anchor = 5;
	int32 limit = 6;
	string category = 9;
}

message UserEvent {
	common.Context ctx = 1;
	string account_id = 3;
	string user_id = 4;
	Event event = 5;
	User user = 6;
}

message AutomationEvent {
	common.Context ctx = 1;
	string account_id = 3;
	string user_id = 4;
	Automation automation = 5;
	User user = 7;
	Event event = 9;
	AutomationAction action = 10;
}

message Automation {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3;
	string channel = 4; // deprecated
	string name = 5;
	string description = 6;
	SCondition condition = 8;

	int64 created = 9;
	int64 modified = 10;

	string state = 12;
	enum State {
		active = 0;
		inactive = 1;
	}

	string action_type = 13; // deprecated
	enum ActionType {
		conversation_message = 0;

		block_user = 5;
		user_notification = 8;
		user_note = 10;

		add_agent_to_conversation = 14;
		conversation_tag = 16;
	}

	string action_data = 14; // deprecated
	string scope = 15; // deprecated
	enum AutomationScope {
		conversation = 0;
		user = 3;
	}

	bool cross_channel = 16; // deprecated
	string metadata = 17;

	repeated AutomationAction actions = 18;
	uint32 delay_sec = 19;
	string action_id = 20; // deprecated, prepare for migrate
}

message AutomationAction {
	string type = 2;

	User user = 4;
	Email email = 5;
	Note user_note = 6;
	Event event = 7;
	string agent_id = 8; // deprecated
	string tag_id = 9; // deprecated
	repeated Event events = 10;
	// Ticket ticket = 11;
	string integration_id = 12;
	string segmentation_id = 13;
	repeated string agent_ids = 14;
	repeated string tag_ids = 15;
	string scope = 16;
	string conversation_state = 17;
	string id = 18; // required, generated by subiz to check whether an action is performed or not
	uint32 delay_sec = 21;
	string facebook_page_id = 22;
}

message Automations {
	common.Context ctx = 1;
	repeated Automation automations = 2;
}

message Topic {
	common.Context ctx = 1;
	string account_id = 2;
	string topic = 3;

	string type = 5;
	int64 updated = 8;
	int32 unread = 9; // deprecated by is_read
	string user_id = 10;
	string agent_id = 11;

	Event by_event = 14;
	bool is_muted = 15;
	bool is_read = 16;
}

message UnreadTopic { // todo: delete this, unread is just topic_updated with is_read=false
	common.Context ctx = 1;
	string topic = 3;
	string agent_id = 4;
	string user_id = 5;
	string type = 6;
	int64 updated = 8;
	int32 unread = 9;
	Event by_event = 10;
}

message SourceTrace {
	common.Context ctx = 1;
	string referrer = 2;
	string source_referrer = 3;
}

message UserSession {
	common.Context ctx = 1;
	string account_id = 2;
	string user_id = 3;
	string id = 4;

	Event start_event = 5;
	Event latest_event = 6;

	string ip = 7;
	string city_name = 8;            // derived from ip
	string country_name = 9;         // derived from ip
	string continent_code = 10;      // derived from ip
	float latitude = 12;             // derived from ip
	float longitude = 13;            // derived from ip
	string postal_code = 14;         // derived from ip

	string timezone = 16;

	string isp = 17;                 // derived from ip
	string continent_name = 18;      // derived from ip
	string country_code = 19;        // derived from ip

	string platform = 20;

	string device_type = 21;         // filled
	enum DeviceType {
		unknown = 0;
		mobile = 1;
		tablet = 2;
		desktop = 3;
	}

	string browser_name = 22;        // filled
	string language = 23;
	string user_agent = 24;
	string screen_resolution = 25;

	string ga_client_id = 26;
	repeated string ga_tracking_ids = 27;
	enum AdsNetwork {
		google_adwords = 0;
	}
	string ads_network = 28;

	repeated SessionCampaign campaigns = 29;

	repeated SourceTrace source_traces = 39;
	string referrer = 32;
	string destination_referrer = 38;
	enum Source {
		direct = 0;
		referring = 1;
		organic = 2;
		social = 3;
		advertising = 4;
	}
	string source = 33;

	Event latest_content_view = 34; // read only, do not persist
	int64 total_content_views = 35; // read only, do not persist

	float lead_score = 36;
	int64 time_on_site = 37;
}

message StartRequest {
	common.Context ctx = 1;

	string account_id = 3;
	int64 created = 13;
	string conversation_id = 14;

	User user = 25;
	string integration_id = 26;
	string chain_id = 27;
	string message = 30;
	repeated ConversationMember members = 31;
	string group_id = 32;

	string state = 33; // default is pending, should be active if dont want routing
	string locale = 34;

	// starter may be user, but because of bot or automation,
	// if user manually click on start conversation button initial_by is user id
	// if bot automatically created conversation by widget (using user cred),
	// initial_by is bot id
	string initial_by = 35;

	string source = 36;
	bool is_private = 37;

	string subject = 38;
}

message PresencesRequest {
	common.Context ctx = 1;
	repeated string user_ids = 2;
	string account_id = 3;
}

message PresencesResponse {
	repeated string online_user_ids = 2;
	repeated string focused_user_ids = 3;
}

message BotRunRequest {
	common.Context ctx = 1;
	// require
	string account_id = 2;
	string bot_id = 3;
	string object_type = 4; // conversations
	string object_id = 5; // conversation_id

	// user_id is inside this
	repeated KV object_contexts = 14;

	// optional
	string mode = 6;
	Bot bot = 7;
	string action_id = 8;
	BotAction action = 9;

	// internal use only
	string bot_run_type = 15;
	string action_run_type = 16;
	int32 index = 18;

	// payload
	int64 created = 10;
	Event event = 11;
	string bot_trigger_type = 12;
	string lang = 17;
}

message BotRunResponse {
	string account_id = 2;
	string bot_id = 3;
	string object_type = 4;
	string object_id = 5;

	string exec_bot_id = 8;
	string exec_bot_state = 9;

	string action_id = 16;
	string action_state = 17;
}

message Rule {
	common.Context ctx = 1;
	string id = 2;
	string account_id = 3;
	int32 priority = 4;
	enum AssignStrategy {
		all_agents = 0;
		agentgroup = 2;
		agents = 3;
		most_recent = 4;
		roundrobin_all_agents = 5;
		roundrobin_agents = 6;

		first_reply = 7; // list of agent
		first_reply_of_all = 8; // all agent
		first_reply_of_group = 9; // group

		least_workload = 11;
		least_workload_agents = 12;
		least_workload_of_group = 13;

		least_open = 14;
		least_open_agents = 15;
		least_open_of_group = 16;

		bot = 10;
	}
	string strategy = 5;
	repeated string assign_tos = 6;
	bool enabled = 8;
	int64 created = 9;
	int64 modified = 12;
	string name = 10;
	string description = 11;
	bool available_agents_only = 13; // strategy
	// optional SCondition condition = 14;

	// new condition
	ChannelCondition channel_condition = 15;
	TimmingCondition timming_condition = 16;
	bool user_has_replied_before = 18; // new
	repeated UserAttributeCondition user_conditions = 19;
	bool when_offline = 21; // only run when there is no online agent

	int64 v = 22; // version
}

message TimmingCondition {
	string business_hour = 3; // [in, notIn] if this is true, ignore all other timming conditions
	repeated string days_of_week = 2; // Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday
	repeated int32 minute_of_days = 4; // pair [0-4] [6-9]
}

message ChannelCondition {
	repeated string channels = 2; // default: all channel

	// for fb comment
	// for messenger
	// for zalo
	repeated string integration_ids = 3; // optional for subiz and email

	// for subiz only
	repeated LocationCondition locations = 4; // or
	repeated LocationCondition not_in_locations = 13; // or
	repeated string page_urls = 5;
	repeated string device_types = 7; // desktop, mobile, tablet

	// for email only
	repeated string email_tos = 10; // contains
	repeated string email_froms = 11; // contains
	repeated string email_subjects = 12;  // contains
}

message LocationCondition {
	string city_name = 3; // must equal
	string country_code = 4; // must equal

	string province = 5;
	repeated string districts = 6;
}

message Route {
	common.Context ctx = 1;
	repeated Rule rules = 2;
}

message RouteResult {
	string rule_id = 1;
	string strategy = 3;
	repeated string agent_ids = 4;
	string group_id = 5;
	string state = 6;
	int64 assigned = 7; // ms

	string bot_id = 8; // strategy == bot
}

message ConversationMember {
	common.Context ctx = 1;
	string account_id = 2;
	string type = 3; // type

	string id = 4;

	string conversation_id = 13;
	string last_page_view_url = 15;
	string membership = 12;
	enum State {
		active = 0;
		left = 1;
		observer = 2; // assigned
		terminated = 3 ; // bot only
	};
	common.By invited_by = 16;

	int64 left_at = 17;
	int64 joined_at = 18; // ms
	int64 first_message_at = 19; // ms
	int64 seen_at = 20;
	int64 received_at = 21;
	int64 last_sent = 23; // timestamp

	bool is_muted = 27;
	bool off_notification = 28;
}

message ListConversationsRequest {
	common.Context ctx = 1;
	string account_id = 3;
	//	 string state = 4; // empty or unassigned
	string member_id = 8; // ignore
	//  string group_by = 9;
	string integration_id = 10;
	string user_id = 11;
	int32 limit = 5;
	string anchor = 6;

	string agent_id = 12; // list conversations of agent

	repeated string user_ids = 13; // for live, only return id and state

	string state = 14;

	bool is_private = 15; // for agent only
	bool id_only = 16; // internal usage
}

message ListConversationEventsRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string conversation_id = 3;
	string start_id = 4;
	int32 limit = 6;

	string message_type = 15; // 'empty', file, image, link, pinned
	bool is_private = 7;
}

message Chain {
	string account_id = 2;
	string id = 3;
	string conversation_id = 4;
}

enum ConvoState {
	// none = 0; // convo
	unassigned = 0; // convo
	active = 6; // convo
	ended = 8; // convo
	pending = 9; // ticket and convo

	all = 10; // ticket
	// open = 11;  ticket
	resolved = 13; // ticket
	// closed = 14; // ticket

	waiting_for_reply = 15; // waiting for reply
}

message Conversation {
	common.Context ctx = 1;
	string id = 2;
	string account_id = 3;
	int64 created = 4;
	repeated ConversationMember members = 7;
	repeated Tag tags = 10;
	int64 ended = 12;
	string state = 11; // converation state

	Integration integration = 18;
	int64 actived = 19;
	string last_message_id = 21; // internal use only
	Message last_message = 20;

	Event last_message_sent = 23;
	Event last_event = 26;
	string initial_by = 25; // agent_id || popup || user || bot

	int64 response_sec = 22;

	string chain_id = 24;
	RouteResult assigned_to = 30;

	string first_message = 31;
	string subject = 32;

	repeated KV fields = 33;
	repeated Rating ratings = 35;

	string source = 36; // indicate where does the conversation happended (url)

	// my field
	string agent_id = 40;
	bool mute = 41; // true, false
	bool read = 42; // true, false
	bool watch = 44; // true

	int64 updated = 43;

	Event matched_event = 45; // for search only

	string locale = 46;
	repeated string agent_sent_ids = 47; // holap derived
	int64 first_replied_duration = 48; // holap derived
	string channel = 49; // holap derived
	string channel_touchpoint = 50; // holap derived
	bool is_private = 51;

	string avatar_url = 52;
	int64 last_modified = 53;
}

message Rating {
	int64 rated = 35; // rated time ms
	int32 rating = 36; // 1-poor 2 3-average 4 5-great
	string rated_by = 37; // must be an user id
	bool no_rating = 38; // use dont want to rate
	string comment = 39;
}

message Conversations {
	common.Context ctx = 1;
	repeated Conversation conversations = 3;
	string anchor = 4;
	repeated string user_ids = 5;
	repeated Error errors = 6;
	int64 last_modified = 7;
}

message Message {
	common.Context ctx = 1;
	string account_id = 5;
	string order_id = 6;
	string conversation_id = 14;
	string task_id = 27;
	string id = 11;
	string text = 2;

	string format = 3; // plaintext, html, markdown, delta
	repeated Attachment attachments = 4;

	repeated KV fields =	10;

	string integration_id = 15;
	string chain_id = 16;

	// used for reaction and delivery status, could be ignore
	repeated MessagePong pongs = 17;

	string quill_delta = 20; // deprecated
	I18nString i18n_quill_delta = 21; // for template

	bool is_private = 22;

	// bool is_pinned = 24;
	int64 pinned = 25;
	string pinned_by = 26;
}

message MessagePong {
	string member_id = 3;

	enum Type {
		n = 0;
		ack = 1;
		seen = 2;
		receive = 3; // deliverd to client machine
		delete = 4;
		like = 5;
		love = 6;
		haha = 7;
		wow = 8;
		sad = 9;
		angry = 10;
		remove_like = 11;
		remove_love = 12;
		remove_wow = 13;
		remove_haha = 14;
		remove_sad = 15;
		remove_angry = 16;
		hide = 17;
		remove_hide = 18;
		open = 19; // email opened

	}
	string type = 4;

	int64 created = 5;
	string ack_error = 6; // used in ack
	int64 count = 7;
}

message MessageButton {
	enum ButtonType {
		unknown = 0;
		url_button = 2;
		postback_button = 3;
		call_button = 5;
		widget_ask_desktop_notify_button = 6;
		widget_ask_contact_info_button = 7;
	}

	string type = 2;

	string id = 15;
	// post back
	string title = 3;
	string payload = 4;
	string image_url = 5;
	string product_id = 10; // if used in type = url => product url
	//	optional RawEvent event = 12;
	string url = 14;

	string phone_number = 16;
	string webview_size = 18; // fb

	I18nString i18n_title = 19;
}

message AskInfomationAnswer {
	string message_id = 2;
	string answer = 3;
}

message AskInfomation {
	string question = 2;
	string input_type = 3;
	string key = 4; // user.name user.phone
	string answer = 5;
	int64 answered = 6;
	enum InputType {
		phone = 0;
		email = 1;
		text = 2;
		password = 3;
		number = 4;
		date = 5;
		color = 6;
		location = 7;
		time = 8;
		url = 9;
	}
}

message GenericElementTemplate {
	string title = 2;
	string image_url = 3;
	string subtitle = 4;
	MessageButton default_action = 5;
	repeated MessageButton buttons = 6;

	string id = 7; // fb product id

	I18nString i18n_title = 8;
	I18nString i18n_subtitle = 9;
}

enum AttachmentType {
	nothing = 0;
	file = 2;
	generic = 3;
	preview = 4;
	button = 5;
	input = 6;
	ask_info_form = 7;
	ask_info_form_answer = 8;
	form = 9;
	form_submit = 10;
	fallback = 11;
	// content_template = 12;
	quick_replies = 13;
	command = 14; // request_user_info
	link = 15;
	postback = 16;
	product_preview = 17;
	product = 18;
	quick_reply = 19;
	order = 20;
}

message Attachment {
	string type = 12;
	// file
	string mimetype = 2;
	string url = 3;
 	string thumbnail_url = 4;
	string name = 5;
	string description = 6;
	//string data = 7; // for custom data
	int32 length = 15;
	int32 size = 13; // byte

	// generic
	repeated GenericElementTemplate elements = 8;

	// preview
	string title = 9;
	string color = 10;
	string pretext = 11;

	repeated MessageButton buttons = 16;
	AskInfomation ask_info = 17;
	AskInfomationAnswer ask_info_answer = 18;
	//repeated string inputtype = 17;

	MessageForm form = 20;
	MessageFormSubmit form_submit = 21;

	repeated QuickReply quick_replies = 23;
	bool lock_input = 24; // lock input while has quick replies

	Postback postback = 25;
	Event quote = 26;

	Product product = 30;

	QuickReply quick_reply = 31;
	Order order = 32;
}

message QuickReply {
	string content_type = 2; // should be 'text'
	string title = 3;
	string payload = 4;
	string image_url = 5;
	I18nString i18n_title = 6;
}

message MessageForm {
	string title = 2;
	string state = 3;
	repeated MessageFormField fields = 4;
	string submit_url = 5;
}

message MessageFormSubmit {
	string form_message_id = 2;
	repeated MessageFormField fields = 3;
	string state = 4;
}

message MessageFormField {
	enum InputType {
		text = 0;
		datetime = 1;
		list = 2;
		number = 3;
		boolean = 4;
	}
	string input_type = 2;
	repeated string items = 3;
	string state = 4;
	string title = 5;
	string image_url = 6;
	string name = 7;
	string answer = 8;
	int64 answered = 9;
}

message Tag {
	common.Context ctx = 1;
	string id = 2;
	string account_id = 3;
	string title = 4;
	int64 created = 5;
	int64 modified = 6;
	string creator_id = 7;
	string color = 8;

	int64 last_used = 9;
}

message TemplateData {
	string type = 4;
	string key = 2;
	repeated string ids = 3;
}

message Template {
	common.Context ctx = 1;
	string id = 2;
	string account_id = 3;
	repeated string keys = 6;
	string channel_type = 17; // remove
	Message message = 8;
	repeated TemplateData data = 18;
	bool is_public = 11;
	int64 created = 12;
	int64 modified = 13;
	string creator = 14;
	int64 latest_picked = 15;
}

message SearchTemplate {
	common.Context ctx = 1;
	string anchor = 2;
	int32 limit = 3;
	string account_id = 5;
	string order_by = 6; // latest_picked
}

message Templates {
	common.Context ctx = 1;
	repeated Template templates = 2;
	string anchor = 3;
	int64 total = 4;
}

message Tags {
	common.Context ctx = 1;
	repeated Tag tags = 4;
}

message Postback {
	string event_id = 4;
	string payload = 5;
	string title = 8;
}

message BotPostback {
	string type = 2; // bot_jump || add_to_cart || order_confirmation || place_order
	string bot_id = 3; // required
	string action_id = 4;
	string from_action = 5; // required
	string title = 6; // for bot_jump
	I18nString i18n_title = 7; // for bot_jump

	// for add_to_card and place_order only
	string product_id = 10;

	// for order_confirmation
	string status = 13; // confirmed || cancelled
}

message Integrations {
	common.Context ctx = 1;
	string account_id = 2;
	repeated Integration integrations = 3;
}

message Integration {
	common.Context ctx = 1;
	string account_id = 2;
	string connector_id = 3;
	string logo_url = 4;
	string name = 5;

	string connector_type = 12; // see client.Client_ChannelType
	int64 integrated = 6;
	// int64 updated = 7;

	string state = 8;
	enum State {
		activated = 0; // activeated and insync
		failed = 2;
		deleted = 3;
	}
	string id = 10; // generated by connector, must be format of accid.XXX.connectorid

	int64 created = 11;
	string integrated_by = 13;
	int64 last_failed = 14;
	bool disabled = 15;
	string sending_status = 17; // ok, failed
	string receiving_status = 18; // ok, failed
}

message TagRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string conversation_id = 3;
	string id = 4;
}

message AssignRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string conversation_id = 3;
	string user_id = 4;
	bool use_rule = 5;

	string strategy = 6;
	repeated string assign_tos = 7;
	bool available_agents_only = 8; // strategy

	// for bot only
	int64 agent_reply_timeout = 9; // sec
	string branch_on_no_reply = 10; // action id

	string bot_id = 11;
	string action_id = 12;
}

message EndchatConnectorSetting {
	string connector_id = 3;
	bool at_midnight = 4;
	int64 after_inactivity_mins = 6;
	bool enabled = 11;
	bool custom = 12;
}

message EndchatSetting {
	common.Context ctx = 1;
	string account_id = 2;
	repeated EndchatConnectorSetting connector_settings = 3;
	EndchatConnectorSetting global_setting = 4;

	int64 updated = 5;

	bool send_transcript = 7;
	repeated string send_transcript_tos = 8;
}

message ConversationAutomations {
	common.Context ctx = 1;
	string account_id = 2;
	string conversation_automations = 3;
}

message ConversationAutomation {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3;
	string type = 4; // endchat
	string name = 5;
	repeated string channel_types = 6;

	string updated_by = 7;
	int64 updated = 8;

	string created_by = 9;
	int64 created = 10; // ms

	int64 disabled = 11;

	repeated BotCondition conditions = 12;
	// AwayMessageAutomation away_message = 11;
	// AwayMessageAutomation away_message = 11;

	// trigger
	int64 after_last_sent_ms = 13;
	bool after_last_sent_by_type = 14; // agent, user

	repeated BotAction actions = 15;

	int64 last_run_at = 20;
}

message Trigger {
	string type = 3; // conversation_assigned, conversation_start, area_clicked (web only), scrolling_percentage (web only), inactivity_duration (web only), after_pageview (web only), after_js_event (web only)
	string area_clicked_css_selector = 4; // .user_name #user
	float scrolling_percentage = 6; // 0.55
	int64 inactivity_sec = 8; // 50s
	int64 after_pageview_sec = 9; // 50s
	bool disabled = 10;
}

message BotCondition {
	// url, browser, location, returning_visitor, device_type, referer, source, user_attribute,
	// timming, integration_id, offline, user_is_a_contact, order, conversation_tags
	// agent_online, conversation_member_online
	string key = 1;

	enum Source {
		direct = 0;
		google_ads = 1;
		organic = 2;
	}

	repeated string sources = 2;
	enum DeviveType {
		desktop = 0;
		mobile = 1;
		tablet = 2;
	}
	repeated string device_types = 3;

	enum Browser {
		all = 0;
		chrome = 1;
		firefox = 2;
		edge = 3;
		ie = 4;
		safari = 5;
		other = 6;
	}
	repeated string browsers = 4;

	repeated string referers = 6; // referer
	repeated string exclude_referers = 9; // referrer

	repeated string urls = 10; // url, url_term, url_medium, ... (or only)
	repeated string exclude_urls = 11; // url (or only)

	repeated string has_visited_url = 12; // url (or only)
	repeated string has_not_visited_urls = 13; // url (or only)

	repeated LocationCondition locations = 14; // or
	repeated LocationCondition exclude_locations = 15; // or

	// timming
	string business_hour = 20; // [in, notIn] if this is true, ignore all other timming conditions
	repeated string days_of_week = 21; // Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday
	repeated int32 minutes_of_day = 22; // pair [0-4] [6-9]

	// user
	UserAttributeCondition user = 23; // user_attribute

	repeated string integration_ids = 24; // optional for subiz and email

	// offline
	bool offline = 25; // only run when there is no online agent

	bool returning_visitor = 26;

	bool user_is_a_contact = 27; // has a way to re-connnect to user (email or phone)

	OrderCondition order = 28; // order

	repeated string conversation_tags = 29;
	repeated string exclude_conversation_tags = 30;

	bool has_agent_online = 31;
	bool has_conversation_member_online = 32;
}

message OrderCondition {
	string key = 2; // product, order_total, pos, shipping

	repeated string product_ids = 3;
	repeated string exclude_product_ids = 4;

	repeated string pos_ids = 5;
	repeated string exclude_pos_ids = 6;

	repeated string currencies = 7;
	repeated string exclude_currencies = 8;

	FloatCondition total = 9;

	repeated LocationCondition shipping = 10;
	repeated LocationCondition exclude_shipping = 11;
}

message UserAttributeCondition {
	string key = 2;
	string operator = 3;
	string value = 4;
}

message Sites {
	common.Context ctx = 1;
	string account_id = 2; // web, messenger, zalo
	repeated Site sites = 3;
}

message Site {
	common.Context ctx = 1;
	string account_id = 2; // web, messenger, zalo
	string id = 3; // web:abc.com, web:xyz.com, facebook:423084234234, zalo:3903002404

	bool user_verified = 4;
	string image_url = 5;
	string image_hash = 12; // MD5 sum of image (internal)

	bool agent_confirmed = 6;

	int64 created = 7;

	string title = 9;
	int64 last_user_verified = 10;
	string last_user_verify_uri = 11;

	string mobile_screenshoot_url = 13;
	string desktop_screenshoot_url = 14;
}

message Bot {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3;
	string fullname = 4;
	string job_title = 19;
	string avatar_url = 5;

	string category = 6; // see BotCategory: users, orders

	string state = 7; // like agent state: active, inactive, deleted

	BotAction action = 9; // point to root action

	int64 created = 10;
	string created_by = 11;

	int64 updated = 12;
	string updated_by = 13;

	repeated Trigger triggers = 14;
	Frequently initiative_frequency = 15;

	repeated BotCondition conditions = 16;
	repeated string channels = 17; // default: all channel

	string bot_state = 18; // active, inactive

	int64 last_executed = 20; // ms
	string bot_type = 21; // hello, lead, operator, pipeline_automation
	string action_hash = 22; // hex of sha1

	string version = 23;
	string template_data = 24;
	int64 count_lead_in_last_7_days = 25;
	int64 count_conv_in_last_7_days = 26;

	repeated string sites = 27;

	string locale = 28; // can be auto
	repeated string locales = 29;

	string pipeline = 30;
	string pipeline_stage = 31; // for pipeline_stage
}

message Bots {
	common.Context ctx = 1;
	repeated Bot bots = 2;
}

enum BotCategory {
	users = 0;
	systems = 1;
	conversations = 2;
	orders = 3;
}

enum BotActionType {
	nil = 0;
	condition = 1;
	sleep = 2;
	send_message = 3;
	jump = 4;
	send_email = 5;
	convert_to_ticket = 7;
	send_webhook = 8;
	update_conversation = 11;
	question = 12;
	update_user = 13;
	assign = 14;
	send_http = 15;
	switch_language = 16;
	ask_question = 18;
	end_bot = 19;
	update_user_labels = 20;
	cancel_order = 21;
	view_order = 22;
	confirm_order = 23;
}

message NextBotAction {
	BotAction action = 3; // pointed to the next action or used for branching to multiple actions
}

message BotAction {
	string account_id = 2;
	string bot_id = 3; // could be pipeline automation id
	string id = 4;
	string name = 5;

	// first action require trigger
	repeated NextBotAction nexts = 8;

	string type = 9; // send_email, tag, convert_to_ticket, condition, sleep, send_webhook, create_task, update_order_state

	ActionJump jump = 15;
	ActionSendHttp send_http = 17;
	ActionAskQuestion ask_question = 18;
	AssignRequest assign = 19;

	int64 delay_sec = 20;
	ActionUpdateConversation update_conversation = 21;
	bytes internal_state = 30;
	ActionUpdateUser update_user = 31;
	ActionUpdateUserLabels update_user_labels = 32;
	ActionConfirmOrder confirm_order = 34;
	ActionCreateTask create_task = 35;
	ActionSendChatTranscript send_chat_transcript = 36;
}

message ActionCreateTask {
	Task task = 2;
}

message ActionConfirmOrder {
	bool wait_for_user_response = 2;
	repeated Message messages = 3;

	repeated Message invalid_messages = 4; // send random message if user doesn't give any expected input

	string branch_on_cancellation = 8; // user click on cancel or X button
}

message ActionSendChatTranscript {
	bool send_transcript = 3;
	repeated string send_transcript_tos = 4;
}

message ActionUpdateConversation {
	repeated string tag_ids = 2;
	repeated string untag_ids = 3;
	bool end_conversation = 4;
}

message ActionJump {
	string action_id = 2;
	bool to_first_action = 3;
}

message ActionSwitchLanguage {
}

message ActionSendHttp {
	string url = 2;
	// string payload = 3;
	string method = 4;
	repeated KV header = 5;
	string quill_delta = 6; // body
}

message ActionAskQuestion {
	bool wait_for_user_response = 2;

	repeated Message messages = 3;
	bool allow_open_response = 4;

	string save_to_attribute = 5;

	string validation = 6; // none, email, phone, date, link, number, regex
	string validation_regex = 7;

	bool skip_if_attribute_already_existed = 11;

	Message resume_message = 15;
	int64 resume_interval = 16; // sec
	bool use_resume_message = 17;

	// retry forever

	int32 retry = 18; // TODO: remove != 1 => 0 retry, 1 retry forever

	// if user doesn't reply in this amount of time => failed
	// only active if value > 0
	int64 user_reply_timeout = 19;

	string branch_on_failed = 20; // empty => retry forever
}

message ActionUpdateUser {
	Attribute attr = 3;
	repeated Attribute attrs = 4;
}

message ActionUpdateUserLabels {
	repeated string labels = 2;
	repeated string remove_labels = 3;
}

message Metric {
	repeated Metric submetrics = 5;
	int64 date_dim = 2;
	string object_type = 3; // all if empty
	int64 count = 4;
	int64 object_count = 6;
	int64 lead_count = 7;
}

message ReportBotRequest {
	string account_id = 2;
	string bot_id = 3;
	int64 day_from = 4;
	int64 day_to = 5;
}

message ReportBotResponse {
	repeated Metric metrics = 2;
}

message BotrunMetric {
    int64 lead_count = 2;
    int64 botrun_count = 3;
    string account_id = 4;
    string bot_id = 5;
    int64 created_hour = 6;
    string date = 7; // derived
}

message BotrunMetricsRequest {
    string dim = 2;
	int32 tz = 3;
	string account_id = 4;
    string bot_id = 5;
    int64 created_hour_from = 6;
	int64 created_hour_to = 7;
}

message BotrunMetrics {
    repeated BotrunMetric metrics = 2;
}

message ActionrunMetric {
	int64 actionrun_count = 2;
	string account_id = 3;
	string bot_id = 4;
	string action_id = 5;
	int64 created_hour = 6;
    string date = 7; // derived
}

message ActionrunMetricsRequest {
	string dim = 2;
	int32 tz = 3;
	string account_id = 4;
    string bot_id = 5;
    int64 created_hour_from = 6;
	int64 created_hour_to = 7;
}

message ActionrunMetrics {
	repeated ActionrunMetric metrics = 2;
}

message ListObjectsRequest {
	string account_id = 2;
	string bot_id = 3;
	int64 created_hour_from = 8;
	int64 created_hour_to = 9;
	string anchor = 6;
	int32 limit = 7;

	int64 day_from = 4;
	int64 day_to = 5;
}

message ListObjectsResponse {
	string anchor = 3;
	repeated string conversation_ids = 4;
}

message Frequently {
	bool once_per_user = 2;
	bool once_per_session = 3;
	int64 interval_sec = 4; // dont do twice between those seconds
}

////////////////////
message RealtimeSubscription {
	common.Context ctx = 1;
	string initial_token = 2;
	repeated string events = 3;

	string host = 5; // notify client about the wrong host
}

message PollResult {
	repeated Event events = 4;
	string sequential_token = 6;

	string host = 7; // notify client about the wrong host
}

message RealtimeToken {
	string account_id = 2;
	string connection_id = 4;
	int64 last_offset = 5;
	int64 created = 6;
	int64 expired = 7;

	int64 last_polled = 8;
	int64 package_size = 9;
}

message PublishMessage {
	common.Context ctx = 1;

	repeated string topics = 2;
	bytes payload = 4;

	string account_id = 5;
}

message WidgetUser {
	common.Context ctx = 1;
	User user = 4;
	bool is_online = 20;
	bool is_in_business_hour = 21;
}

// widget
message WidgetUserSetting {
	common.Context ctx = 1;
	account.Account account = 3;
	repeated account.Agent agents = 5;
	string account_id = 2; // subiz use only
	User user = 4; // remove
	string user_id = 7; // subiz use only
	string language = 6;
	bool send_transcript = 8;
	WidgetSetting account_setting = 9;
	repeated Bot bots = 14;
	repeated WebPlugin plugins = 15;

	bool is_online = 20; // remove
	bool is_in_business_hour = 21; // remove

	int64 last_modified = 22;

	repeated Address addresses = 23;
	repeated PaymentMethod payment_methods = 24;
}

message AccountWeb {
	common.Context ctx = 1;
	string account_id = 2;

	account.Account account = 3;
	repeated account.Agent agents = 5;

	repeated Bot bots = 14;
	repeated WebPlugin plugins = 15;
	int64 last_modified = 22;

	repeated PaymentMethod payment_methods = 24;
}

message SocialLink {
	string type = 1; // facebook, viber, subiz, email, ...
	string url = 2;
}

message WidgetHeader {
	string layout = 2;
	enum HeaderLayout {
		team = 0;
		social = 1;
	}

	// for social layout only
	repeated SocialLink links = 3;
	// agents whose avatar will be display in the header
	repeated string agent_ids = 4;
}

message WidgetSetting {
	common.Context ctx = 1;
	string account_id = 2;
	string widget_version = 3;
	repeated account.Agent agents = 7;
	repeated string agent_ids = 8; // subiz only
	//  string css_url = 9; // old version
	//  string custom_css_url = 10; // deprecated
	int32 replytime = 11; // deprecated
	//  string css = 12; // communication client to server
	//  string style_url = 13;
	// read-only, tell whether account is ready for chat or not
	bool is_online = 14;
	bool is_in_business_hour = 34;

	string window_mode = 15;
	enum WindowMode {
		mini = 0;
		full = 1;
	}

	WidgetHeader header = 16;
	int32 height = 17;
	int32 width = 18;
	string primary_color = 19;
	string secondary_color = 20;
	string background = 21;
	string text_color = 22;
	WidgetForm offline_form = 23;
	WidgetForm prechat_form = 24;
	WidgetChatButton desktop_button = 25;
	WidgetChatButton mobile_button = 26;
	WidgetGreeting greeting = 27;
	string title = 28;
	string introduction = 29;
	bool auto_request_rating = 33;

	I18nString caption = 35;
	I18nString tagline = 36;

	int64 z_index = 37;

	bool hide_subiz_logo = 38;
	bool hide_close_button = 39;
}

message WidgetField {
	string key = 1;
	string label = 2;
	bool is_required = 3;

	// so front end dont have to download attribute definitions
	string type = 5;

	repeated string list = 6; // available option for field

	string subtype = 8; // phone, email, rating
	bool multiple_choice = 9;
	bool multiline_text = 10;
	string placeholder = 11;

	bool is_user_attribute = 12;

	string value = 13;

	I18nString i18n_label = 14; // label i18n
	I18nString i18n_placeholder = 15;
}

message WidgetGroup {
	string id = 1;
	string name = 2;
}

message WidgetForm {
	repeated WidgetField fields = 1;

	bool group_required = 2;
	repeated WidgetGroup groups = 3;
	string group_label = 4;

	string title = 5;
	bool enabled = 6;
	bool end_conversation_after_submit = 7;
	string enable_when = 8;
	enum When {
		all_agents_offline = 0;
		out_of_bussiness_hour = 1;
	}

	bool question_required = 10;
	string question_label = 11;

	I18nString i18n_group_label = 12;
	I18nString i18n_title = 13;
	I18nString i18n_question_label = 14;
}

message WidgetChatButton {
	string background_image_url = 1;
	string background_mask_url = 11;

	int32 width = 2;
	int32 height = 3;
	string background = 4;
	int32 margin_x = 5;
	int32 margin_y = 6;
	string position = 7;

	enum ButtonPosition {
		left = 0;
		right = 1;
	}
	bool default_style = 8;
	string background_border_radius = 9;
	bool hidden = 10;
}

message WidgetGreeting {
	string message = 2;
	bool enabled = 4;
	string agent_id = 5;

	I18nString greeting = 6;
}

////////////// CAMPAIGN //////////////
message CampaignNotification {
	//  email.Email email = 1;
	bool enabled = 2;
	string sender_id = 4;
	string from = 5;
	repeated string to = 7;
	string subject = 9;
	string body = 10;

	repeated string agents = 12;
	bool all_agents = 13;

	Message user_email = 14;
}

message WebPlugins {
	common.Context ctx = 1;
	string account_id = 2;
	repeated WebPlugin plugins = 3;
}

message WebPlugin {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3;

	string name = 5;
	// chatbox, popup, contact, notification
	string type = 6;

	int64 created = 10;
	string created_by = 11;

	int64 updated = 12;
	string updated_by = 13;

	bool enabled = 15;

	int64 last_impression = 16;
	int64 last_conversion = 17;

	repeated Trigger triggers = 19;
	Frequently initiative_frequency = 20;
	int64 impression_limit = 21;
	repeated BotCondition conditions = 22;

	int64 total_impression = 27;
	int64 total_goal_reached = 28;
	int64 total_lead = 29;

	bool is_deleted = 30;

	string locale = 31; // can be auto
	repeated string locales = 32;

	WidgetSetting chatbox = 40;
	Popup popup = 41;
	ContactComponent contact = 46;
	Notif notification = 47;

	CampaignNotification conversion_notification = 26;

	repeated string template_categories = 50;
	repeated string template_tags = 51;
	string template_title = 52;
	string template_description = 53;

	string thumbnail_url = 54;
}

message TextComponent {
	string html = 2; // do not edit, generated from quill_delta
	I18nString i18n_html = 5; // do not edit, generated from quill_delta
	string quill_delta = 3;
	I18nString i18n_quill_delta = 4;
}

message LineComponent {}

message ImageComponent {
	string url = 2;
}

message NotifProfiles {
	common.Context ctx = 1;
	repeated NotifProfile profiles = 2;
}

message NotifProfile {
	common.Context ctx = 1;
	string type = 2; // person, location
	string avatar_url = 3;
	string fullname = 4;
	string country = 5;
	string gender = 6;
	int32 age = 7;
	repeated string tags = 8;
	string email = 9;
	string phone = 10;
	string address = 11;
}

message Notif {
	repeated string profile_tags = 4; // female, male office, location, random
	repeated string custom_avatar_urls = 5;
	// server returns only for client
	repeated NotifProfile profiles = 6;

	string title_quill_delta = 9; // markdown
	I18nString i18n_title_quill_delta = 22;

	Style title_style = 10;

	repeated string message_quill_deltas = 11; // markdown
	repeated I18nString i18n_message_quill_deltas = 23;

	Style message_style = 12;

	string url = 13;
	bool new_tab = 14;

	string background_url = 15;
	Style background_style = 16;

	Style subtext_style = 17;
	Style avatar_style = 18;

	string position = 19;
	string mobile_position = 20;
	int64 interval_sec = 21; // sec
}

message ContactComponent {
	message ContactButton {
		bool enabled = 1;
		string type = 2;
		ZaloContactComponent zalo = 4;
		FacebookContactComponent facebook = 5;
		CallContactComponent call = 6;
		ChatContactComponent chat = 7;
		MapContactComponent map = 8;
	}

	string theme = 3; // flat, material, long-shadow, fluent, mac
	string layout = 4; // standard, footer, mini
	string position = 5;
	string size = 6; // sm, md, lg
	repeated ContactButton buttons = 7;
}

message FacebookContactComponent {
	string facebook_url = 2;
	string page_id =4;
	string title = 3;
}

message ZaloContactComponent {
	string zalo_oa_id = 2;
	string title = 3;
}

message CallContactComponent {
	message Hotline {
		string number = 2;
		string name = 3;
		string image_url = 4;
	}
	repeated Hotline hotlines = 4;

	string recall_title = 5;
	string thank_message = 6;

	string background = 7;
	string color = 8;
}

message ChatContactComponent {}

message MapContactComponent {
	string title = 2;
	message Location {
		string name = 2;
		float latitude = 3;             // filled
		float longitude = 4;            // filled
		string phone_number = 5;
	}
	repeated Location locations = 4;
}

message CountdownComponent {
	string expire_time_type = 3; // fixed_time, visit_time, repeat_daily, repeat_weekly
	int64 fixed_time = 4;
	int64 visit_time = 5; // minute (example 60)
	int64 repeat_daily = 6; // unix min
	int64 repeat_weekly_min = 7;
	string repeat_weekly_weekday = 8; // monday, wednesday

	string skin = 10; // flip, electric
	string size = 11; // sm md lg

	string timezone = 12; // +07:00 or empty => user timeone
}

message WebPluginFormField {
	string key = 1;
	string label_quill_delta = 2;
	string label = 3;
	I18nString i18n_label = 14;

	bool is_required = 4;

	// so front end dont have to download attribute definitions
	// text, phone, email, rating, multiple-choice, single-choice, dropdown, checkbox
	string type = 5;

	string validate = 8; // phone, email, rating

	bool randomize_option = 9;
	message WebPluginFormFieldOption {
		string label = 2;
		I18nString i18n_label = 4;
		string value = 3;
	}
	repeated WebPluginFormFieldOption options = 10;

	string placeholder = 11;
	I18nString i18n_placeholder = 15;

	string value = 13;
}

message WebPluginForm {
	// general stype
	repeated WebPluginFormField fields = 1;
}

message ButtonsComponent {
	bool primary_enabled = 2;
	repeated PopupButtonAction primary_actions = 3;
	string primary_text = 4;
	I18nString i18n_primary_text = 5;

	bool secondary_enabled = 8;
	repeated PopupButtonAction secondary_actions = 9;
	string secondary_text = 10;
	I18nString i18n_secondary_text = 11;
}

message WebPluginComponent {
	string type = 2; // text, image, countdown, form, buttons, line, social_buttons, follow_facebook

	Style style = 3;
	Style mobile_style = 4;

	TextComponent text = 5;
	ButtonsComponent buttons = 6;
	CountdownComponent countdown = 7;
	WebPluginForm form = 8;
	LinkComponent link = 9;
	ImageComponent image = 10;
	LineComponent line = 11;
	SocialButtonsComponent social_buttons = 12;
	FollowFacebookComponent follow_facebook = 13;
}

message FollowFacebookComponent {
	string url = 3;
}

message SocialButtonsComponent {
	string facebook = 3;
	string zalo = 4;
	string twitter = 5;
}

message Popup {
	string position = 2; // top, bottom       fullscreen, center, middle-left, middle-center, top-left, very-bottom, verry-top, halfway-top, halfway-bottom
	string type = 3; // bar, modal

	bool animation = 5;

	bool show_close_button = 6;
	bool overlay = 7;

	string text_color = 9; // description
	string font_family = 10;
	string font_size = 11;
	string background = 12;
	string spacer = 13;

	string theme = 17; // plain, light, paper, bold

	repeated PopupPage pages = 20;
}

message LinkComponent {
	string quill_delta = 2;
	string text = 3;
	string url = 4;
}

message Style {
	Style hover = 1;

	string border_radius = 2;

	string font_family = 3; // default font family
	string color = 4;
	string background = 5; // color or gradient

	string text_align = 6;
	string text_transform = 7;

	string font_style = 8;
	string font_weight = 9;

	string width = 10;
	string max_width = 11;

	string height = 12;
	string max_height = 13;

	string padding_left = 14;
	string padding_right = 15;
	string padding_top = 16;
	string padding_bottom = 17;

	string margin_left = 18;
	string margin_right = 19;
	string margin_top = 20;
	string margin_bottom = 21;

	string position = 25 ; //absolute, relative

	string object_fit = 26; // cover, contain
	string line_height = 27;
	string background_position = 28;

	string left = 30;
	string right = 31;
	string top = 32;
	string bottom = 33;

	string opacity = 34;

	string rotate = 35;

	// filter
	string blur = 46; //px
	string grayscale = 37; // %

	string overlay = 38; // background
	string overlay_opacity = 39;

	string flex = 40;
	string flex_direction = 41;
	string flex_shrink = 42;
	string align_items = 43;
	string justify_content = 44;

	string transform = 48;
	string font_size = 49;
	string z_index = 60;

	string border_bottom = 61;
	string border_left = 62;
	string border_top = 63;
	string border_right = 64;
	string border = 65;

	string box_shadow = 66;
	string overflow = 67;
	string overflow_x = 68;
	string overflow_y = 69;

	string white_space = 70;
	string user_select = 71;
	string pointer_events = 72;
}

message PopupPage {
	repeated WebPluginComponent components = 10;
	Style style = 11; // body
	Style mobile_style = 12;
	ButtonComponent background_click = 9;

	string layout = 3; // row, column
	string mobile_layout = 4;
}

// impression = view
message Impression {
	common.Context ctx = 1;
	string account_id = 2;
	string campaign_id = 3;
	string id = 4;
	string user_id = 5;

	string url = 7;
	common.Device device = 8;
	int64 created = 9;

	string by_trigger = 10;
	string impression_token = 11;  // for request submit only

	string web_plugin_id = 12;
	string session_id = 13;
}

message ConversionRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string campaign_id = 3;
	string anchor = 4;
	int32 limit = 5;

	int32 from_hour = 7;
	int32 to_hour = 8;
	string web_plugin_id = 9;
}

message Conversions {
	common.Context ctx = 1;
	repeated Conversion conversions = 2;
	string anchor = 4;
}

message Conversion {
	common.Context ctx = 1;
	string account_id = 2;
	string campaign_id = 3;
	string impression_id = 4;
	string user_id = 5;

	string url = 7;
	common.Device device = 8;

	string by_trigger = 10;

	CampaignSubmission submission = 12;
	int64 created = 13;

	int64 week = 14; // internal use only
	string impression_token = 15; // for request submit only

	string web_plugin_id = 16;

	User user = 17; // for webhook only
	string session_id = 18;
}

message UserCampaignStatus {
	common.Context ctx = 1;
	string account_id = 2;
	string campaign_id = 3;
	string user_id = 5;

	string status = 8; // goal_reached || failed || nothing
	enum Status {
		goal_reached = 0;
		failed = 1;
	}
	int64 created = 10;
	string web_plugin_id = 11;
}

message CampaignSubmission {
	common.Context ctx = 1;
	string account_id = 2;
	string campaign_id = 3;
	string user_id = 5;

	repeated WidgetField fields = 6;
}

message PopupButtonAction {
	string action = 3; // open_url, close, open_widget, submit, next, goal_reach

	string url = 5; // url to open
	bool new_tab = 6; // open new url on new tab
}

message ButtonComponent {
	bool enabled = 2;
	repeated PopupButtonAction actions = 3;
	string text = 6;

	string color = 10;
	string background = 11;
	string font_family = 30;
	string font_size = 31;
	string font_style = 32;
	string font_weight = 33;
	string text_transform = 34;

	string type = 5; // primary, secondary
}

message ImpressionCount {
	string account_id = 3;
	string campaign_id = 4;
	int32 count = 5;
	int32 hour = 6;
	int32 month = 7;
}

message ConversionCount {
	string account_id = 3;
	string campaign_id = 4;
	int32 count = 5;
	int32 hour = 6;
	int32 month = 7;
}

message ReportCampaignRequest {
	common.Context ctx = 1;
	string account_id = 3;
	string campaign_id = 4;
	int32 from_hour = 5;
	int32 to_hour = 6;
	string range = 7;
	enum Range {
		hour = 0; // default
		day = 1;
	}
	int32 tz = 8;
}

message ReportCampaignResponse {
	common.Context ctx = 1;
	repeated int32 impressions_count = 3;
	repeated int32 conversions_count = 4;
}

message WebPluginMetric {
	int64 range_value = 2;
	int64 impression = 6;
	int64 conversion = 7;
}

message ReportWebPluginRequest {
	common.Context ctx = 1;
	string account_id = 3;
	string web_plugin_id = 4;
	int32 from_hour = 5;
	int32 to_hour = 6;
	string range = 7;
	enum Range {
		hour = 0; // default
		day = 1;
	}
	int32 tz = 8;
}

message ReportWebPluginResponse {
	common.Context ctx = 1;
	string range = 2;
	repeated WebPluginMetric metrics = 3;
}

message WebPluginConversionRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string web_plugin_id = 3;
	int64 unix_day_from = 5;
	int64 unix_day_to = 6;
	string anchor = 8;
	int32 limit = 9;
}

message ConversionsExported {
	string url = 6;
	string anchor = 7;
}

message SearchLocationsRequest {
	common.Context ctx = 1;
	string query = 2;
	int64 limit = 4;
}

message UploadedImage {
	common.Context ctx = 1;
	string account_id = 3;
	string url = 4;
	string thumbnail_url = 5;
	int64 width = 10;
	int64 height = 11;
	int64 created = 12;

	string author = 13; // for upspash photos
	string author_url = 14;
}

message UploadedImages {
	common.Context ctx = 1;
	repeated UploadedImage images = 2;
}

message Clients {
	common.Context ctx = 1;
	repeated Client clients = 2;
}

enum ChannelType {
	subiz = 0;
	email = 1;
	facebook = 2; // ott
	viber = 3;
	facebook_comment = 4; // public, dont close conversation
	zalo = 5;
	call = 6;
	instagram = 7;
}

message Client {
	common.Context ctx = 1;
	string id = 3;
	// secret used to authorize client with oauth2 server
	string secret = 4;
	// LogoUrl is url to logo of the client, should be 256x256 and lessthan 256KB
	string logo_url = 5;
	string account_id = 6;
	// IsVerified will be true if client is verified by the authority
	bool is_verified = 8;
	int64 verified = 9;
	// List of URLs which client must register for oauth redirection
	string redirect_uri = 10;
	string type = 11;
	enum Type {
		app = 0;
		connector = 1;
		bot = 3;
	}
	string name = 12;
	string display_name = 13;
	// Version number of the client.
	string version = 14;
	bool is_enabled = 15;
	int64 created = 17;
	int64 modified = 18;
	string webhook_uri = 20;
	repeated string events = 19; // subscribed event

	// for connector only
	string channel_type = 21;

	string availability_uri = 22;
	string ping_uri = 23;
	bool is_internal = 24;
	string unsubscribe_uri = 25;
	repeated string scopes = 26;

	string bot_default_job_title = 28;
	string bot_default_fullname = 29;
	bool bot_is_supervisor = 30;
}

message Webhooks {
	common.Context ctx = 1;
	repeated Webhook webhooks = 2;
}

message WebhookSecret {
	string secret = 3;
	int64 expired = 5;
	int64 created = 6;
}

message Webhook {
	common.Context ctx = 1;
	string account_id = 12;
	string id = 2;
	string url = 3;
	string secret = 4;
	WebhookSecret old_secret = 5; // keep old secret so endpoint could do gradual update

	repeated string events = 6;
	string state = 7;
	enum State {
		active = 0;
		backoff_sleep = 1;
		dead = 2;
	}

	int64 modified = 19; // update when url, events or secret updated
	int64 created = 20;
	string creator = 21;
	bool is_enabled = 22; // deprecated
	bool is_protected = 23; // deprecated

	string avatar_url = 27; // favicon for the domain

	int64 total_deliveries_in_last_7_days = 30;
	int64 total_failed_deliveries_in_last_7_days = 31;
	bool is_disabled = 33;
	int64 last_delivery_at = 34;
	int64 last_success_delivery_at = 35;
	int64 next_retry_at = 36;

	string api_version = 37;
}

message WebhookDeliveries {
	common.Context ctx = 1;
	repeated WebhookDelivery deliveries = 2;
}

message WebhookDelivery {
	common.Context ctx = 1;
	string account_id = 2;
	string webhook_id = 3;
	int32 id = 4;
	string url = 5;
	// string method = 6; no need this field since the method is alway POST
	repeated KV resquest_headers = 7;
	string request_payload = 8;
	repeated KV response_headers = 9;
	string response_body = 10;
	string status = 11;
	int32 status_code = 12;
	int64 begin_at = 13;
	int64 end_at = 14;
	repeated string errs = 15;
	int32 request_payload_len = 16; // derived
	int32 response_body_len = 17; // derived
}

message RecentIndexDeliveryRequest {
	common.Context ctx = 1;
	string webhook_id = 2;
	int32 limit = 3;
}

message DeliveryRequest {
	common.Context ctx = 1;
	string webhook_id = 2;
	int32 id = 3;
}

message WebhookPayload {
	common.Context ctx = 1;
	string account_id = 2;
	string hub_id = 3;
	bytes payload = 4; //json format
	string event = 5;
	string webhook_id = 6; // internal use only
	string key = 9; // kafka key, internal use only
	bool is_direct = 10;
}

message WebhookTestResult {
	common.Context ctx = 1;
	string account_id = 2;
	string client_id = 3;
	string response_body = 14;
	int32 status = 15;
	string payload = 16;
	int64 latency = 17; // seconds
}

message Email {
	common.Context ctx = 1;
	string from = 3;
	//string to = 4;
	string subject = 5;
	string body = 6;
	map<string, string> header = 7;
	repeated EmailAttachment attachments = 8; // s3 links
	repeated string to = 9;
	repeated string cc = 10;
	repeated string bcc = 11;
	string encoding = 12;
}

message EmailAttachment {
	string url = 2;
	string name = 3;
	string mimetype = 4;
}

message FileHeader {
	common.Context ctx = 1;
	string account_id = 2;
	string name = 3;
	string type = 4;
	int64 size = 5;
	string md5 = 6;
	string description = 7;

	string content_disposition = 8; // inline || attachment

	// metadata
	int64 uploaded = 20;
	string full_url = 21;
	string mime_type = 22;
	int64 downloaded = 23;
}

message PresignResult {
	common.Context ctx = 1;
	string account_id = 3;
	string url = 4;
	string id = 6;
	string signed_url = 5;
}

message FileRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3;
}

message File {
	common.Context ctx = 1;
	string account_id = 2;
	string name = 3;
	string type = 4;
	int64 size = 5;
	string md5 = 6;
	string description = 10;
	int64 created = 7;
	string url = 8;
	string creator = 9;
	string id = 11;
	string content_disposition = 12; // inline (for printing) || attachment (download)
}

message BotTerminated {
	common.Context ctx = 1;
	string account_id = 2;
	string bot_id = 3;
	string conversation_id = 4;

	bool success = 5;
	string code = 6;
	enum TerminatedCode {
		complete = 0;
		start = 1;
		error = 3;
		force = 4;
		expire = 5;
		self = 6;
	}
}

message BlacklistIP {
	common.Context ctx = 1;
	string account_id = 3;
	string ip = 4;
	int64 created = 5;
	string by = 6;
}

message BannedUser {
	common.Context ctx = 1;
	string account_id = 3;
	string user_id = 4;
	int64 created = 5;
	string by = 6;
}

message LoginSessions {
	common.Context ctx = 1;
	repeated LoginSession sessions = 2;
}

// agent session
message LoginSession {
	common.Context ctx = 1;

	string account_id = 2;
	string agent_id = 3;
	string client_id = 4; // application id
	string id = 5; // crc32 code of refresh_token

	string kind = 6; // should be agent, connector or bot

	// should be the same as access_token, since we dont want to use refresh token
	string refresh_token = 7;
	string access_token = 8;

	repeated string scopes = 9;

	int64 created = 10; // ms
	common.Device device = 11;
	int64 last_used = 12; // ms

	int64 access_token_expired = 15; // should be long
	int64 access_token_generated = 16; // ms

	Location location = 17;

	// use on realtime event only
	string state = 18; // ended, created, updated

	string type = 19; // session, apikey, admin
	string client_version = 20;

	int64 ttls = 21; // seconds, apikey only
	string note = 23;
}

message ScryptChallenge {
	common.Context ctx = 1;
	string account_id = 9;
	string id = 2; // very long string
	int32 N = 3;
	int32 P = 4;
	int32 r = 5;
	string salt = 6;
	string hash = 8; // 32 bit hex
	int32 domain = 14;
	int32 dklen = 15;
	// only for subiz use
	string answer = 10;
	int64 created = 11;
}

// can be
// {id, join, event_time, conditions} (grouped event condition)
// {id, join, conditions} (grouped condition)
// {id, key, operator, value} (user condition || simple event condition)
message SCondition {
	string id = 3;

	string key = 4; // unique
	string operator = 5; // = # regex
	string value = 6; // JSON

	enum EventTime {
		none = 0; // not an event
		current = 1;
		latest = 2;
		past = 3; // exists
	}

	enum JoinOperator {
		and = 0;
		or = 1;
	}
	string join = 7;
	string event_type_time = 8; //
	string event_type = 10;
	repeated SCondition conditions = 9;

	int32 priority = 12;
	bool event_existed = 13;

	enum Function {
		minute_of_day = 0;
		hour_of_day = 1;
		day_of_week = 2;
		day_ago = 3;
	}
	string function = 14; // used to transform value of left side before evaluate expression
}

message SearchRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string query = 4;

	int32 limit = 5;
	string agent_id = 8; // search my user of agent
	repeated string labels = 9; // or
	repeated string agents = 10; // or

	bool is_private = 11; // search in private convo only
	bool only_header =  13;
	string conversation_id = 14; // filter by conversation

	string anchor = 15;

	repeated string exclude_conversations = 16;
}

message ExchangeRate {
	string from_currency = 2;
	string to_currency = 3;
	float exchange_rate = 4;
	int64 exchange_time = 5; // nanosec
}

message FbComment {
	string comment = 2; // read only
	string quill_delta = 3;
	string image_url = 4;
}

message FbFanpageSetting {
	common.Context ctx = 1;
	string account_id = 2;
	string fanpage_id = 3;

	FbCommentSetting general_comment_setting = 5;
	FbCommentSetting specific_post_comment_setting = 6;

	int64 updated = 9;
	string platform = 10; // default facebook. Could be instagram
}

message FbFanpageSettings {
	common.Context ctx = 1;
	repeated FbFanpageSetting settings = 2;
}

message FbCommentSetting {
	bool enabled = 1;
	bool auto_like = 2;

	enum HideComment {
		dont_hide = 0;
		all_comments = 1;
		comments_contain_phone_email_or_address = 2;
	}
	int64 auto_hide = 3;

	bool auto_reply = 4;
	repeated FbComment comments = 5;

	bool auto_inbox = 6;
	Message message = 7;

	bool custom_inbox_for_comments_contain_phone_email_or_address = 14;
	Message message_for_comments_contain_phone_email_or_address = 15;

	bool custom_inbox_for_comments_contain_keyword = 16;
	Message message_for_comments_contain_keyword = 17;

	repeated string keywords = 10; // comment
	repeated string post_ids = 11; // post
	repeated string hashtags = 12; // post (contain #)
}

message FacebookPosts {
	common.Context ctx = 1;
	repeated FacebookPost posts = 2;
}

message FacebookPostAttachmentMediaImage {
	string src = 2;
}

message FacebookPostAttachmentMedia {
	FacebookPostAttachmentMediaImage image = 2;
	string source = 3;
}

message FacebookPostAttachment {
	FacebookPostAttachmentMedia media = 2;
	string type = 3;
	string url = 4;
	string description = 5;
	string title = 6;
}

message FacebookPostAttachemnts {
	repeated FacebookPostAttachment data = 2;
}

message FacebookPostFrom {
	string id = 2;
}

message FbFacebookPosts {
	repeated FacebookPost data = 2;
	FacebookPaging paging = 3;
}

message FacebookPagingCursor {
	string after = 2;
	string before = 3;
}
message FacebookPaging {
	FacebookPagingCursor cursors = 2;
}

message FacebookPost {
	common.Context ctx = 1;
	string account_id = 2;
	string page_id = 3;
	string id = 4;
	FacebookPostFrom from = 5;
	string message = 6;
	string created_time = 7;

	bool is_hidden = 8;
	bool is_published = 9;
	string permalink_url = 10;
	string status_type = 11;
	string full_picture = 12;
	string story = 13;
	FacebookPostAttachemnts attachments = 14;
}

message UserOrderConfirmation {
	common.Context ctx = 1;
	string account_id = 2;

	string user_id = 4;
	Order order = 5;
	string status = 6; // confirmed || cancelled

	string conversation_id = 7;
}

// TODO: remove after remove old dashboard
message SessionCookie {
	string refresh_token = 3;
	int64 expired_at = 4;
	int64 issued_at = 5;
	string type = 6;
	string email = 7;
	bool remember_me = 8;
	string account_id = 9;
	string agent_id = 10;
}

message Webpage {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3;
	string url = 4;
	int64 modified = 5; // update when url|method|headers|payload updated
	int64 created = 6;
	string creator = 7;
	bool is_disabled = 8;
	int64 last_check_at = 9;
	string method = 10;
	repeated KV headers = 11;
	string payload = 12;
	string state = 13;
	enum State {
		up = 0;
		down = 2;
		missing = 3;
	}
	string must_contain = 14;
	// string name = 15;

	repeated string subscribers = 19; // agent id

	repeated WebpageReportDataPoint reports = 18; // report of last 14 days

	int64 check_interval = 20;

	string title = 22;
	string favicon = 24;
	int64 last_fetch = 25;
}

message Webpages {
	common.Context ctx = 1;
	repeated Webpage webpages = 2;
}

message WebpageCheck {
	common.Context ctx = 1;
	string account_id = 2;
	string webpage_id = 3;
	int32 id = 4;
	string url = 5;
	string method = 6;
	repeated KV request_headers = 7;
	string request_payload = 8;
	repeated KV response_headers = 9;
	string response_body = 10;
	string status = 11;
	int32 status_code = 12;
	int64 begin_at = 13;
	int64 end_at = 14;
	repeated string errs = 15;
	int32 request_payload_len = 16; // derived
	int32 response_body_len = 17; // derived
	string must_contain = 18;
	string state = 19; // up down missing
	string resolved_ip = 20;
}

message RecentWebpageCheckRequest {
	common.Context ctx = 1;
	string webpage_id = 2;
	int32 limit = 3;
}

message WebpageChecks {
	common.Context ctx = 1;
	repeated WebpageCheck checks = 2;
}

message WebpageCheckRequest {
	common.Context ctx = 1;
	string webpage_id = 2;
	int32 id = 3;
}

message WebpageReportDataSet {
	repeated WebpageReportDataPoint points = 2;
}

message WebpageReportRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string webpage_id = 3;
	int64 day = 4;
	string unit = 5; // day, month
	int64 from_day = 6;
	int64 to_day = 7;
}

message WebpageReportDataPoint {
	int64 day = 2;
	int64 total_uptime_sec = 3;
	int64 total_downtime_sec = 4;
	// float avg_response_time = 5; // sec
	// int64 num_check = 6;
	int64 num_downtime = 7;
	// int64 total_missing_sec = 8;
}

message Urls {
	repeated string urls = 2;
}

message LangMessage {
	common.Context ctx = 1;
	string account_id = 2;
	string locale = 3;
	string key = 4;
	string message = 5;
	string last_message = 6;
	string author = 7;
	int64 updated = 8;
	string public_state = 9; // public, private, draft
	bool from_default = 10;
	string category = 11;
}

message Lang {
	common.Context ctx = 1;
	string account_id = 2;
	string locale = 3; // vi_VN
	repeated LangMessage messages = 4;
	int64 last_modified = 5; // ms
}

message Locale {
	common.Context ctx = 1;
	string account_id = 2;
	string locale = 4;
	string key = 5;
	string message = 6;
	string description = 7;
}

message Changelog {
	string account_id = 2;
	string id = 3;
	string version = 4; // auto
	string content = 5;
	string created_by = 6;
	int64 created = 7;
	string updated = 8;
}

message ListChangelogsRequest {
	string account_id = 2;
	string anchor = 3;
	int32 limit = 4;
}

message ListChangelogsResponse {
	string anchor = 2;
	repeated Changelog changelogs = 3;
}

message AccountImage {
	account.Account img = 2;
	account.Agent owner = 3;
	string header_version = 4;
}

message UserViews {
	common.Context ctx = 1;
	string account_id = 2;
	repeated UserView views = 4;
}

message UserView {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3;
	UserViewCondition condition = 4;

	string created_by = 5;
	int64 created = 6;
	string updated_by = 7;
	int64 updated = 8;

	bool is_public = 9;
	string name = 10;

	int64 total = 11;
	// status tic
	int64 last_calculated = 12;

	int32 offset = 20;
	int32 limit = 21;
	string order_by = 22; // attr.username asc
}

message UserViewCondition {
	common.Context ctx = 1;
	string account_id = 2;

	string key = 4; // id, keyword, lead_owner attr.fullname
	string type = 5;

	TextCondition text = 6;
	BoolCondition boolean = 8;
	FloatCondition number = 9;
	DatetimeCondition datetime = 10;

	repeated UserViewCondition all = 12; // preferred
	repeated UserViewCondition one = 13;
}

message ReportResponse {
	common.Context ctx = 1;
	string from = 3;
	string range = 4;
	repeated int64 data = 5;
}

message AvailibilityReportRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string agent_id = 3;
	string from = 5; // try date --rfc-3339=seconds date in rfc 333
	// seconds standard. E.g: 2019-03-07T10:42:01+07:00
	string range = 8;
	enum Range {
		hour = 0;
		day = 1;
		month = 2;
	}
	int32 number_of_points = 13;
}

message FileUrlDownloadRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string url = 3;

	int64 max_size = 4;
	string type_prefix = 5;
	int64 timeout = 6; // ms
	string user_agent = 7; // control client user-agent while download
}

message PushNoti {
	common.Context ctx = 1;
	string account_id = 3;
	string user_id = 4; // to user

	string platform = 5;
	string title = 6;
	string body = 7;
	string conversation_id = 8;
	string sender_id = 9;
	string sender_type = 10;
	string icon_url = 11;
	string last_page_view_url = 12;
	string type = 13; // type of event message_sent ...
	string is_private = 14; // conversation is private

	repeated common.By tos = 15;
}

message InvoiceTemplate {
	string primary_color = 3;
	string secondary_color = 4;

	string font_family = 5;
	string font_size = 6;

	string number_font_family = 7;
	string number_font_size = 8;

	string font_color = 9;

	string terms_and_conditions = 15;
	I18nString i18n_terms_and_conditions = 16;

	string tagline = 17;
	I18nString i18n_tagline= 18;

	string signature = 19;
	I18nString i18n_signature= 20;
}

message ShopSetting {
	common.Context ctx = 1;
	string account_id = 2;

	repeated Currency other_currencies = 6;

	int64 updated = 8;
	string updated_by = 9;

	repeated Address addresses = 18;
	repeated Tax taxes = 11;

	repeated PaymentMethod payment_methods = 12;
	InvoiceTemplate invoice_template = 13;
	string due_date_term = 14;
	repeated ShopeeShop shopee_shops = 15; // read only
	repeated IntegratedShipping shippings = 16;
	repeated ShippingPolicy shipping_policies = 17;

	repeated CancellationCode cancellation_codes = 19;
}

message Addresses {
	common.Context ctx = 1;
	string account_id = 2;
	repeated Address addresses = 3;
}

message Currency {
	common.Context ctx = 1;
	string account_id = 2;
	string name = 3;
	string code = 4;
	string symbol = 5;
	bool auto_sync = 6;

	// one code equal how much base
	// code is VND, base is USD, rate should be 0.000045
	// otherwise, if code is USD, base is VND, rate should be 22000
	float rate = 7;
	bool enabled = 8;
	int64 updated = 9;
	string updated_by = 10;
	repeated CurrencyLogEntry logs = 11;
	string format = 12;
}

message CurrencyLogEntry {
	string id = 3;
	int64 updated = 4;
	float rate = 5;
	string updated_by = 6;
}

message ProductCollections {
	common.Context ctx = 1;
	repeated ProductCollection product_collections = 2;
	string anchor = 3;
	int64 total = 4;
}

message ProductCollection {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3; // use
	string name = 4;
	string visiblity = 5; // public || unpublished
	string code = 6;
	repeated string item_ids = 7;  // product ids

	int64 created = 11;
	string created_by = 12;

	int64 updated = 13;
	string updated_by = 14;
}

message PriceRule {
	string feed_id = 4;
	float price = 5;
	int64 fpv_price = 6;

	string currency = 8;
	int64 from_count = 9;
	int64 to_count = 10;
}

message InventoryProduct {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3; // generated

	Product ref_product = 4;

	string serial_number = 8;
	string barcode = 9;
	string order_id = 10;

	string location = 11; // sold, wearhouse49, store424

	repeated KV props = 14; // Color:red, Size: XXS, Scent:Fruity CPU:i5 Storage:128GB

	int64 created = 20;
	int64 updated = 21;
	string created_by = 22;
	string updated_by = 23;

	string sold_currency = 24;
	float sold_price = 25;
	int64 fpv_sold_price = 26;

	int64 expiry_date = 30;
}

message OrderItem {
	string order_id = 3;
	string id = 4;
	int32 quantity = 10;
	Product product = 11; // copy

	string note = 15;

	//  equal quantity*product.price - discount
	float total = 16;
	int64 fpv_total = 17;

	// discount before tax
	float discount_amount = 20;
	int64 fpv_discount_amount = 21;
	int64 discount_percentage = 23;  // 1234 => 12.34% = 0.1234

	string pos_id = 24;
	Tax tax = 25;

	string discount_type = 26; // percentage || amount

	float total_tax = 30; // computed, override value
	int64 fpv_total_tax = 31; // computed, override value
}

message GHNAddress {
	int64 ProvinceID = 2;
	string ProvinceName = 3;
	int64 DistrictID = 4;
	string DistrictName = 5;
	int64 Code = 6;
	string WardName = 7;
	string WardCode = 8;
}

message Address {
	common.Context ctx = 1;
	string account_id = 2;
	string user_id = 3;
	string id = 4;
	string fullname = 5;
	string email = 6;
	string phone = 7;

	string street = 8;
	string ward = 9;
	string district = 10;
	string region = 11; // city
	string country_code = 12;
	string address = 27;

	string full_address = 13; // read only

	int64 created = 14;
	string created_by = 15;

	int64 updated = 16;
	string updated_by = 17;

	// use input
	string instruction = 18;
	float lng = 19;
	float lat = 20;

	bool is_default = 21;

	// for U.S
	string state = 22;
	string postal_code = 23;
	string city = 24;

	string country = 25;
	string province = 26;

	float score = 29;

	string province_id = 30;
	string district_id = 31;
	string ward_id = 32;
	string street_id = 33;

	GHNAddress ghn = 35;
	Address ghtk = 36;

	string description = 40;
	int64 deleted = 41;
	bool is_warehouse = 42;
	bool is_point_of_sale = 43;

	string from_shipping_provider = 44; // ghtk, ghn, ahamove, viettelpost, shipchung, ninjavan, grabexpress, ahamove, hcmpost, vnpost, jntexpress, supership, heyu
	string from_shipping_shop_id = 45;
	int64 last_integrated = 46;

	string title = 47; // for shop address
	string name = 48; // addrdb
}

message GHNOrder {
	string client_order_code = 2;
	int64 shop_id = 3;
	string order_code = 4;

	int32 service_type_id = 5;
	int32 service_id = 6;
	int32 payment_type_id = 7;
	string required_note = 8;
	repeated int32 pick_shift = 38;

	string to_name = 9;
	string to_phone = 10;
	string to_address = 11;
	string to_ward_code = 12;
	int64 to_district_id = 13;

	int64 pick_station_id = 14;
	string from_name = 33;
	string from_phone = 34;
	string from_address = 35;
	string from_ward_code = 36;
	int64 from_district_id = 37;

	repeated GHNOrderItem items = 15;
	int64 weight = 16;
	int64 length = 17;
	int64 width = 18;
	int64 height = 19;
	int64 cod_amount = 20;
	int64 insurance_value = 21;
	string coupon = 22;

	string return_phone = 23;
	string return_address = 24;
	int64 return_district_id = 25;
	string return_ward_code = 26;

	string content = 27;
	string note = 28;

	int64 total_fee = 29;
	int64 total = 32; // fee
	string expected_delivery_time = 30;
	string status = 31;
}

// webhook
message GHNOrder2 {
	string account_id = 10; // only subiz

	int64 ShopID = 2;
	string ClientOrderCode = 3;
	string OrderCode = 4;
	int64 TotalFee = 5;
	string Time = 6;
	string Status = 7;
	string ShipperName = 8;
	string ShipperPhone = 9;
}

message GHNOrderItem {
	int64 weight = 2;
	int32 quantity = 3;
	string name = 4;

	string code = 5;
	int64 price = 6;
	int64 length = 7;
	int64 width = 8;
	int64 height = 9;
}

message GHTKOrder {
	string account_id = 55; // only subiz

	string id = 2;
	string partner_id = 3; // is id
	string label = 4;
	string label_id = 5; // is label

	int32 status_id = 6;
	int32 status = 7;
	string status_text = 8;
	string created = 9;
	string modified = 10;
	string expired = 11;
	string action_time = 12;
	string reason_code = 13;
	string reason = 14;

	string weight_option = 59;
	float total_weight = 60;
	float weight = 15;
	int32 area = 16; // goi cuoc tinh fee
	int64 fee = 17;
	int64 value = 18; // gia tri dong bao hiem
	int64 pick_money = 19;
	int32 is_freeship = 20;
	int64 insurance = 21;
	int64 insurance_fee = 22;
	int64 ship_money = 23;

	int32 return_part_package = 24;
	string transport = 25;
	string pick_option = 26;
	string deliver_option = 27;
	string pick_session = 28;
	string estimated_pick_time = 29;
	string estimated_deliver_time = 30;
	string deliver_date = 31;
	int64 deliver_work_shift = 32;
	int64 pick_work_shift  = 33;
	int32 storage_day = 34;

	string pick_address_id = 61;
	string pick_name = 35;
	string pick_tel = 36;
	string pick_email = 57;
	string pick_address = 37;
	string pick_province = 38;
	string pick_district = 39;
	string pick_ward = 40;
	string pick_street = 56;
	string pick_date = 41;

	string name = 42;
	string customer_fullname = 43; // is name
	string tel = 44;
	string email = 58;
	string customer_tel = 45; // is tell
	string address = 46;
	string province = 47;
	string district = 48;
	string ward = 49;
	string street = 50;
	string hamlet = 51;

	string note = 52;
	string message = 53;
	repeated int32 tags = 54;
}

message ShippingInfo {
	Address address = 5;
	Address pickup_address = 4;

	int64 deliver_date = 6; // unix ms
	int64 pickup_date = 7; // unix ms 0 => ASAP

	float fee = 10;
	int64 fpv_fee = 11;

	float nominal_fee = 9;
	int64 fpv_nominal_fee = 12;

	string note = 13;
	Tax tax = 16;

	float total_tax = 17; // computed, override value
	int64 fpv_total_tax = 18; // computed, override value

	int64 weight = 19; // gram
	int64 length = 20; // cm
	int64 width = 21; // cm
	int64 height = 22; // cm

	// id of shop from shipping provider
	// since agent can using multiple shipping shop account
	string shipping_shop_id = 24;

	string transport = 25; // road, fly, truck

	string shipping_provider = 26; // direct, private, ghtk
	// string bill_of_landing_no = 27; // ma van don

	bool insurance = 29;
	float insurance_fee = 30;
	int64 fpv_insurance_fee = 31;

	string shipping_code = 32; // van don
	// string tracking_link = 35;

	// how much money should shipper collect from the receiver
	// not always equal to fee
	float pick_amount = 40;
	int64 fpv_pick_amount = 41;

	// could be -1, 1, 2, -3
	// see https://docs.giaohangtietkiem.vn/?shell#tr-ng-th-i-n-h-ng35
	string status_code = 43;
	ShippingData data = 45;
	string integrated_shipping_id = 46;
	int32 index_incre = 48; // only server

	int64 cancelled_at = 49;
	string cancelled_by = 50;

	string fee_payer = 51; // shop, user
	bool no_auto_create_bill_on_delivered = 52;
	string bill_id = 53;

	int64 submitted_at = 54;
	string submitted_by = 55;

	bool pickup_at_shop = 56;
}

message ShippingData {
	GHTKShippingData ghtk = 3;
	GHNShippingData ghn = 4;
}

message GHNShippingData {
	int32 service_type_id = 2;
	int32 payment_type_id = 3;
	string required_note = 4;
	int64 insurance_value = 5;
	string coupon = 6;
}

message GHTKShippingData {
	int64 deliver_work_shift = 10;
	int64 pick_work_shift  = 11;
	string label_id = 13;
	string expired = 14;
	int64 value = 15; // gia tri dong bao hiem
	string pick_option = 16;
	string deliver_option = 17;
	string pick_session = 18;
	repeated string tags = 19;
}

enum ShippingProvider {
	direct = 0;
	private = 1;
	ghtk = 2;
	shipchung = 3;
	ninjavan = 4;
	grabexpress = 5;
	ahamove = 6;
	hcmpost = 7;
	vnpost = 8;
	jntexpress = 9;
	supership = 10;
	heyu = 11;
	viettelpost = 12;
	ghn = 13;
	none = 20;
}

message ShippingPolicies {
	common.Context ctx = 1;
	string account_id = 2;
	repeated ShippingPolicy shipping_policies = 5;
}

message ShippingPolicy {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3;
	string name = 4;

	repeated string product_ids = 5;
	repeated string product_collections = 6;
	repeated string exclude_product_ids = 7;

	string country_code = 8; // alway vn
	string province = 9;
	repeated string districts = 13;

	bool use_weight = 10;
	int64 weight_gt = 11; // gram
	int64 weight_lt = 12; // gram

	bool use_order_total = 16;
	float order_total_lt = 17;
	int64 fpv_order_total_lt = 18; // (readonly from client)

	float order_total_gt = 19;
	int64 fpv_order_total_gt = 20; // (readonly from client)

	float price = 21; // 0 => freeship
	int64 fpv_price = 22; // (readonly from client)

	bool disabled = 23;

	int64 created = 24;
	int64 updated = 26;
	string created_by = 27;
	string updated_by = 28;
}

message IntegratedShipping {
	common.Context ctx = 1;
	string account_id = 2;

	string id = 18;
	string codename = 3; // ghtk, ghn, ahamove, viettelpost, shipchung, ninjavan, grabexpress, ahamove, hcmpost, vnpost, jntexpress, supership, heyu
	string shipping_shop_id = 4;

	string name = 5;
	string phone = 6;
	string email = 7;
	string password = 8;
	string api_token = 9;

	string access_token = 10;
	string refresh_token = 11;

	int64 first_integrated = 13;
	int64 integrated = 14;
	string integrated_by = 17;

	int64 last_used = 12;
	int64 first_error = 15;
	string connect_status = 16; // connected || disconnected
	string ghn_client_id = 19;
	string ghn_shop_id = 20;
	string ghn_otp = 22;
	Address address = 21;
}

message IntegratedShippings {
	common.Context ctx = 1;
	repeated IntegratedShipping integrated_shippings = 2;
	string anchor = 3;
	int64 total = 4;
}

message PaymentMethod {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3;

	string method = 4; // cash, cod ,credit_card, debit_card, momo, bank_transfer
	string description = 5; //  "Thanh toán tiền mặt khi nhận hàng"

	optional string type = 6;
	enum State {
		active = 0;
		failed = 1;
	}
	string state = 7; // active, inactive, deleted

	bool is_default = 8;

	string failed_message = 10;
	int64 charged = 11;

	int64 created = 12;
	int64 updated = 13;
	string created_by = 14;
	string updated_by = 15;

	string bank_number = 20;
	string bank_owner = 22;
	string bank_branch = 23;
	string bank_name = 24;
}

message PaymentMethods {
	common.Context ctx = 1;
	string account_id = 2;
	repeated PaymentMethod payment_methods = 3;
}

message OrderMetric {
	string account_id = 2;
	string status = 3; // only list orders
	string payment_status = 4; // only list orders
	string shipping_status = 22; // only list orders
	string payment_method = 5;
	int64 invoice_hour = 6;
	string invoice_date = 7; // derived
	int64 paid_hour = 8;
	string paid_date = 9; // derived
	int64 fpv_total = 10;
	int64 fpv_payment_made = 11;
	string pos_id = 12;
	string channel = 13;
	string channel_touchpoint = 14;
	string salesperson = 15;
	int64 product_id_bits = 16; // only system
	string product_id_strings = 17; // only system
	repeated string product_ids = 18;
	string product_id = 19; // derived
	int64 created_hour = 20;
	string created_date = 21; // derived
	string cancellation_code = 23;

	int64 order_count = 65;
	int64 paid_count = 66;
	int64 returning_count = 69;
	int64 fpv_total_sum = 67;
	int64 fpv_payment_made_sum = 68;
}

message OrderMetricsRequest {
	string dim = 2;
	int32 tz = 3;
	string account_id = 10;
	int64 invoice_hour_from = 11;
	int64 invoice_hour_to = 12;
	int64 paid_hour_from = 13;
	int64 paid_hour_to = 14;
	repeated string channels = 15;
	repeated string not_channels = 16;
	repeated string channel_touchpoints = 17;
	repeated string product_ids = 18; // and
	repeated string salesperson = 19; // and, agent ids
	repeated string pos_ids = 20;
	account.BusinessHours business_hours = 23;
	account.BusinessHours not_business_hours = 24;
	int64 created_hour_from = 25;
	int64 created_hour_to = 26;
}

message DeleteDraftOrdersRequest {
	int64 point_to = 3; // exclude
}

message Orders {
	common.Context ctx = 1;

	repeated OrderMetric metrics = 3;
	repeated Order orders = 4;
	string anchor = 5;
	int64 total = 6;

	int64 fpv_total_value = 7; // sum of all order total (money)
}

message OrdersRequest {
	common.Context ctx = 1;
	string account_id = 2;

	string user_id = 3; // list order by user
	string status = 4; // list order by status

	int64 created_hour_from = 5;
	int64 created_hour_to = 6;
	int64 due_date_hour_from = 20;
	int64 due_date_hour_to = 21;
	int64 invoice_date_hour_from = 22;
	int64 invoice_date_hour_to = 23;

	bool include_deleted = 7;

	int32 limit = 8;
	string anchor = 9;
	int32 offset = 18;
	string dim = 17;
	string order_by = 19;

	repeated string ids = 10;
	repeated int64 modifieds = 11;
	string query = 12;
	bool is_draft = 13;
	string payment_status = 14;
	repeated string pos_ids = 15;
	repeated string salesperson = 16; // agent ids
	repeated string statuses = 24;
	repeated string not_statuses = 25;
	repeated string shipping_statuses = 26;
	repeated string not_shipping_statuses = 27;

	string pipeline = 30;
	string pipeline_stage = 31;
	string assigned_agent_id = 32;
}

message DownloadOrderRequest {
	common.Context ctx = 1;
	string account_id = 2;
	Order order = 3;
	InvoiceTemplate template = 4;
	string locale = 5;
	string content_disposition = 6; // inline (for printing) || attachment (download)
}

message Order {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3;

	string number = 4;

	ShippingInfo shipping = 5;
	PaymentMethod payment_method = 6;

	string note = 7;
	int64 issue_date = 62;
	int64 due_date = 8;
	string due_date_term = 9; // net30 net7

	// new; closed; canceled
	//  (see OrderStatusCode)
	string status = 10;
	int64 closed = 14; // close or canceled time

	string shipping_status = 73;

	// unpaid, paid, // computed using total and payment_made
	string payment_status = 11;

	int64 created = 12;
	string created_by = 13;

	int64 updated = 18;
	string updated_by = 19;

	repeated OrderItem items = 20;

	float subtotal = 21; // computed, override value
	int64 fpv_subtotal = 22; // computed, override value

	float total = 25; // computed, override value
	int64 fpv_total = 26; // computed, override value

	float payment_made = 30; // computed, override value
	int64 fpv_payment_made = 31; // computed, override value

	string cancellation_note = 34;
	string cancellation_code = 35; // typing_error, user_rejected
	int64 cancelled_at = 60;
	string cancelled_by = 61;

	string currency = 36; // empty => base currency

	float deposit = 37;
	int64 fpv_deposit = 38;

	// discount: discount after tax
	// to discount before tax, use discount in item
	float discount_amount = 40;
	int64 fpv_discount_amount = 41;
	int64 discount_percentage = 43; // 1234 => 12.34% = 0.1234
	string discount_type = 51; // amount || percentage

	string pos_id = 44;

	string channel = 45; // messenger, zalo
	string channel_touchpoint = 46;

	repeated string related_conversations = 47;

	string salesperson = 48;
	User user = 50; // keep session and attribute

	string adjustment_description = 54;
	float adjustment = 55;
	int64 fpv_adjustment = 56;

	map<string, string> fields = 58;

	bool is_draft = 59;

	string term_and_condition = 63;

	float total_tax = 65; // computed, override value
	int64 fpv_total_tax = 66; // computed, override value

	// account currency /order currency  (E.g: order currency: VND, acc currency: USD, => currency_rate = 1/20k = 0.00005)
	float currency_rate = 67;
	int64 paid_at = 68; // complete paid
	string first_paid_order_id = 69;

	string user_confirmation = 70; // confirmed || rejected
	int64 user_confirmed = 84; // ms

	float total_discount = 71;
	int64 fpv_total_discount = 72;

	repeated OrderAgent agents = 75; // read only from client

	string pipeline = 80;
	string pipeline_stage = 81;
	int64 assigned = 82;
	repeated OrderPipelineStage stages = 83;
}

message OrderPipelineStage {
	common.Context ctx = 1;
	string account_id = 2;
	string order_id = 3;
	string pipeline = 4;
	string stage = 5;
	int64 assigned = 6;
	repeated Task tasks = 7;
	int64 duration = 8; // sec // calculated using log

	string agent_id = 9;
	string assigned_by = 10;

	int64 updated = 11;
}

message OrderAgent {
	common.Context ctx = 1;
	string account_id = 2;
	string order_id = 3;
	string id = 4;

	int64 noti_muted = 5;
	int64 seen = 6;
	int64 commented = 7;
}

enum OrderStatusCode {
	open = 0;  // Đơn mới
	canceled = 1; // Đơn hàng đã chốt thua
	closed = 2; // Đơn hàng đã chốt thắng

	delivery_success = 25;
	delivery_failure = 26;
	delivery_received = 27;
	delivery_shipping = 28;
	buyer_pickup = 29;
	not_required = 30;
}

message Bill {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3;
	string order_id = 4;

	string user_id = 5;
	string by = 6;
	int64 created = 7;

	string method = 8; // manually

	float amount = 12;
	int64 fpv_amount = 13;

	string description = 21;

	string picture_url = 22;
}

message CancellationCodes {
	common.Context ctx = 1;
	string account_id = 2;
	repeated CancellationCode cancellation_codes = 5;
}

message CancellationCode {
	common.Context ctx = 1;
	string account_id = 2;

	// no_cancel = 0; // or empty string
	// price_too_high = 1;
	// customer_rejected = 2;
	// failed_delivery = 3;
	// out_of_stock = 4;
	// customer_wouldnt_response = 5;
	// went_with_another_option = 7;
	// went_with_a_competitor = 8;
	// bad_timming = 9;
	// other = 100;
	string code = 3;
	string label = 4;

	int64 created = 5;
	string created_by = 6;

	int64 updated = 7;
	string updated_by = 8;

	int64 archived = 9;

	int64 last_used = 10;
}

message OrderPipelineUpdated {
	common.Context ctx = 1;
	string account_id = 2;

	string order_id = 5;
	string pipeline_from = 6;
	string pipeline_stage_from = 7;

	string pipeline_to = 8;
	string pipeline_stage_to = 9;
}

message OrderStatusUpdated {
	common.Context ctx = 1;
	string account_id = 2;

	string order_id = 5;
	string status_from = 6;
	string status_to = 7;
}

message OrderHistoryEntry {
	Event event = 2; // 1 core
	Event ref_comment = 3;
	string order_id = 4;
}

message OrderHistoryEntries {
	common.Context ctx = 1;
	repeated OrderHistoryEntry entries = 4;
	int64 total = 2;
	string anchor = 3;
	int64 last_modified = 5;
}

message Product {
	common.Context ctx = 1;
	string account_id = 2;

	repeated Product other_variants = 4; // [2] [3]

	string id = 3; // generated
	string product_group_id = 5; // iphone-6-plus
	string left_product_id = 56; // only server
	string right_product_id = 57; // only server

	string title = 6; // deprecated // should be use for name

	string url = 7; // (shared)

	string handle = 8; // (shared) iphone-6-plus-128G
	string name = 9;
	I18nString i18n_name = 10; // (shared) apple Iphone 6 plus

	string description = 11; // (shared)
	I18nString i18n_description = 12; // (shared) server generated

	I18nString i18n_long_description_quill_delta = 13; // (shared)
	string long_description = 15; // (shared)

	repeated KV props = 14; // future replacement for props

	string mobile_url = 17; // (shared)

	// app_link = 11; // mobile deep link

	// repeated KV metadata = 13;
	// accessory.watch
	string category = 16; // (shared)
	// repeated Product related_products = 21; // releated content ids

	string brand = 18; // (shared) brand name: apple, luis vuiton

	repeated ProductOption options = 19; // (shared)

	int64 created = 20;
	int64 updated = 21;
	string created_by = 22;
	string updated_by = 23;

	// google: Manufacturer part number (MPN) is a series of numbers and letters that the manufacturer assigned to this product, in 70 characters or less.
	string mpn = 26; // (shared)

	string image = 30;
	repeated string images = 31; // (shared)
	repeated string additional_images = 32; // (shared)

	repeated string videos = 33; // (shared)
	repeated string additional_videos = 34; // (shared)

	string note = 35; // (shared)

	// shipping
	bool requires_shipping = 36;

	int64 days_to_ship = 37;
	float dimension_width = 38;
	float dimension_height = 39;
	float dimension_length = 40;

	float weight = 41;
	string weight_unit = 42; // g, kg
	float grams = 43;
	bool allow_preorder = 44;

	string condition = 47; // (shared) new, refurbished, used
	string visibility = 48; // (shared) published, staging, hidden, deleted

	string sku = 49;
	string barcode = 50;

	float price = 51;
	int64 fpv_price = 52; // (readonly from client)

	repeated PriceRule price_rules = 54; // (shared)
	int64 stock = 60; //

	string source_id = 61;

	bool has_inventory = 62; // share
	repeated ProductInventory inventories = 63;

	Tax tax = 64; // (shared)

	string currency = 65;

	repeated MessageButton buttons = 66; // for message attachment
}

message ProductInventory {
	string pos_id = 4;
	string barcode = 5;

	float price = 6;
	int64 fpv_price = 7;

	int64 stock = 9; //
	string currency = 10;
}

message ProductOption {
	string key = 3;
	string name = 4;
	repeated string values = 5;
	bool is_mandatory = 6;
}

message Products {
	common.Context ctx = 1;
	repeated Product products = 2;
	string anchor = 3;
	int64 total = 4;
}

message GoogleSheetProductFeed {
	string url = 2;
}

message WebsiteJSONLdProductFeed {
}

message ShopeeProductFeed {
	string access_token = 4;
}

message ProductFeeds {
	common.Context ctx = 1;
	string account_id = 2;
	repeated ProductFeed product_feeds = 4;
	string anchor = 5;
	int64 total = 6;
}

message ProductFeed {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3;
	string type = 4; // google sheet, shopee, website json ld

	// google sheet
	ShopeeProductFeed shopee = 5;
	WebsiteJSONLdProductFeed website_json_ld = 6;
	GoogleSheetProductFeed google_sheet = 7;

	int64 created = 20;
	string created_by = 21;

	int64 updated = 22;
	string updated_by = 23;

	int64 last_fetched = 24;
	int64 last_fetch_duration = 25;
	string last_fetch_error = 26;
	string last_fetch_status = 27; // success, failed

	int64 last_sucess_fetched = 30;
}

message ProductsRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string query = 3;
	int32 limit = 4; // 200
	string anchor = 5;
	int32 offset = 16;

	int64 price_gte = 6;
	int64 price_lte = 7;

	// [{key: 'colors', value:'red,blue', {key:'size', value:'xxl'}]
	// returns all variants which color is (red OR blue) AND size is xxl
	repeated KV props = 8;

	string availability = 9; // instock, out_of_stock
	string category = 10;

	string visibility = 11; // published or hidden
	repeated string ids = 12;
	repeated int64 last_modifieds = 14; // ms
	repeated string product_collection_ids = 15;

	bool include_deleted = 17;
}

message KV {
	string key = 2;
	string value = 3;
	int64 key_id = 4;
	int64 value_id = 5;
	repeated KV kvs = 6;
}

message ProductCategories {
	common.Context ctx = 1;
	string account_id = 2;
	repeated string categories = 4;
	repeated int64 product_numbers = 7;
	string anchor = 5;
	int64 total = 6;
}

message ProductProps {
	common.Context ctx = 1;
	string account_id = 2;
	repeated KV props = 3;
	string anchor = 5;
}

message Tax {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 4;
	string name = 3;
	I18nString i18n_name = 5;
	int64 percentage = 6; // x10000 e.g: 20% => 2000

	// group, tax, compound
	string type = 7;
	bool is_default = 8;

	int64 created = 12;
	string created_by = 13;

	int64 updated = 14;
	string updated_by = 15;

	bool hidden = 17;
}

message Taxes {
	common.Context ctx = 1;
	string account_id = 2;
	repeated Tax taxes = 3;
}

message Error {
	string description = 2;
	string debug = 3;
	int32 class = 4;
	string stack = 5;
	int64 created = 6; // ms
	string code = 7;
	string root = 8;
	string request_id = 9;
}

message ShopeeShop {
	common.Context ctx = 1;
	string account_id = 2;
	int64 shop_id = 3;

	string shop_logo = 4;
	string description = 5;
	string shop_name = 6;

	string region = 7; // VN
	int64 num_unlisted_products = 8;
	int64 num_normal_products = 9;

	int64 last_success_called = 11;
	int64 last_called = 12;

	int64 authorized = 13;
	string authorized_by = 14;

	string status = 15; // normal, failed, deleted

	int64 last_profile_synced = 17; // last sync profile
}

message AuthorizeShopeeRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string code = 3;
	int64 shop_id = 4;
	string main_account_id = 5;
}

message ShopeeSyncProductRequest {
	common.Context ctx = 1;
	string account_id = 2;
	int64 shop_id = 3;
	int64 offset = 4;
	int64 page_size = 5;
	string status = 6;

	string mode = 8; // override, append only
}

message ShopeeSyncProductResponse {
	common.Context ctx = 1;
	string account_id = 2;
	int64 shop_id = 3;
	string error_code = 4;
	bool has_next_page = 6;
	int64 next_offset = 7;
	int64 total = 8;
	int64 num_success = 9;
}

message AddressAutocompleteRequest {
	common.Context ctx = 1;
	string account_id = 2;

	string keyword = 3;
	string language = 4;
	repeated string countries = 5;
}

message AddressAutocompleteResponses {
	common.Context ctx = 1;
	string account_id = 2;
	repeated AddressAutocompleteResponse responses = 4;
}

message AddressAutocompleteResponse {
	common.Context ctx = 1;
	string account_id = 2;

	string description = 4;
	string place_id = 5;
	string reference = 6;
	repeated Substring matched_substrings = 7;
}

message Substring {
	int32 offset = 3;
	int32 length = 4;
}

message RateLimitSyncRequest {
	common.Context ctx = 1;
	string account_id = 2;
	repeated RateLimitEntity new_entities = 4;
}

message RateLimitSyncResponse {
	common.Context ctx = 1;
	string account_id = 2;
	repeated RateLimitEntity entities = 4;
}

message RateLimitEntity {
	string configkey = 2;
	int64 window_sec = 3;
	int64 capacity = 5;
  repeated RateLimitWindow windows = 6;
}

message RateLimitWindow {
	string key = 3;
	int64 timestamp = 4;
	int64 usage = 5;
}

message CompactedUser {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3;
	int64 created = 4;
	int64 modified = 5;
	int64 updated = 6;

	string first_channel_touchpoint = 7;
	string latest_channelTouchpoint = 8;
	string latest_channel = 9;
	int64 interacted = 11;
	int64 seen = 12;
	CompactedAttribute fullname = 13;
	CompactedAttribute phone = 14;
	CompactedAttribute email = 15;
	string latest_session_id = 16;
	repeated string lead_owners = 17;
	string first_interact = 18;

	string trace_country_name = 19;
	string channel_source = 20;
	string latest_campaign_name = 21;
	string trace_country_code = 22;
	string latest_session_source = 23;
	string first_session_referer = 24;
	string latest_session_referer = 25;
	string trace_city_name = 26;

	int64 last_message_sent = 27;
	int64 total_sessions = 28;

	string latest_session_tracking_link = 29;
	string first_session_tracking_link = 30;

	repeated CompactedAttribute attributes = 31;

	bool is_lead = 32;
	repeated UserLabel labels = 33;
	UserSession session = 34;
}

message CompactedUsers {
	repeated CompactedUser users = 1;
	repeated Error errors = 2;
	string signature = 3;
	int64 hit = 4;
	int64 total = 5;

	int32 end_offset = 7;
}

// memory efficient attribute
message CompactedAttribute {
	string key = 1;
	string value = 2; // text or datetime or bool or number json encoded list
	int64 modified = 3;
	string by = 5; // required
	repeated string other_values = 6;
}

message PipelineStage {
	string id = 3; // gen by client
	int64 created = 5;
	string created_by = 6;
	string name = 7;
	string description = 8;
	bool is_closed = 9; // order auto confirmed when move to this stage
	int64 probability = 10; // * 100 100 => won 0 => lost

	int64 rotten_days = 11;
	string automation_id = 13; // bot_id
	int64 updated = 14;
	string updated_by = 15;

	// auto-assign to agent
	repeated PipelineRule routes = 17;
	repeated Task tasks = 18;
}

message PipelineRule {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3;

	int32 priority = 4;

	enum AssignType {
		all_agents = 0; // round robin all agent in account
		agentgroup = 2; // round robin all agnet in group
		agents = 3; // round robin list of agent
	}
	string assign_type = 5;
	repeated string assign_tos = 6;

	bool enabled = 8;

	int64 updated = 9;
	string updated_by = 10;

	// and
	repeated BotCondition conditions = 11;
}

message Pipelines {
	common.Context ctx = 1;
	string account_id = 2;
	repeated Pipeline pipelines = 3;
	string anchor = 4;
	int64 total = 5;
}

message Pipeline {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3;

	string name = 4;
	repeated PipelineStage stages = 5;

	int64 created = 6;
	string created_by = 7;

	int64 updated = 8;
	string updated_by = 9;
}

message TasksRequest {
	common.Context ctx = 1;
	string account_id = 2;

	repeated string associated_tickets = 4;
	repeated string associated_users = 5;
	repeated string associated_orders = 7;
	repeated string associated_conversations = 9;

	int64 created_hour_from = 10;
	int64 created_hour_to = 11;
	int64 due_date_hour_from = 12;
	int64 due_date_hour_to = 13;

	string assigned_to = 14;
	int64 priority = 15;

	int32 limit = 20;
	string anchor = 21;
	int32 offset = 22;
}

message Tasks {
	common.Context ctx = 1;
	string account_id = 2;
	repeated Task tasks = 3;
	string anchor = 4;
	int64 total = 5;
}

message Task {
	common.Context ctx = 1;

	string account_id = 2;
	string id = 3;

	string created_by = 5; // agent id or pipeline stage id
	int64 created = 6;

	string created_by_type = 7; // agent, automation
	string created_by_pipeline = 8;
	string created_by_pipeline_stage = 9;
	string created_by_pipeline_automation_action = 10;

	string updated_by = 11;
	int64 updated = 12;

	int64 due_date = 13;
	int64 reminder = 14; // 86400: 1 day before

	string type = 15; // todo, email, call
	int64 priority = 16; // dont use string, so its easier for backend to sort by this field. 0=low, 1=normal, 2=high, 3=urgent

	string assigned_to = 17; // empty == unassigned

	string title = 18;
	string title_quill_delta = 19;
	string description = 20;
	string description_quill_delta = 21; // for template
	int64 pinned = 22; // always list first
	string status = 23; // open, close, rejected

	int64 closed = 24; // just store closed timestamp, so when needed, we have the data to calculate task duration

	repeated string associated_tickets = 25;
	repeated string associated_users = 26;
	repeated string associated_orders = 27;
	repeated string associated_conversations = 28;

	repeated string watchers = 30; // (from JIRA) agents that follow the task, get notified

	// extra data
	// ...
	Event data_email = 40;
}

message TaskHistoryEntry {
	Event event = 2; // 1 core
	Event ref_comment = 3;
	string task_id = 4;
}

message TaskHistoryEntries {
	common.Context ctx = 1;
	repeated TaskHistoryEntry entries = 4;
	int64 total = 2;
	string anchor = 3;
	int64 last_modified = 5;
}

message AgentGroups {
	common.Context ctx = 1;
	repeated AgentGroup Groups = 2;
}

message AgentGroup {
	common.Context ctx = 1;
	string id = 2;
	string account_id = 3;
	string name = 4;

	// members is list of 10 agents in group
	repeated account.Agent members = 7;
	int64 created = 6;
	int64 modified = 8;

	string created_by = 9;
	repeated string agent_ids = 10;
}

message DocIndexRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string collection = 3;
	string document_id = 4;
	string part = 5;
	string content = 6;

	bool is_name = 7; // hint for better name search
	bool is_id = 10; // hint for not indexing using tokenize
	int64 day = 8; // unix day for doc, used to order more recent document

	repeated string owners = 9;
}

message DocSearchRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string collection = 3;

	string query = 5;
	string anchor = 6;

	int64 limit = 7;

	repeated string include_parts = 8; // only include those parts
	bool doc_distinct = 9; // distinct document
	repeated string include_owners = 10;
}

message DocHit {
	string document_id = 3;
	string part = 4;

	string avatar_url = 5;
	string name = 6;

	int64 updated = 7;
	string description = 8;

	string integration_id = 9; // for convo

	string phone = 10;
	string email = 11;
	string user_id = 12; // for convo
}

message DocSearchResponse {
	common.Context ctx = 1;

	repeated DocHit hits = 4;
	string anchor = 5;
}

message AccessToken {
	string access_token = 2;
	string token_type = 3;
	int32 expires_in = 5;
	string refresh_token = 6;
}

message ZaloCodeChallenge {
	common.Context ctx = 1;
	string state = 5; // verifier, zalo sucks
	string code_challenge = 6;
}

message ConversationModal {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3;

	string key = 4;
	string description = 5;
	string url = 6;
	string size = 7; // sm, md, lg
	string secret = 10;

	int64 created = 11;
	string created_by = 12;
	int64 updated = 13;
	string updated_by = 14;
	int64 disabled = 15;

	int64 last_used = 16;
	string last_used_by = 17;

	string preview_picture_url = 18;
	int64 preview_picture_at = 19;
}

message ConversationModals {
	common.Context ctx = 1;
	string account_id = 2;
	repeated ConversationModal conversation_modals = 3;
}

message ConversationModalPickRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string conversation_id = 3;
	string agent_id = 4;
	string conversation_modal_id = 6;
	string text = 7;
}

message ConversationModalPicked {
	common.Context ctx = 1;
	string account_id = 2;
	string conversation_modal_id = 3;
	string url = 5;
	string size = 6;
	string view_id = 7;
}