syntax = "proto3";

package header;

option go_package = "github.com/subiz/header";

import "common.proto";
import "account.proto";
import "payment.proto";
import "type.proto";
import "noti5.proto";
import "locale.generated.proto"; // run node lang.js to generate this file

message Empty {
	common.Context ctx = 1;
}

message Id {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3;

	string channel = 5;
	string channel_source = 6;
	string profile_id = 7;
}

message Ids {
	common.Context ctx = 1;
	string account_id = 2;
	repeated string ids = 3;
	// repeated string signatures = 4; // can remove

	repeated int64 last_modifieds = 5; // ms
	string anchor = 6;
	int32 limit = 7;

	repeated string phones = 8; // match by phone identifier
	repeated string emails = 9; // match by email identifier
	repeated string record_ids = 10; // match by record identifier
}

message Notifications {
	common.Context ctx = 1;
	string account_id = 2;
	repeated Notification notifications = 4;
	// int64 severity = 5; // 0: not important, 1 important;
	string next_anchor = 6;
	int64 last_seen = 7;
	int64 unread = 8;
}

message Notification {
	common.Context ctx = 1;
	string account_id = 2;
	string agent_id = 3;
	string topic = 10;
	string type = 5; // type
	string data = 8; // json
	int64 created = 6; // ms
	bool is_read = 9;

	bool is_instant = 12; // just display and disappear, no persit
	// int64 severity = 13; // 0: not important, 1 important;
	string category = 14; // user, order
	int64 checkpoint = 15;
}

message ListNotiRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string agent_id = 3;
	int32 limit = 4;
	string anchor = 5;
	string category = 6; // comma separated
}

// splice
message Attribute {
	string key = 4;
	int64 modified = 8;
	string by_type = 5;

	// string value = 9; // json encode primary value
	string text = 10;
	double number = 11;
	bool boolean = 12;
	string datetime = 13;
	// repeated string list = 14; // remove [a,b,c]
	// repeated Attribute revisions = 15;

	repeated string other_values = 20;

	string type = 16; // read-only
	string by = 17; // required

	// to update
	enum Ops {
		upsert = 0; // DEFAULT: update + insert, remove all other value
		replace = 2; // only write if existed, remove all other value
		insert = 3; // only write if not existed, remove all other value

		delete = 4; // delete specific elemnt match the value

		push = 5; // add a new value (for array) // unique
		unshift = 6;
	}
	string action = 18;
	repeated string other_labels = 24; // home, work for other value
}

message PhoneDevices {
	common.Context ctx = 1;
	string account_id = 2;

	repeated PhoneDevice phone_devices = 3;
}

message PhoneDevice {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3; // auto-generated, sip user name
	string password = 4; // auto-generated

	string host = 5; // host or ip of the phone, auto-fill
	int64 port = 6;
	string public_host = 39; // public ip

	// phone calls to (from) this device will be considered being dialed to owner and (by) those agents
	repeated string bind_to_agents = 10;

	string type = 11; // webphone, webcall

	string name = 12;
	string description = 13;

	string status = 14; // unknown, notinuse, inuse, busy, invalid, unavailable, ringing, ringinuse, onhold
	int64 last_status_updated = 15;

	string driver = 16; // subiz stringee

	int64 disabled = 17;
	string transport_protocol = 18; // default=udp, tcp
	// int64 extension = 18; // auto-increasement 5001, 5002, 5003

	int64 updated = 30;
	string updated_by = 31;

	int64 created = 32;
	string created_by = 33;

	string default_outbound_number = 34;

	string device_id = 35; //
	string device_build_id = 36;
	string device_os = 37;
	string device_name = 38;

	int64 last_connected = 40;

	string private_host = 42;
	string user_agent = 43;
}

message CallSettings {
	common.Context ctx = 1;
	string account_id = 2;
	repeated CallSetting call_settings = 3;
}

// Decide how incomming calls should be handled.
// Each account can only have one global call-setting but can have
// many scoped call-settings. Each call-setting should responsible
// for one or more phone numbers
message CallSetting {
	common.Context ctx = 1;
	string account_id = 2;

	// 84364824444, 84364825555, 84364826666, ...
	// this field should be ignored for global setting
	// if the number of the incomming call does not match this number, fallback
	// to global setting to handle the call
	string number = 3;

	GreetingAudio greeting_message = 4;
	GreetingAudio missed_message = 5;

	// only agent in group can make outgoing calls
	bool restricted_outging_call = 6;

	// forward call
	string forward_to = 7;

	string default_group_id = 21;
	bool enable_recording = 22;
	repeated string miss_call_handlers = 23; // agent ids
	int64 updated = 30;
	string updated_by = 31;
	bool allow_direct_extension_calling = 32;

	int64 limit_call_time_sec = 33;
}

message User {
	common.Context ctx = 1;
	string id = 3;
	string account_id = 4;
	repeated Attribute attributes = 18;

	// UserSession session = 40; // deprecating
	repeated string lead_owners = 41; // team
	repeated UserLabel labels = 42;
	string type = 47; // empty = guest - lead - contact
	string primary_id = 49; // rename to customer_id
	// repeated string secondary_ids = 50;
	string profile_id = 52; // user-id
	string channel_source = 53; // pvcombank require verification
	string channel = 54; // account => require verification, acc logo

	Event latest_content_view = 55; // readonly
	Event start_content_view = 56; // readonly latest content view that change the source
	Event first_content_view = 57; // readonly first content view

	repeated string lead_conversion_bys = 58; // for quick search

	int64 created = 59;
	int64 updated = 60;

	repeated UserLifecycleStage lifecycle_stages = 61; // read-only
	repeated UserSegment segments = 66; // read-only
	repeated User secondaries = 67; // read-only
	// map<string, UserConversationTag> conversation_tags = 68; // read-only
	repeated UserAds ads = 70; // read-only

	int64 deleted = 72;
	string deleted_by = 73;

	repeated UserCampaign campaigns = 74;

	string merged_by = 76;
	int64 merged = 77;
	string merged_reason = 78; // same_email, same_phone, same_record_id
}

message UserAds {
	string provider = 3; // facebook, google

	// facebook
	string ad_id = 9; // utm_id
	string ref = 10;
	string source = 11; // utm_source: SHORTLINK, ADS
	string type = 12; // OPEN_THREAD
	int64 created = 13;
	AdsContextData ads_context_data = 14;
	string referer_uri = 15;
	bool is_guest_user = 4;

	// google
	string name = 16; // utm_campaign" may_sale, covid, gucci,
	string medium = 17; // utm_medium: display, article, cpc, cpa, cpe, email, sms
	string term = 18;
	string content = 6; // logolink, textlink
}

message UserLifecycleStage {
	string stage = 5; // id
	int64 duration = 6; // ms
	string by = 7;
	string by_type = 8; // agent, bot
	int64 start_at = 9;
}

// lookup contact point to user_id
// contact point => chain => conversation
// ((accid, user_id), channel.source.touchpoint_id, touchpoint_id, channel, source)
// (accid, channel, source, touchpoint_id, user_idhu)
message Touchpoint {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3; // psid, igsid, zalo id or comment id

	string channel = 5; // facebook , facebook_comment, instagram, instagram_comment, call, sms
	repeated KV fields = 8;

	string linked_page_id = 24; // instagram
	string source = 23; // page id, zaloa id
	string post_id = 25; // for facebook or instagram
}

message ShippingAddresses {
	common.Context ctx = 1;
	string account_id = 2;
	string user_id = 3;
	repeated Address shipping_addresses = 4;
}

message UserLabel {
	string label = 2; // id

	string by = 3;
	int64 at = 5; // ms

	string name = 6;
	string title = 7; // use instead of name

	string source_channel = 17; // from specific channel
	string source_channel_id = 18;
	string source_id = 19;
}

message Label {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3; // user generated // key

	string title = 4;
	string description = 7;
	string created_by = 8;
	int64 created = 9; // ms

	string color = 10;

	string updated_by = 12;
	int64 updated = 11;

	bool disabled = 15;
	int64 deleted = 16;

	string source_channel = 17; // from specific channel
	string source_channel_id = 18;
	string source_id = 19;

	int64 last_synced = 20;
}

message Labels {
	common.Context ctx = 1;
	string account_id = 2;
	repeated Label labels = 3;
}

message TryUpdateUserResult {
	common.Context ctx = 1;
	string account_id = 2;

	string code = 4;  // ok, duplicated
	repeated User users = 8;
	repeated string duplicated_fields = 9;
	repeated string duplicated_values = 10;
}

message Users {
	repeated User users = 1;
	repeated Error errors = 2;
	string signature = 3;
	int64 hit = 4;
	int64 total = 5;

	int32 end_offset = 7;
	repeated string sorted_values = 8;

	string anchor = 9;
	repeated User secondaries = 10;
}

message AttributeDefinitionListItem {
	// value
	string value = 4; // cannot be changed
	I18nString i18n_label = 7;
	string label = 8;
}

message AttributeDefinition {
	common.Context ctx = 1;
	string account_id = 2;

	string name = 3; // will be removed
	string description = 4;

	I18nString i18n_label = 16; //
	string label = 21;

	string type = 5;
	enum AttributeType {
		text = 0;
		number = 1;
		boolean = 2;
		datetime = 3;
	}

	bool multiple_line = 17;
	string select = 18; // radio, checkbox, dropdown
	bool is_image = 28;

	bool is_date_only = 29;
	repeated AttributeDefinitionListItem items = 19; // for select
	string default_value = 20;

	// repeated string options = 6;
	repeated string list_items = 6; // remove

	string key = 7;

	int64 updated = 9;
	string updated_by = 11;
	string validator = 10; // email, name, decimal

	// bool allow_user_edit = 15;

	bool is_system = 22;
	bool is_readonly = 23; // agent and user cannot update

	int64 created = 24;
	string created_by = 25;

	int64 archived = 26;
	int64 usage = 27; // number of user has this attribute

	bool prevent_auto_override = 30;
}

message AttributeDefinitions {
	common.Context ctx = 1;
	repeated AttributeDefinition attributes = 2;
}

message Note {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3;

	string creator_id = 5;
	string text = 6;
	int64 created = 7;
	int64 updated = 8;
	string target_id = 9; // user_id
}

message Notes {
	common.Context ctx = 1;
	repeated Note notes = 3;
	string anchor = 4;
}

message UserNote {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3;
	string user_id = 4;

	string text = 6;
	int64 created = 7;
	int64 updated = 8;
	string created_by = 9;
	string updated_by = 10;
}

message UserRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string user_id = 3;
	string object_id = 4;

	string channel = 5;
	string channel_source = 6;
	string profile_id = 7;

	string label_source_channel = 9;
	string label_source_channel_id = 10;
	string label_source_id = 11;
	string label_name = 12;
}

message ListNotesRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string user_id = 3;
}

message DeleteNoteRequest {
	string account_id = 2;
	string target_id = 3;
	string id = 4;
}

message StringParams {
	string eq = 2;
	repeated string in = 3;
	string contain = 4;
}

message Location {
	string isp = 3;                 // filled
	string continent_name = 4;      // filled
	string country_code = 5;        // filled

	string city_name = 6;            // filled
	string country_name = 7;         // filled
	string continent_code = 8;      // filled
	float latitude = 9;             // filled
	float longitude = 10;            // filled
	string postal_code = 11;         // filled

	string ip = 12;
}

message Locations {
	repeated Location locations = 2;
	repeated Error errors = 3;
}

message LocationParams {
	string query = 2;
	int64 limit = 3;
	string account_id = 4;
}

message Page {
	string id = 2;
	string name = 3;
	string url = 4;
}

message IdParams {
	string id = 2;
	repeated string ids = 3;
}

message UserInfoParams {
	string account_id = 15;
	string signature = 2;

	int32 limit = 3;
	int32 offset = 4;
	string order_by = 5;

	IdParams source = 6;
	IdParams page_id = 8;
	IdParams location_id = 7;

	// IntParams view_count = 9;
	// IntParams duration = 10;

	// location params
	StringParams country_code = 11;
	StringParams continent_code = 12;
	StringParams url = 13;
	// IntParams time_on_site = 14;
}

enum PK {
	id = 0;
	account_id = 1;
	domain = 2;
	facebook_page_id = 3;
	zalo_oa_id = 4;
};

message Key {
	string account_id = 2;
	string order_id = 3;
	string product_id = 4;
	string bill_id = 5;
	string order_comment_id = 6;
	string task_id = 7;
	string task_comment_id = 8;
}

message UserMetric {
	int64 active_user_num = 3; // live
	string have_been = 5; // live

	string account_id = 2;
	int64 created_hour = 6;
	string session_source = 7;
	string channel = 8;
	string channel_touchpoint = 9;
	string first_interact = 10;
	string date = 11; // derived
	int64 seen_hour = 12;

	int64 user_count = 65;
	int64 lead_count = 66;
}

message UserMetrics {
	repeated UserMetric metrics = 2;
}

message UserReportRequest {
	common.Context ctx = 1;
	string account_id = 2;
	// string credit_id = 3;
	int64 from_time = 4; // ms
	string unit = 5; // hour, day, month
	int64 limit = 8; // default: 24, 30, 24
	repeated string metrics = 9; // category.cactegory_id all.
	// all.*
	// graph:all.-  exact
	// channel.facebook graph of user channel facebook
	// channel.facebook graph of user channel facebook
	// countexact:channel_source.zalo
	// count:channel_source.zalo
	//    zalo.oa1: 20
	//    zalo.oa2: 21
	// graph:channel.facebook
	// count:ref_source
}

message UserReportEntry {
	repeated int64 datapoint = 7;
	int64 count = 8;
	map<string, int64> category_ids = 9;
	string metric = 10;
}

message UserReportResponse {
	common.Context ctx = 1;
	string account_id = 2;

  repeated UserReportEntry users = 5;
	repeated UserReportEntry leads = 6;
}

message UserMetricsRequest {
	string account_id = 2;
	int64 created_hour_from = 3;
	int64 created_hour_to = 4;
	int64 seen_hour_from = 13;
	int64 seen_hour_to = 14;
	repeated string sources = 5;
	repeated string channels = 6;
	repeated string channel_touchpoints = 7;
	repeated string first_interacts = 8;
	repeated string session_sources = 15;
	repeated string not_channels = 16;
	account.BusinessHours business_hours = 17;
	account.BusinessHours not_business_hours = 18;
	int32 tz = 9;
	string dim = 10;
	string anchor = 11;
	int32 limit = 12;
}

message ConversationMetric {
	string account_id = 2;
	int64 created_hour = 3;
	string channel = 4;
	string channel_touchpoint = 5;
	repeated int32 ratings = 7;
	int32 last_rating = 8;
	int64 first_replied_count = 9;
	int64 first_replied_duration = 10;
	repeated string agent_ids = 11; // assigned
	string agent_id = 18; // derived
	int64 agent_id_bits = 19; // only system
	string agent_id_strings = 20; // only system
	repeated string agent_sent_ids = 12;
	string date = 13; // derived
	int64 tag_bits = 14; // only system
	string tag_strings = 15; // only system
	repeated string tags = 6;
	string tag = 16; // derived
	int64 latest_sent_hour = 17;

	int64 conversation_count = 65;
	int64 user_sent_count = 66;
	int64 not_reply_count = 67;
	int64 send_duration_sum = 68;
	int64 returned_count = 69;
}

message ConversationMetrics {
	repeated ConversationMetric metrics = 2;
}

message ConversationMetricsRequest {
	string account_id = 2;
	int64 created_hour_from = 3;
	int64 created_hour_to = 4;
	int64 latest_sent_hour_from = 16;
	int64 latest_sent_hour_to = 17;
	repeated string channels = 5;
	repeated string channel_touchpoints = 6;
	repeated int32 ratings = 8;
	repeated string tags = 7; // and
	repeated string agent_ids = 9; // and
	repeated string agent_sent_ids = 14; // and
	int64 first_replied_duration_gt = 15;
	int64 send_duration_sum_gt = 21;
	repeated string not_channels = 18;
	account.BusinessHours business_hours = 19;
	account.BusinessHours not_business_hours = 20;
	int32 tz = 10;
	string dim = 11;
	string anchor = 12;
	int32 limit = 13;
}

message AgentMetric {
	string account_id = 2;
	int64 created_hour = 3;
	string channel = 6;
	string agent_id = 4;
	string date = 5; // derived
	int64 message_sent_count = 65;
	int64 conversation_count = 66;
	int64 first_replied_count = 67;
	int64 first_replied_duration = 68;
	int64 great_rating_count = 69;
	int64 not_reply_count = 70;
	int64 conversation_sent_count = 71;
}

message AgentMetrics {
	repeated AgentMetric metrics = 2;
}

message AgentMetricsRequest {
	string account_id = 2;
	int64 created_hour_from = 3;
	int64 created_hour_to = 4;
	repeated string agent_ids = 5;
	repeated string channels = 6;
	repeated string not_channels = 7;
	account.BusinessHours business_hours = 8;
	account.BusinessHours not_business_hours = 9;
	int32 tz = 10;
	string dim = 11;
}

message CallMetric {
	string account_id = 2;
	int64 created_hour = 3;
	string date = 4; // derived
	string direction = 5;
	string phone = 6;
	string agent_id = 7;
	int64 tag_bits = 8; // only system
	string tag_strings = 9; // only system
	repeated string tags = 10;
	string tag = 11; // derived
	int64 call_count = 12;
	int64 call_duration_sum = 14;
	int64 missed_call_count = 13; // inbound
	int64 missed_outbound_call_count = 15;
}

message CallMetrics {
	repeated CallMetric metrics = 2;
}

message CallMetricsRequest {
	string account_id = 2;
	int64 created_hour_from = 3;
	int64 created_hour_to = 4;
	repeated string agent_ids = 5;
	repeated string phones = 6;
	string direction = 7;
	repeated string tags = 8;
	account.BusinessHours business_hours = 11;
	account.BusinessHours not_business_hours = 12;
	int32 tz = 9;
	string dim = 10;

	int64 call_duration_sum_gt = 15;
	string anchor = 13;
	int32 limit = 14;
}

message SourceMetric {
	string account_id = 2;
	string source = 3; // direct, referring, organic,social, advertising
	int64 active_user_num = 4;
	string have_been = 5;
}

message LocationMetric {
	string account_id = 2;
	Location location = 3;
	int64 active_user_num = 4;
	string have_been = 5;
}

message PageMetric {
	string account_id = 2;
	Page page = 3;
	int64 active_user_num = 4;
	string have_been = 5;
}

message UserReport {
	string account_id = 2;
	UserMetric total_user = 3;
	repeated SourceMetric top_source = 4;
	repeated LocationMetric top_location = 5;
	repeated PageMetric top_page = 6;
}

message SourceMetrics {
	repeated SourceMetric source_metrics = 2;
}

message LocationMetrics {
	repeated LocationMetric location_metrics = 2;
}

message PageMetrics {
	repeated PageMetric page_metrics = 2;
}

message Events {
	common.Context ctx = 1;
	repeated Event events = 4;
	int64 total = 2;
	string anchor = 3;
	int64 last_modified = 5;
}

message Event {
	common.Context ctx = 1;
	string user_id = 2;
	string id = 3;
	string account_id = 4;
	int64 created = 8;
	int64 updated = 10;
	string type = 9;
	string session_id = 12; // extra id for many purpose
	common.By by = 50;
	Touchpoint touchpoint = 52;
	Data data = 20;
}

message Data {
	common.Context ctx = 1;
	account.Agent agent = 2;
	Message message = 3;
	Conversation conversation = 4;
	Product product = 6;
	account.Presence presence = 8;
	User user = 10;
	Notification notification = 14;
	AgentGroup agent_group = 18;
	Note note = 23;
	// Ticket ticket = 24;
	// Automation automation = 25;
	Event event = 26;
	// AutomationEvent automation_event = 30;
	// notibox.Notibox notibox = 32;
	noti5.Setting notification_setting = 34;
	Rule rule = 36;
	AttributeDefinition user_attribute = 37;
	Tag tag = 38;
	UserMetric total_user = 39;
	Bot bot = 40;
	BotRunResponse bot_run_response = 41;
	Integration integration = 42;
	BotTerminated bot_terminated = 43;
	Webhook webhook = 44;
	// UserAlias user_alias = 45;
	Conversion conversion = 47;
	Site site = 52;
	// WebpageCheck webpage_check = 53;
	LangMessage language_message = 54;
	Label label = 55;
	UserView user_view = 56;
	LoginSession login_session = 57;
	ProductFeed product_feed = 58;
	ProductCollection product_collection = 59;
	Order order = 60;
	Currency currency = 61;
	ShopSetting shop_setting = 62;
	Address shipping_address = 63;
	OrderStatusUpdated order_status = 65;
	Bill bill = 66;
	Order order_from = 67;
	Event current = 68;
	OrderHistoryEntry order_history_entry = 69;
	UserOrderConfirmation user_order_confirmation = 70;
	Pipeline pipeline = 71;
	OrderPipelineUpdated order_pipeline_updated = 72;
	Task task = 73;
	TaskHistoryEntry task_history_entry = 74;
	OrderPipelineStage order_pipeline_stage = 75;
	ConversationModal conversation_modal = 76;
	ConversationAutomation conversation_automation = 77;
	PhoneDevice phone_device = 78;
	CallSetting call_setting = 79;
	BlockedNumber blocked_number = 91;
	CallInfo call_info = 92; // call-transfered
	CallDriverRequest call_request = 93; // only use for wait-for-key in call channel
	GreetingAudio greeting_audio = 94;
	RecentCallRecord recent_call_record = 95;
	string ice_candidate = 96; // remove
	WebRTCMessage webrtc_message = 97;
	// LinkedUser linked_user = 98;
	EventType event_type = 99;
	Error error = 100;
	account.Account account = 101;
	Segment segment = 102;
	Campaign campaign = 103;

	BusinessEmailAddresses business_email_address = 104;
	FormSubmission form_submitted = 105;
	OutboundCallEntry outbound_call_entry = 106;

	WorkflowPump workflow_pump = 107;
	OutboundCallUpdateEvent outbound_call_update = 108;
}

message WebRTCMessage {
	string negotiation_id = 2;
	string offer = 3;
	string answer = 4;
	string ice_candidate = 5;
	string connection_id = 6;
	string device_id = 7;
}

message ListUserEventsRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string user_id = 3; // could be empty, but type must set
	string query = 4;
	string anchor = 5;
	int32 limit = 6; // hour

	string category = 9;
	int32 limit_hour = 10;

	string type = 12;
}

message ListEventTypeRequest {
	common.Context ctx = 1;
	string account_id = 2;
	int64 from_hour = 3;
	int64 to_hour = 4;
	string category = 5;
	string keyword = 6;
}

message StartRequest {
	common.Context ctx = 1;

	string account_id = 3;
	int64 created = 13;
	string conversation_id = 14;

	User user = 25;
	string integration_id = 26; // deprecated, use touchpoint
	string message = 30;
	repeated ConversationMember members = 31;
	string group_id = 32;

	string state = 33; // default is pending, should be active if dont want routing
	string locale = 34;

	// starter may be user, but because of bot or automation,
	// if user manually click on start conversation button initial_by is user id
	// if bot automatically created conversation by widget (using user cred),
	// initial_by is bot id
	string initial_by = 35;

	string source = 36;
	bool is_private = 37;

	string subject = 38;

	Touchpoint touchpoint = 39;

	// call
	string direction = 7;
	string device_id = 8; // require when direction = outgoing
	string by_agent_id = 41; // required when device-id = webcall
	bool enable_recording = 9;
	string sip_provider = 40;
	string call_id = 42;
	string call_diversion = 43;

	string campaign_id = 44;
	string outbound_call_entry_id = 45;

	FormSubmission form_submission = 46;
}

message PresencesRequest {
	common.Context ctx = 1;
	repeated string user_ids = 2;
	string account_id = 3;
}

message PresencesResponse {
	repeated string online_user_ids = 2;
	repeated string focused_user_ids = 3;
}

message BotRunRequest {
	common.Context ctx = 1;
	// require
	string account_id = 2;
	string bot_id = 3;
	string object_type = 4; // conversations
	string object_id = 5; // conversation_id

	// user_id is inside this
	repeated KV object_contexts = 14;

	// optional
	string mode = 6;
	Bot bot = 7;
	string action_id = 8;
	BotAction action = 9;

	// internal use only
	string bot_run_type = 15;
	string action_run_type = 16;
	int32 index = 18;

	// payload
	int64 created = 10;
	Event event = 11;
	string bot_trigger_type = 12;
	string lang = 17;
}

message BotRunResponse {
	string account_id = 2;
	string bot_id = 3;
	string object_type = 4;
	string object_id = 5;

	string exec_bot_id = 8;
	string exec_bot_state = 9;

	string action_id = 16;
	string action_state = 17;
}

message Rule {
	common.Context ctx = 1;
	string id = 2;
	string account_id = 3;
	int32 priority = 4;
	enum AssignStrategy {
		all_agents = 0;
		agentgroup = 2;
		agents = 3; // == ordered
		most_recent = 4;
		roundrobin_all_agents = 5;
		roundrobin_agents = 6;

		first_reply = 7; // list of agent
		first_reply_of_all = 8; // all agent
		first_reply_of_group = 9; // group

		least_workload = 11;
		least_workload_agents = 12;
		least_workload_of_group = 13;

		least_open = 14;
		least_open_agents = 15;
		least_open_of_group = 16;

		bot = 10;

		hangup = 20;
		random_agents = 21;
		most_idle_agents = 22;

		call_menu = 26; // call
		forward_to = 27; // call
	}

	string strategy = 5;
	repeated string assign_tos = 6;
	bool enabled = 8;
	int64 created = 9;
	int64 modified = 12;
	string name = 10;
	string description = 11;
	bool available_agents_only = 13; // strategy
	// optional SCondition condition = 14;

	// new condition
	ChannelCondition channel_condition = 15;
	TimmingCondition timming_condition = 16;
	repeated UserAttributeCondition form_conditions = 30;

	bool user_has_replied_before = 18; // new
	repeated UserAttributeCondition user_conditions = 19;
	repeated string lead_owners = 20;
	string call_menu_key = 28;

	bool when_offline = 21; // only run when there is no online agent

	string has_agent_replied = 26; // "" -> no use, none, all, agents      | dont use
	repeated string last_replied_agents = 27; // empty =                   | dont use

	bool prefer_most_recent_agent = 29;

	repeated string fallback_agents = 23;

	int64 v = 22; // version

	repeated string supervisors = 24;
	RingingSetting call = 25;
}

message RingingSetting {
	GreetingAudio greeting_message = 4;
	GreetingAudio missed_message = 5;

	// forward call
	string forward_to = 6;

	bool ring_most_recent_agent_first = 10;
	string missed_call_handle_strategy = 11; // empty, round-robin, first-ring, last-ring, last-contact
	int64 missed_call_handle_expire_sec = 12; // 1 days
	repeated string missed_call_handle_agents = 13;
	repeated string missed_call_supervisors = 14;

	int64 menu_timeout_sec = 15; // sec
	GreetingAudio menu_message = 16; // the audio plays while waiting for user to press key
	GreetingAudio invalid_option_message = 17; // url when typing into empty option
	repeated Rule menu_options = 18;
  Rule menu_fallback = 19;

	int64 agent_ring_timeout_sec = 20; // -1 forever, 0 auto, ... n sec
}

message TimmingCondition {
	string business_hour = 3; // [in, notIn] if this is true, ignore all other timming conditions
	repeated string days_of_week = 2; // Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday
	repeated int32 minute_of_days = 4; // pair [0-4] [6-9]
	int64 end_time = 5;
}

message ChannelCondition {
	repeated string channels = 2; // default: all channel

	// for fb comment
	// for messenger
	// for zalo
	repeated string integration_ids = 3; // optional for subiz and email

	// for subiz only
	repeated LocationCondition locations = 4; // or
	repeated LocationCondition not_in_locations = 13; // or
	repeated string page_urls = 5;
	repeated string not_page_urls = 6;
	repeated string device_types = 7; // desktop, mobile, tablet

	// for email only
	repeated string email_tos = 10; // contains
	repeated string email_froms = 11; // contains
	repeated string email_subjects = 12;  // contains

	repeated string from_number_prefixes = 15;
	repeated string not_from_number_prefixes = 16;
}

message LocationCondition {
	string city_name = 3; // must equal
	string country_code = 4; // must equal

	string province = 5;
	repeated string districts = 6;
}

message Route {
	common.Context ctx = 1;
	repeated Rule rules = 2;
}

message RouteResult {
	string rule_id = 1;
	string strategy = 3;
	repeated string agent_ids = 4;
	string group_id = 5;
	string state = 6;
	int64 assigned = 7; // ms

	string bot_id = 8; // strategy == bot
	string debug = 9;
}

message ConversationMember {
	common.Context ctx = 1;
	string account_id = 2;
	string type = 3; // type
	string id = 4;
	string conversation_id = 13;
	string last_page_view_url = 15;
	string membership = 12;
	enum State {
		active = 0;
		left = 1;
		observer = 2; // assigned
		terminated = 3 ; // bot only
	};
	common.By invited_by = 16;

	int64 left_at = 17;
	int64 joined_at = 18; // ms
	int64 first_message_at = 19; // ms
	int64 seen_at = 20;
	int64 received_at = 21;
	int64 last_sent = 23; // timestamp
	int64 call_answered = 24;
	int64 call_rang = 25;

	bool is_muted = 27;
	bool off_notification = 28;

	int64 hidden = 29; // ms
	int64 last_mentioned = 30; // ms

	string invite_reason = 34;
	int64 total_messages = 35;
}

message ListConversationsRequest {
	common.Context ctx = 1;
	string account_id = 3;
	//	 string state = 4; // empty or unassigned
	string member_id = 8; // ignore
	//  string group_by = 9;
	string integration_id = 10; // deprecated
	string user_id = 11;
	int32 limit = 5;
	string anchor = 6;

	string agent_id = 12; // list conversations of agent

	repeated string user_ids = 13; // for live, only return id and state

	string state = 14;

	bool is_private = 15; // for agent only
	bool id_only = 16; // internal usage

	string touchpoint_channel = 17;
	string touchpoint_source = 18;
	string touchpoint_id = 19;
}

message ListConversationEventsRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string conversation_id = 3;
	string start_id = 4;
	int32 limit = 6;

	string message_type = 15; // 'empty', file, image, link, pinned
	bool is_private = 7;
}

enum ConvoState {
	// none = 0; // convo
	unassigned = 0; // convo
	active = 6; // convo
	ended = 8; // convo
	pending = 9; // ticket and convo

	all = 10; // ticket
	// open = 11;  ticket
	resolved = 13; // ticket
	// closed = 14; // ticket

	waiting_for_reply = 15; // waiting for reply
	dialing = 16;
	congestion = 17;
}

message Conversation {
	common.Context ctx = 1;
	string id = 2;
	string account_id = 3;
	int64 created = 4;
	repeated ConversationMember members = 7;
	repeated Tag tags = 10;
	int64 ended = 12;
	string state = 11; // converation state: pending, dialing, active, (routing||unassigned), congestion, ended
	Touchpoint touchpoint = 13; // where does the conversation happend, replace integration and chain

	Integration integration = 18; // removing
	int64 actived = 19;

	// Message last_message = 20; // remove after update mobile app

	Event last_internal_message_sent = 27;
	Event last_message_sent = 23;          // no internal
	Event last_event = 26;                 // no internal // remove
	string initial_by = 25; // agent_id || popup || user || bot

	int64 response_sec = 22;

	RouteResult assigned_to = 30;

	// string first_message = 31;
	string subject = 32;

	repeated KV fields = 33;
	repeated Rating ratings = 35;

	string source = 36; // indicate where does the conversation happended (url)

	// my field
	string agent_id = 40;
	bool mute = 41; // true, false
	bool read = 42; // true, false
	bool watch = 44; // true

	int64 hidden = 39;

	int64 updated = 43;

	Event matched_event = 45; // for search only

	string locale = 46;
	repeated string agent_sent_ids = 47; // holap derived
	int64 first_replied_duration = 48; // holap derived
	string channel = 49; // holap derived
	string channel_touchpoint = 50; // holap derived
	bool is_private = 51;

	string avatar_url = 52;
	bool is_returned = 54; // for report new vs. old

	CallInfo call = 55;

	// only use to communicate with call driver
	CallDriverRequest call_request = 56;

	string traffic_source = 60;  // direct, referring, organic, social, advertising
	string traffic_ads_network = 61; // google_adwords
	common.SessionCampaign traffic_utm = 62;
	string traffic_referrer = 63;

	string campaign_id = 64;
	string outbound_call_entry_id = 65;

	FormSubmission form_submission = 66;
	string mark_as_spam_by = 67;
	bool is_spam = 68;
	int64 sentiment_score = 69;
}

message ConversationMetadata {

}

message CallInfo {
	string account_id = 2;
	string conversation_id = 3;

	int64 started = 5;
	// call only
	// time start to anster
	int64 answered = 6;
	int64 ended = 7;

	string to_number = 8; // derived from touchpoint
	string from_number = 9; // derived from touchpoint
	string direction = 10; // inbound, outbound

	string initial_by_phone_device = 11;
	string initial_by_agent = 13; // used when use webcall
	bool is_missed = 12;

	bool enable_recording = 14;
	string driver = 15; // derived from integration.call_center_driver

	int64 duration_sec = 16; // ms
	string hangup_code = 17;
	// string call_status = 18; // waiting_for_key
	string process_id = 19; // check outdated

	// derived from convo.state, do not use this, use convo.state instead
	// this field only for driver to return call status
	// accepts: active, ended, dialing
	string status = 20;
	string answered_device = 21;
	File recorded_audio = 22;

	string device_id = 23;
	string member_id = 24; // rang agent or answer agent
	string member_type = 25; // agent, user

	string call_id = 26;
	string diversion_number = 27;
	string transfer_to = 28;

}

message Rating {
	int64 rated = 35; // rated time ms
	int32 rating = 36; // 1-poor 2 3-average 4 5-great
	string rated_by = 37; // must be an user id
	bool no_rating = 38; // use dont want to rate
	string comment = 39;
}

message Conversations {
	common.Context ctx = 1;
	repeated Conversation conversations = 3;
	string anchor = 4;
	repeated string user_ids = 5;
	repeated Error errors = 6;
	int64 last_modified = 7;
}

// html: <b>xin chao</b>&nbsp;{{customer.name}}
// plaintext: xin chao {{customer.name}}
// markdown:  *xin chao* {{customer.name}}
message Message {
	common.Context ctx = 1;
	string account_id = 5;
	string order_id = 6;
	string conversation_id = 14;
	string task_id = 27;
	string id = 11;
	string text = 2; // plaintext or template
	bool is_template = 51;
	string plaintext = 50;
	string format = 3; // plaintext, html, markdown, delta
	repeated Attachment attachments = 4;
	repeated KV fields = 10;

	// string integration_id = 15; // deprecated, use event touchpoint
	string user_id = 19; // new standard, removing chain

	// used for reaction and delivery status, could be ignore
	repeated MessagePong pongs = 17;

	string quill_delta = 20; // deprecated
	I18nString i18n_quill_delta = 21; // rename to i18n_text

	bool is_private = 22;

	// bool is_pinned = 24;
	int64 pinned = 25;
	string pinned_by = 26;

	string comment_id = 28; // for fb or instagram
	string idempotency_key = 29;

	InstagramStory story = 30; // for instagram
	repeated string tos = 31; // to user_id

	bool is_internal = 32;

	MessageReferral referral = 33; // facebook

	string zns_phone = 40; // zns-only
	string zns_template_id = 41; // zns-only
	string zns_tracking_id = 42; // zns-only
	map<string, string> zns_template_data = 43; // zns-only

	map<string, string> zns_template_default_data = 44; // zns-only
	map<string, string> zns_template_data_field = 45; // zns-only

	// facebook: ACCOUNT_UPDATE, CONFIRMED_EVENT_UPDATE, CUSTOMER_FEEDBACK, HUMAN_AGENT, POST_PURCHASE_UPDATE
	// https://developers.facebook.com/docs/messenger-platform/reference/send-api/

	// zalo: CUSTOMER_SUPPORT, TRANSACTIONAL, PROMOTION
	// https://developers.zalo.me/changelog/thong-bao-cap-nhat-phan-loai-tin-nhan-cua-zalo-official-account-7241
	string message_tag = 46;

	I18nString i18n_text = 47;
	string template_id = 48;
}

message MessageReferral {
	string ref = 2;
	string source = 3; // SHORTLINK, ADS
	string type = 4; // OPEN_THREAD
	AdsContextData ads_context_data = 5;
	string ad_id = 6;
	string referer_uri = 7;
	bool is_guest_user = 8;

	string ref_user_id = 9;
	string ref_psid = 10;
	string ref_link = 11;
	string ref_conversation_id = 12;
	string ref_page_id = 13;
}

message AdsContextData {
	string photo_url = 5;
	string post_id = 6;
	string ad_title = 7;
	string video_url = 8;
	string product_id = 9;
}

message InstagramStory {
	string id = 3;
	string link = 4;
}

message MessagePong {
	string member_id = 3;

	enum Type {
		n = 0;
		ack = 1;
		seen = 2;
		receive = 3; // deliverd to client machine
		delete = 4;
		like = 5;
		love = 6;
		haha = 7;
		wow = 8;
		sad = 9;
		angry = 10;
		remove_like = 11;
		remove_love = 12;
		remove_wow = 13;
		remove_haha = 14;
		remove_sad = 15;
		remove_angry = 16;
		hide = 17;
		remove_hide = 18;
		open = 19; // email opened
		unseen = 20;
		clicked = 21; // email clicked
		bounced = 22; // email bounced
		spamreport = 24; // email bounced
		unsubscribed = 25; // email bounced

		care = 30;
		remove_care = 31;
		ref = 33;
	}
	string type = 4;

	int64 created = 5;
	string ack_error = 6; // used in ack
	int64 count = 7;
	string url = 8; // for clicked
	string ref_user_id = 9;
	string ref_psid = 10;
	string ref_link = 11;
}

message MessageButton {
	enum ButtonType {
		unknown = 0;
		url_button = 2;
		postback_button = 3;
		call_button = 5;
		widget_ask_desktop_notify_button = 6;
		widget_ask_contact_info_button = 7;
	}

	string type = 2;

	string id = 15;
	// post back
	string title = 3;
	string payload = 4;
	string image_url = 5;
	string product_id = 10; // if used in type = url => product url
	//	optional RawEvent event = 12;
	string url = 14;

	string phone_number = 16;
	string webview_size = 18; // fb

	I18nString i18n_title = 19;
}

message GenericElementTemplate {
	string title = 2;
	string image_url = 3;
	string subtitle = 4;
	MessageButton default_action = 5;
	repeated MessageButton buttons = 6;

	string id = 7; // fb product id

	I18nString i18n_title = 8;
	I18nString i18n_subtitle = 9;
}

enum AttachmentType {
	nothing = 0;
	file = 2;
	generic = 3;
	preview = 4;
	button = 5;
	input = 6;
	form = 9;
	form_submit = 10;
	fallback = 11;
	// content_template = 12;
	quick_replies = 13;
	command = 14; // request_user_info
	link = 15;
	postback = 16;
	product_preview = 17;
	product = 18;
	quick_reply = 19;
	order = 20;
	quote = 22;
}

message Attachment {
	string type = 12;
	// file
	string mimetype = 2;
	string url = 3;
 	string thumbnail_url = 4;
	string name = 5;
	string description = 6;
	int32 length = 15;
	int32 size = 13; // byte

	// generic
	repeated GenericElementTemplate elements = 8;

	// preview
	string title = 9;
	string color = 10;
	string pretext = 11;

	repeated MessageButton buttons = 16;
	// AskInfomation ask_info = 17;
	// AskInfomationAnswer ask_info_answer = 18;
	//repeated string inputtype = 17;

	// MessageForm form = 20;
	// MessageFormSubmit form_submit = 21;

	repeated QuickReply quick_replies = 23;
	bool lock_input = 24; // lock input while has quick replies

	Postback postback = 25;
	Event quote = 26;

	Product product = 30;

	QuickReply quick_reply = 31;
	Order order = 32;

	File file = 34;
	string content_id = 35;
	string disposition = 36; // for custom data

	// 	string template_type = 36; // for zalo: request_user_info
}

message QuickReply {
	string content_type = 2; // should be 'text'
	string title = 3;
	string payload = 4;
	string image_url = 5;
	I18nString i18n_title = 6;
}

/*
message MessageForm {
	string title = 2;
	string state = 3;
	repeated MessageFormField fields = 4;
	string submit_url = 5;
}

message MessageFormSubmit {
	string form_message_id = 2;
	repeated MessageFormField fields = 3;
	string state = 4;
}

message MessageFormField {
	enum InputType {
		text = 0;
		datetime = 1;
		list = 2;
		number = 3;
		boolean = 4;
	}
	string input_type = 2;
	repeated string items = 3;
	string state = 4;
	string title = 5;
	string image_url = 6;
	string name = 7;
	string answer = 8;
	int64 answered = 9;
}
*/

message Tag {
	common.Context ctx = 1;
	string id = 2;
	string account_id = 3;
	string title = 4;
	int64 created = 5;
	int64 modified = 6;
	string creator_id = 7;
	string color = 8;
	int64 last_used = 9;
	string type = 10;
}

message TemplateData {
	string type = 4;
	string key = 2;
	repeated string ids = 3;
}

message Template {
	common.Context ctx = 1;
	string id = 2;
	string account_id = 3;
	repeated string keys = 6;
	string channel_type = 17; // remove
	Message message = 8;
	repeated TemplateData data = 18;
	bool is_public = 11;
	int64 created = 12;
	int64 modified = 13;
	string creator = 14;
	int64 latest_picked = 15;
	string name = 16;
}

message SearchTemplate {
	common.Context ctx = 1;
	string anchor = 2;
	int32 limit = 3;
	string account_id = 5;
	string order_by = 6; // latest_picked

	bool is_template = 8;
}

message Templates {
	common.Context ctx = 1;
	repeated Template templates = 2;
	string anchor = 3;
	int64 total = 4;
}

message Tags {
	common.Context ctx = 1;
	repeated Tag tags = 4;
}

message Postback {
	string event_id = 4;
	string payload = 5;
	string title = 8;
}

message BotPostback {
	string type = 2; // bot_jump || add_to_cart || order_confirmation || place_order
	string bot_id = 3; // required
	string action_id = 4;
	string from_action = 5; // required
	string title = 6; // for bot_jump
	I18nString i18n_title = 7; // for bot_jump

	// for add_to_card and place_order only
	string product_id = 10;

	// for order_confirmation
	string status = 13; // confirmed || cancelled
}

message Integrations {
	common.Context ctx = 1;
	string account_id = 2;
	repeated Integration integrations = 3;
}

// rename to touchpoint
message Integration {
	common.Context ctx = 1;
	string account_id = 2;
	string connector_id = 3;
	string logo_url = 4; // emoji for phone
	string name = 5;

	string connector_type = 12; // see facebook, call
	int64 integrated = 6;
	int64 last_integrated = 7;
	// int64 updated = 7;

	string state = 8;
	enum State {
		activated = 0; // activeated and insync
		pending = 1;
		failed = 2;
		deleted = 3;
	}
	string id = 10; // generated by connector, must be format of accid.XXX.connectorid

	int64 created = 11;
	string integrated_by = 13;
	int64 last_failed = 14;
	bool disabled = 15;
	string sending_status = 17; // ok, failed
	string receiving_status = 18; // ok, failed

	string username = 19;
	string linked_page_id = 20;

	string call_center_driver = 43; // empty => subiz, stringee
	string sip_provider = 44; // itel, fpt, vnpt; for call only

	int64 last_outbound_called = 45;
	int64 last_inbound_called = 46;

	// for email
	string email_identity_type = 47; // DOMAIN | EMAIL_ADDRESS

	string email_identity = 48; // email address or domain

	// https://docs.aws.amazon.com/ses/latest/APIReference-V2/API_DkimAttributes.html#SES-Type-DkimAttributes-Status
	// PENDING | SUCCESS | FAILED | TEMPORARY_FAILURE | NOT_STARTED | TAKEN
	string email_verification_status = 49;

	int64 email_last_verified = 50;
	string email_dkim_host = 51;
	string email_dkim_data = 52;

	string email_sender_name = 53;
	string email_sender_address = 54;
	string email_sender_city = 55;
	string email_sender_country = 56;
	string email_sender_zip = 57;

	string email_sender_nickname = 58;
}

message TagRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string conversation_id = 3;
	string id = 4;
	string order_id = 5;
}

message AssignRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string conversation_id = 3;
	string user_id = 4;
	bool use_rule = 5;

	string strategy = 6;
	repeated string assign_tos = 7;
	bool available_agents_only = 8; // strategy

	// for bot only
	int64 agent_reply_timeout = 9; // sec
	string branch_on_no_reply = 10; // action id

	string bot_id = 11;
	string action_id = 12;

	repeated string fallback_agents = 13;
}

message EndchatConnectorSetting {
	string connector_id = 3;
	bool at_midnight = 4;
	int64 after_inactivity_mins = 6;
	bool enabled = 11;
	bool custom = 12;
}

message EndchatSetting {
	common.Context ctx = 1;
	string account_id = 2;
	repeated EndchatConnectorSetting connector_settings = 3;
	EndchatConnectorSetting global_setting = 4;

	int64 updated = 5;

	bool send_transcript = 7;
	repeated string send_transcript_tos = 8;
}

message ConversationAutomations {
	common.Context ctx = 1;
	string account_id = 2;
	repeated ConversationAutomation conversation_automations = 3;
}

message ConversationAutomation {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3;
	string type = 4; // endchat
	string name = 5;
	string description = 6;
	repeated string channel_types = 7;
	string avatar_url = 9;

	repeated string exclude_tags = 11; // dont run on those tag
	repeated string exclude_fields = 12;

	repeated string fields = 13;
	repeated string tags = 14; // only run on

	bool repeat = 15; // allow to run multiple time

	repeated BotCondition conditions = 16;
	// AwayMessageAutomation away_message = 11;
	// AwayMessageAutomation away_message = 11;

	// trigger
	int64 after_last_sent_ms = 17;
	repeated string after_last_sent_by_type = 18; // agent, user
	bool before_conversation_ended = 27;
	UserViewCondition condition = 28;
	repeated BotAction actions = 19;

	string updated_by = 20;
	int64 updated = 21;

	string created_by = 22;
	int64 created = 23; // ms
	int64 disabled = 24;

	int64 last_run_at = 26;
}

message Trigger {
	string type = 3; // conversation_assigned, conversation_start, area_clicked (web only), scrolling_percentage (web only), inactivity_duration (web only), after_pageview (web only), after_js_event (web only)

	// campaign trigger:
	// segment_enter
	// user_event
	// date
	// form_submitted
	// api -> https://api.subiz.com.vn/4.0/webhook/6b8e08786ca07809

	string area_clicked_css_selector = 4; // .user_name #user
	float scrolling_percentage = 6; // 0.55
	int64 inactivity_sec = 8; // 50s
	int64 after_pageview_sec = 9; // 50s
	bool disabled = 10;

	repeated EventConditionFilter event_attributes = 11;
}

message BotCondition {
	// url, browser, location, returning_visitor, device_type, referer, source, user_attribute,
	// timming, integration_id, offline, user_is_a_contact, order, conversation_tags
	// agent_online, conversation_member_online
	string key = 1;

	enum Source {
		direct = 0;
		google_ads = 1;
		organic = 2;
	}

	repeated string sources = 2;
	enum DeviveType {
		desktop = 0;
		mobile = 1;
		tablet = 2;
	}
	repeated string device_types = 3;

	enum Browser {
		all = 0;
		chrome = 1;
		firefox = 2;
		edge = 3;
		ie = 4;
		safari = 5;
		other = 6;
	}
	repeated string browsers = 4;

	repeated string referers = 6; // referer
	repeated string exclude_referers = 9; // referrer

	repeated string urls = 10; // url, url_term, url_medium, ... (or only)
	repeated string exclude_urls = 11; // url (or only)

	repeated string has_visited_url = 12; // url (or only)
	repeated string has_not_visited_urls = 13; // url (or only)

	repeated LocationCondition locations = 14; // or
	repeated LocationCondition exclude_locations = 15; // or

	// timming
	string business_hour = 20; // [in, notIn] if this is true, ignore all other timming conditions
	repeated string days_of_week = 21; // Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday
	repeated int32 minutes_of_day = 22; // pair [0-4] [6-9]

	// user
	UserAttributeCondition user = 23; // user_attribute

	repeated string integration_ids = 24; // optional for subiz and email

	// offline
	bool offline = 25; // only run when there is no online agent

	bool returning_visitor = 26;

	bool user_is_a_contact = 27; // has a way to re-connnect to user (email or phone)

	OrderCondition order = 28; // order

	repeated string conversation_tags = 29;
	repeated string exclude_conversation_tags = 30;

	bool has_agent_online = 31;
	bool has_conversation_member_online = 32;
}

message OrderCondition {
	string key = 2; // product, order_total, pos, shipping

	repeated string product_ids = 3;
	repeated string exclude_product_ids = 4;

	repeated string pos_ids = 5;
	repeated string exclude_pos_ids = 6;

	repeated string currencies = 7;
	repeated string exclude_currencies = 8;

	FloatCondition total = 9;

	repeated LocationCondition shipping = 10;
	repeated LocationCondition exclude_shipping = 11;
}

message UserAttributeCondition {
	string key = 2;
	string operator = 3;
	string value = 4;
}

message Sites {
	common.Context ctx = 1;
	string account_id = 2; // web, messenger, zalo
	repeated Site sites = 3;
}

message VisitProductSiteRequest {
	common.Context ctx = 1;
	string account_id = 2; // web, messenger, zalo
	string url = 3;

	string format = 4; // jsonld, rdfa, microdata
	bool dry_run = 5;

	int64 created = 6;
}

message Site {
	common.Context ctx = 1;
	string account_id = 2; // web, messenger, zalo
	string id = 3; // web:abc.com, web:xyz.com, facebook:423084234234, zalo:3903002404

	bool user_verified = 4;
	string image_url = 5;
	string image_hash = 12; // MD5 sum of image (internal)

	bool agent_confirmed = 6;

	int64 created = 7;

	string title = 9;
	int64 last_user_verified = 10;
	string last_user_verify_uri = 11;

	string mobile_screenshoot_url = 13;
	string desktop_screenshoot_url = 14;
}

message Bot {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3;
	string fullname = 4;
	string job_title = 19;
	string avatar_url = 5;

	string category = 6; // see BotCategory: users, orders

	string state = 7; // like agent state: active, inactive, deleted

	BotAction action = 9; // point to root action

	int64 created = 10;
	string created_by = 11;

	int64 updated = 12;
	string updated_by = 13;

	repeated Trigger triggers = 14;
	Frequently initiative_frequency = 15;

	repeated BotCondition conditions = 16;
	repeated string channels = 17; // default: all channel

	string bot_state = 18; // active, inactive

	int64 last_executed = 20; // ms
	string bot_type = 21; // hello, lead, operator, pipeline_automation
	string action_hash = 22; // hex of sha1

	string version = 23;
	string template_data = 24;
	int64 count_lead_in_last_7_days = 25;
	int64 count_conv_in_last_7_days = 26;

	repeated string sites = 27;

	string locale = 28; // can be auto
	repeated string locales = 29;

	string pipeline = 30;
	string pipeline_stage = 31; // for pipeline_stage
}

message Bots {
	common.Context ctx = 1;
	repeated Bot bots = 2;
	string anchor = 3;
	int64 total = 4;
}

message BotsRequest {
	common.Context ctx = 1;
	string query = 2; // (bot category: orders)
	string anchor = 3;
	string account_id = 4;
}

enum BotCategory {
	users = 0;
	systems = 1;
	conversations = 2;
	orders = 3;
}

enum BotActionType {
	nil = 0;
	condition = 1;
	sleep = 2;
	send_message = 3;
	jump = 4;
	send_email = 5;
	convert_to_ticket = 7;
	send_webhook = 8;
	update_conversation = 11;
	question = 12;
	update_user = 13;
	assign = 14;
	send_http = 15;
	switch_language = 16;
	ask_question = 18;
	end_bot = 19;
	update_user_labels = 20;
	cancel_order = 21;
	view_order = 22;
	confirm_order = 23;
	create_task = 24;
	update_user_segments = 25;
}

message NextBotAction {
	BotAction action = 3; // pointed to the next action or used for branching to multiple actions
}

message BotAction {
	string account_id = 2;
	string bot_id = 3; // could be pipeline automation id
	string id = 4;
	string name = 5;

	// first action require trigger
	repeated NextBotAction nexts = 8;

	string type = 9; // send_email, tag, convert_to_ticket, condition, sleep, send_webhook, create_task, update_order_state, send_message

	ActionJump jump = 15;
	ActionSendHttp send_http = 17;
	ActionAskQuestion ask_question = 18;
	AssignRequest assign = 19;

	int64 delay_sec = 20; // max 20sec
	ActionUpdateConversation update_conversation = 21;
	bytes internal_state = 30;
	ActionUpdateUser update_user = 31;
	ActionUpdateUserLabels update_user_labels = 32;
	ActionConfirmOrder confirm_order = 34;
	ActionCreateTask create_task = 35;
	ActionSendChatTranscript send_chat_transcript = 36;
	ActionUpdateUserSegments update_user_segments = 37;
}

message ActionCreateTask {
	// Task task = 2;
	// string strategy = 3; // random_agents
	repeated string assignees = 4; // random_agents
	repeated string watchers = 5; // supervisor

	int64 due_at = 6;
	int64 due_after = 8;

	string title_quill_delta = 9;
	string note_quill_delta = 10;

	int64 priority = 11; // task.priority

	string title_template = 12;
	string note_template = 13;
}

message ActionConfirmOrder {
	bool wait_for_user_response = 2;
	repeated Message messages = 3;

	repeated Message invalid_messages = 4; // send random message if user doesn't give any expected input

	string branch_on_cancellation = 8; // user click on cancel or X button
}

message ActionSendChatTranscript {
	bool send_transcript = 3;
	repeated string send_transcript_tos = 4;
}

message ActionUpdateConversation {
	repeated string tag_ids = 2;
	repeated string untag_ids = 3;
	bool end_conversation = 4;

	repeated KV fields = 5;
	repeated string remove_fields = 6;
}

message ActionJump {
	string action_id = 2;
	bool to_first_action = 3;
}

message ActionSwitchLanguage {
}

message ActionSendHttp {
	string url = 2;
	// string payload = 3;
	string method = 4;
	repeated KV header = 5;
	string quill_delta = 6; // body
	bool response_as_messages = 7;
}

message ActionAskQuestion {
	bool wait_for_user_response = 2;

	repeated Message messages = 3;
	bool allow_open_response = 4;

	string save_to_attribute = 5;

	string validation = 6; // none, email, phone, date, link, number, regex
	string validation_regex = 7;

	bool skip_if_attribute_already_existed = 11;

	Message resume_message = 15;
	int64 resume_interval = 16; // sec
	bool use_resume_message = 17;

	// retry forever

	int32 retry = 18; // TODO: remove != 1 => 0 retry, 1 retry forever

	// if user doesn't reply in this amount of time => failed
	// only active if value > 0
	int64 user_reply_timeout = 19;

	string branch_on_failed = 20; // empty => retry forever
}

message ActionUpdateUser {
	Attribute attr = 3;
	repeated Attribute attrs = 4;
}

message ActionUpdateUserLabels {
	repeated string labels = 2;
	repeated string remove_labels = 3;
}

message ActionUpdateUserSegments {
	repeated string segments = 2;
	repeated string remove_segments = 3;
}

message ReportBotRequest {
	string account_id = 2;
	string bot_id = 3;
	int64 day_from = 4;
	int64 day_to = 5;
}

message ReportBotResponse {
	message Metric {
		repeated Metric submetrics = 5;
		int64 date_dim = 2;
		string object_type = 3; // all if empty
		int64 count = 4;
		int64 object_count = 6;
		int64 lead_count = 7;
		int64 user_sent_count = 8;
	}
	repeated Metric metrics = 2;
}

message BotrunMetric {
	int64 lead_count = 2;
	int64 botrun_count = 3;
	string account_id = 4;
	string bot_id = 5;
	int64 created_hour = 6;
	string date = 7; // derived
	int64 user_sent_count = 8;
}

message BotrunMetricsRequest {
	string dim = 2;
	int32 tz = 3;
	string account_id = 4;
	string bot_id = 5;
	int64 created_hour_from = 6;
	int64 created_hour_to = 7;
}

message BotrunMetrics {
	repeated BotrunMetric metrics = 2;
}

message ActionrunMetricsRequest {
	string dim = 2;
	int32 tz = 3;
	string account_id = 4;
	string bot_id = 5;
	int64 created_hour_from = 6;
	int64 created_hour_to = 7;
}

message ActionrunMetrics {
	message ActionrunMetric {
		int64 actionrun_count = 2;
		string account_id = 3;
		string bot_id = 4;
		string action_id = 5;
		int64 created_hour = 6;
		string date = 7; // derived
	}
	repeated ActionrunMetric metrics = 2;
}

message ListObjectsRequest {
	string account_id = 2;
	string bot_id = 3;
	int64 created_hour_from = 8;
	int64 created_hour_to = 9;
	string anchor = 6;
	int32 limit = 7;

	int64 day_from = 4;
	int64 day_to = 5;
}

message ListObjectsResponse {
	string anchor = 3;
	repeated string conversation_ids = 4;
}

message Frequently {
	bool once_per_user = 2;
	bool once_per_session = 3;
	int64 interval_sec = 4; // dont do twice between those seconds

	bool enabled = 5; // false -> once per user
	bool is_recurring = 6; // false -> once ever || true -> multiple time or one user
}

////////////////////
message RealtimeSubscription {
	common.Context ctx = 1;
	string account_id = 2;
	string connection_id = 3;

	string initial_token = 4;
	repeated string events = 5;

	string host = 6; // notify client about the wrong host
}

message PollResult {
	common.Context ctx = 1;
	string account_id = 2;
	string connection_id = 3;

	repeated Event events = 4;
	string sequential_token = 6;

	string host = 7; // notify client about the wrong host
}

message RealtimeToken {
	string account_id = 2;
	string connection_id = 4;
	int64 last_offset = 5;

	int64 last_polled = 8;
	int64 package_size = 9;
}

message PsMessage {
	common.Context ctx = 1;
	string account_id = 2;

	Event event = 4;
	repeated string topics = 5;
	bool not_urgent = 6;
}

// widget
message WidgetUserSetting {
	common.Context ctx = 1;
	account.Account account = 3;
	repeated account.Agent agents = 5;
	string account_id = 2; // subiz use only
	User user = 4; // remove
	string user_id = 7; // subiz use only
	string language = 6;
	bool send_transcript = 8;
	WidgetSetting account_setting = 9;
	repeated Bot bots = 14;
	repeated WebPlugin plugins = 15;

	bool is_online = 20; // remove
	bool is_in_business_hour = 21; // remove

	int64 last_modified = 22;

	repeated Address addresses = 23;
	repeated PaymentMethod payment_methods = 24;
	Location location = 25;
}

message AccountWeb {
	common.Context ctx = 1;
	string account_id = 2;

	account.Account account = 3;
	repeated account.Agent agents = 5;

	repeated Bot bots = 14;
	repeated WebPlugin plugins = 15;
	int64 last_modified = 22;

	repeated PaymentMethod payment_methods = 24;
	Location location = 25;
}

message SocialLink {
	string type = 1; // facebook, viber, subiz, email, ...
	string url = 2;
}

message WidgetHeader {
	string layout = 2;
	enum HeaderLayout {
		team = 0;
		social = 1;
		classic = 2;
	}

	// for social layout only
	repeated SocialLink links = 3;
	// agents whose avatar will be display in the header
	repeated string agent_ids = 4;
}

message WidgetSetting {
	common.Context ctx = 1;
	string account_id = 2;
	string widget_version = 3;
	repeated account.Agent agents = 7;
	repeated string agent_ids = 8; // subiz only
	//  string css_url = 9; // old version
	//  string custom_css_url = 10; // deprecated
	int32 replytime = 11; // deprecated
	//  string css = 12; // communication client to server
	//  string style_url = 13;
	// read-only, tell whether account is ready for chat or not
	bool is_online = 14;
	bool is_in_business_hour = 34;

	string window_mode = 15;
	enum WindowMode {
		mini = 0;
		full = 1;
	}

	WidgetHeader header = 16;
	int32 height = 17;
	int32 width = 18;
	string primary_color = 19;
	string secondary_color = 20;
	string background = 21;
	string text_color = 22;
	WidgetForm offline_form = 23;
	WidgetForm prechat_form = 24;
	WidgetChatButton desktop_button = 25;
	WidgetChatButton mobile_button = 26;
	WidgetGreeting greeting = 27;
	string title = 28;
	string introduction = 29;
	bool auto_request_rating = 33;

	I18nString caption = 35;
	I18nString tagline = 36;

	int64 z_index = 37;

	bool hide_subiz_logo = 38;
	bool hide_close_button = 39;

	int64 hide_agent_profile = 40;

	// Form offline_form = 41;
	// Form prechat_form = 42;
}

message WidgetField {
	string key = 1;
	string label = 2;
	bool is_required = 3;

	// so front end dont have to download attribute definitions
	string type = 5;

	repeated string list = 6; // available option for field

	string subtype = 8; // phone, email, rating
	bool multiple_choice = 9;
	bool multiline_text = 10;
	string placeholder = 11;

	bool is_user_attribute = 12;

	string value = 13;

	I18nString i18n_label = 14; // label i18n
	I18nString i18n_placeholder = 15;
	AttributeDefinition def = 16;
}

message WidgetGroup {
	string id = 1;
	string name = 2;
}

message WidgetForm {
	repeated WidgetField fields = 1;

	bool group_required = 2;
	repeated WidgetGroup groups = 3;
	string group_label = 4;

	string title = 5;
	bool enabled = 6;
	bool end_conversation_after_submit = 7;
	string enable_when = 8;
	enum When {
		all_agents_offline = 0;
		out_of_bussiness_hour = 1;
	}

	bool question_required = 10;
	string question_label = 11;

	I18nString i18n_group_label = 12;
	I18nString i18n_title = 13;
	I18nString i18n_question_label = 14;
}

message WidgetChatButton {
	string background_image_url = 1;
	string background_mask_url = 11;

	int32 width = 2;
	int32 height = 3;
	string background = 4;
	int32 margin_x = 5;
	int32 margin_y = 6;
	string position = 7;

	enum ButtonPosition {
		left = 0;
		right = 1;
	}
	bool default_style = 8;
	string background_border_radius = 9;
	bool hidden = 10;
}

message WidgetGreeting {
	string message = 2;
	bool enabled = 4;
	string agent_id = 5;

	I18nString greeting = 6;
}

////////////// CAMPAIGN //////////////
message CampaignNotification {
	//  email.Email email = 1;
	bool enabled = 2;
	string sender_id = 4;
	string from = 5;
	repeated string to = 7;
	string subject = 9;
	string body = 10;

	repeated string agents = 12;
	bool all_agents = 13;
	bool roundrobin_agent = 15;

	Message user_email = 14;
}

message WebPlugins {
	common.Context ctx = 1;
	string account_id = 2;
	repeated WebPlugin plugins = 3;
}

message WebPlugin {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3;

	string name = 5;
	// chatbox, popup, contact, notification
	string type = 6;

	int64 created = 10;
	string created_by = 11;

	int64 updated = 12;
	string updated_by = 13;

	bool enabled = 15;

	int64 last_impression = 16;
	int64 last_conversion = 17;

	repeated Trigger triggers = 19;
	Frequently initiative_frequency = 20;
	int64 impression_limit = 21;
	repeated BotCondition conditions = 22;

	int64 total_impression = 27;
	int64 total_goal_reached = 28;
	int64 total_lead = 29;

	bool is_deleted = 30;

	string locale = 31; // can be auto
	repeated string locales = 32;

	WidgetSetting chatbox = 40;
	Popup popup = 41;
	ContactComponent contact = 46;
	Notif notification = 47;

	CampaignNotification conversion_notification = 26;

	repeated string template_categories = 50;
	repeated string template_tags = 51;
	string template_title = 52;
	string template_description = 53;

	string thumbnail_url = 54;
}

message TextComponent {
	string html = 2; // do not edit, generated from quill_delta
	I18nString i18n_html = 5; // do not edit, generated from quill_delta
	string quill_delta = 3;
	I18nString i18n_quill_delta = 4;
}

message LineComponent {}

message ImageComponent {
	string url = 2;
}

message NotifProfiles {
	common.Context ctx = 1;
	repeated NotifProfile profiles = 2;
}

message NotifProfile {
	common.Context ctx = 1;
	string type = 2; // person, location
	string avatar_url = 3;
	string fullname = 4;
	string country = 5;
	string gender = 6;
	int32 age = 7;
	repeated string tags = 8;
	string email = 9;
	string phone = 10;
	string address = 11;
}

message Notif {
	repeated string profile_tags = 4; // female, male office, location, random
	repeated string custom_avatar_urls = 5;
	// server returns only for client
	repeated NotifProfile profiles = 6;

	string title_quill_delta = 9; // markdown
	I18nString i18n_title_quill_delta = 22;

	Style title_style = 10;

	repeated string message_quill_deltas = 11; // markdown
	repeated I18nString i18n_message_quill_deltas = 23;

	Style message_style = 12;

	string url = 13;
	bool new_tab = 14;

	string background_url = 15;
	Style background_style = 16;

	Style subtext_style = 17;
	Style avatar_style = 18;

	string position = 19;
	string mobile_position = 20;
	int64 interval_sec = 21; // sec
}

message ContactComponent {
	message ContactButton {
		bool enabled = 1;
		string type = 2;
		ZaloContactComponent zalo = 4;
		FacebookContactComponent facebook = 5;
		CallContactComponent call = 6;
		ChatContactComponent chat = 7;
		MapContactComponent map = 8;
	}

	string theme = 3; // flat, material, long-shadow, fluent, mac
	string layout = 4; // standard, footer, mini
	string position = 5;
	string size = 6; // sm, md, lg
	repeated ContactButton buttons = 7;
}

message FacebookContactComponent {
	string facebook_url = 2;
	string page_id =4;
	string title = 3;
}

message ZaloContactComponent {
	string zalo_oa_id = 2;
	string title = 3;
}

message CallContactComponent {
	message Hotline {
		string number = 2;
		string name = 3;
		string image_url = 4;
	}
	repeated Hotline hotlines = 4;

	string recall_title = 5;
	string thank_message = 6;

	string background = 7;
	string color = 8;
}

message ChatContactComponent {}

message MapContactComponent {
	string title = 2;
	message Location {
		string name = 2;
		float latitude = 3;             // filled
		float longitude = 4;            // filled
		string phone_number = 5;
	}
	repeated Location locations = 4;
}

message CountdownComponent {
	string expire_time_type = 3; // fixed_time, visit_time, repeat_daily, repeat_weekly
	int64 fixed_time = 4;
	int64 visit_time = 5; // minute (example 60)
	int64 repeat_daily = 6; // unix min
	int64 repeat_weekly_min = 7;
	string repeat_weekly_weekday = 8; // monday, wednesday

	string skin = 10; // flip, electric
	string size = 11; // sm md lg

	string timezone = 12; // +07:00 or empty => user timeone
}

message FormField {
	string key = 1; // first_name
	string label_quill_delta = 2;
	string label = 3; // First Name
	I18nString i18n_label = 14;

	bool is_required = 4;

	// so front end dont have to download attribute definitions
	// text, phone, email, rating, multiple-choice, single-choice, dropdown, checkbox, number
	string type = 5;

	string validate = 8; // phone, email, rating

	bool randomize_option = 9;
	message FormFieldOption {
		string label = 2;
		I18nString i18n_label = 4;
		string value = 3;
	}
	repeated FormFieldOption options = 10;

	string placeholder = 11;
	I18nString i18n_placeholder = 15;

	string value = 13;
	bool is_hidden = 16;

	string linked_user_attribute = 17;
}

message FormSubmissions {
	repeated FormSubmission form_submissions = 4;
}

message FormSubmission {
	common.Context ctx = 1;
	string account_id = 2;

	string form_id = 3;
	string user_id = 4;

	string id = 5;

	int64 submitted_at = 6;
	repeated FormField values = 7;

	// track submission source
	string page_url = 8;
	string source_campaign_id = 9;
	string source_campaign_number = 10;
}

message Forms {

	repeated Form forms = 4;
}

message Form {
	// general stype
	repeated FormField fields = 1; // convert to form group

	// for widget
	bool group_required = 2;
	repeated WidgetGroup groups = 3;
	string group_label = 4;

	string title = 5;
	bool enabled = 6;
	bool end_conversation_after_submit = 7;
	string enable_when = 8;
	enum When {
		all_agents_offline = 0;
		out_of_bussiness_hour = 1;
	}

	bool question_required = 10;
	string question_label = 11;

	I18nString i18n_group_label = 12;
	I18nString i18n_title = 13;
	I18nString i18n_question_label = 14;

	int64 created = 20;
	string created_by = 21;
	int64 updated = 22;
	string updated_by = 23;

	repeated FormGroup form_groups = 25;
	string type = 26; // campaign, form, popup
}

message FormGroup {
	string type = 4;
	repeated FormField fields = 5;
	string title = 10;
	I18nString i18n_title = 11;
}

message ButtonsComponent {
	bool primary_enabled = 2;
	repeated PopupButtonAction primary_actions = 3;
	string primary_text = 4;
	I18nString i18n_primary_text = 5;

	bool secondary_enabled = 8;
	repeated PopupButtonAction secondary_actions = 9;
	string secondary_text = 10;
	I18nString i18n_secondary_text = 11;
}

message WebPluginComponent {
	string type = 2; // text, image, countdown, form, buttons, line, social_buttons, follow_facebook

	Style style = 3;
	Style mobile_style = 4;

	TextComponent text = 5;
	ButtonsComponent buttons = 6;
	CountdownComponent countdown = 7;
	Form form = 8;
	LinkComponent link = 9;
	ImageComponent image = 10;
	LineComponent line = 11;
	SocialButtonsComponent social_buttons = 12;
	FollowFacebookComponent follow_facebook = 13;
}

message FollowFacebookComponent {
	string url = 3;
}

message SocialButtonsComponent {
	string facebook = 3;
	string zalo = 4;
	string twitter = 5;
}

message Popup {
	string position = 2; // top, bottom       fullscreen, center, middle-left, middle-center, top-left, very-bottom, verry-top, halfway-top, halfway-bottom
	string type = 3; // bar, modal, form

	bool animation = 5;

	bool show_close_button = 6;
	bool overlay = 7;

	string text_color = 9; // description
	string font_family = 10;
	string font_size = 11;
	string background = 12;
	string spacer = 13;

	string theme = 17; // plain, light, paper, bold

	repeated PopupPage pages = 20;
	// bool allow_multiple_submissions = 21;

	// chuyen form submit thanh hoi thoa
	bool conversion_to_new_conversation = 22;
	// user x submit form DSLKJFLKSDJF
	// ho ten: asldkj lkasdf
	// sdt: asldf lajsd flk
	// emil: 09283409

	repeated string tags = 23;
	string container_query_selector = 24;
}

message LinkComponent {
	string quill_delta = 2;
	string text = 3;
	string url = 4;
}

message Style {
	Style hover = 1;

	string border_radius = 2;

	string font_family = 3; // default font family
	string color = 4;
	string background = 5; // color or gradient

	string text_align = 6;
	string text_transform = 7;

	string font_style = 8;
	string font_weight = 9;

	string width = 10;
	string max_width = 11;

	string height = 12;
	string max_height = 13;

	string padding_left = 14;
	string padding_right = 15;
	string padding_top = 16;
	string padding_bottom = 17;

	string margin_left = 18;
	string margin_right = 19;
	string margin_top = 20;
	string margin_bottom = 21;

	string position = 25 ; //absolute, relative

	string object_fit = 26; // cover, contain
	string line_height = 27;
	string background_position = 28;

	string left = 30;
	string right = 31;
	string top = 32;
	string bottom = 33;

	string opacity = 34;

	string rotate = 35;

	// filter
	string blur = 46; //px
	string grayscale = 37; // %

	string overlay = 38; // background
	string overlay_opacity = 39;

	string flex = 40;
	string flex_direction = 41;
	string flex_shrink = 42;
	string align_items = 43;
	string justify_content = 44;

	string transform = 48;
	string font_size = 49;
	string z_index = 60;

	string border_bottom = 61;
	string border_left = 62;
	string border_top = 63;
	string border_right = 64;
	string border = 65;

	string box_shadow = 66;
	string overflow = 67;
	string overflow_x = 68;
	string overflow_y = 69;

	string white_space = 70;
	string user_select = 71;
	string pointer_events = 72;
}

message PopupPage {
	repeated WebPluginComponent components = 10;
	Style style = 11; // body
	Style mobile_style = 12;
	ButtonComponent background_click = 9;

	string layout = 3; // row, column
	string mobile_layout = 4;
}

// impression = view
message Impression {
	common.Context ctx = 1;
	string account_id = 2;
	string campaign_id = 3;
	string id = 4;
	string user_id = 5;

	string url = 7;
	common.Device device = 8;
	int64 created = 9;

	string by_trigger = 10;
	string impression_token = 11;  // for request submit only

	string web_plugin_id = 12;
}

message ConversionRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string campaign_id = 3;
	string anchor = 4;
	int32 limit = 5;

	int32 from_hour = 7;
	int32 to_hour = 8;
	string web_plugin_id = 9;
}

message Conversions {
	common.Context ctx = 1;
	repeated Conversion conversions = 2;
	string anchor = 4;
}

message Conversion {
	common.Context ctx = 1;
	string account_id = 2;
	string campaign_id = 3;
	string impression_id = 4;
	string user_id = 5;

	string url = 7;
	common.Device device = 8;

	string by_trigger = 10;

	CampaignSubmission submission = 12;
	int64 created = 13;

	int64 week = 14; // internal use only
	string impression_token = 15; // for request submit only

	string web_plugin_id = 16;

	User user = 17; // for webhook only
}

message UserCampaignStatus {
	common.Context ctx = 1;
	string account_id = 2;
	string campaign_id = 3;
	string user_id = 5;

	string status = 8; // goal_reached || failed || nothing
	enum Status {
		goal_reached = 0;
		failed = 1;
	}
	int64 created = 10;
	string web_plugin_id = 11;
}

message CampaignSubmission {
	common.Context ctx = 1;
	string account_id = 2;
	string campaign_id = 3;
	string user_id = 5;

	repeated WidgetField fields = 6;
}

message PopupButtonAction {
	string action = 3; // open_url, close, open_widget, submit, next, goal_reach

	string url = 5; // url to open
	bool new_tab = 6; // open new url on new tab
}

message ButtonComponent {
	bool enabled = 2;
	repeated PopupButtonAction actions = 3;
	string text = 6;

	string color = 10;
	string background = 11;
	string font_family = 30;
	string font_size = 31;
	string font_style = 32;
	string font_weight = 33;
	string text_transform = 34;

	string type = 5; // primary, secondary
}

message ImpressionCount {
	string account_id = 3;
	string campaign_id = 4;
	int32 count = 5;
	int32 hour = 6;
	int32 month = 7;
}

message ConversionCount {
	string account_id = 3;
	string campaign_id = 4;
	int32 count = 5;
	int32 hour = 6;
	int32 month = 7;
}

message ReportCampaignRequest {
	common.Context ctx = 1;
	string account_id = 3;
	string campaign_id = 4;
	int32 from_hour = 5;
	int32 to_hour = 6;
	string range = 7;
	enum Range {
		hour = 0; // default
		day = 1;
	}
	int32 tz = 8;
}

message ReportCampaignResponse {
	common.Context ctx = 1;
	repeated int32 impressions_count = 3;
	repeated int32 conversions_count = 4;
}

message WebPluginMetric {
	int64 range_value = 2;
	int64 impression = 6;
	int64 conversion = 7;
}

message ReportWebPluginRequest {
	common.Context ctx = 1;
	string account_id = 3;
	string web_plugin_id = 4;
	int32 from_hour = 5;
	int32 to_hour = 6;
	string range = 7;
	enum Range {
		hour = 0; // default
		day = 1;
	}
	int32 tz = 8;
}

message ReportWebPluginResponse {
	common.Context ctx = 1;
	string range = 2;
	repeated WebPluginMetric metrics = 3;
}

message WebPluginConversionRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string web_plugin_id = 3;
	int64 unix_day_from = 5;
	int64 unix_day_to = 6;
	string anchor = 8;
	int32 limit = 9;
}

message ConversionsExported {
	string url = 6;
	string anchor = 7;
}

message SearchLocationsRequest {
	common.Context ctx = 1;
	string query = 2;
	int64 limit = 4;
}

message GreetingAudios {
	common.Context ctx = 1;
	string account_id = 3;
	repeated GreetingAudio greeting_audios = 4;
}

message GreetingAudio {
	common.Context ctx = 1;
	string account_id = 3;

	string id = 4;
	string name = 5;
	string type = 6; // sound, robot

	int64 created = 10;
	string created_by = 11;
	string text = 13; // could be text or ssml, for indexing purpose only

	File file = 14;
}

message UploadedImage {
	common.Context ctx = 1;
	string account_id = 3;
	string url = 4;
	string thumbnail_url = 5;
	int64 width = 10;
	int64 height = 11;
	int64 created = 12;

	string author = 13; // for upspash photos
	string author_url = 14;
}

message UploadedImages {
	common.Context ctx = 1;
	repeated UploadedImage images = 2;
}

enum ChannelType {
	subiz = 0;
	email = 1;
	facebook = 2; // ott
	viber = 3;
	facebook_comment = 4; // public, dont close conversation
	zalo = 5;
	call = 6;
	instagram = 7;
	instagram_comment = 8;
}

message Webhooks {
	common.Context ctx = 1;
	repeated Webhook webhooks = 2;
}

message WebhookSecret {
	string secret = 3;
	int64 expired = 5;
	int64 created = 6;
}

message Webhook {
	common.Context ctx = 1;
	string account_id = 12;
	string id = 2;
	string url = 3;
	string secret = 4;
	WebhookSecret old_secret = 5; // keep old secret so endpoint could do gradual update

	repeated string events = 6;
	string state = 7;
	enum State {
		active = 0;
		backoff_sleep = 1;
		dead = 2;
	}

	int64 modified = 19; // update when url, events or secret updated
	int64 created = 20;
	string creator = 21;
	bool is_enabled = 22; // deprecated
	bool is_protected = 23; // deprecated

	string avatar_url = 27; // favicon for the domain

	int64 total_deliveries_in_last_7_days = 30;
	int64 total_failed_deliveries_in_last_7_days = 31;
	bool is_disabled = 33;
	int64 last_delivery_at = 34;
	int64 last_success_delivery_at = 35;
	int64 next_retry_at = 36;

	string api_version = 37;
}

message WebhookDeliveries {
	common.Context ctx = 1;
	repeated WebhookDelivery deliveries = 2;
}

message WebhookDelivery {
	common.Context ctx = 1;
	string account_id = 2;
	string webhook_id = 3;
	int32 id = 4;
	string url = 5;
	// string method = 6; no need this field since the method is alway POST
	repeated KV resquest_headers = 7;
	string request_payload = 8;
	repeated KV response_headers = 9;
	string response_body = 10;
	string status = 11;
	int32 status_code = 12;
	int64 begin_at = 13;
	int64 end_at = 14;
	repeated string errs = 15;
	int32 request_payload_len = 16; // derived
	int32 response_body_len = 17; // derived
}

message RecentIndexDeliveryRequest {
	common.Context ctx = 1;
	string webhook_id = 2;
	int32 limit = 3;
}

message DeliveryRequest {
	common.Context ctx = 1;
	string webhook_id = 2;
	int32 id = 3;
}

message WebhookTestResult {
	common.Context ctx = 1;
	string account_id = 2;
	string client_id = 3;
	string response_body = 14;
	int32 status = 15;
	string payload = 16;
	int64 latency = 17; // seconds
}

message PresignResult {
	common.Context ctx = 1;
	string account_id = 3;
	string url = 4;
	string id = 6;
	string signed_url = 5;
}

message File {
	common.Context ctx = 1;
	string account_id = 2;
	string name = 3;
	string type = 4;
	int64 size = 5;
	string md5 = 6;
	string description = 10;
	int64 created = 7;
	string url = 8;
	string creator = 9;
	string id = 11;
	string content_disposition = 12; // inline (for printing) || attachment (download)
	int64 last_access_at = 13;
	string bucket = 14;

	// for audio file only
	repeated float audio_waveform = 15;

	// for video and audio
	int64 duration = 16; // sec

	// for image file
	int64 width = 17;
	int64 height = 18;
	string thumbnail_url = 19;
	int64 thumbnail_width = 20;
	int64 thumbnail_height = 21;
	int64 avatar_size = 24;
	int64 avatar_offset = 25;
	string avatar_url = 26;

	int64 ttl = 22; // created + 3 months
	int64 deleted = 23;

	string category = 27; // call_recorded, product_image, ... for reporting

	// metadata
	int64 uploaded = 28;
	string gcs_url = 29;

	string status = 30; // uploading
	string error_code = 31;

	string image_1024 = 32;
	string image_512 = 33;
}

message BotTerminated {
	common.Context ctx = 1;
	string account_id = 2;
	string bot_id = 3;
	string conversation_id = 4;

	bool success = 5;
	string code = 6;
	enum TerminatedCode {
		complete = 0;
		start = 1;
		error = 3;
		force = 4;
		expire = 5;
		self = 6;
	}
}

message BlacklistIP {
	common.Context ctx = 1;
	string account_id = 3;
	string ip = 4;
	int64 created = 5;
	string by = 6;
}

message BannedUser {
	common.Context ctx = 1;
	string account_id = 3;
	string user_id = 4;
	int64 created = 5;
	string by = 6;
}

message LoginSessions {
	common.Context ctx = 1;
	repeated LoginSession sessions = 2;
}

// agent session
message LoginSession {
	common.Context ctx = 1;

	string account_id = 2;
	string agent_id = 3;
	string client_id = 4; // application id
	string id = 5; // crc32 code of refresh_token

	string kind = 6; // should be agent, connector or bot

	// should be the same as access_token, since we dont want to use refresh token
	string refresh_token = 7;
	string access_token = 8;

	repeated string scopes = 9;

	int64 created = 10; // ms
	common.Device device = 11;
	int64 last_used = 12; // ms

	int64 access_token_expired = 15; // should be long
	int64 access_token_generated = 16; // ms

	Location location = 17;

	// use on realtime event only
	string state = 18; // ended, created, updated

	string type = 19; // session, apikey, admin
	string client_version = 20;

	int64 ttls = 21; // seconds, apikey only
	string note = 23;
}

message SearchRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string query = 4;

	int32 limit = 5;
	string agent_id = 8; // search my user of agent
	repeated string labels = 9; // or
	repeated string agents = 10; // or

	bool is_private = 11; // search in private convo only
	bool only_header =  13;
	string conversation_id = 14; // filter by conversation

	string anchor = 15;

	repeated string exclude_conversations = 16;
}

message ExchangeRate {
	string from_currency = 2;
	string to_currency = 3;
	float exchange_rate = 4;
	int64 exchange_time = 5; // nanosec
}

message FbComment {
	string comment = 2; // read only
	string quill_delta = 3;
	string image_url = 4;
}

message FbFanpageSetting {
	common.Context ctx = 1;
	string account_id = 2;
	string fanpage_id = 3;

	FbCommentSetting general_comment_setting = 5;
	FbCommentSetting specific_post_comment_setting = 6;

	int64 updated = 9;
	string platform = 10; // default facebook. Could be instagram
}

message FbFanpageSettings {
	common.Context ctx = 1;
	repeated FbFanpageSetting settings = 2;
}

message FbCommentSetting {
	bool enabled = 1;
	bool auto_like = 2;

	enum HideComment {
		dont_hide = 0;
		all_comments = 1;
		comments_contain_phone_email_or_address = 2;
	}
	int64 auto_hide = 3;

	bool auto_reply = 4;
	repeated FbComment comments = 5;

	bool auto_inbox = 6;
	Message message = 7;

	bool custom_inbox_for_comments_contain_phone_email_or_address = 14;
	Message message_for_comments_contain_phone_email_or_address = 15;

	bool custom_inbox_for_comments_contain_keyword = 16;
	Message message_for_comments_contain_keyword = 17;

	repeated string keywords = 10; // comment
	repeated string post_ids = 11; // post
	repeated string hashtags = 12; // post (contain #)
}

message FacebookPosts {
	common.Context ctx = 1;
	repeated FacebookPost posts = 2;
}

message FacebookPostAttachmentMediaImage {
	string src = 2;
}

message FacebookPostAttachmentMedia {
	FacebookPostAttachmentMediaImage image = 2;
	string source = 3;
}

message FacebookPostAttachment {
	FacebookPostAttachmentMedia media = 2;
	string type = 3;
	string url = 4;
	string description = 5;
	string title = 6;
	FacebookPostAttachemnts subattachments = 7;
}

message FacebookPostAttachemnts {
	repeated FacebookPostAttachment data = 2;
}

message FacebookPostFrom {
	string id = 2;
}

message FbFacebookPosts {
	repeated FacebookPost data = 2;
	FacebookPaging paging = 3;
}

message FacebookPagingCursor {
	string after = 2;
	string before = 3;
}
message FacebookPaging {
	FacebookPagingCursor cursors = 2;
}

message InstagramMedia {
	common.Context ctx = 1;
	string account_id = 2;
	string page_id = 3;
	string id = 4;
	string caption = 5;
	string media_type = 6;
	string media_url = 7;

	string permalink = 10;
	string timestamp = 11;
	string username = 12;
}

message FacebookPost {
	common.Context ctx = 1;
	string account_id = 2;
	string page_id = 3;
	string id = 4;
	FacebookPostFrom from = 5;
	string message = 6;
	string created_time = 7;

	bool is_hidden = 8;
	bool is_published = 9;
	string permalink_url = 10;
	string status_type = 11;
	string full_picture = 12;
	string story = 13;
	FacebookPostAttachemnts attachments = 14;
	string updated_time = 15;
}

message UserOrderConfirmation {
	common.Context ctx = 1;
	string account_id = 2;

	string user_id = 4;
	Order order = 5;
	string status = 6; // confirmed || cancelled

	string conversation_id = 7;
}

message Urls {
	repeated string urls = 2;
}

message LangMessage {
	common.Context ctx = 1;
	string account_id = 2;
	string locale = 3;
	string key = 4;
	string message = 5;
	string last_message = 6;
	string author = 7;
	int64 updated = 8;
	string public_state = 9; // public, private, draft
	bool from_default = 10;
	string category = 11;
}

message Lang {
	common.Context ctx = 1;
	string account_id = 2;
	string locale = 3; // vi_VN
	repeated LangMessage messages = 4;
	int64 last_modified = 5; // ms
}

message Locale {
	common.Context ctx = 1;
	string account_id = 2;
	string locale = 4;
	string key = 5;
	string message = 6;
	string description = 7;
}

message AccountImage {
	account.Account img = 2;
	account.Agent owner = 3;
	string header_version = 4;
}

message UserViews {
	common.Context ctx = 1;
	string account_id = 2;
	repeated UserView views = 4;
}

message UserView {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3;
	UserViewCondition condition = 4;

	string created_by = 5;
	int64 created = 6;
	string updated_by = 7;
	int64 updated = 8;

	bool is_public = 9;
	string name = 10;

	int64 total = 11;

	int32 offset = 20;
	int32 limit = 21;
	string order_by = 22; // attr.username asc
	string anchor = 23;

	bool is_system = 25;

	repeated string display_fields = 26;
	repeated string viewers = 27;
}

message CountTouchpointResponse {
	common.Context ctx = 1;
	string account_id = 2;

	message TouchpointCount {
		string channel = 2;
		string source = 3;
		// string id = 4;
		int64 count = 5;
	}
	repeated TouchpointCount counts = 4;
}

message SuggestLeadFieldRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3;
	UserViewCondition condition = 4;

	string key = 5; // id, keyword, lead_owner attr.fullname
}

message SuggestLeadFieldResponse {
	common.Context ctx = 1;
	string account_id = 2;

	repeated string texts = 10;
	repeated double numbers = 11;
	repeated bool booleans = 12;
	repeated string datetimes = 13;
	repeated int64 points = 14;
}

message UsersRequest {
	common.Context ctx = 1;
	string account_id = 2;

	UserViewCondition condition = 3;
	repeated string ignore_uids = 4;

	repeated string user_ids = 5;
}

message UserQueryBody {
	common.Context ctx = 1;
	string account_id = 2;
	UserViewCondition condition = 3;
	account.Account account = 4;
	map<string, AttributeDefinition> def = 5;
	repeated string ignore_uids = 7;
	repeated UserViewCondition conditions = 8;
}

message UserCountBody {
	common.Context ctx = 1;
	account.Account account = 4;
	map<string, AttributeDefinition> def = 5;
	repeated UserViewCondition conditions = 6;
	repeated string ignore_uids = 7;
}


message UserViewCondition {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3;

	string key = 4; // event, id, keyword, lead_owner attr:fullname segment user_label
	string type = 5;

	TextCondition text = 6;
	BoolCondition boolean = 8;
	FloatCondition number = 9;
	DatetimeCondition datetime = 10;
	EventCondition event = 11;

	repeated UserViewCondition all = 12; // preferred
	repeated UserViewCondition one = 13;

	bool deleted = 14;
}

message ReportResponse {
	common.Context ctx = 1;
	string from = 3;
	string range = 4;
	repeated int64 data = 5;
}

message AvailibilityReportRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string agent_id = 3;
	string from = 5; // try date --rfc-3339=seconds date in rfc 333
	// seconds standard. E.g: 2019-03-07T10:42:01+07:00
	string range = 8;
	enum Range {
		hour = 0;
		day = 1;
		month = 2;
	}
	int32 number_of_points = 13;
}

message FileUrlDownloadRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string url = 3;

	int64 max_size = 4;
	string type_prefix = 5;
	int64 timeout = 6; // ms
	string user_agent = 7; // control client user-agent while download

	string type_hint = 8; // must from trusted source
	string extension = 9; // xlsx, jped

	int64 max_height = 10;
	int64 max_width = 11;

	string category = 12;
}

message PushNoti {
	common.Context ctx = 1;
	string account_id = 3;
	string user_id = 4; // to user
	string device_id = 16; // to device id

	string platform = 5; // mobile, desktop, ios_voip
	string title = 6;
	string body = 7;
	string conversation_id = 8;
	string sender_id = 9; // caller id
	string sender_type = 10;
	string icon_url = 11;
	string last_page_view_url = 12;
	string type = 13; // type of event message_sent ...
	string is_private = 14; // conversation is private

	repeated common.By tos = 15;
	string request_id = 17;
	string caller_number = 19;
	string caller_name = 20;
	string caller_avatar_url = 21;
	int64 created = 22;

	string subtitle = 23;
	string task_id = 24;
}

message InvoiceTemplate {
	string primary_color = 3;
	string secondary_color = 4;

	string font_family = 5;
	string font_size = 6;

	string number_font_family = 7;
	string number_font_size = 8;

	string font_color = 9;

	string terms_and_conditions = 15;
	I18nString i18n_terms_and_conditions = 16;

	string tagline = 17;
	I18nString i18n_tagline= 18;

	string signature = 19;
	I18nString i18n_signature= 20;
}

message ShopSetting {
	common.Context ctx = 1;
	string account_id = 2;

	repeated Currency other_currencies = 6;

	int64 updated = 8;
	string updated_by = 9;

	repeated Address addresses = 18;
	repeated Tax taxes = 11;

	repeated PaymentMethod payment_methods = 12;
	InvoiceTemplate invoice_template = 13;
	string due_date_term = 14;
	repeated ShopeeShop shopee_shops = 15; // read only
	repeated IntegratedShipping shippings = 16;
	repeated ShippingPolicy shipping_policies = 17;

	repeated CancellationCode cancellation_codes = 19;
}

message Addresses {
	common.Context ctx = 1;
	string account_id = 2;
	repeated Address addresses = 3;
}

message Currency {
	common.Context ctx = 1;
	string account_id = 2;
	string name = 3;
	string code = 4;
	string symbol = 5;
	bool auto_sync = 6;

	// one code equal how much base
	// code is VND, base is USD, rate should be 0.000045
	// otherwise, if code is USD, base is VND, rate should be 22000
	float rate = 7;
	bool enabled = 8;
	int64 updated = 9;
	string updated_by = 10;
	repeated CurrencyLogEntry logs = 11;
	string format = 12;
}

message CurrencyLogEntry {
	string id = 3;
	int64 updated = 4;
	float rate = 5;
	string updated_by = 6;
}

message ProductCollections {
	common.Context ctx = 1;
	repeated ProductCollection product_collections = 2;
	string anchor = 3;
	int64 total = 4;
}

message ProductCollection {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3; // use
	string name = 4;
	string visiblity = 5; // public || unpublished
	string code = 6;
	repeated string item_ids = 7;  // product ids

	int64 created = 11;
	string created_by = 12;

	int64 updated = 13;
	string updated_by = 14;
}

message PriceRule {
	string feed_id = 4;
	float price = 5;
	int64 fpv_price = 6;

	string currency = 8;
	int64 from_count = 9;
	int64 to_count = 10;
}

message OrderItem {
	string order_id = 3;
	string id = 4;
	int32 quantity = 10;
	Product product = 11; // copy

	string note = 15;

	//  equal quantity*product.price - discount
	float total = 16;
	int64 fpv_total = 17;

	// discount before tax
	float discount_amount = 20;
	int64 fpv_discount_amount = 21;
	int64 discount_percentage = 23;  // 1234 => 12.34% = 0.1234

	string pos_id = 24;
	Tax tax = 25;

	string discount_type = 26; // percentage || amount

	float total_tax = 30; // computed, override value
	int64 fpv_total_tax = 31; // computed, override value
}

message GHNAddress {
	int64 ProvinceID = 2;
	string ProvinceName = 3;
	int64 DistrictID = 4;
	string DistrictName = 5;
	int64 Code = 6;
	string WardName = 7;
	string WardCode = 8;
}

message Address {
	common.Context ctx = 1;
	string account_id = 2;
	string user_id = 3;
	string id = 4;
	string fullname = 5;
	string email = 6;
	string phone = 7;

	string street = 8;
	string ward = 9;
	string district = 10;
	string region = 11; // city
	string country_code = 12;
	string address = 27;

	string full_address = 13; // read only

	int64 created = 14;
	string created_by = 15;

	int64 updated = 16;
	string updated_by = 17;

	// use input
	string instruction = 18;
	float lng = 19;
	float lat = 20;

	bool is_default = 21;

	// for U.S
	string state = 22;
	string postal_code = 23;
	string city = 24;

	string country = 25;
	string province = 26;

	float score = 29;

	string province_id = 30;
	string district_id = 31;
	string ward_id = 32;
	string street_id = 33;

	GHNAddress ghn = 35;
	Address ghtk = 36;

	string description = 40;
	int64 deleted = 41;
	bool is_warehouse = 42;
	bool is_point_of_sale = 43;

	string from_shipping_provider = 44; // ghtk, ghn, ahamove, viettelpost, shipchung, ninjavan, grabexpress, ahamove, hcmpost, vnpost, jntexpress, supership, heyu
	string from_shipping_shop_id = 45;
	int64 last_integrated = 46;

	string title = 47; // for shop address
	string name = 48; // addrdb
}

message GHNShippingData {
	int32 service_type_id = 2;
	int32 payment_type_id = 3;
	string required_note = 4;
	int64 insurance_value = 5;
	string coupon = 6;
}

message GHNOrder {
	string client_order_code = 2;
	int64 shop_id = 3;
	string order_code = 4;

	int32 service_type_id = 5;
	int32 service_id = 6;
	int32 payment_type_id = 7;
	string required_note = 8;
	repeated int32 pick_shift = 38;

	string to_name = 9;
	string to_phone = 10;
	string to_address = 11;
	string to_ward_code = 12;
	int64 to_district_id = 13;

	int64 pick_station_id = 14;
	string from_name = 33;
	string from_phone = 34;
	string from_address = 35;
	string from_ward_code = 36;
	int64 from_district_id = 37;

	repeated GHNOrderItem items = 15;
	int64 weight = 16;
	int64 length = 17;
	int64 width = 18;
	int64 height = 19;
	int64 cod_amount = 20;
	int64 insurance_value = 21;
	string coupon = 22;

	string return_phone = 23;
	string return_address = 24;
	int64 return_district_id = 25;
	string return_ward_code = 26;

	string content = 27;
	string note = 28;

	int64 total_fee = 29;
	int64 total = 32; // fee
	string expected_delivery_time = 30;
	string status = 31;
	GHNOrderFee fee = 39;
}

message GHNOrderFee {
	int64 insurance = 2;
	int64 main_service = 3;
}

// webhook
message GHNOrder2 {
	string account_id = 10; // only subiz

	int64 ShopID = 2;
	string ClientOrderCode = 3;
	string OrderCode = 4;
	int64 TotalFee = 5;
	string Time = 6;
	string Status = 7;
	string ShipperName = 8;
	string ShipperPhone = 9;
	GHNOrder2Fee Fee = 11;
}

message GHNOrder2Fee {
	int64 Insurance = 2;
	int64 MainService = 3;
}

message GHNOrderItem {
	int64 weight = 2;
	int32 quantity = 3;
	string name = 4;

	string code = 5;
	int64 price = 6;
	int64 length = 7;
	int64 width = 8;
	int64 height = 9;
}

message GHTKShippingData {
	int64 deliver_work_shift = 10;
	int64 pick_work_shift  = 11;
	string label_id = 13;
	string expired = 14;
	int64 value = 15; // gia tri dong bao hiem
	string pick_option = 16;
	string deliver_option = 17;
	string pick_session = 18;
	repeated string tags = 19;
}

message GHTKOrder {
	string account_id = 55; // only subiz

	string id = 2;
	string partner_id = 3; // is id
	string label = 4;
	string label_id = 5; // is label

	int32 status_id = 6;
	int32 status = 7;
	string status_text = 8;
	string created = 9;
	string modified = 10;
	string expired = 11;
	string action_time = 12;
	string reason_code = 13;
	string reason = 14;

	string weight_option = 59;
	float total_weight = 60;
	float weight = 15;
	int32 area = 16; // goi cuoc tinh fee
	int64 fee = 17;
	int64 value = 18; // gia tri dong bao hiem
	int64 pick_money = 19;
	int32 is_freeship = 20;
	int64 insurance = 21;
	int64 insurance_fee = 22;
	int64 ship_money = 23;

	int32 return_part_package = 24;
	string transport = 25;
	string pick_option = 26;
	string deliver_option = 27;
	string pick_session = 28;
	string estimated_pick_time = 29;
	string estimated_deliver_time = 30;
	string deliver_date = 31;
	int64 deliver_work_shift = 32;
	int64 pick_work_shift  = 33;
	int32 storage_day = 34;

	string pick_address_id = 61;
	string pick_name = 35;
	string pick_tel = 36;
	string pick_email = 57;
	string pick_address = 37;
	string pick_province = 38;
	string pick_district = 39;
	string pick_ward = 40;
	string pick_street = 56;
	string pick_date = 41;

	string name = 42;
	string customer_fullname = 43; // is name
	string tel = 44;
	string email = 58;
	string customer_tel = 45; // is tell
	string address = 46;
	string province = 47;
	string district = 48;
	string ward = 49;
	string street = 50;
	string hamlet = 51;

	string note = 52;
	string message = 53;
	repeated int32 tags = 54;
}

message ShippingInfo {
	Address address = 5;
	Address pickup_address = 4;

	int64 deliver_date = 6; // unix ms
	int64 pickup_date = 7; // unix ms 0 => ASAP

	float fee = 10;
	int64 fpv_fee = 11;

	float nominal_fee = 9;
	int64 fpv_nominal_fee = 12;

	string note = 13;
	Tax tax = 16;

	float total_tax = 17; // computed, override value
	int64 fpv_total_tax = 18; // computed, override value

	int64 weight = 19; // gram
	int64 length = 20; // cm
	int64 width = 21; // cm
	int64 height = 22; // cm

	// id of shop from shipping provider
	// since agent can using multiple shipping shop account
	string shipping_shop_id = 24;

	string transport = 25; // road, fly, truck

	string shipping_provider = 26; // direct, private, ghtk
	// string bill_of_landing_no = 27; // ma van don

	bool insurance = 29;
	float insurance_fee = 30;
	int64 fpv_insurance_fee = 31;

	string shipping_code = 32; // van don
	// string tracking_link = 35;

	// how much money should shipper collect from the receiver
	// not always equal to fee
	float pick_amount = 40;
	int64 fpv_pick_amount = 41;

	// could be -1, 1, 2, -3
	// see https://docs.giaohangtietkiem.vn/?shell#tr-ng-th-i-n-h-ng35
	string status_code = 43;
	ShippingData data = 45;
	string integrated_shipping_id = 46;
	int32 index_incre = 48; // only server

	int64 cancelled_at = 49;
	string cancelled_by = 50;

	string fee_payer = 51; // shop, user
	bool no_auto_create_bill_on_delivered = 52;
	string bill_id = 53;

	int64 submitted_at = 54;
	string submitted_by = 55;

	bool pickup_at_shop = 56;
}

message ShippingData {
	GHTKShippingData ghtk = 3;
	GHTKOrder ghtk_order = 5;
	int64 ghtk_order_created = 7;
	int64 ghtk_order_updated = 8;
	GHNShippingData ghn = 4;
	GHNOrder ghn_order = 6;
	int64 ghn_order_created = 9;
	int64 ghn_order_updated = 10;
}

enum ShippingProvider {
	direct = 0;
	private = 1;
	ghtk = 2;
	shipchung = 3;
	ninjavan = 4;
	grabexpress = 5;
	ahamove = 6;
	hcmpost = 7;
	vnpost = 8;
	jntexpress = 9;
	supership = 10;
	heyu = 11;
	viettelpost = 12;
	ghn = 13;
	none = 20;
}

message ShippingPolicies {
	common.Context ctx = 1;
	string account_id = 2;
	repeated ShippingPolicy shipping_policies = 5;
}

message ShippingPolicy {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3;
	string name = 4;

	repeated string product_ids = 5;
	repeated string product_collections = 6;
	repeated string exclude_product_ids = 7;

	string country_code = 8; // alway vn
	string province = 9;
	repeated string districts = 13;

	bool use_weight = 10;
	int64 weight_gt = 11; // gram
	int64 weight_lt = 12; // gram

	bool use_order_total = 16;
	float order_total_lt = 17;
	int64 fpv_order_total_lt = 18; // (readonly from client)

	float order_total_gt = 19;
	int64 fpv_order_total_gt = 20; // (readonly from client)

	float price = 21; // 0 => freeship
	int64 fpv_price = 22; // (readonly from client)

	bool disabled = 23;

	int64 created = 24;
	int64 updated = 26;
	string created_by = 27;
	string updated_by = 28;
}

message IntegratedShipping {
	common.Context ctx = 1;
	string account_id = 2;

	string id = 18;
	string codename = 3; // ghtk, ghn, ahamove, viettelpost, shipchung, ninjavan, grabexpress, ahamove, hcmpost, vnpost, jntexpress, supership, heyu
	string shipping_shop_id = 4;

	string name = 5;
	string phone = 6;
	string email = 7;
	string password = 8;
	string api_token = 9;

	string access_token = 10;
	string refresh_token = 11;

	int64 first_integrated = 13;
	int64 integrated = 14;
	string integrated_by = 17;

	int64 last_used = 12;
	int64 first_error = 15;
	string connect_status = 16; // connected || disconnected
	string ghn_client_id = 19;
	string ghn_shop_id = 20;
	string ghn_otp = 22;
	Address address = 21;
}

message IntegratedShippings {
	common.Context ctx = 1;
	repeated IntegratedShipping integrated_shippings = 2;
	string anchor = 3;
	int64 total = 4;
}

message PaymentMethod {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3;

	string method = 4; // cash, cod ,credit_card, debit_card, momo, bank_transfer
	string description = 5; //  "Thanh toán tiền mặt khi nhận hàng"

	string type = 6;
	enum State {
		active = 0;
		failed = 1;
	}
	string state = 7; // active, inactive, deleted

	bool is_default = 8;

	string failed_message = 10;
	int64 charged = 11;

	int64 created = 12;
	int64 updated = 13;
	string created_by = 14;
	string updated_by = 15;

	string bank_number = 20;
	string bank_owner = 22;
	string bank_branch = 23;
	string bank_name = 24;
}

message PaymentMethods {
	common.Context ctx = 1;
	string account_id = 2;
	repeated PaymentMethod payment_methods = 3;
}

message OrderMetric {
	string account_id = 2;
	string status = 3; // only list orders
	string payment_status = 4; // only list orders
	string shipping_status = 22; // only list orders
	string payment_method = 5;
	int64 issue_hour = 6;
	string issue_date = 7; // derived
	int64 paid_hour = 8;
	string paid_date = 9; // derived
	int64 fpv_total = 10;
	int64 fpv_payment_made = 11;
	string pos_id = 12;
	string channel = 13;
	string channel_touchpoint = 14;
	string salesperson = 15;
	int64 product_id_bits = 16; // only system
	string product_id_strings = 17; // only system
	repeated string product_ids = 18;
	string product_id = 19; // derived
	int64 created_hour = 20;
	string created_date = 21; // derived
	string cancellation_code = 23;

	int64 returning_count = 69; // user paid more than 1
	int64 paid_count = 66;
	int64 fpv_payment_made_sum = 68; // derived
	int64 order_count = 65;
	int64 fpv_total_sum = 67; // derived
	int64 canceled_count = 70;
	int64 canceled_fpv_total_sum = 71; // derived
	int64 closed_count = 72;
	int64 closed_fpv_total_sum = 73; // derived
	int64 open_count = 74;
	int64 open_fpv_total_sum = 75; // derived
	int64 unconfirmed_count = 76;
	int64 unconfirmed_fpv_total_sum = 77; // derived

	int64 product_category_bits = 80; // only system
	string product_category_strings = 81; // only system
	string category = 82;
}

message OrderMetricsRequest {
	string dim = 2;
	int32 tz = 3;
	string account_id = 10;
	int64 issue_hour_from = 11;
	int64 issue_hour_to = 12;
	int64 paid_hour_from = 13;
	int64 paid_hour_to = 14;
	repeated string channels = 15;
	repeated string not_channels = 16;
	repeated string channel_touchpoints = 17;
	repeated string product_ids = 18; // and
	repeated string salesperson = 19; // and, agent ids
	repeated string pos_ids = 20;
	account.BusinessHours business_hours = 23;
	account.BusinessHours not_business_hours = 24;
	int64 created_hour_from = 25;
	int64 created_hour_to = 26;
}

message DeleteDraftOrdersRequest {
	int64 point_to = 3; // exclude
}

message Orders {
	common.Context ctx = 1;

	repeated OrderMetric metrics = 3;
	repeated Order orders = 4;
	string anchor = 5;
	int64 total = 6;

	int64 fpv_total_value = 7; // sum of all order total (money)
	float total_value = 8;
	int64 num_untouch = 9;
}

message OrdersRequest {
	common.Context ctx = 1;
	string account_id = 2;

	string user_id = 3; // list order by user
	string status = 4; // list order by status

	int64 created_hour_from = 5;
	int64 created_hour_to = 6;
	int64 due_date_hour_from = 20;
	int64 due_date_hour_to = 21;
	int64 issue_hour_from = 22;
	int64 issue_hour_to = 23;

	bool include_deleted = 7;

	int32 limit = 8;
	string anchor = 9;
	int32 offset = 18;
	string dim = 17;
	string order_by = 19;

	repeated string ids = 10;
	repeated int64 modifieds = 11;
	string query = 12;
	bool is_draft = 13;
	string payment_status = 14;
	repeated string pos_ids = 15;
	repeated string salesperson = 16; // agent ids
	repeated string statuses = 24;
	repeated string not_statuses = 25;
	repeated string shipping_statuses = 26;
	repeated string not_shipping_statuses = 27;
	repeated string tags = 33; // and

	string pipeline = 30;
	string pipeline_stage = 31;
	string assigned_agent_id = 32;
}

message CountOrdersRequest {
	common.Context ctx = 1;
	string account_id = 2;
	repeated OrdersRequest queries = 4;
}

message CountOrdersResponse {
	common.Context ctx = 1;
	string account_id = 2;
	repeated int64 counts = 4;
}

message DownloadOrderRequest {
	common.Context ctx = 1;
	string account_id = 2;
	Order order = 3;
	InvoiceTemplate template = 4;
	string locale = 5;
	string content_disposition = 6; // inline (for printing) || attachment (download)
}

message Order {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3;

	string number = 4;

	ShippingInfo shipping = 5;
	PaymentMethod payment_method = 6;

	string note = 7; // public note
	int64 issue_date = 62;
	int64 due_date = 8;
	string due_date_term = 9; // net30 net7

	// new; closed; canceled
	//  (see OrderStatusCode)
	string status = 10;
	int64 closed = 14; // close or canceled time

	string shipping_status = 73;

	// unpaid, paid, // computed using total and payment_made
	string payment_status = 11;

	int64 created = 12;
	string created_by = 13;

	int64 updated = 18;
	string updated_by = 19;

	repeated OrderItem items = 20;

	float subtotal = 21; // computed, override value
	int64 fpv_subtotal = 22; // computed, override value

	float total = 25; // computed, override value
	int64 fpv_total = 26; // computed, override value

	float payment_made = 30; // computed, override value
	int64 fpv_payment_made = 31; // computed, override value

	string cancellation_note = 34;
	string cancellation_code = 35; // typing_error, user_rejected
	int64 cancelled_at = 60;
	string cancelled_by = 61;

	string currency = 36; // empty => base currency

	float deposit = 37;
	int64 fpv_deposit = 38;

	// discount: discount after tax
	// to discount before tax, use discount in item
	float discount_amount = 40;
	int64 fpv_discount_amount = 41;
	int64 discount_percentage = 43; // 1234 => 12.34% = 0.1234
	string discount_type = 51; // amount || percentage

	string pos_id = 44;

	string channel = 45; // messenger, zalo
	string channel_touchpoint = 46; // page id

	repeated string related_conversations = 47;

	string salesperson = 48;
	User user = 50;

	string adjustment_description = 54;
	float adjustment = 55;
	int64 fpv_adjustment = 56;

	map<string, string> fields = 58;

	bool is_draft = 59;

	string term_and_condition = 63;

	float total_tax = 65; // computed, override value
	int64 fpv_total_tax = 66; // computed, override value

	// account currency /order currency  (E.g: order currency: VND, acc currency: USD, => currency_rate = 1/20k = 0.00005)
	float currency_rate = 67;
	int64 paid_at = 68; // complete paid
	string first_paid_order_id = 69;

	string user_confirmation = 70; // confirmed || rejected
	int64 user_confirmed = 84; // ms

	float total_discount = 71;
	int64 fpv_total_discount = 72;

	repeated OrderAgent agents = 75; // read only from client

	string pipeline = 80;
	string pipeline_stage = 81;
	int64 assigned = 82;
	repeated OrderPipelineStage stages = 83;
	repeated Tag tags = 85;
	string private_note = 88;
}

message OrderPipelineStage {
	common.Context ctx = 1;
	string account_id = 2;
	string order_id = 3;
	string pipeline = 4;
	string stage = 5;
	int64 assigned = 6;
	repeated Task tasks = 7;
	int64 duration = 8; // sec // calculated using log

	string agent_id = 9;
	string assigned_by = 10;

	int64 updated = 11;
}

message OrderAgent {
	common.Context ctx = 1;
	string account_id = 2;
	string order_id = 3;
	string id = 4;

	int64 noti_muted = 5;
	int64 seen = 6;
	int64 commented = 7;
	int64 assigned = 8;
	// khi nao do:
	// + duoc assign vao nhung chua xem
}

enum OrderStatusCode {
	open = 0;  // đơn mới

	canceled = 1; // đơn hàng đã chốt thua
	closed = 2; // đơn hàng đã chốt thắng accepted, confirm
	unconfirmed = 3; // unagreement between a company and a customer

	delivery_success = 25;
	delivery_failure = 26;
	delivery_received = 27;
	delivery_shipping = 28;
	buyer_pickup = 29;
	not_required = 30;
}

message Bill {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3;
	string order_id = 4;

	string user_id = 5;
	string by = 6;
	int64 created = 7;

	string method = 8; // manually

	float amount = 12;
	int64 fpv_amount = 13;

	string description = 21;

	string picture_url = 22;
}

message CancellationCodes {
	common.Context ctx = 1;
	string account_id = 2;
	repeated CancellationCode cancellation_codes = 5;
}

message CancellationCode {
	common.Context ctx = 1;
	string account_id = 2;

	// no_cancel = 0; // or empty string
	// price_too_high = 1;
	// customer_rejected = 2;
	// failed_delivery = 3;
	// out_of_stock = 4;
	// customer_wouldnt_response = 5;
	// went_with_another_option = 7;
	// went_with_a_competitor = 8;
	// bad_timming = 9;
	// other = 100;
	string code = 3;
	string label = 4;

	int64 created = 5;
	string created_by = 6;

	int64 updated = 7;
	string updated_by = 8;

	int64 archived = 9;

	int64 last_used = 10;
}

message OrderPipelineUpdated {
	common.Context ctx = 1;
	string account_id = 2;

	string order_id = 5;
	string pipeline_from = 6;
	string pipeline_stage_from = 7;

	string pipeline_to = 8;
	string pipeline_stage_to = 9;
}

message OrderStatusUpdated {
	common.Context ctx = 1;
	string account_id = 2;

	string order_id = 5;
	string status_from = 6;
	string status_to = 7;
}

message OrderHistoryEntry {
	Event event = 2; // 1 core
	Event ref_comment = 3;
	string order_id = 4;
}

message OrderHistoryEntries {
	common.Context ctx = 1;
	repeated OrderHistoryEntry entries = 4;
	int64 total = 2;
	string anchor = 3;
	int64 last_modified = 5;
}

message Product {
	common.Context ctx = 1;
	string account_id = 2;

	string id = 3; // generated
	repeated Product other_variants = 4; // [2] [3]
	string product_group_id = 5; // iphone-6-plus
	string title = 6; // deprecated // should be use for name

	string url = 7; // (shared)

	string handle = 8; // (shared) iphone-6-plus-128G
	string name = 9;
	I18nString i18n_name = 10; // (shared) apple Iphone 6 plus

	string description = 11; // (shared)
	I18nString i18n_description = 12; // (shared) server generated

	I18nString i18n_long_description_quill_delta = 13; // (shared)
	string long_description = 15; // (shared)

	repeated KV props = 14; // future replacement for props

	string mobile_url = 17; // (shared)

	// app_link = 11; // mobile deep link

	// repeated KV metadata = 13;
	// accessory.watch
	string category = 16; // (shared)
	// repeated Product related_products = 21; // releated content ids

	string brand = 18; // (shared) brand name: apple, luis vuiton

	repeated ProductOption options = 19; // (shared)

	int64 created = 20;
	int64 updated = 21;
	string created_by = 22;
	string updated_by = 23;

	// google: Manufacturer part number (MPN) is a series of numbers and letters that the manufacturer assigned to this product, in 70 characters or less.
	string mpn = 26; // (shared)

	string image = 30;
	repeated string images = 31; // (shared)
	repeated string additional_images = 32; // (shared)

	repeated string videos = 33; // (shared)
	repeated string additional_videos = 34; // (shared)

	string note = 35; // (shared)

	// shipping
	bool requires_shipping = 36;

	int64 days_to_ship = 37;
	float dimension_width = 38;
	float dimension_height = 39;
	float dimension_length = 40;

	float weight = 41;
	string weight_unit = 42; // g, kg
	float grams = 43;
	bool allow_preorder = 44;

	string condition = 47; // (shared) new, refurbished, used
	string visibility = 48; // (shared) published, staging, hidden, deleted

	string sku = 49;
	string barcode = 50;

	float price = 51;
	int64 fpv_price = 52; // (readonly from client)

	repeated PriceRule price_rules = 54; // (shared)
	int64 stock = 60; //

	string source_id = 61;

	bool has_inventory = 62; // share

	Tax tax = 64; // (shared)

	string currency = 65;
	repeated MessageButton buttons = 66; // for message attachment

	int64 view_duration_sec = 67; // for event content_view only
	int64 num_variants = 69; // computed, readonly
}

message ProductOption {
	string key = 3;
	string name = 4;
	repeated string values = 5;
	bool is_mandatory = 6;
}

message Products {
	common.Context ctx = 1;
	repeated Product products = 2;
	string anchor = 3;
	int64 total = 4;
}

message GoogleSheetProductFeed {
	string url = 2;
}

message WebsiteProductFeed {
	string format = 2; // jsonld, rdfa, microdata
	string website_url = 3;
}

message ShopeeProductFeed {
	string access_token = 4;
}

message ProductFeeds {
	common.Context ctx = 1;
	string account_id = 2;
	repeated ProductFeed product_feeds = 4;
}

message ProductFeed {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3;
	string type = 4; // google sheet, shopee, website json ld

	// google sheet
	ShopeeProductFeed shopee = 5;
	WebsiteProductFeed website = 6;
	GoogleSheetProductFeed google_sheet = 7;

	int64 created = 20;
	string created_by = 21;

	int64 updated = 22;
	string updated_by = 23;

	int64 last_fetched = 24;
	int64 last_fetch_duration = 25;
	string last_fetch_error = 26;
	string last_fetch_status = 27; // success, failed

	int64 last_sucess_fetched = 30;

	int64 disabled = 31;
}

message ProductsRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string query = 3;
	int32 limit = 4; // 200
	string anchor = 5;
	int32 offset = 16;

	int64 price_gte = 6;
	int64 price_lte = 7;

	// [{key: 'colors', value:'red,blue', {key:'size', value:'xxl'}]
	// returns all variants which color is (red OR blue) AND size is xxl
	repeated KV props = 8;

	string availability = 9; // instock, out_of_stock
	string category = 10;

	string visibility = 11; // published or hidden
	repeated string ids = 12;
	repeated int64 last_modifieds = 14; // ms
	repeated string product_collection_ids = 15;

	bool include_deleted = 17;

	string sku = 18;
	string url = 19;

	bool grouped = 20; // group sampe product_group_id into one

	string source_id = 21;
	string variant_of = 22;
}

message KV {
	string key = 2;
	string value = 3;
	int64 key_id = 4;
	int64 value_id = 5;
	repeated KV kvs = 6;
}

message ProductCategories {
	common.Context ctx = 1;
	string account_id = 2;
	repeated string categories = 4;
	repeated int64 product_numbers = 7;
	string anchor = 5;
	int64 total = 6;
}

message Tax {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 4;
	string name = 3;
	I18nString i18n_name = 5;
	int64 percentage = 6; // x10000 e.g: 20% => 2000

	// group, tax, compound
	string type = 7;
	bool is_default = 8;

	int64 created = 12;
	string created_by = 13;

	int64 updated = 14;
	string updated_by = 15;

	bool hidden = 17;
}

message Taxes {
	common.Context ctx = 1;
	string account_id = 2;
	repeated Tax taxes = 3;
}

message Error {
	// string description = 2; // remove, prefer i18n message
	// int32 class = 4; // http-code, should be derived from code
	// string stack = 5; // remove
	string code = 7; // should be general database_error, access_deny
	// string sub_code = 8;
	string number = 12; // unique, or hash of stack 4930543478 for grouping error
	// int64 level = 13; // 0:ERROR, FATAL,	ERROR, WARN,
	map<string, string> fields = 15;
	map<string, string> _hidden = 16;
	I18nString message = 17;
}

message ShopeeShop {
	common.Context ctx = 1;
	string account_id = 2;
	int64 shop_id = 3;

	string shop_logo = 4;
	string description = 5;
	string shop_name = 6;

	string region = 7; // VN
	int64 num_unlisted_products = 8;
	int64 num_normal_products = 9;

	int64 last_success_called = 11;
	int64 last_called = 12;

	int64 authorized = 13;
	string authorized_by = 14;

	string status = 15; // normal, failed, deleted

	int64 last_profile_synced = 17; // last sync profile
}

message AuthorizeShopeeRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string code = 3;
	int64 shop_id = 4;
	string main_account_id = 5;
}

message ShopeeSyncProductRequest {
	common.Context ctx = 1;
	string account_id = 2;
	int64 shop_id = 3;
	int64 offset = 4;
	int64 page_size = 5;
	string status = 6;

	string mode = 8; // override, append only
}

message ShopeeSyncProductResponse {
	common.Context ctx = 1;
	string account_id = 2;
	int64 shop_id = 3;
	string error_code = 4;
	bool has_next_page = 6;
	int64 next_offset = 7;
	int64 total = 8;
	int64 num_success = 9;
}

message AddressAutocompleteRequest {
	common.Context ctx = 1;
	string account_id = 2;

	string keyword = 3;
	string language = 4;
	repeated string countries = 5;
}

message AddressAutocompleteResponses {
	common.Context ctx = 1;
	string account_id = 2;
	repeated AddressAutocompleteResponse responses = 4;
}

message AddressAutocompleteResponse {
	common.Context ctx = 1;
	string account_id = 2;

	string description = 4;
	string place_id = 5;
	string reference = 6;
	repeated SubstringIndex matched_substrings = 7;
}

message SubstringIndex {
	int32 offset = 3;
	int32 length = 4;
}

message RateLimitSyncRequest {
	common.Context ctx = 1;
	string account_id = 2;
	repeated RateLimitEntity new_entities = 4;
}

message RateLimitSyncResponse {
	common.Context ctx = 1;
	string account_id = 2;
	repeated RateLimitEntity entities = 4;
}

message RateLimitEntity {
	string configkey = 2;
	int64 window_sec = 3;
	int64 capacity = 5;
	repeated RateLimitWindow windows = 6;
}

message RateLimitWindow {
	string key = 3;
	int64 timestamp = 4;
	int64 usage = 5;
}

message PipelineStage {
	string pipeline = 20;
	string id = 3; // gen by client
	int64 created = 5;
	string created_by = 6;
	string name = 7;
	string description = 8;
	bool is_closed = 9; // order auto confirmed when move to this stage
	int64 probability = 10; // * 100 100 => won 0 => lost

	int64 rotten_days = 11;
	string automation_id = 13; // bot_id
	int64 updated = 14;
	string updated_by = 15;

	// auto-assign to agent
	repeated PipelineRule routes = 17;
	repeated Task tasks = 18;

	int64 auto_confirm_order = 19; // temporary
}

message PipelineRule {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3;

	int32 priority = 4;

	enum AssignType {
		all_agents = 0; // round robin all agent in account
		agentgroup = 2; // round robin all agnet in group
		agents = 3; // round robin list of agent
	}
	string assign_type = 5;
	repeated string assign_tos = 6;

	bool enabled = 8;

	int64 updated = 9;
	string updated_by = 10;

	// and
	repeated BotCondition conditions = 11;
}

message Pipelines {
	common.Context ctx = 1;
	string account_id = 2;
	repeated Pipeline pipelines = 3;
	string anchor = 4;
	int64 total = 5;
}

message Pipeline {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3;

	string name = 4;
	repeated PipelineStage stages = 5;

	int64 created = 6;
	string created_by = 7;

	int64 updated = 8;
	string updated_by = 9;
	int64 preselected = 10;
}

message TasksRequest {
	common.Context ctx = 1;
	string account_id = 2;

	repeated string associated_tickets = 4;
	repeated string associated_users = 5;
	repeated string associated_orders = 7;
	repeated string associated_conversations = 9;

	int64 created_hour_from = 10;
	int64 created_hour_to = 11;
	int64 due_date_hour_from = 12;
	int64 due_date_hour_to = 13;

	string assignee = 14;
	int64 priority = 15;
	string status = 16;

	int32 limit = 20;
	string anchor = 21;
	int32 offset = 22;
	string order_by = 30;

	repeated string ids = 23;
	repeated int64 last_modifieds = 24; // ms

	string supervisor = 25; // task.supervisor = supervisor && task.assignee != supervisor
	repeated string assignees = 26;
	string is_pinned = 28; // yes/no
	string watcher = 29;

	bool shorten = 31; // only return pinned, watchers, title, assignee, supervisor, actived, duedate and title
}

message Tasks {
	common.Context ctx = 1;
	string account_id = 2;
	repeated Task tasks = 3;
	string anchor = 4;
	int64 total = 5;
}

message ImportLeadRequest {
	common.Context ctx = 1;
	string account_id = 2;
	repeated User users = 4;
	string primary_attribute_key = 5; // remove
	string on_duplicate = 6; //  empty == error, override, keep_both, skip
	string add_to_segment = 7;
}

message ImportLeadResponse {
	common.Context ctx = 1;
	string account_id = 2;
	int64 num_success = 3;
	repeated int64 error_indices = 5;
	repeated string error_codes = 6;
}

message ImportProductRequest {
	common.Context ctx = 1;
	repeated Product products = 2;
	bool dry_run = 5; // true to preview
}

message ImportProductResponse {
	common.Context ctx = 1;
	string account_id = 2;
	int64 num_success = 3;
	repeated int64 error_indices = 5;
	repeated string error_codes = 6;
	int64 created = 7;
	int64 updated = 8;

	repeated Product products = 9;
}

message Task {
	common.Context ctx = 1;

	string account_id = 2;
	string id = 3;

	string created_by = 5; // agent id or pipeline stage id
	int64 created = 6;

	string created_by_type = 7; // agent, automation, rule
	string created_by_pipeline = 8;
	string created_by_pipeline_stage = 9;
	string created_by_pipeline_automation_action = 10;
	string created_by_rule_id = 60;
	string created_by_bot_id = 61;
	string created_by_action_id = 62;

	string updated_by = 11;
	int64 updated = 12; // info updated

	int64 due_at = 13;
	int64 reminder = 14; // 86400: 1 day before

	string type = 15; // empty=todo, email, call, missed-callq
	int64 priority = 16; // dont use string, so its easier for backend to sort by this field. 0=low, 1=normal, 2=high, 3=urgent

	string assignee = 17; // empty == unassigned

	string title = 18;
	string title_quill_delta = 19;
	string note = 20;
	string note_quill_delta = 21; // for template

	int64 pinned = 22; // always list first - readonly - personal for each agent

	string status = 23; // open - done - deleted

	int64 done_at = 24; // just store closed timestamp, so when needed, we have the data to calculate task duration
	string done_by = 50;

	repeated string associated_tickets = 25;
	repeated string associated_users = 26;
	repeated string associated_orders = 27;
	repeated string associated_conversations = 28;
	string associated_call_campaign = 29; // campaign_id.number

	repeated string watchers = 30; // (from JIRA) agents that follow the task, get notified

	// extra data
	// ...
	Event data_email = 40;

	repeated File files = 41; // read-only

	// A supervisor MUST do something when the task got expired.
	// Most of the time supervisor is the task creator. But when the creator is bot,
	// pipeline or something automated, supervisor should be a human rather
	// than its creator.
	string supervisor = 42;

	Event latest_comment = 43; // read-only
	int64 actived = 46;

	repeated TaskMember members = 47; // read only

	// last_modifed the last updated time of the record
	// changing members, watcher dont update task.updated but
	// does change task.last_modified
	int64 last_modified = 48;
	string number = 49;
}

message TaskMember {
	string agent_id = 3;
	int64 last_seen = 5;
	int64 pinned = 6;
	int64 muted = 7;
	int64 last_commented = 8;
	int64 reminder_closed = 9;
}

message TaskHistoryEntry {
	Event event = 2; // 1 core
	Event ref_comment = 3;
	string task_id = 4;
}

message TaskHistoryEntries {
	common.Context ctx = 1;
	repeated TaskHistoryEntry entries = 4;
	int64 total = 2;
	string anchor = 3;
	int64 last_modified = 5;
}

message AgentGroups {
	common.Context ctx = 1;
	repeated AgentGroup Groups = 2;
}

message AgentGroup {
	common.Context ctx = 1;
	string id = 2;
	string account_id = 3;
	string name = 4;

	int64 created = 6;
	int64 modified = 8;

	string created_by = 9;
	repeated string agent_ids = 10;

	bool ring_most_recent_agent_first = 12;

	string ring_order = 14; // ordered, randomly, most_idle_first, round-robin

	repeated string receive_incomming_calls = 15; // agent that must handle incomming calls

	int64 updated = 16;
	string updated_by = 17;

	string logo_url = 18;

	repeated string supervisors = 19; // manager
	int64 agent_ring_timeout_sec = 20; // -1 forever, 0 auto, ... n sec
}

message DocIndexRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string collection = 3;
	string document_id = 4;
	string part = 5;
	string content = 6;

	bool is_name = 7; // hint for better name search
	bool is_id = 10; // hint for not indexing using tokenize
	int64 day = 8; // unix day for doc, used to order more recent document
	bool is_phone = 11;
	bool is_email = 12;
	repeated string owners = 9;
	string primary_document_id=13;
	int64 sec = 14; // unix sec for doc, used to order more recent document
}

message DocSearchRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string collection = 3;

	string query = 5;
	string anchor = 6;

	int64 limit = 7;
	repeated string include_parts = 8; // only include those parts
	bool doc_distinct = 9; // distinct document
	repeated string include_owners = 10;
	int64 day_anchor=11;
}

message DocHit {
	string document_id = 3;
	string part = 4;
	string avatar_url = 5;
	string name = 6;

	int64 updated = 7;
	string description = 8;

	string integration_id = 9; // for convo

	string phone = 10;
	string email = 11;
	string user_id = 12; // for convo
	string origin = 13;
	User user = 14;        //for primary user
	DocHit secondary_doc = 15;

	string user_type = 16;
}

message DocSearchResponse {
	common.Context ctx = 1;

	repeated DocHit hits = 4;
	string anchor = 5;
}

message AccessToken {
	string access_token = 2;
	string token_type = 3;
	int32 expires_in = 5;
	string refresh_token = 6;
}

message ZaloCodeChallenge {
	common.Context ctx = 1;
	string state = 5; // verifier, zalo sucks
	string code_challenge = 6;
}

message ConversationModal {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3;

	string key = 4;
	string description = 5;
	string url = 6;
	string size = 7; // sm, md, lg
	string secret = 10;

	int64 created = 11;
	string created_by = 12;
	int64 updated = 13;
	string updated_by = 14;
	int64 disabled = 15;

	int64 last_used = 16;
	string last_used_by = 17;

	string preview_picture_url = 18;
	int64 preview_picture_at = 19;
}

message ConversationModals {
	common.Context ctx = 1;
	string account_id = 2;
	repeated ConversationModal conversation_modals = 3;
}

message ConversationModalPickRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string conversation_id = 3;
	string agent_id = 4;
	string conversation_modal_id = 6;
	string text = 7;
	string user_id = 8;
	Touchpoint touchpoint = 9;
}

message ConversationModalPicked {
	common.Context ctx = 1;
	string account_id = 2;
	string conversation_modal_id = 3;
	string url = 5;
	string size = 6;
	string view_id = 7;
}

message FacebookPageRegister {
	common.Context ctx = 1;
	string account_id = 2;
	string access_token = 6;
	repeated string page_ids = 7;
	bool is_instagram = 12;
	repeated string receive_comments = 13; // page id that receive comment
}

message CallDriverRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string action = 3; // dial, hangup, wait-for-key, call, call-status, register-device, unregister-device
	string conversation_id = 4;
	string request_id = 5;
	repeated string devices = 6;
	repeated string agents = 24;

	// repeated int64 delay_secs = 7;
	repeated int64 ring_secs = 8;

	int64 timeout_sec = 9;

	bool enable_recording = 10;

	string audio_message = 11; // url
	// string debug_message = 12;
	string missed_message = 13; // url

	// make outgoing call
	string call_device = 15;
	string to_number = 16;
	string from_number = 17;
	string sip_provider = 19;

	PhoneDevice phone_device = 18; // register-device || unregister-device

	string caller_display_name = 20;
	bool is_internal_call = 21;
	string to_sip_provider = 25;

	int64 direct_extension_duration_sec = 22;
	bool is_missed = 23; // tell driver to mark this call as missed (e.g: out of business hour)

	int64 limit_call_time_sec = 26;

	string campaign_id = 27;
	string outbound_call_entry_id = 28;
	string by_agent_id = 29;
}

message CallDriverResponse {
	string request_id = 6;
	// string device = 7; // for dial action
	// string key = 8; // for wait_for_key action

	PhoneDevice phone_device = 12;
	CallInfo call = 11; // for get-call-status
}

message BlockedNumbers {
	common.Context ctx = 1;
	string account_id = 2;
	repeated BlockedNumber blocked_numbers = 3;
}

message BlockedNumber {
	common.Context ctx = 1;
	string account_id = 2;

	// the number that dont want to receive call from blocked number
	string source_number = 3;

	// the blocked number
	string number = 5;

	string by = 6; // agent id that blocked the number

	int64 blocked = 7; // the day that blocked
}

message TextToSpeech {
	string account_id = 4;
	string text = 2;
	repeated TTSVoiceSelection speeches = 3;
}

message TTSVoiceSelection {
	string text = 2; // derived
	string language_code = 3;
	int32 ssml_gender = 4;
	string name = 5;
	File file = 8;
	string file_mp3_url = 6; // derived

	string background_music = 7; // calm, fresh, soothing, optimistic, happy, inspire
}

message BusinessHour {
	optional string weekday = 4; // empty
	// or
	optional int64 start_time = 5;
	optional int64 end_time = 6;
	optional string name = 7;
}

message BusinessHours {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3; // global, xyz

	string timezone = 4;
	repeated BusinessHour week_days = 5;
	repeated BusinessHour extra_hours = 6;

	repeated BusinessHour holidays = 7;
}

message RecentCallRecords {
	common.Context ctx = 1;
	string account_id = 2;
	string agent_id = 3;
	repeated RecentCallRecord records = 4;
}

message RecentCallRecord {
	string avatar_url = 3;
	string name = 4;
	string user_id = 5;
	string to_number = 6;
	string from_number = 7;
	int64 created = 8;
	int64 grouped = 9;
	string conversation_id = 11;
	string direction = 12;
	bool is_missed = 13;
	bool is_internal = 14;
}

message ZaloUserRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string oa_id = 3;
	string user_id = 4; // could be phone

	int64 reason_code = 5;
	string call_type = 6; // default audio
}

message ZnsRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string oaid = 3;

	string phone = 4;
	string template_id = 5;
	string tracking_id = 6;
	map<string, string> template_data = 7;
}

message SendOmniChannelMessageRequest {
	common.Context ctx = 1;
	string account_id = 2;

	// user
	string id = 3;
	string channel = 5;
	string channel_source = 6;
	string profile_id = 7;

	repeated Event messages = 8;
}

message EventType {
	common.Context ctx = 1;
	string account_id = 2;

	string id = 3; // m_error_3242, content_viewed

	// string hashed_id = 4; // read only

	string title = 6;
	string description = 8;
	string category = 9; // error

	int64 first_seen = 11;
	int64 last_seen = 12;

	string first_event_id = 13;
	Event first_event = 14;

	string last_event_id = 15;
	Event last_event = 16;

	string first_user_id = 17;
	User first_user = 18;

	string last_user_id = 19;
	User last_user = 20;

	int64 total_events = 23;
	int64 total_users = 24;

	repeated int64 num_events = 25;
	repeated int64 num_users = 26;

	repeated int64 num_events_last_24h = 27;
	repeated int64 num_events_last_30d = 28;

	string status = 30; // open, acknowledged, resolved, muted
	string status_updated_by = 31;

	int64 archived = 32;

	int64 priority = 33;

	string reporter = 34;
	string assignee = 35;
}

message EventTypes {
	common.Context ctx = 1;
	string account_id = 2;
	EventType event_types = 3;
}

message ListUserRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string segment_id = 3;
	UserViewCondition condition = 4; // attr.username asc
	string order_by = 5;
	int64 offset = 6;
	int64 limit = 10;

	string anchor = 11;
	repeated string fields = 12;

	int64 partition = 13;
	repeated string ignore_ids = 14;

	repeated string segments = 15;
	repeated string exclude_segments = 16;
}

message Segment {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3;
	string name = 4;
	string description = 5;

	UserViewCondition condition = 6;

	string type = 7; // manual vs auto
	int64 fetching_progress = 8; // 0 -> 100%
	int64 last_fetched = 9;
	string fetch_session_id = 10;

	int64 total = 19;
	int64 created = 20;
	string created_by = 21;
	int64 updated = 22;
	string updated_by = 23;
	int64 disabled = 24;

	bool is_system = 27;

	repeated string members = 29; // view only, add own member
	repeated string managers = 30; // edit segment query, remove member

	string source_type = 31; // campaign, popup, bot
	string source_id = 32;
	repeated string display_fields = 33;
	string order_by = 34; // attr.username asc
}

message Segments {
	common.Context ctx = 1;
	string account_id = 2;
	repeated Segment segments = 3;
}

message SegmentUsers {
	common.Context ctx = 1;
	string account_id = 2;
	string segment_id = 4;
	repeated string user_ids = 5;
}

message UserSegment {
	common.Context ctx = 1;
	string account_id = 2;
	string user_id = 3;
	string segment_id = 4;
	int64 created = 5;
	string by = 8; // manually
}

message Campaigns {
	common.Context ctx = 1;
	string account_id = 2;
	repeated Campaign campaigns = 3;
	string anchor = 4;
	int64 total = 5;
}

message UserCampaign {
	common.Context ctx = 1;
	string account_id = 2;
	string user_id = 3;
	string campaign_id = 4;
	int64 created = 5;
	string status = 6;
}

message Campaign {
	common.Context ctx = 1;
	string account_id = 2;

	string id = 3;

	string name = 4;
	string description = 5;
	string objective = 14;

	string type = 6; // telesale, broadcast, triggered, workflow
	int64 created = 7;
	string created_by = 8;

	int64 updated = 9;
	string updated_by = 10;

	int64 progress = 13; // 1025 => 10.25%
	// telesale: unit is number of phone numbers dialed
	// broadcast: unit is number of users tried

	repeated MarketingMessage messages = 15;
	OutboundCallCampaign outbound_call = 16;

	string state = 18; //  pause (default),  active

	bool is_building_audient = 17; // clear data after the campaign is finished or deleted
	// bool is_completed = 18;

	int64 audient_count = 19; // number of user in segments, read-only
	int64 impression_count = 20;
	int64 goal_reached_count = 21;

	int64 budget_fpv = 22; // set by campaign
	int64 budget_spent_fpv = 23;

	string locale = 28; // can be auto
	repeated string locales = 29;

	bool timming_condition_enabled = 30;
	TimmingCondition timming_condition = 31;

	int64 scheduled_start_time = 32;

	repeated string trigger_event_types = 33; // scheduled, user_info_updated
	UserViewCondition trigger_condition = 37;

	Frequently workflow_frequency = 34;
	WorkflowGoal workflow_goal = 35;
	WorkflowExitCondition workflow_exit_when = 36;

	WorkflowAction workflow_root = 38;

	UsersRequest audient_request = 39; // write only when create

	int64 broadcast_first_sent_at = 40;
	int64 broadcast_recent_sent_at = 41;
	int64 broadcast_finished_at = 42;

	string purpose = 43; // CUSTOMER_SUPPORT, TRANSACTION, PROMOTION

	int64 broadcast_delivered_count = 44;
	int64 broadcast_read_count = 45;

	int64 workflow_processing_count = 47;
	int64 workflow_processed_count = 48;

	string credit_id = 49;
	int64 state_updated_at =50; //only save time user (agent,accout) updated

}

message WorkflowExitCondition {
	// or condition
	bool goal_reached = 2;
	bool trigger_unmatched = 3;
}

message OutboundCallCampaign {
	repeated string managers = 3;
	repeated string members = 4;
	// string outcomes = 5;
	string outbound_numbers = 6;
	bool rotate_outbound_numbers = 7;

	Form form = 8;
	bool enable_recording = 9;

	int32 max_retries = 10;
	int32 max_call_duration_sec = 11; // default 1800
	int64 sec_between_retries = 12; // 300 = 5 min

	enum AssignStrategy {
		unassigned = 0 ; // empty
		roundrobin = 1;
		weight = 6;
		least_unfinished_agent = 7;
		least_called_agent = 8;
	}
	string assign_strategy = 13;
	map<string, int64> agent_weight = 14; // ag245 -> 2445 => 24.45%
}

message ListOutboundCallRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string campaign_id = 3;

	string anchor = 4;
	int64 limit = 5; // could be negative

	string state = 6;
	string status = 7;
	string assignee = 8; // empty = all , unassigned, agid
	string query = 9;
	string order_by = 10; // created

	repeated string user_ids = 12;
	repeated int64 last_modifieds = 13;

	UserViewCondition condition = 14;

	//repeated string numbers = 15;
	repeated string exclude_user_ids = 16;

	string strategy = 17; // unassigned
	map<string, int64> agent_weight = 18; // ag245 -> 2445 => 24.45%
}

message OutboundCallEntries {
	common.Context ctx = 1;
	string account_id = 2;
	string campaign_id = 3;

	repeated OutboundCallEntry entries = 4;

	int64 total = 5; // total matched the query

	// quick statistic
	int64 num_open_assigned = 20;
	int64 num_assigned = 21;
	int64 num_goal_reached = 22;
	int64 total_open = 24;
	int64 total_all = 25;
}

message ImportOutboundCallEntryRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string campaign_id = 3;

	repeated OutboundCallEntry entries = 5;
	string on_duplicate = 6; //  override, skip
	string assign_strategy = 13;  // weight
	map<string, int64> agent_weight = 14; // agduc -> 5 => 24.45%
}

message OutboundCallEntry {
	common.Context ctx = 1;
	string account_id = 2;
	string campaign_id = 3;

	string number = 4; // , ; or / delimeter
	string from_number = 5;
	string user_id = 6; // from segment // primary
	string status = 7; // (last call status, read only) empty, calling, answered, noanswer (busy), failed (wrong_number or congestion), cancel, deleted
	bool goal_reached = 8;
	string assignee = 9;
	string created_by = 10;

	int64 call_sec = 11; // sec
	string caller = 12;
	int64 called = 13;
	string call_id = 14; // conversation id
	string next_call_id = 16; // realtime only
	int64 created = 18;
	int64 scheduled_in = 19;
	FormSubmission submission = 23; // dont return to client
	int64 updated = 25;
	int64 num_attempts = 26;
	bool do_not_call = 27;

	string note = 28; // max 1024
	int64 reattempt_at = 29;

	int64 total_call_sec = 30;
	string state = 31; // open, called, goal
	string state_updated_by = 32;
}

message WorkflowGoal {
	int64 disabled = 3;
	string ui_type = 4; 	// 1 week of [receiving,opening,clicking] any delivery

	string event_type = 5; // "scheduled", "user_info_updated"
	UserViewCondition condition = 6;

	// timming condition
	int64 time_limit = 8;
	string time_limit_unit = 9;
}

message MarketingMessage {
	string id = 10;

	bool timming_condition_enabled = 3;
	TimmingCondition timming_condition = 4;

	bool channel_condition_enabled = 5;
	ChannelCondition channel_condition = 6;
	int64 sent_message_budget = 7; // set by agent
	int64 sent_message_budget_spent = 9; // set by campaign
	repeated Message messages = 8;

	string channel = 11;
}

message CampaignSendLogEntry {
	common.Context ctx = 1;
	string account_id = 2;
	string campaign_id = 3;

	string message_id = 5; // key marketing message id
	string user_id = 7;
	string event_id = 8;
	string channel = 10; // latest tried channel
	string profile_id = 11; // latest tried profile id

	string send_error = 12;
	int64 created = 13; // ms

	string status = 14; // sending, sent, failed, success
	Event payload = 15;
	int64 clicked_at = 17;
	int64 goal_reached_at = 20;
	int64 seen_at = 22;
	int64 received_at = 24;
	int64 delivered_at = 26;

	int64 sent_count = 28;

	int64 last_tried = 29;

	bool no_retry = 31; // read only
	repeated string tried_profiles = 32; // server only
	string duplicate_of = 33;

	int64 unsubscribed_at = 34;
	int64 spamreported_at = 35;
}

message CampaignSendLog {
	common.Context ctx = 1;
	string account_id = 2;
	string campaign_id = 3;
	repeated CampaignSendLogEntry entries = 4;
	string anchor = 5;
	int64 total = 6;
}

message CampaignSendLogRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string campaign_id = 3;
	string anchor = 4;
	int32 limit = 5;

	string status = 6;
	string user_id = 7;
}

message BroadcastCampaignMetrics {
	message BroadcastCampaignMetric {
		string message_id = 4; // for detailed metric
		string channel = 5;
		int64 clicked_count = 6;
		int64 sent_count = 7;
		int64 delivered_count = 8;
		int64 received_count = 9;
		int64 seen_count = 10;
		int64 error_count = 11;
		int64 unsubscribed_count = 12;

		int64 duplicate_sent_count = 13;
		int64 duplicate_clicked_count = 14;
		int64 duplicate_delivered_count = 15;
		int64 duplicate_received_count = 16;
		int64 duplicate_seen_count = 17;
		int64 duplicate_error_count = 18;

		int64 spamreport_count = 19;
	}

	common.Context ctx = 1;
	string account_id = 2;
	string campaign_id = 3;
	repeated BroadcastCampaignMetric metrics = 4;
	repeated BroadcastCampaignMetric per_message_metrics = 5;
}

message EmailSenderVerificationResult {
	bool mx_record = 3;
	string mx_record_value = 4;
	bool txt_record = 5;
	string txt_record_value = 6;
	bool txt_acc_record = 7;
	string txt_acc_record_value = 8;
	bool txt_domain_key_record = 9;
	string txt_domain_key_record_value = 10;
	bool verified = 12;
}

message BusinessEmailAddress {
	common.Context ctx = 1;
	string account_id = 2;
	string address = 3;
	string fullname = 4;
	string verification_status = 5;
	int64 last_inbound = 6;
	int64 last_outbound = 7;

	repeated string agents = 8; // all => all

	string created_by = 9;
	int64 created = 10;

	string updated_by = 11;
	int64 updated = 12;

	string email_signature = 13;

	int64 inbound_disabled = 14;
	int64 outbound_disabled = 15;
}

message BusinessEmailAddresses {
	common.Context ctx = 1;
	string account_id = 2;
	repeated BusinessEmailAddress business_email_addresses = 3;
}

message FormReportRequest {}
message FormReportResponse {}
message ListFormSubmissionRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string agent_id = 3;
	int32 limit = 4;
	string anchor = 5;
	string category = 6; // comma separated
}

message OutboundCallReportRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string campaign_id = 3;

	string agent_id = 4;
	string goal_reached = 6; // empty, yes, no

	int64 from_hour = 10;
	int64 to_hour = 11;

	string range = 12; // hour, day
	string timezone = 13; // +07:00
}

message ImportOutboundCallEntryResponse {
	common.Context ctx = 1;
	string account_id = 2;
	string campaign_id = 3;
	int64 num_success = 4;
	repeated int64 error_indices = 5;
	repeated string error_codes = 6;
}

message OutboundCallReportResponse {
	common.Context ctx = 1;
	string account_id = 2;

	int64 total_call = 5;
	int64 total_called = 6;

	int64 num_goal_reached = 7;
	int64 percent_goal_reached = 8; // 50%(5000), 24,34% (2434)

	int64 num_anser_calls = 9;
	int64 num_noanswer_calls = 10;
	int64 num_do_not_calls = 11;

	int64 total_call_sec = 12;
	int64 avg_call_sec = 13; // 20.7sec => 2070

	repeated int64 num_call_datapoints = 14;
	repeated int64 num_goal_reach_call_datapoints = 15;

	repeated OutboundCallAgentReport agents = 16;
	repeated OutboundCallSurveyReport surveys = 17;
}

message OutboundCallSurveyReport {
	string question_key = 3;

	repeated int64 datapoints = 4;
	repeated string labels = 5;
}

message OutboundCallAgentReport {
	string agent_id = 3;
	int64 num_calls = 5;
	int64 num_goal_reacheds = 6;
	int64 total_call_sec = 7;
	int64 avg_call_sec = 8;

	int64 num_answer_calls = 9;
	int64 num_noanswer_calls = 10;
	int64 num_do_not_calls = 11;

	int64 num_today_calls = 12;
	int64 num_today_goal_reacheds = 13;
}

message HourEventMeta {
	int64 count = 5;
}

message LinkData {
	common.Context ctx = 1;
	string account_id = 2;
	string campaign_id = 3;
	string user_id = 4;
	string conversation_id = 5;
	string message_id = 6;
	string service = 10; // email
	string original_url = 11;
	string payload = 12;

	int64 created = 13;
	string type = 14; // click, tracking
	common.Device device = 15;
}

enum E {
	Sub = 0;
	database_error = 10;
	http_call_error  = 11;
	invalid_credential = 12;

	invalid_refresh_token = 17;
	invalid_token = 20;
	invalid_message_size = 21;
	invalid_payload_size = 22;

	access_deny = 23;
	invalid_json = 24;
	invalid_attribute_value = 35;
	invalid_attribute_key = 36;
	invalid_attribute_name = 37;
	invalid_attribute_type = 38;

	too_many_attribute = 39;
	invalid_note_target_id = 42;

	invalid_content_type = 44;
	parse_query_failed = 45;
	domain_is_not_whitelisted = 46;
	invalid_domain = 47;
	ip_is_blocked = 48;

	invalid_transaction_id = 49;
	invalid_amount = 50;
	inactive_promotion_referral_program = 51;

	invalid_stripe_info = 54;
	invalid_plan = 56;

	invalid_promotion = 58;

	invalid_email = 59;
	email_taken = 60;
	invalid_date_format = 61;
	prohibited_action = 62;

	invalid_working_day = 63;
	invalid_holiday = 64;

	// password_too_weak = 65;
	invalid_fullname = 66;
	invalid_password = 67;
	invalid_token_type = 68;
	invalid_invoice_template = 69;
	invoice_template_compile_failed = 70;

	invalid_stripe_customer_id = 73;
	invalid_stripe_token = 74;
	stripe_call_failed = 75;
	invalid_invoice_id = 77;
	invalid_invoice_duedate = 80;
	invalid_country = 82;
	invalid_referrer_code = 83;
	invalid_oauth_scope = 84;

	invalid_label_name = 86;
	invalid_label_color = 87;
	invalid_label_description = 88;

	invalid_user_view_name = 89;

	limit_reached = 90;
	invalid_time_range = 91;

	endchat_bot_setting_after_any_message_too_low = 94;
	endchat_bot_setting_after_any_message_too_high = 95;
	template_message_not_is_creator = 97;

	product_failed = 98;

	order_not_found = 100;
	invalid_base_currency = 101;
	invalid_currency = 102;

	invalid_url = 103;
	invalid_poll_token = 104;
	dead_poll_connection = 105;
	connection_not_found = 106;

	too_many_pos = 108;
	too_many_tax = 110;

	too_many_shipping_address = 111;
	shipping_address_not_found = 112;

	expired_access_token = 114;

	too_many_payment_method = 115;

	invalid_css = 116;
	invalid_report_range = 117;
	invalid_goal_status = 119;

	user_is_banned = 11111;
	user_is_not_in_the_conversation = 120;
	invalid_integration = 121;
	invalid_message_type = 122;
	missing_pong = 123;
	invalid_pong_type = 124;
	invalid_event_type = 125;
	remover_is_not_agent = 127;
	user_is_the_last_one_in_conversation = 128;
	conversation_ended = 129;
	leaver_is_the_last_one_in_conversation = 130;
	invalid_conversation_state = 131;
	caller_is_not_leaver = 132;

	too_many_fields = 134;
	too_many_attachments = 135;
	unknown_message_format = 136;
	invalid_field_size = 137;
	shopee_call_error = 138;
	unauthorized_shopee_shop = 139;
	invalid_ratelimit_config = 140;
	too_many_requests = 141;
	order_readonly = 142;

	shipping_policy_not_found = 143;
	too_many_shipping_policy = 144;

	pipeline_stage_not_found = 145;
	invalid_order_status = 146;

	invalid_product_category = 148;
	invalid_product_visibility = 149;
	file_system_error = 152;
	zalo_call_error = 154;

	invalid_integration_state = 155;

	message_too_large = 156;
	invalid_message_id = 157;
	attachment_too_large = 158;
	field_too_long = 159;

	request_timeout = 160;

	invalid_conversation_modal_secret = 170;
	conversation_modal_not_found = 171;
	invalid_conversation_modal_url = 172;
	invalid_conversation_modal_key = 173;
	sendgrid_error = 176;
	too_many_events = 177;
	too_many_number = 178;
	too_many_phone_device = 179;
	sip_server_error = 181;

	invalid_phone_device_state = 182;

	invalid_call_state = 190;
	number_is_blocked = 191;
	number_is_not_active = 192;

	number_is_registered = 193;
	number_is_not_bounded = 194;

	too_many_greeting_audio = 195;
	file_too_large = 196;
	unsupported_file_type = 197;

	invalid_sip_provider = 198; // fpt, itel

	too_many_agent = 199;
	duplicated_extension = 200;

	apple_login_error = 201;
	wrong_shard = 202;

	out_of_port = 204;

	call_not_found = 205;
	bad_webrtc_track = 206;
	invalid_webrtc_negotiation = 207;
	bad_webrtc_connection = 208;
	user_duplicated = 209;

	invalid_task_title = 210;
	invalid_task_note = 211;
	invalid_task_status = 213;
	invalid_task_assignee = 214;
	invalid_task_supervisor = 215;
	invalid_task_watchers = 216;
	invalid_segment_name =  240;
	invalid_segment_description =  241;
	cannot_edit_system_segment = 244;

	// SERVER ERROR
	subiz_call_failed = 5025;
	invalid_google_auth_response = 5071;
	pdf_generate_failed = 5072;
}

message WorkflowAction {
	string account_id = 2;
	string workflow_id = 3;
	string id = 4;
	string name = 5;
	string next_action_id = 6;
	string type = 9; // send_email, tag, convert_to_ticket, condition,  send_webhook, create_task, update_order_state, send_message

	ActionJump jump = 15;
	ActionSendHttp send_http = 17;
	ActionAskQuestion ask_question = 18;
	AssignRequest assign = 19;

	ActionUpdateConversation update_conversation = 21;
	bytes internal_state = 30;
	ActionUpdateUser update_user = 31;
	ActionUpdateUserLabels update_user_labels = 32;
	ActionConfirmOrder confirm_order = 34;
	ActionCreateTask create_task = 35;
	ActionSendChatTranscript send_chat_transcript = 36;
	ActionUpdateUserSegments update_user_segments = 37;

	ActionWait wait = 38;

	ActionBranching branching = 39;
	ActionPercentageSplit percentage_split = 40;
}

message ActionPercentageSplit {
	repeated string paths = 3;
	repeated int64 percentages = 4; // 1234 -> 12.34%
}

message ActionWait {
	repeated CampaignBranch branches = 4;
	string timeout_action_id = 5;
	int64 timeout = 6;
	string timeout_unit = 8; // second, minute, hour, week
}

message CampaignBranch {
	string ui_type = 2;
	repeated string event_types = 3; // "scheduled", "user_info_updated"
	UserViewCondition condition = 4;
	string node_id = 5;
}

message ActionBranching {
	repeated CampaignBranch branches = 4;
	string else_node_id = 5;
}

message BouncedEmail {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3; // email address
	int64 created = 4;
	string created_by = 5; // system
	string bounce_type = 6; // soft, hard
	int64 last_bounced = 7;
}

message BlockedEmail {
	common.Context ctx = 1;
	string account_id = 2;
	Error error = 3;

	string id = 4; // email address
	int64 created = 5;
	string created_by = 6; // system
	string email_type = 7; // domain, address
	int64 last_blocked = 8;
}

message Response {
	common.Context ctx = 1;
	string account_id = 2;
	Error error = 3;

	int64 total = 5;
	string next_anchor = 6;
	string prev_anchor = 7;

	BlockedEmail blocked_email = 10;
	repeated BlockedEmail blocked_emails = 11;

	BouncedEmail bounced_email = 12;
	repeated BouncedEmail bounced_emails = 13;

	ZaloCallConsent zalo_call_consent = 14;
	Credit credit = 15;
	repeated Credit credits = 16;

	account.Account account = 17;
	repeated account.Account accounts = 18;
}

message ZaloCallConsent {
	int64 code = 2;
  I18nString message = 4;
}

message Email {
	common.Context ctx = 1;
	string from = 3;
	//string to = 4;
	string subject = 5;
	string body = 6;
	map<string, string> header = 7;
	repeated EmailAttachment attachments = 8; // s3 links
	repeated string to = 9;
	repeated string cc = 10;
	repeated string bcc = 11;
	string encoding = 12;
}

message EmailAttachment {
	string url = 2;
	string name = 3;
	string mimetype = 4;
}

message WorkflowSession {
	string id = 4;
	repeated string history = 5;
	string current_action_id = 6;
	string hint_next_action_id = 7;

	map<string, string> KV = 8;

	int64 exited = 9;
	int64 started = 10;
	string exit_code = 12;
}

message WorkflowPump {
	string workflow_id = 3;
	string session_id = 4;
}

message SchedulerTask {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 4;
	int64 sec = 5;
	bytes payload = 6;
	string topic = 7;
	int32 partition = 8;
	string key = 9;
}

message Credit {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3;

	string name = 4;
	int64 fpv_balance = 5; // fpv

	int64 fpv_credit_limit = 7; // 0 - 40 only set by subiz
	int64 fpv_tax = 8; // 1000 -> 10%

	int64 created = 9;
	string created_by = 10;

	int64 updated = 11;
	string updated_by = 12;

	string billing_name = 13;
	string billing_address = 14;
	string billing_email = 15;
	string tax_code = 16;

	string currency = 18; // default USD, VND
}

message CreditSnapshoot {
	common.Context ctx = 1;
	string account_id = 2;
	string credit_id = 3;

	int64 unix_hour = 4;

	int64 balance_fpv = 6;

	int64 max_rule_usage = 10;
	// Free tier remain
	int64 rules = 20; // per month
}

message CreditSpendEntry {
	common.Context ctx = 1;
	string account_id = 2;
	string id = 3;
	int64 created = 4;
	string service = 5; // remove file (sub-category)
	string category = 6; // agent, zalo_zns, zalo_active_message, image

	int64 quantity = 7;
	CreditSendEntryData data = 8;
	string credit_id = 9;

	int64 fpv_unit_price = 10;

	string service_id = 12; // cp4348934
	string service_type = 13; // campaign, bot, popup

	string item = 14;
	string item_id = 15;
}

message CreditSendEntryDataId {
	string id = 2;
}

message CreditSendEntryDataAgent {
	int64 total_agents = 1;
	repeated string agents = 2;
}

message CreditSendEntryDataEmail {
	string from = 3;
	string to = 4;
	string email_id = 5;
}

message CreditSendEntryDataZaloZNS {
	string oa_id = 3;
	string message_id = 4; // from zalo
	string template_id = 5;
	string phone_number = 6;
}

message CreditSendEntryDataZaloActiveMessage {
	string oa_id = 3;
	string message_id = 4; // from zalo
	string conversation_id = 5;
	string event_id = 6;
	string zalo_user_id = 7;
}

message CreditSendEntryData {
	CreditSendEntryDataAgent agent = 2;
	CreditSendEntryDataZaloZNS zalo_zns = 3;
	CreditSendEntryDataZaloActiveMessage zalo_active_message = 4;
	CreditSendEntryDataEmail email = 5;
	CreditSendEntryDataId file = 6;
}

message CreditSpendReportRequest {
	common.Context ctx = 1;
	string account_id = 2;
	string credit_id = 3;
	int64 from_time = 4; // ms
	string unit = 5; // hour, day, month
	string service = 6; // just filter
	string service_id = 7;
	int64 limit = 8; // default: 24, 30, 24
}

message CreditSpendLogRequest {
	common.Context ctx = 1;
	string account_id = 2;
	int64 created_from = 4; // ms
	string service = 6; // just filter
	string category = 7; // just filter
	string service_id = 8; // filter by source

	int64 limit = 10; // max : 20
	string anchor = 11;
}

message CreditSpendEntries {
	common.Context ctx = 1;
	string account_id = 2;
	repeated CreditSpendEntry entries = 4;
	string next_anchor = 5;
}

message TrySpendCreditResponse {
	common.Context ctx = 1;
	string account_id = 2;
	string credit_id = 3;

	string service_id = 4;
	int64 balance_fpv = 6;

	bool allow = 7;
}

message CreditSpendReportResponseData {
	string item_id = 3; // remove
	string label = 5;
	repeated int64 data = 4; // by time
}

message CreditSpendReportResponse {
	common.Context ctx = 1;
	string account_id = 2;
	string credit_id = 3;
	repeated CreditSpendReportResponseData datas = 4;
}

message AccSub {
	common.Context ctx = 1;
	string id = 2;
	account.Account account = 3;
	payment.Subscription subscription = 4;
	repeated account.Agent agents = 5;
	string stringify = 6;
	int64 num_open_invoices = 7;
	repeated Credit credits = 8;
}

message AccSubs {
	common.Context ctx = 1;
	repeated AccSub accsub = 2;
	string anchor = 4;
	int64 total_trial = 5;
	int64 total_standard = 6;
	int64 total_advanced = 7;
	int64 total = 8;
}

message OutboundCallUpdateEvent {
	common.Context ctx = 1;
	string account_id = 2;
	string campaign_id = 3;
	int64 total_calls = 4; // 301
	int64 total_completed_calls = 5;
	repeated OutboundCallAgentReport agents = 6;
}

message String {
	string str = 1;
	string version =2; //version 2 is version for convo
}

message Number {
	int64 number = 1;
	string version =2; //version 2 is version for convo
}

message ConvoReportRequest {
	common.Context ctx = 1;
	string account_id = 2;
	int64 from_hour = 3;
	int64 to_hour = 4;
	repeated string metrics = 5;
	string unit = 6;
	UserViewCondition condition = 7; 
	account.BusinessHours business_hours = 8;
	string tz = 9;
}

message ConvoReportRespone {
	common.Context ctx = 1;
	string account_id = 2;
	repeated ConvoReportEntry conversation_count = 3;
	repeated ConvoReportEntry new_user_conversation = 4;
}

message ConvoReportEntry {
	repeated int64 datapoint = 1;
	int64 count = 2;
	map<string, int64> category_ids = 3;
	string metric = 10;
}