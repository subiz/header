// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.1
// source: service.proto

package header

import (
	context "context"
	account "github.com/subiz/header/account"
	common "github.com/subiz/header/common"
	noti5 "github.com/subiz/header/noti5"
	payment "github.com/subiz/header/payment"
	zalokon "github.com/subiz/header/zalokon"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_service_proto protoreflect.FileDescriptor

var file_service_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x1a, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x35, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d,
	0x7a, 0x61, 0x6c, 0x6f, 0x6b, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xb5, 0x02,
	0x0a, 0x10, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x6b, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x32, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x12, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x19, 0x52, 0x65, 0x61, 0x64, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a,
	0x1d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x5b,
	0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x1d, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x48, 0x0a, 0x1a, 0x4c,
	0x69, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x1e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x32, 0x3f, 0x0a, 0x0d, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x12, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0x59, 0x0a, 0x09, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x4c, 0x0a, 0x0d, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0xb3, 0x07, 0x0a, 0x09, 0x44, 0x6f, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12,
	0x34, 0x0a, 0x0a, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6f, 0x6e, 0x76, 0x6f, 0x12, 0x17, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x44, 0x6f, 0x63, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43,
	0x6f, 0x6e, 0x76, 0x6f, 0x73, 0x12, 0x18, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x44,
	0x6f, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x44, 0x6f, 0x63, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x17, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x44, 0x6f, 0x63,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x0b, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x12, 0x17, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x44, 0x6f, 0x63, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x3d, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x18, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x44, 0x6f, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x44, 0x6f, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x32, 0x0a, 0x09, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x64, 0x73, 0x12, 0x18,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x44, 0x6f, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x49, 0x64, 0x73, 0x12, 0x55, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x41, 0x0a, 0x06,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x43, 0x6f, 0x6e, 0x76, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76,
	0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3c, 0x0a, 0x07, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1a, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x50, 0x0a,
	0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x73, 0x12, 0x22, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x3d, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x1a, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x40,
	0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x73, 0x12, 0x1a, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x40, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12,
	0x1b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x12, 0x31, 0x0a, 0x11, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x10, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0x8d, 0x02, 0x0a, 0x0e, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x09, 0x55, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x12, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x1a, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x4d, 0x12, 0x0f,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x4e, 0x75, 0x6d, 0x4d, 0x1a,
	0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x4e, 0x75, 0x6d, 0x4d,
	0x12, 0x29, 0x0a, 0x07, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x6e, 0x12, 0x0e, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x0e, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x06, 0x4c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x06, 0x4e, 0x65, 0x77, 0x49, 0x44, 0x32, 0x12,
	0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0a, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x32, 0xe8, 0x03, 0x0a, 0x03, 0x4d, 0x61, 0x70, 0x12,
	0x53, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x12, 0x22, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41,
	0x75, 0x74, 0x6f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x0d, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49,
	0x64, 0x1a, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x47, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x0d, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x73, 0x12, 0x0a, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x11, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x0d, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x0a, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x11, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x09, 0x4c,
	0x69, 0x73, 0x74, 0x57, 0x61, 0x72, 0x64, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x49, 0x64, 0x1a, 0x11, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x74, 0x72, 0x65, 0x65, 0x74, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x49, 0x64, 0x1a, 0x11, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x49, 0x64, 0x73, 0x1a, 0x11, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49,
	0x64, 0x1a, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x32, 0x83, 0x04, 0x0a, 0x0a, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x4d, 0x67,
	0x72, 0x12, 0x3f, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x72, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x49, 0x64, 0x1a, 0x1c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x42, 0x69, 0x6c,
	0x6c, 0x73, 0x12, 0x47, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x72, 0x12, 0x1b, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x1a, 0x1b,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x72, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x12, 0x3f, 0x0a, 0x15, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64,
	0x1a, 0x1a, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x14,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64,
	0x1a, 0x19, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12,
	0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x16, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x17, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x45, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x1a, 0x16, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x32, 0x82, 0x1f, 0x0a, 0x0a, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x67, 0x72, 0x12, 0x35, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x12, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x35,
	0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x1a, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2a, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x12, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x2c, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64,
	0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x35, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x77, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x0e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x1a, 0x0e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64,
	0x1a, 0x0e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x12, 0x2d, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x10, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x38, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x69, 0x7a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x12, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x0e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x1a,
	0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x34,
	0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x0e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x4e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x0e, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x0e,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x2d,
	0x0a, 0x0b, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x1a, 0x0e, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a,
	0x08, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x0f, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x49, 0x64, 0x1a, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x0a, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x49, 0x64, 0x1a, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49,
	0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x2d, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x0a,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x13, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0x2d, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x0e,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x1a, 0x0e,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x50,
	0x0a, 0x12, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x48, 0x6f, 0x6c, 0x69,
	0x64, 0x61, 0x79, 0x73, 0x12, 0x22, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x53,
	0x79, 0x6e, 0x63, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x75, 0x72, 0x73,
	0x12, 0x2b, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0e, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a,
	0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36,
	0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64,
	0x1a, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30,
	0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x0a, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2a, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x0c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x1a, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x49, 0x64, 0x1a, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x6e,
	0x67, 0x12, 0x3a, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x12, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x6e,
	0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x13, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x3d, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53,
	0x68, 0x6f, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x13, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x2c, 0x0a, 0x0c, 0x52, 0x65, 0x61, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x10, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2d, 0x0a,
	0x10, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x11,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x6f, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x11, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x12, 0x35, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x35, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x68, 0x6f, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0f, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x0f, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e,
	0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a,
	0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x29,
	0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x78, 0x65, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x78, 0x12, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x54, 0x61, 0x78, 0x1a, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x78,
	0x12, 0x25, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x78, 0x12, 0x0b, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x78, 0x1a, 0x0b, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x78, 0x12, 0x26, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x61, 0x78, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64,
	0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x3e, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x1a, 0x18, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53,
	0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12,
	0x3c, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x49, 0x64, 0x1a, 0x18, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x69,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x46, 0x0a,
	0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x16, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53,
	0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0x16, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x46, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x16, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0x16, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53,
	0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x31, 0x0a,
	0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49,
	0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x4c, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x1a, 0x18, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3e,
	0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x49, 0x64, 0x1a, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x4c,
	0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x1a, 0x18, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x0e,
	0x4d, 0x61, 0x6b, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x61, 0x78, 0x12, 0x0a,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x12, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12,
	0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x16, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x15, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x1a, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x43, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x1a, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x30, 0x0a,
	0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64,
	0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x35, 0x0a, 0x18, 0x4d, 0x61, 0x6b, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x0a, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x49, 0x64, 0x73, 0x1a, 0x1b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x48, 0x0a, 0x1b, 0x44, 0x65, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x65, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x12, 0x1a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0x0d,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x53, 0x0a,
	0x19, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x53, 0x68,
	0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0x1a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x12, 0x4d, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x47, 0x48, 0x4e, 0x41, 0x66, 0x66,
	0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x4f, 0x54, 0x50, 0x12, 0x1a, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x53, 0x68, 0x69,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0x1a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x12, 0x4e, 0x0a, 0x14, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x48, 0x4e, 0x41, 0x66, 0x66,
	0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x4f, 0x54, 0x50, 0x12, 0x1a, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x53, 0x68, 0x69,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0x1a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x12, 0x3b, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x11, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x11, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x34,
	0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64,
	0x1a, 0x12, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x14, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x4e, 0x65, 0x77, 0x49, 0x44,
	0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0a, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x6b,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49,
	0x64, 0x1a, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0b, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x0a, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x69, 0x6c, 0x6c,
	0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0e, 0x2e,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x73, 0x32, 0x89, 0x18,
	0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x67, 0x72, 0x12, 0x28, 0x0a, 0x09, 0x4d, 0x65, 0x72,
	0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x1a, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0a, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x0b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x32, 0x12, 0x0c, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x1a, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x3a, 0x0a, 0x0d, 0x54, 0x72, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x1a, 0x1b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x79, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x27, 0x0a,
	0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0a, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49,
	0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x24, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0a, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x20, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x72,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0a, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x12, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x73, 0x1a,
	0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x23,
	0x0a, 0x07, 0x42, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x09, 0x55, 0x6e, 0x62, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0c, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x0d, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x0a, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x56, 0x69, 0x65, 0x77, 0x12, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x1a, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x12, 0x30, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x12, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x1a, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x12, 0x27, 0x0a, 0x0a, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x12, 0x0a,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x10, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x12, 0x2a, 0x0a, 0x09,
	0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x11, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x73, 0x12, 0x31, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x0f, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x0d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0f, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x0f, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2a,
	0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49,
	0x64, 0x1a, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x2b, 0x0a, 0x0b, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x28, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x0a,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x0a, 0x4c, 0x69, 0x73,
	0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x49, 0x64, 0x1a, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x32, 0x0a, 0x0c, 0x41, 0x64,
	0x64, 0x4c, 0x65, 0x61, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x13, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x35,
	0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x0f, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x13, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x39, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x12, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x15, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x39, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x1a, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x37, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x68, 0x69, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0f, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x0d, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x13, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x19, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x4d, 0x61, 0x6b, 0x65,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65,
	0x61, 0x64, 0x73, 0x12, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x56, 0x69, 0x65, 0x77, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x12, 0x55, 0x0a, 0x10, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x4c,
	0x65, 0x61, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x0e, 0x4c,
	0x69, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x0f, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x1a, 0x0f,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12,
	0x3f, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x1d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x2f, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x2c, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a,
	0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x43, 0x0a, 0x0a, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x12, 0x19, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x65, 0x61,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x1a, 0x0d,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4a, 0x0a,
	0x11, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x12, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x4c, 0x69, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x73, 0x12, 0x3b, 0x0a, 0x14, 0x4c,
	0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x57, 0x69, 0x74, 0x68, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x73, 0x12, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x42, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x18, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x44, 0x6f, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x44, 0x6f, 0x63, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0a,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3c, 0x0a, 0x0e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x76, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x12, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x76,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x1a, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x12,
	0x2a, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x56, 0x0a, 0x11, 0x53,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x1f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x4c, 0x65, 0x61, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x18, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x1b, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0xc8, 0x01, 0x0a, 0x07, 0x4e, 0x6f,
	0x74, 0x65, 0x4d, 0x67, 0x72, 0x12, 0x34, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x74,
	0x65, 0x73, 0x12, 0x18, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4e, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x07, 0x41,
	0x64, 0x64, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x4e, 0x6f, 0x74, 0x65, 0x1a, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4e, 0x6f,
	0x74, 0x65, 0x12, 0x28, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x65,
	0x12, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x1a, 0x0c,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x0a,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x32, 0x85, 0x02, 0x0a, 0x0c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x4d, 0x67, 0x72, 0x12, 0x47, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x1c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x55,
	0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x1b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0xcd, 0x02, 0x0a,
	0x0d, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x67, 0x72, 0x12, 0x2d,
	0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x12,
	0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x10, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a,
	0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12,
	0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x10, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a,
	0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12,
	0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x10, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a,
	0x0c, 0x52, 0x65, 0x61, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x0a, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0f, 0x4c,
	0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x12, 0x1a,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xc0, 0x1b, 0x0a,
	0x0f, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x67, 0x72,
	0x12, 0x38, 0x0a, 0x0a, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x15,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2b, 0x0a, 0x0b, 0x50, 0x6f,
	0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x0f, 0x45, 0x6e, 0x64, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x14, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x48, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x12, 0x20, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x12, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x73, 0x1a, 0x15, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x0f, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x11, 0x55, 0x6e,
	0x74, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x3d, 0x0a, 0x10, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x3d, 0x0a, 0x10, 0x4c, 0x65, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x44, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x0d, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x13,
	0x55, 0x6e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x14, 0x55, 0x6e, 0x68, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45,
	0x6e, 0x64, 0x63, 0x68, 0x61, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x64, 0x63, 0x68, 0x61, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x16, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45,
	0x6e, 0x64, 0x63, 0x68, 0x61, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x37, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x64, 0x63, 0x68, 0x61, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x16,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x64, 0x63, 0x68, 0x61, 0x74, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x0c, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x42, 0x6f, 0x74, 0x12, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x1a, 0x0d, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x0b,
	0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0d, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x16, 0x53, 0x65, 0x6e,
	0x64, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x25, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x4f, 0x6d, 0x6e, 0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x0d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0d, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x0a, 0x50, 0x69, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x0c, 0x55, 0x6e, 0x70, 0x69, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x43, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x25, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0b, 0x44, 0x65, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x34, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49,
	0x64, 0x1a, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x13, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x53, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x1b, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x0d,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x28, 0x0a,
	0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0c, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x1a, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52,
	0x75, 0x6c, 0x65, 0x1a, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x27, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x08, 0x52, 0x65,
	0x61, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x49, 0x64, 0x1a, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x26, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x0a, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x49, 0x64, 0x1a, 0x1f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5e, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64,
	0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x48, 0x0a, 0x1a, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x1e, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x10, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x0a, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x3d, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3d,
	0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a,
	0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x32, 0x0a,
	0x0f, 0x52, 0x65, 0x61, 0x64, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x13, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x13, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x38, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x10, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x0a,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x14, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x3d, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43,
	0x61, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x13, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x3b, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x15,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x16,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x0d, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x0d,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x37, 0x0a,
	0x11, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x16,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x73, 0x12, 0x43, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x47, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x15, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x1a, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x47, 0x72,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x3e, 0x0a, 0x13, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x12, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x1a, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x14, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x79, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x0a, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x0b, 0x53, 0x61, 0x76, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x2c, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x32,
	0xfe, 0x14, 0x0a, 0x09, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x67, 0x72, 0x12, 0x3a, 0x0a,
	0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x10, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x1a, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x49, 0x64, 0x1a, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x49, 0x64, 0x1a, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x1a, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x1a, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x29, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x2a, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x27, 0x0a,
	0x09, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2d, 0x0a, 0x0c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x12, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x73, 0x1a,
	0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3a, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x56, 0x69, 0x65, 0x77, 0x12, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x1a, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x12, 0x3a, 0x0a,
	0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x56, 0x69, 0x65,
	0x77, 0x12, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x56, 0x69, 0x65, 0x77, 0x1a, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x12, 0x2d, 0x0a, 0x10, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x12, 0x0a, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x12, 0x32, 0x0a, 0x0f, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x73, 0x12, 0x0d, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x10, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a,
	0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x1a, 0x16, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x16, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x1a, 0x16, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a,
	0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49,
	0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x37, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49,
	0x64, 0x1a, 0x16, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x13, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2f, 0x0a, 0x0f, 0x50, 0x6f, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x30, 0x0a, 0x0b, 0x55, 0x6e, 0x74, 0x61, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x0a, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x1a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x0d,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x37, 0x0a,
	0x0a, 0x4c, 0x65, 0x66, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1a, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49,
	0x64, 0x73, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x2b, 0x0a, 0x0d, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x12, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x73, 0x1a,
	0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2f,
	0x0a, 0x11, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x12, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x73,
	0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x31, 0x0a, 0x13, 0x55, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x49, 0x64, 0x73, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x2f, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x52,
	0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x1b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x44, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x4c, 0x41, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x11, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x41, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0x11,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x4c, 0x41, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x37, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x4c, 0x41, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x11, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x4c,
	0x41, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0x11, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x53, 0x4c, 0x41, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2c, 0x0a, 0x0f, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x4c, 0x41, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x0a, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x4c, 0x41, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x0d, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x10, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x53, 0x4c, 0x41, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x0a, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x11, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x53, 0x4c, 0x41, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x37, 0x0a, 0x17, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x4c, 0x41, 0x56, 0x69, 0x6f, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x49, 0x64, 0x1a, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x52, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x1a, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x49, 0x64, 0x1a, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x52, 0x75, 0x6c, 0x65, 0x1a, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0c, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x1a, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x10, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x0e, 0x52, 0x65,
	0x61, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0a, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x0f, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x0a, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x6e, 0x76, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x6f,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x73, 0x42, 0x79,
	0x43, 0x6f, 0x6e, 0x76, 0x6f, 0x49, 0x64, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x49, 0x64, 0x1a, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x73,
	0x32, 0xab, 0x05, 0x0a, 0x0b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4d, 0x67, 0x72,
	0x12, 0x34, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x12, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x1a, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x1a, 0x10, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x0e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x0a,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x49, 0x64, 0x1a, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x1a,
	0x11, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x29, 0x0a, 0x0c, 0x50, 0x69, 0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x43, 0x0a,
	0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x61, 0x6c, 0x12, 0x19, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x61, 0x6c, 0x1a, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64,
	0x61, 0x6c, 0x12, 0x43, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x61,
	0x6c, 0x12, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x61, 0x6c, 0x1a, 0x19, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4d, 0x6f, 0x64, 0x61, 0x6c, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x31, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x61, 0x6c, 0x12, 0x0a, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x6f, 0x64, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x61,
	0x6c, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x1a,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x61, 0x6c, 0x73, 0x12, 0x52, 0x0a, 0x09, 0x50, 0x69,
	0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x61, 0x6c, 0x12, 0x24, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64,
	0x61, 0x6c, 0x50, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x61, 0x6c, 0x50, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x32, 0xc7,
	0x01, 0x0a, 0x06, 0x54, 0x61, 0x67, 0x4d, 0x67, 0x72, 0x12, 0x25, 0x0a, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x12, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x54, 0x61, 0x67, 0x1a, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x67,
	0x12, 0x25, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x12, 0x0b, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x67, 0x1a, 0x0b, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x67, 0x12, 0x26, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x61, 0x67, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64,
	0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x24, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x67, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x54, 0x61, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x12,
	0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0b, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x67, 0x32, 0xb1, 0x02, 0x0a, 0x0c, 0x4e, 0x6f, 0x74,
	0x69, 0x35, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x52, 0x65, 0x61,
	0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64,
	0x1a, 0x0e, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x35, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x3b, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x2e,
	0x6e, 0x6f, 0x74, 0x69, 0x35, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x0e, 0x2e,
	0x6e, 0x6f, 0x74, 0x69, 0x35, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a,
	0x04, 0x4e, 0x6f, 0x74, 0x69, 0x12, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50,
	0x75, 0x73, 0x68, 0x4e, 0x6f, 0x74, 0x69, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x0c, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x35, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x2a, 0x0a, 0x0b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0c,
	0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x35, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x0d, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x10, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12,
	0x0c, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x35, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x0d, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0xb2, 0x07, 0x0a,
	0x0a, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x67, 0x72, 0x12, 0x37, 0x0a, 0x09, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x75, 0x62, 0x12, 0x19, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x75, 0x62, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63,
	0x53, 0x75, 0x62, 0x73, 0x12, 0x24, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x12, 0x0a,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0e, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x53, 0x75, 0x62, 0x12, 0x36, 0x0a, 0x08, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x12, 0x18, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x10, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x12, 0x42, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x15, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x15, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x03,
	0x50, 0x61, 0x79, 0x12, 0x13, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x12, 0x33, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x10, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0x10, 0x2e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x0d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x10, 0x2e,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x1a,
	0x10, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x12, 0x40, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x73, 0x12, 0x1b, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x11, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0c, 0x44, 0x72, 0x61, 0x66, 0x74, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x12, 0x15, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x10, 0x2e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x0c,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x2e, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a,
	0x0a, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x2e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x10, 0x2e,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x2c, 0x0a, 0x0d, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0f, 0x2e, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x39, 0x0a,
	0x14, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54,
	0x6f, 0x48, 0x74, 0x6d, 0x6c, 0x12, 0x10, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0x0f, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3d, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x14, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x1a, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x13, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x12, 0x33, 0x0a, 0x08,
	0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x18, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x6f, 0x67,
	0x73, 0x32, 0xe4, 0x01, 0x0a, 0x06, 0x50, 0x75, 0x62, 0x73, 0x75, 0x62, 0x12, 0x28, 0x0a, 0x04,
	0x46, 0x69, 0x72, 0x65, 0x12, 0x11, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x73,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x0c, 0x49, 0x73, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x12, 0x11, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x50, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x04, 0x50, 0x6f, 0x6c, 0x6c, 0x12, 0x1c, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x12, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x47, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x1c, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1c, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x89, 0x04, 0x0a, 0x0e, 0x46, 0x61, 0x62,
	0x69, 0x6b, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x14, 0x52,
	0x65, 0x61, 0x64, 0x46, 0x62, 0x46, 0x61, 0x6e, 0x70, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a,
	0x18, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x62, 0x46, 0x61, 0x6e, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x4c, 0x0a, 0x16, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x46, 0x62, 0x46, 0x61, 0x6e, 0x70, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x18, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x62, 0x46,
	0x61, 0x6e, 0x70, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x18, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x62, 0x46, 0x61, 0x6e, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x62, 0x46, 0x61, 0x6e, 0x70, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x19, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x62, 0x46, 0x61, 0x6e, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x62, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x49, 0x64, 0x1a, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x61, 0x63, 0x65,
	0x62, 0x6f, 0x6f, 0x6b, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x46, 0x62, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x50, 0x6f,
	0x73, 0x74, 0x12, 0x34, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x12, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x46, 0x62, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x0c, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x0d, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x0e, 0x41, 0x64,
	0x64, 0x46, 0x62, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x0c, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x0f, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x0a, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x49, 0x64, 0x32, 0x84, 0x01, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x11,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0xac, 0x03, 0x0a, 0x0e,
	0x5a, 0x61, 0x6c, 0x6f, 0x6b, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x30,
	0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x5a, 0x61, 0x6c,
	0x6f, 0x12, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x35, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x5a, 0x6e, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64,
	0x1a, 0x15, 0x2e, 0x7a, 0x61, 0x6c, 0x6f, 0x6b, 0x6f, 0x6e, 0x2e, 0x5a, 0x6e, 0x73, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5a, 0x61, 0x6c, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x5a, 0x61, 0x6c, 0x6f, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x19, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5a, 0x61, 0x6c, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x4d, 0x61, 0x6b, 0x65, 0x43,
	0x61, 0x6c, 0x6c, 0x12, 0x17, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x5a, 0x61, 0x6c,
	0x6f, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x10, 0x4d,
	0x61, 0x6b, 0x65, 0x53, 0x75, 0x72, 0x65, 0x5a, 0x61, 0x6c, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x17, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x5a, 0x61, 0x6c, 0x6f, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x5a, 0x61,
	0x6c, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x12, 0x17, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x5a, 0x61, 0x6c, 0x6f, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x07,
	0x53, 0x65, 0x6e, 0x64, 0x5a, 0x4e, 0x53, 0x12, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x5a, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x32, 0xb1, 0x07, 0x0a, 0x0e, 0x4d,
	0x61, 0x69, 0x6c, 0x6b, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a,
	0x09, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3f, 0x0a, 0x13, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x13, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x1d, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x53,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0d, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x50, 0x0a, 0x12, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x25, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x48, 0x0a, 0x1a,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x1e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x1a, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x1a, 0x1c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x37, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0a,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x09, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x11, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x1a, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x12, 0x55, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x1a, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x32, 0x0a, 0x12, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x10, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a,
	0x11, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x1a, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x1a, 0x10,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2c, 0x0a, 0x0c, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x10, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xf7,
	0x0b, 0x0a, 0x0d, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x29, 0x0a, 0x04, 0x52, 0x65, 0x61, 0x64, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x49, 0x64, 0x1a, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x69,
	0x64, 0x67, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x06, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57,
	0x69, 0x64, 0x67, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x15, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x49, 0x64, 0x1a, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x69, 0x64, 0x67,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a,
	0x12, 0x52, 0x65, 0x61, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a,
	0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x57, 0x65, 0x62, 0x12, 0x3a, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x49, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x12, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x3a, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x18, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x1a, 0x1a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x4f, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x12, 0x1d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x41, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x4b, 0x0a, 0x11, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x12, 0x3b, 0x0a, 0x0b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x1a, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a,
	0x11, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x16,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x15, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x62, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49,
	0x64, 0x1a, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57,
	0x65, 0x62, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x11, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x57, 0x65, 0x62, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x1a, 0x11, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x3e,
	0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x11, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x57, 0x65, 0x62, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x1a, 0x11, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x37,
	0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x12, 0x11, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x1a, 0x11, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x65,
	0x62, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x57, 0x65, 0x62, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3f, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57,
	0x65, 0x62, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x12, 0x11, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x1a, 0x11, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x38, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65,
	0x62, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x12, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x12, 0x34, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x62, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x52, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x57, 0x65, 0x62, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x1e, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x65, 0x62, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x65, 0x62, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x0c, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x16, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x36,
	0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a,
	0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x0a,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0c, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x55, 0x72, 0x6c, 0x73, 0x32, 0xde, 0x05, 0x0a, 0x06, 0x42, 0x69, 0x7a,
	0x62, 0x6f, 0x74, 0x12, 0x2d, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6f, 0x74, 0x73, 0x12,
	0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x6f,
	0x74, 0x73, 0x12, 0x21, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x12, 0x0a, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x74, 0x12, 0x2d, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x6f, 0x74, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x74, 0x1a, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6f,
	0x74, 0x12, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x74, 0x1a, 0x0b,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x74, 0x12, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x74, 0x1a, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x74, 0x12, 0x26, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6f, 0x74, 0x12,
	0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x07, 0x4f, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x74, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x08, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x42, 0x6f, 0x74, 0x12, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x74, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2f, 0x0a,
	0x07, 0x53, 0x74, 0x6f, 0x70, 0x42, 0x6f, 0x74, 0x12, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x74, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x31,
	0x0a, 0x09, 0x54, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x74, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x41, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x74, 0x32, 0x12,
	0x1c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x74, 0x72, 0x75, 0x6e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x74, 0x72, 0x75, 0x6e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x12, 0x49, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x72, 0x75, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x75, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12,
	0x46, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x1a,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x42, 0x6f, 0x74, 0x12, 0x18, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xaf, 0x04, 0x0a, 0x08, 0x53, 0x65,
	0x6e, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x31, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x1a, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x34, 0x0a, 0x0b, 0x50, 0x69, 0x6e,
	0x67, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x49, 0x64, 0x1a, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x2a, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x0c, 0x4c,
	0x69, 0x73, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x2a, 0x0a, 0x0b, 0x52, 0x65, 0x61,
	0x64, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x31, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x1a, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x32, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12,
	0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0f, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x5a, 0x0a, 0x19,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x17, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x17, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x30, 0x0a, 0x10, 0x53, 0x65, 0x6e,
	0x64, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0d, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x0d, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0xd3, 0x01, 0x0a, 0x07,
	0x4e, 0x6f, 0x74, 0x69, 0x62, 0x6f, 0x78, 0x12, 0x2f, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x4e,
	0x6f, 0x74, 0x69, 0x12, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74,
	0x4e, 0x6f, 0x74, 0x69, 0x65, 0x73, 0x12, 0x17, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x0c, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x65,
	0x61, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x2e, 0x0a, 0x11, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x4e, 0x6f, 0x74,
	0x69, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x32, 0xe7, 0x17, 0x0a, 0x06, 0x50, 0x72, 0x6f, 0x64, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x0b,
	0x52, 0x65, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x0f, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x1a, 0x0f, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x31, 0x0a,
	0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x0f,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x1a,
	0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x12, 0x31, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x12, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x1a, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x12, 0x2a, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64,
	0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x3a, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x32,
	0x12, 0x17, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x4c, 0x0a, 0x0d, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1c, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x16, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x73,
	0x1a, 0x1a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4f, 0x0a, 0x17,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a,
	0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34,
	0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x46, 0x65, 0x65, 0x64, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x49, 0x64, 0x1a, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x65, 0x65, 0x64, 0x73, 0x12, 0x3d, 0x0a, 0x11, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x65, 0x65, 0x64, 0x12,
	0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x46, 0x65, 0x65, 0x64, 0x1a, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x65, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x11, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x65, 0x65, 0x64, 0x12, 0x13,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46,
	0x65, 0x65, 0x64, 0x1a, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x46, 0x65, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x65, 0x65, 0x64, 0x12, 0x0a, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3f, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x73, 0x1a, 0x19,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x09, 0x52, 0x65, 0x61,
	0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x2b, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x1a,
	0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2b,
	0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0d, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x1a, 0x0d, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0b, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x33, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x47, 0x0a, 0x0c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x32, 0x12, 0x1a, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x0c, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x1a, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x2f, 0x0a, 0x10, 0x4d, 0x61, 0x6b, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x12, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x42, 0x69, 0x6c, 0x6c, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x0e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x12, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42,
	0x69, 0x6c, 0x6c, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x10, 0x45, 0x64, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0b, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x4b, 0x65, 0x79, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x1b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42,
	0x69, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x3b, 0x0a, 0x0d, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x68,
	0x6f, 0x70, 0x65, 0x65, 0x41, 0x75, 0x74, 0x68, 0x55, 0x72, 0x6c, 0x12, 0x0a, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x13, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x53, 0x68, 0x6f, 0x70, 0x65, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x12, 0x1e, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x53, 0x68, 0x6f,
	0x70, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x65, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x12, 0x32,
	0x0a, 0x15, 0x44, 0x65, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x53, 0x68, 0x6f,
	0x70, 0x65, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x59, 0x0a, 0x12, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x68, 0x6f, 0x70, 0x65, 0x65,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x20, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x65, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x65, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a,
	0x12, 0x47, 0x48, 0x54, 0x4b, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x11, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x47, 0x48, 0x54,
	0x4b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x11, 0x47, 0x48, 0x4e, 0x53, 0x68, 0x69, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x11, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x47, 0x48, 0x4e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x32, 0x1a, 0x0d, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x0b,
	0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x12, 0x14, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x1a, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x09, 0x53, 0x68, 0x69, 0x70, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64,
	0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x32, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x68, 0x69,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x53, 0x68,
	0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x0b, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x73, 0x1a, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x09, 0x53, 0x65, 0x65, 0x6e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64,
	0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x28, 0x0a, 0x0b, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0a,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x0d, 0x55, 0x6e, 0x66,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x08, 0x54, 0x61, 0x67, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x0a, 0x55, 0x6e, 0x74, 0x61, 0x67, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x0c, 0x52, 0x65, 0x61, 0x64, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49,
	0x64, 0x1a, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x34, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x1a, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x34, 0x0a, 0x0e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x10, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x1a, 0x10, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12,
	0x2b, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x0d,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x0b, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x73, 0x1a, 0x11, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x3b, 0x0a,
	0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x1a, 0x0d, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x31, 0x0a, 0x11, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12,
	0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x10, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x3a, 0x0a,
	0x0b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x12, 0x4d, 0x6f, 0x76,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x73, 0x1a, 0x0d, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0xd3, 0x04, 0x0a, 0x07,
	0x54, 0x61, 0x73, 0x6b, 0x4d, 0x67, 0x72, 0x12, 0x24, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a,
	0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x28, 0x0a,
	0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0c, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x1a, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x28, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x1a, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x27, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x09, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x25, 0x0a, 0x08,
	0x53, 0x65, 0x65, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x11, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x08, 0x4d, 0x75, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x0a, 0x55, 0x6e,
	0x6d, 0x75, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x0f, 0x45, 0x64, 0x69, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x4b, 0x65, 0x79, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x1a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x32, 0x4d, 0x0a, 0x05, 0x53, 0x70, 0x65, 0x65, 0x78, 0x12, 0x44, 0x0a, 0x0c, 0x54, 0x65,
	0x78, 0x74, 0x54, 0x6f, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x12, 0x19, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x54, 0x54, 0x53, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54,
	0x54, 0x53, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x32, 0x81, 0x08, 0x0a, 0x0b, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x4d, 0x67, 0x72,
	0x12, 0x2f, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x73, 0x12, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x73, 0x1a, 0x11,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x73, 0x12, 0x2c, 0x0a, 0x0c, 0x52, 0x65, 0x61, 0x64, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x10, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12,
	0x34, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x12, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x1a, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x34, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x1a, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x2b, 0x0a, 0x0e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x0a, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x07, 0x4f, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x4e, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x12, 0x1e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f,
	0x67, 0x12, 0x47, 0x0a, 0x17, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x0a, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x20, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x57, 0x0a, 0x17, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x75, 0x74,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x1a, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x75,
	0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x65, 0x0a, 0x12, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x26, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x61, 0x6c,
	0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x75, 0x74,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4f, 0x75, 0x74,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x1a, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x75,
	0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x3d, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x64,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x75,
	0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x1a,
	0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x5c,
	0x0a, 0x13, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x21, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4f,
	0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x14,
	0x52, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x1f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x32, 0xbe, 0x03, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x4d,
	0x67, 0x72, 0x12, 0x4a, 0x0a, 0x0e, 0x54, 0x72, 0x79, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x12, 0x18, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x1a, 0x1e,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x79, 0x53, 0x70, 0x65, 0x6e, 0x64,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58,
	0x0a, 0x11, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x53, 0x70,
	0x65, 0x6e, 0x64, 0x12, 0x20, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x12, 0x1d,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x53, 0x70,
	0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x53, 0x70, 0x65,
	0x6e, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x0b, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x49, 0x64, 0x1a, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x12, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x1a, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49,
	0x64, 0x1a, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x12, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x1a, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xc6, 0x02, 0x0a, 0x07, 0x46, 0x6f, 0x72, 0x6d, 0x4d, 0x67,
	0x72, 0x12, 0x26, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x73, 0x12, 0x0a,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x73, 0x12, 0x28, 0x0a, 0x0a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x1a, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x46,
	0x6f, 0x72, 0x6d, 0x12, 0x28, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x12, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x1a,
	0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x27, 0x0a,
	0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x0a, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x46, 0x6f, 0x72, 0x6d, 0x12, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x6f,
	0x72, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x21, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x46, 0x6f, 0x72, 0x6d, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x46,
	0x6f, 0x72, 0x6d, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x84,
	0x01, 0x0a, 0x09, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0c,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x15, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x1a, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x39, 0x0a, 0x0e, 0x55, 0x6e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x15, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x1a, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xe2, 0x06, 0x0a, 0x02, 0x4b, 0x42, 0x12, 0x43, 0x0a, 0x13,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42,
	0x61, 0x73, 0x65, 0x12, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x1a, 0x15, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73,
	0x65, 0x12, 0x43, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x12, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x1a,
	0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x12, 0x0a, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x12, 0x0a, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x12,
	0x32, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x42, 0x61, 0x73, 0x65, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49,
	0x64, 0x1a, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x12, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x1a, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x1a, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x0d, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a,
	0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x12, 0x3c, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73,
	0x12, 0x1a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49,
	0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x17, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x1a, 0x17, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x49, 0x0a, 0x15, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x17, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x1a, 0x17, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0a, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0a,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x17, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x35, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x0a, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x19, 0x5a, 0x17, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x7a, 0x2f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_service_proto_goTypes = []interface{}{
	(*Events)(nil),                            // 0: header.Events
	(*Id)(nil),                                // 1: header.Id
	(*GoogleLocationSetting)(nil),             // 2: header.GoogleLocationSetting
	(*KafkaMessage)(nil),                      // 3: header.KafkaMessage
	(*RateLimitSyncRequest)(nil),              // 4: header.RateLimitSyncRequest
	(*DocIndexRequest)(nil),                   // 5: header.DocIndexRequest
	(*DocSearchRequest)(nil),                  // 6: header.DocSearchRequest
	(*ConversationMetricsRequest)(nil),        // 7: header.ConversationMetricsRequest
	(*ConvoReportRequest)(nil),                // 8: header.ConvoReportRequest
	(*CallMetricsRequest)(nil),                // 9: header.CallMetricsRequest
	(*AgentMetricsRequest)(nil),               // 10: header.AgentMetricsRequest
	(*Empty)(nil),                             // 11: header.Empty
	(*String)(nil),                            // 12: header.String
	(*Number)(nil),                            // 13: header.Number
	(*StrNumM)(nil),                           // 14: header.StrNumM
	(*AddressAutocompleteRequest)(nil),        // 15: header.AddressAutocompleteRequest
	(*Ids)(nil),                               // 16: header.Ids
	(*account.ReferrerPayoutBill)(nil),        // 17: account.ReferrerPayoutBill
	(*account.ReferrerAgent)(nil),             // 18: account.ReferrerAgent
	(*AgentGroup)(nil),                        // 19: header.AgentGroup
	(*NewPassword)(nil),                       // 20: header.NewPassword
	(*account.Agent)(nil),                     // 21: account.Agent
	(*account.Account)(nil),                   // 22: account.Account
	(*account.Token)(nil),                     // 23: account.Token
	(*CreateAccountRequest)(nil),              // 24: header.CreateAccountRequest
	(*account.SyncPublicHolidaysRequest)(nil), // 25: account.SyncPublicHolidaysRequest
	(*LoginSession)(nil),                      // 26: header.LoginSession
	(*LangMessage)(nil),                       // 27: header.LangMessage
	(*ShopSetting)(nil),                       // 28: header.ShopSetting
	(*Address)(nil),                           // 29: header.Address
	(*Tax)(nil),                               // 30: header.Tax
	(*Order)(nil),                             // 31: header.Order
	(*ShippingPolicy)(nil),                    // 32: header.ShippingPolicy
	(*CancellationCode)(nil),                  // 33: header.CancellationCode
	(*PaymentMethod)(nil),                     // 34: header.PaymentMethod
	(*IntegratedShipping)(nil),                // 35: header.IntegratedShipping
	(*account.Presence)(nil),                  // 36: account.Presence
	(*AvailibilityReportRequest)(nil),         // 37: header.AvailibilityReportRequest
	(*Users)(nil),                             // 38: header.Users
	(*User)(nil),                              // 39: header.User
	(*UserView)(nil),                          // 40: header.UserView
	(*Segment)(nil),                           // 41: header.Segment
	(*SegmentUsers)(nil),                      // 42: header.SegmentUsers
	(*Label)(nil),                             // 43: header.Label
	(*UserRequest)(nil),                       // 44: header.UserRequest
	(*SuggestLeadFieldRequest)(nil),           // 45: header.SuggestLeadFieldRequest
	(*Product)(nil),                           // 46: header.Product
	(*ListUserEventsRequest)(nil),             // 47: header.ListUserEventsRequest
	(*Event)(nil),                             // 48: header.Event
	(*common.Device)(nil),                     // 49: common.Device
	(*ImportLeadRequest)(nil),                 // 50: header.ImportLeadRequest
	(*Task)(nil),                              // 51: header.Task
	(*UsersRequest)(nil),                      // 52: header.UsersRequest
	(*UserReportRequest)(nil),                 // 53: header.UserReportRequest
	(*LiveUserView)(nil),                      // 54: header.LiveUserView
	(*PresencesRequest)(nil),                  // 55: header.PresencesRequest
	(*ResourceGroupMember)(nil),               // 56: header.ResourceGroupMember
	(*ListNotesRequest)(nil),                  // 57: header.ListNotesRequest
	(*Note)(nil),                              // 58: header.Note
	(*DeleteNoteRequest)(nil),                 // 59: header.DeleteNoteRequest
	(*AttributeDefinition)(nil),               // 60: header.AttributeDefinition
	(*Automation)(nil),                        // 61: header.Automation
	(*WorkflowLogRequest)(nil),                // 62: header.WorkflowLogRequest
	(*AssignRequest)(nil),                     // 63: header.AssignRequest
	(*StartRequest)(nil),                      // 64: header.StartRequest
	(*ListConversationsRequest)(nil),          // 65: header.ListConversationsRequest
	(*TagRequest)(nil),                        // 66: header.TagRequest
	(*ConversationMember)(nil),                // 67: header.ConversationMember
	(*Conversation)(nil),                      // 68: header.Conversation
	(*EndchatSetting)(nil),                    // 69: header.EndchatSetting
	(*BotTerminated)(nil),                     // 70: header.BotTerminated
	(*SendOmniChannelMessageRequest)(nil),     // 71: header.SendOmniChannelMessageRequest
	(*ListConversationEventsRequest)(nil),     // 72: header.ListConversationEventsRequest
	(*Integration)(nil),                       // 73: header.Integration
	(*Rule)(nil),                              // 74: header.Rule
	(*ConversationAutomation)(nil),            // 75: header.ConversationAutomation
	(*PhoneDevice)(nil),                       // 76: header.PhoneDevice
	(*CallSetting)(nil),                       // 77: header.CallSetting
	(*BlockedNumber)(nil),                     // 78: header.BlockedNumber
	(*GreetingAudio)(nil),                     // 79: header.GreetingAudio
	(*TicketType)(nil),                        // 80: header.TicketType
	(*Ticket)(nil),                            // 81: header.Ticket
	(*ListTicketRequest)(nil),                 // 82: header.ListTicketRequest
	(*TicketView)(nil),                        // 83: header.TicketView
	(*TicketTemplate)(nil),                    // 84: header.TicketTemplate
	(*SLAPolicy)(nil),                         // 85: header.SLAPolicy
	(*Rating)(nil),                            // 86: header.Rating
	(*Template)(nil),                          // 87: header.Template
	(*SearchTemplate)(nil),                    // 88: header.SearchTemplate
	(*ConversationModal)(nil),                 // 89: header.ConversationModal
	(*ConversationModalPickRequest)(nil),      // 90: header.ConversationModalPickRequest
	(*Tag)(nil),                               // 91: header.Tag
	(*noti5.Setting)(nil),                     // 92: noti5.Setting
	(*PushNoti)(nil),                          // 93: header.PushNoti
	(*noti5.Token)(nil),                       // 94: noti5.Token
	(*account.SearchSubRequest)(nil),          // 95: account.SearchSubRequest
	(*payment.PurchaseRequest)(nil),           // 96: payment.PurchaseRequest
	(*payment.Subscription)(nil),              // 97: payment.Subscription
	(*payment.PayRequest)(nil),                // 98: payment.PayRequest
	(*payment.Invoice)(nil),                   // 99: payment.Invoice
	(*payment.ListInvoiceRequest)(nil),        // 100: payment.ListInvoiceRequest
	(*payment.ListCommentsRequest)(nil),       // 101: payment.ListCommentsRequest
	(*payment.Comment)(nil),                   // 102: payment.Comment
	(*ExchangeRate)(nil),                      // 103: header.ExchangeRate
	(*payment.ListLogsRequest)(nil),           // 104: payment.ListLogsRequest
	(*PsMessage)(nil),                         // 105: header.PsMessage
	(*RealtimeSubscription)(nil),              // 106: header.RealtimeSubscription
	(*FbFanpageSetting)(nil),                  // 107: header.FbFanpageSetting
	(*FacebookPost)(nil),                      // 108: header.FacebookPost
	(*ZaloUserRequest)(nil),                   // 109: header.ZaloUserRequest
	(*ZnsRequest)(nil),                        // 110: header.ZnsRequest
	(*BusinessEmailAddress)(nil),              // 111: header.BusinessEmailAddress
	(*LinkData)(nil),                          // 112: header.LinkData
	(*BouncedEmail)(nil),                      // 113: header.BouncedEmail
	(*BlockedEmail)(nil),                      // 114: header.BlockedEmail
	(*WidgetSetting)(nil),                     // 115: header.WidgetSetting
	(*Impression)(nil),                        // 116: header.Impression
	(*Conversion)(nil),                        // 117: header.Conversion
	(*UserCampaignStatus)(nil),                // 118: header.UserCampaignStatus
	(*ReportCampaignRequest)(nil),             // 119: header.ReportCampaignRequest
	(*ConversionRequest)(nil),                 // 120: header.ConversionRequest
	(*UploadedImage)(nil),                     // 121: header.UploadedImage
	(*WebPlugin)(nil),                         // 122: header.WebPlugin
	(*ReportWebPluginRequest)(nil),            // 123: header.ReportWebPluginRequest
	(*BotsRequest)(nil),                       // 124: header.BotsRequest
	(*Bot)(nil),                               // 125: header.Bot
	(*BotRunRequest)(nil),                     // 126: header.BotRunRequest
	(*BotrunMetricsRequest)(nil),              // 127: header.BotrunMetricsRequest
	(*ActionrunMetricsRequest)(nil),           // 128: header.ActionrunMetricsRequest
	(*ListObjectsRequest)(nil),                // 129: header.ListObjectsRequest
	(*ReportBotRequest)(nil),                  // 130: header.ReportBotRequest
	(*Webhook)(nil),                           // 131: header.Webhook
	(*RecentIndexDeliveryRequest)(nil),        // 132: header.RecentIndexDeliveryRequest
	(*DeliveryRequest)(nil),                   // 133: header.DeliveryRequest
	(*Notification)(nil),                      // 134: header.Notification
	(*ListNotiRequest)(nil),                   // 135: header.ListNotiRequest
	(*ProductsRequest)(nil),                   // 136: header.ProductsRequest
	(*ImportProductRequest)(nil),              // 137: header.ImportProductRequest
	(*ProductCollection)(nil),                 // 138: header.ProductCollection
	(*ProductFeed)(nil),                       // 139: header.ProductFeed
	(*OrdersRequest)(nil),                     // 140: header.OrdersRequest
	(*CountOrdersRequest)(nil),                // 141: header.CountOrdersRequest
	(*Orders)(nil),                            // 142: header.Orders
	(*Bill)(nil),                              // 143: header.Bill
	(*Key)(nil),                               // 144: header.Key
	(*BillsRequest)(nil),                      // 145: header.BillsRequest
	(*DownloadOrderRequest)(nil),              // 146: header.DownloadOrderRequest
	(*AuthorizeShopeeRequest)(nil),            // 147: header.AuthorizeShopeeRequest
	(*ShopeeSyncProductRequest)(nil),          // 148: header.ShopeeSyncProductRequest
	(*GHTKOrder)(nil),                         // 149: header.GHTKOrder
	(*GHNOrder2)(nil),                         // 150: header.GHNOrder2
	(*ShippingInfo)(nil),                      // 151: header.ShippingInfo
	(*Pipeline)(nil),                          // 152: header.Pipeline
	(*PipelineStage)(nil),                     // 153: header.PipelineStage
	(*OrderMetricsRequest)(nil),               // 154: header.OrderMetricsRequest
	(*TasksRequest)(nil),                      // 155: header.TasksRequest
	(*TTSVoiceSelection)(nil),                 // 156: header.TTSVoiceSelection
	(*Campaign)(nil),                          // 157: header.Campaign
	(*CampaignSendLogRequest)(nil),            // 158: header.CampaignSendLogRequest
	(*ListOutboundCallRequest)(nil),           // 159: header.ListOutboundCallRequest
	(*OutboundCallEntry)(nil),                 // 160: header.OutboundCallEntry
	(*ImportOutboundCallEntryRequest)(nil),    // 161: header.ImportOutboundCallEntryRequest
	(*OutboundCallReportRequest)(nil),         // 162: header.OutboundCallReportRequest
	(*CreditSpendEntry)(nil),                  // 163: header.CreditSpendEntry
	(*CreditSpendReportRequest)(nil),          // 164: header.CreditSpendReportRequest
	(*CreditSpendLogRequest)(nil),             // 165: header.CreditSpendLogRequest
	(*Credit)(nil),                            // 166: header.Credit
	(*Form)(nil),                              // 167: header.Form
	(*FormReportRequest)(nil),                 // 168: header.FormReportRequest
	(*ListFormSubmissionRequest)(nil),         // 169: header.ListFormSubmissionRequest
	(*SchedulerTask)(nil),                     // 170: header.SchedulerTask
	(*KnowledgeBase)(nil),                     // 171: header.KnowledgeBase
	(*Article)(nil),                           // 172: header.Article
	(*ListArticleRequest)(nil),                // 173: header.ListArticleRequest
	(*ArticleCategory)(nil),                   // 174: header.ArticleCategory
	(*GoogleLocationSettings)(nil),            // 175: header.GoogleLocationSettings
	(*RateLimitSyncResponse)(nil),             // 176: header.RateLimitSyncResponse
	(*DocSearchResponse)(nil),                 // 177: header.DocSearchResponse
	(*ConversationMetrics)(nil),               // 178: header.ConversationMetrics
	(*ConvoReportResponse)(nil),               // 179: header.ConvoReportResponse
	(*Conversations)(nil),                     // 180: header.Conversations
	(*CallMetrics)(nil),                       // 181: header.CallMetrics
	(*AgentMetrics)(nil),                      // 182: header.AgentMetrics
	(*AddressAutocompleteResponses)(nil),      // 183: header.AddressAutocompleteResponses
	(*Addresses)(nil),                         // 184: header.Addresses
	(*account.ReferrerPayoutBills)(nil),       // 185: account.ReferrerPayoutBills
	(*account.ReferredCustomers)(nil),         // 186: account.ReferredCustomers
	(*account.ReferredInvoices)(nil),          // 187: account.ReferredInvoices
	(*account.ReferrerAgents)(nil),            // 188: account.ReferrerAgents
	(*Response)(nil),                          // 189: header.Response
	(*AgentGroups)(nil),                       // 190: header.AgentGroups
	(*account.BusinessHours)(nil),             // 191: account.BusinessHours
	(*LoginSessions)(nil),                     // 192: header.LoginSessions
	(*Lang)(nil),                              // 193: header.Lang
	(*Currency)(nil),                          // 194: header.Currency
	(*ShippingPolicies)(nil),                  // 195: header.ShippingPolicies
	(*CancellationCodes)(nil),                 // 196: header.CancellationCodes
	(*PaymentMethods)(nil),                    // 197: header.PaymentMethods
	(*IntegratedShippings)(nil),               // 198: header.IntegratedShippings
	(*account.Presences)(nil),                 // 199: account.Presences
	(*ReportResponse)(nil),                    // 200: header.ReportResponse
	(*payment.Bills)(nil),                     // 201: payment.Bills
	(*TryUpdateUserResult)(nil),               // 202: header.TryUpdateUserResult
	(*UserViews)(nil),                         // 203: header.UserViews
	(*Segments)(nil),                          // 204: header.Segments
	(*Labels)(nil),                            // 205: header.Labels
	(*ShippingAddresses)(nil),                 // 206: header.ShippingAddresses
	(*SuggestLeadFieldResponse)(nil),          // 207: header.SuggestLeadFieldResponse
	(*ImportLeadResponse)(nil),                // 208: header.ImportLeadResponse
	(*CountTouchpointResponse)(nil),           // 209: header.CountTouchpointResponse
	(*UserReportResponse)(nil),                // 210: header.UserReportResponse
	(*PresencesResponse)(nil),                 // 211: header.PresencesResponse
	(*Notes)(nil),                             // 212: header.Notes
	(*AttributeDefinitions)(nil),              // 213: header.AttributeDefinitions
	(*RouteResult)(nil),                       // 214: header.RouteResult
	(*Integrations)(nil),                      // 215: header.Integrations
	(*Route)(nil),                             // 216: header.Route
	(*ConversationAutomations)(nil),           // 217: header.ConversationAutomations
	(*PhoneDevices)(nil),                      // 218: header.PhoneDevices
	(*CallSettings)(nil),                      // 219: header.CallSettings
	(*BlockedNumbers)(nil),                    // 220: header.BlockedNumbers
	(*GreetingAudios)(nil),                    // 221: header.GreetingAudios
	(*RecentCallRecords)(nil),                 // 222: header.RecentCallRecords
	(*Templates)(nil),                         // 223: header.Templates
	(*ConversationModals)(nil),                // 224: header.ConversationModals
	(*ConversationModalPicked)(nil),           // 225: header.ConversationModalPicked
	(*Tags)(nil),                              // 226: header.Tags
	(*AccSubs)(nil),                           // 227: header.AccSubs
	(*AccSub)(nil),                            // 228: header.AccSub
	(*payment.Bill)(nil),                      // 229: payment.Bill
	(*payment.Invoices)(nil),                  // 230: payment.Invoices
	(*payment.Comments)(nil),                  // 231: payment.Comments
	(*payment.String)(nil),                    // 232: payment.String
	(*payment.Logs)(nil),                      // 233: payment.Logs
	(*PollResult)(nil),                        // 234: header.PollResult
	(*FbFanpageSettings)(nil),                 // 235: header.FbFanpageSettings
	(*FacebookPosts)(nil),                     // 236: header.FacebookPosts
	(*zalokon.ZnsTemplates)(nil),              // 237: zalokon.ZnsTemplates
	(*EmailSenderVerificationResult)(nil),     // 238: header.EmailSenderVerificationResult
	(*BusinessEmailAddresses)(nil),            // 239: header.BusinessEmailAddresses
	(*WidgetUserSetting)(nil),                 // 240: header.WidgetUserSetting
	(*AccountWeb)(nil),                        // 241: header.AccountWeb
	(*ReportCampaignResponse)(nil),            // 242: header.ReportCampaignResponse
	(*Conversions)(nil),                       // 243: header.Conversions
	(*ConversionsExported)(nil),               // 244: header.ConversionsExported
	(*UploadedImages)(nil),                    // 245: header.UploadedImages
	(*WebPlugins)(nil),                        // 246: header.WebPlugins
	(*ReportWebPluginResponse)(nil),           // 247: header.ReportWebPluginResponse
	(*NotifProfiles)(nil),                     // 248: header.NotifProfiles
	(*Urls)(nil),                              // 249: header.Urls
	(*Bots)(nil),                              // 250: header.Bots
	(*BotrunMetrics)(nil),                     // 251: header.BotrunMetrics
	(*ActionrunMetrics)(nil),                  // 252: header.ActionrunMetrics
	(*ListObjectsResponse)(nil),               // 253: header.ListObjectsResponse
	(*ReportBotResponse)(nil),                 // 254: header.ReportBotResponse
	(*WebhookTestResult)(nil),                 // 255: header.WebhookTestResult
	(*Webhooks)(nil),                          // 256: header.Webhooks
	(*WebhookDeliveries)(nil),                 // 257: header.WebhookDeliveries
	(*WebhookDelivery)(nil),                   // 258: header.WebhookDelivery
	(*Notifications)(nil),                     // 259: header.Notifications
	(*Products)(nil),                          // 260: header.Products
	(*ImportProductResponse)(nil),             // 261: header.ImportProductResponse
	(*ProductCollections)(nil),                // 262: header.ProductCollections
	(*ProductFeeds)(nil),                      // 263: header.ProductFeeds
	(*ProductCategories)(nil),                 // 264: header.ProductCategories
	(*CountOrdersResponse)(nil),               // 265: header.CountOrdersResponse
	(*OrderHistoryEntries)(nil),               // 266: header.OrderHistoryEntries
	(*Bills)(nil),                             // 267: header.Bills
	(*File)(nil),                              // 268: header.File
	(*ShopeeShop)(nil),                        // 269: header.ShopeeShop
	(*ShopeeSyncProductResponse)(nil),         // 270: header.ShopeeSyncProductResponse
	(*Pipelines)(nil),                         // 271: header.Pipelines
	(*Tasks)(nil),                             // 272: header.Tasks
	(*TaskHistoryEntries)(nil),                // 273: header.TaskHistoryEntries
	(*Campaigns)(nil),                         // 274: header.Campaigns
	(*CampaignSendLog)(nil),                   // 275: header.CampaignSendLog
	(*BroadcastCampaignMetrics)(nil),          // 276: header.BroadcastCampaignMetrics
	(*OutboundCallEntries)(nil),               // 277: header.OutboundCallEntries
	(*ImportOutboundCallEntryResponse)(nil),   // 278: header.ImportOutboundCallEntryResponse
	(*OutboundCallReportResponse)(nil),        // 279: header.OutboundCallReportResponse
	(*TrySpendCreditResponse)(nil),            // 280: header.TrySpendCreditResponse
	(*CreditSpendReportResponse)(nil),         // 281: header.CreditSpendReportResponse
	(*CreditSpendEntries)(nil),                // 282: header.CreditSpendEntries
	(*Forms)(nil),                             // 283: header.Forms
	(*FormReportResponse)(nil),                // 284: header.FormReportResponse
	(*FormSubmissions)(nil),                   // 285: header.FormSubmissions
}
var file_service_proto_depIdxs = []int32{
	0,   // 0: header.GooglekonService.SendEventToGoogle:input_type -> header.Events
	1,   // 1: header.GooglekonService.ReadGoogleLocationSetting:input_type -> header.Id
	2,   // 2: header.GooglekonService.UpdateGoogleLocationSetting:input_type -> header.GoogleLocationSetting
	1,   // 3: header.GooglekonService.ListGoogleLocationSettings:input_type -> header.Id
	3,   // 4: header.KafkaConsumer.Consume:input_type -> header.KafkaMessage
	4,   // 5: header.RateLimit.SyncRateLimit:input_type -> header.RateLimitSyncRequest
	5,   // 6: header.DocSearch.IndexConvo:input_type -> header.DocIndexRequest
	6,   // 7: header.DocSearch.SearchConvos:input_type -> header.DocSearchRequest
	5,   // 8: header.DocSearch.Index:input_type -> header.DocIndexRequest
	5,   // 9: header.DocSearch.IndexStatic:input_type -> header.DocIndexRequest
	6,   // 10: header.DocSearch.Search:input_type -> header.DocSearchRequest
	6,   // 11: header.DocSearch.SearchIds:input_type -> header.DocSearchRequest
	7,   // 12: header.DocSearch.ReportConversation:input_type -> header.ConversationMetricsRequest
	8,   // 13: header.DocSearch.Report:input_type -> header.ConvoReportRequest
	8,   // 14: header.DocSearch.ListIds:input_type -> header.ConvoReportRequest
	7,   // 15: header.DocSearch.ListConversationIds:input_type -> header.ConversationMetricsRequest
	9,   // 16: header.DocSearch.ReportCall:input_type -> header.CallMetricsRequest
	9,   // 17: header.DocSearch.ListCallIds:input_type -> header.CallMetricsRequest
	10,  // 18: header.DocSearch.ReportAgent:input_type -> header.AgentMetricsRequest
	11,  // 19: header.DocSearch.HealthCheckReport:input_type -> header.Empty
	11,  // 20: header.DocSearch.HealthCheckIndex:input_type -> header.Empty
	12,  // 21: header.NumberRegistry.Compact:input_type -> header.String
	13,  // 22: header.NumberRegistry.Uncompact:input_type -> header.Number
	14,  // 23: header.NumberRegistry.CompactM:input_type -> header.StrNumM
	12,  // 24: header.NumberRegistry.Shorten:input_type -> header.String
	13,  // 25: header.NumberRegistry.Lookup:input_type -> header.Number
	1,   // 26: header.NumberRegistry.NewID2:input_type -> header.Id
	15,  // 27: header.Map.Predict:input_type -> header.AddressAutocompleteRequest
	1,   // 28: header.Map.LookupAddress:input_type -> header.Id
	15,  // 29: header.Map.PredictAddress:input_type -> header.AddressAutocompleteRequest
	1,   // 30: header.Map.ListDistricts:input_type -> header.Id
	1,   // 31: header.Map.ListProvinces:input_type -> header.Id
	1,   // 32: header.Map.ListWards:input_type -> header.Id
	1,   // 33: header.Map.ListStreets:input_type -> header.Id
	16,  // 34: header.Map.ListAddresses:input_type -> header.Ids
	1,   // 35: header.Map.ReadAddress:input_type -> header.Id
	1,   // 36: header.RefererMgr.ListReferrerPayouts:input_type -> header.Id
	17,  // 37: header.RefererMgr.PayReferrer:input_type -> account.ReferrerPayoutBill
	1,   // 38: header.RefererMgr.ListReferredCustomers:input_type -> header.Id
	1,   // 39: header.RefererMgr.ListReferredInvoices:input_type -> header.Id
	1,   // 40: header.RefererMgr.GetReferrerAgent:input_type -> header.Id
	1,   // 41: header.RefererMgr.ListPayoutReferrerAgents:input_type -> header.Id
	1,   // 42: header.RefererMgr.RefererAccount:input_type -> header.Id
	18,  // 43: header.RefererMgr.UpdateReferrerAgent:input_type -> account.ReferrerAgent
	19,  // 44: header.AccountMgr.CreateGroup:input_type -> header.AgentGroup
	19,  // 45: header.AccountMgr.UpdateGroup:input_type -> header.AgentGroup
	1,   // 46: header.AccountMgr.GetGroup:input_type -> header.Id
	1,   // 47: header.AccountMgr.RequestPassword:input_type -> header.Id
	20,  // 48: header.AccountMgr.UpdatePassword:input_type -> header.NewPassword
	21,  // 49: header.AccountMgr.UpdateAgent:input_type -> account.Agent
	1,   // 50: header.AccountMgr.DeleteAgent:input_type -> header.Id
	1,   // 51: header.AccountMgr.DeleteAccount:input_type -> header.Id
	22,  // 52: header.AccountMgr.SubizUpdateAccount:input_type -> account.Account
	21,  // 53: header.AccountMgr.RequestChangeEmail:input_type -> account.Agent
	23,  // 54: header.AccountMgr.ConfirmChangeEmail:input_type -> account.Token
	20,  // 55: header.AccountMgr.AcceptInvitation:input_type -> header.NewPassword
	23,  // 56: header.AccountMgr.GetInvitation:input_type -> account.Token
	21,  // 57: header.AccountMgr.InviteAgent:input_type -> account.Agent
	1,   // 58: header.AccountMgr.GetAgent:input_type -> header.Id
	1,   // 59: header.AccountMgr.LookupAgentById:input_type -> header.Id
	23,  // 60: header.AccountMgr.ConfirmAccount:input_type -> account.Token
	1,   // 61: header.AccountMgr.GetAccount:input_type -> header.Id
	22,  // 62: header.AccountMgr.UpdateAccount:input_type -> account.Account
	24,  // 63: header.AccountMgr.CreateAccount:input_type -> header.CreateAccountRequest
	1,   // 64: header.AccountMgr.ListAgents:input_type -> header.Id
	1,   // 65: header.AccountMgr.DeleteGroup:input_type -> header.Id
	1,   // 66: header.AccountMgr.ListGroups:input_type -> header.Id
	21,  // 67: header.AccountMgr.ChangeEmail:input_type -> account.Agent
	25,  // 68: header.AccountMgr.SyncPublicHolidays:input_type -> account.SyncPublicHolidaysRequest
	1,   // 69: header.AccountMgr.TransferOwner:input_type -> header.Id
	26,  // 70: header.AccountMgr.CheckLoginSession:input_type -> header.LoginSession
	1,   // 71: header.AccountMgr.CreateLoginSession:input_type -> header.Id
	1,   // 72: header.AccountMgr.ListLoginSessions:input_type -> header.Id
	1,   // 73: header.AccountMgr.ListApiKeys:input_type -> header.Id
	1,   // 74: header.AccountMgr.LogoutSession:input_type -> header.Id
	26,  // 75: header.AccountMgr.CreateApiKey:input_type -> header.LoginSession
	1,   // 76: header.AccountMgr.GetLanguage:input_type -> header.Id
	27,  // 77: header.AccountMgr.UpdateLanguage:input_type -> header.LangMessage
	1,   // 78: header.AccountMgr.GetShopSetting:input_type -> header.Id
	28,  // 79: header.AccountMgr.UpdateShopSetting:input_type -> header.ShopSetting
	1,   // 80: header.AccountMgr.ReadCurrency:input_type -> header.Id
	1,   // 81: header.AccountMgr.AutoSyncCurrency:input_type -> header.Id
	1,   // 82: header.AccountMgr.ListShopAddresses:input_type -> header.Id
	29,  // 83: header.AccountMgr.CreateShopAddress:input_type -> header.Address
	29,  // 84: header.AccountMgr.UpdateShopAddress:input_type -> header.Address
	1,   // 85: header.AccountMgr.DeleteShopAddress:input_type -> header.Id
	1,   // 86: header.AccountMgr.ListTaxes:input_type -> header.Id
	30,  // 87: header.AccountMgr.CreateTax:input_type -> header.Tax
	30,  // 88: header.AccountMgr.UpdateTax:input_type -> header.Tax
	1,   // 89: header.AccountMgr.DeleteTax:input_type -> header.Id
	31,  // 90: header.AccountMgr.CheckShippingPolicy:input_type -> header.Order
	1,   // 91: header.AccountMgr.ListShippingPolicies:input_type -> header.Id
	32,  // 92: header.AccountMgr.CreateShippingPolicy:input_type -> header.ShippingPolicy
	32,  // 93: header.AccountMgr.UpdateShippingPolicy:input_type -> header.ShippingPolicy
	1,   // 94: header.AccountMgr.DeleteShippingPolicy:input_type -> header.Id
	33,  // 95: header.AccountMgr.CreateCancellationCode:input_type -> header.CancellationCode
	1,   // 96: header.AccountMgr.ListCancellationCodes:input_type -> header.Id
	33,  // 97: header.AccountMgr.UpdateCancellationCode:input_type -> header.CancellationCode
	1,   // 98: header.AccountMgr.MakeDefaultTax:input_type -> header.Id
	1,   // 99: header.AccountMgr.ListPaymentMethods:input_type -> header.Id
	34,  // 100: header.AccountMgr.CreatePaymentMethod:input_type -> header.PaymentMethod
	34,  // 101: header.AccountMgr.UpdatePaymentMethod:input_type -> header.PaymentMethod
	1,   // 102: header.AccountMgr.DeletePaymentMethod:input_type -> header.Id
	1,   // 103: header.AccountMgr.MakeDefaultPaymentMethod:input_type -> header.Id
	16,  // 104: header.AccountMgr.ListIntegratedShippingProviders:input_type -> header.Ids
	35,  // 105: header.AccountMgr.DeintegrateShippingProvider:input_type -> header.IntegratedShipping
	35,  // 106: header.AccountMgr.IntegrateShippingProvider:input_type -> header.IntegratedShipping
	35,  // 107: header.AccountMgr.SendGHNAffiliateOTP:input_type -> header.IntegratedShipping
	35,  // 108: header.AccountMgr.EnterGHNAffiliateOTP:input_type -> header.IntegratedShipping
	36,  // 109: header.AccountMgr.UpdateAgentPresence:input_type -> account.Presence
	1,   // 110: header.AccountMgr.ListAgentPresences:input_type -> header.Id
	37,  // 111: header.AccountMgr.ReportAvailibilities:input_type -> header.AvailibilityReportRequest
	1,   // 112: header.AccountMgr.NewID:input_type -> header.Id
	1,   // 113: header.AccountMgr.LockLogin:input_type -> header.Id
	1,   // 114: header.AccountMgr.UnlockLogin:input_type -> header.Id
	1,   // 115: header.AccountMgr.ListBills:input_type -> header.Id
	38,  // 116: header.UserMgr.MergeUser:input_type -> header.Users
	1,   // 117: header.UserMgr.DetachUser:input_type -> header.Id
	39,  // 118: header.UserMgr.CreateUser2:input_type -> header.User
	39,  // 119: header.UserMgr.UpdateUser:input_type -> header.User
	39,  // 120: header.UserMgr.TryUpdateUser:input_type -> header.User
	1,   // 121: header.UserMgr.RemoveUser:input_type -> header.Id
	1,   // 122: header.UserMgr.RestoreUser:input_type -> header.Id
	1,   // 123: header.UserMgr.ReadUser:input_type -> header.Id
	1,   // 124: header.UserMgr.ReadOrCreateUserByContactProfile:input_type -> header.Id
	16,  // 125: header.UserMgr.MatchUsers:input_type -> header.Ids
	1,   // 126: header.UserMgr.BanUser:input_type -> header.Id
	1,   // 127: header.UserMgr.UnbanUser:input_type -> header.Id
	1,   // 128: header.UserMgr.LookupByPhone:input_type -> header.Id
	40,  // 129: header.UserMgr.UpdateView:input_type -> header.UserView
	40,  // 130: header.UserMgr.CreateView:input_type -> header.UserView
	1,   // 131: header.UserMgr.DeleteView:input_type -> header.Id
	1,   // 132: header.UserMgr.GetView:input_type -> header.Id
	1,   // 133: header.UserMgr.ListViews:input_type -> header.Id
	41,  // 134: header.UserMgr.UpdateSegment:input_type -> header.Segment
	41,  // 135: header.UserMgr.CreateSegment:input_type -> header.Segment
	1,   // 136: header.UserMgr.DeleteSegment:input_type -> header.Id
	1,   // 137: header.UserMgr.GetSegment:input_type -> header.Id
	1,   // 138: header.UserMgr.ListSegments:input_type -> header.Id
	42,  // 139: header.UserMgr.AddToSegment:input_type -> header.SegmentUsers
	42,  // 140: header.UserMgr.RemoveFromSegment:input_type -> header.SegmentUsers
	43,  // 141: header.UserMgr.UpsertLabel:input_type -> header.Label
	1,   // 142: header.UserMgr.DeleteLabel:input_type -> header.Id
	1,   // 143: header.UserMgr.ListLabels:input_type -> header.Id
	1,   // 144: header.UserMgr.GetLabel:input_type -> header.Id
	44,  // 145: header.UserMgr.AddLeadOwner:input_type -> header.UserRequest
	44,  // 146: header.UserMgr.RemoveLeadOwner:input_type -> header.UserRequest
	44,  // 147: header.UserMgr.AddUserLabel:input_type -> header.UserRequest
	44,  // 148: header.UserMgr.RemoveUserLabel:input_type -> header.UserRequest
	44,  // 149: header.UserMgr.AddLeadConversionBy:input_type -> header.UserRequest
	29,  // 150: header.UserMgr.CreateShippingAddress:input_type -> header.Address
	29,  // 151: header.UserMgr.UpdateShippingAddress:input_type -> header.Address
	29,  // 152: header.UserMgr.RemoveShippingAddress:input_type -> header.Address
	1,   // 153: header.UserMgr.ListShippingAddress:input_type -> header.Id
	29,  // 154: header.UserMgr.MakeDefaultShippingAddress:input_type -> header.Address
	40,  // 155: header.UserMgr.ListLeads:input_type -> header.UserView
	45,  // 156: header.UserMgr.SuggestLeadField:input_type -> header.SuggestLeadFieldRequest
	46,  // 157: header.UserMgr.LinkProductUrl:input_type -> header.Product
	47,  // 158: header.UserMgr.ListUserEvents:input_type -> header.ListUserEventsRequest
	48,  // 159: header.UserMgr.CreateUserEvent:input_type -> header.Event
	49,  // 160: header.UserMgr.FillDevice:input_type -> common.Device
	50,  // 161: header.UserMgr.ImportLead:input_type -> header.ImportLeadRequest
	51,  // 162: header.UserMgr.LinkTask:input_type -> header.Task
	52,  // 163: header.UserMgr.CountUserProfiles:input_type -> header.UsersRequest
	52,  // 164: header.UserMgr.ListUserIds:input_type -> header.UsersRequest
	52,  // 165: header.UserMgr.ListUserIdWithPhones:input_type -> header.UsersRequest
	6,   // 166: header.UserMgr.SearchUsers:input_type -> header.DocSearchRequest
	53,  // 167: header.UserMgr.ReportUser:input_type -> header.UserReportRequest
	54,  // 168: header.UserMgr.FetchLiveUsers:input_type -> header.LiveUserView
	1,   // 169: header.UserMgr.StopLiveUsers:input_type -> header.Id
	45,  // 170: header.UserMgr.SuggestLiveFields:input_type -> header.SuggestLeadFieldRequest
	55,  // 171: header.UserMgr.Presences:input_type -> header.PresencesRequest
	56,  // 172: header.UserMgr.UpdateSegmentMember:input_type -> header.ResourceGroupMember
	56,  // 173: header.UserMgr.RemoveSegmentMember:input_type -> header.ResourceGroupMember
	57,  // 174: header.NoteMgr.ListNotes:input_type -> header.ListNotesRequest
	58,  // 175: header.NoteMgr.AddNote:input_type -> header.Note
	58,  // 176: header.NoteMgr.UpdateNote:input_type -> header.Note
	59,  // 177: header.NoteMgr.DeleteNote:input_type -> header.DeleteNoteRequest
	11,  // 178: header.AttributeMgr.ListAttributeDefinitions:input_type -> header.Empty
	60,  // 179: header.AttributeMgr.CreateAttributeDefinition:input_type -> header.AttributeDefinition
	60,  // 180: header.AttributeMgr.UpdateAttributeDefinition:input_type -> header.AttributeDefinition
	1,   // 181: header.AutomationMgr.ListWorkflows:input_type -> header.Id
	61,  // 182: header.AutomationMgr.UpdateWorkflow:input_type -> header.Automation
	61,  // 183: header.AutomationMgr.CreateWorkflow:input_type -> header.Automation
	1,   // 184: header.AutomationMgr.DeleteWorkflow:input_type -> header.Id
	1,   // 185: header.AutomationMgr.ReadWorkflow:input_type -> header.Id
	62,  // 186: header.AutomationMgr.ListWorkflowLog:input_type -> header.WorkflowLogRequest
	63,  // 187: header.ConversationMgr.AssignRule:input_type -> header.AssignRequest
	48,  // 188: header.ConversationMgr.PongMessage:input_type -> header.Event
	64,  // 189: header.ConversationMgr.StartConversation:input_type -> header.StartRequest
	1,   // 190: header.ConversationMgr.EndConversation:input_type -> header.Id
	1,   // 191: header.ConversationMgr.GetConversation:input_type -> header.Id
	65,  // 192: header.ConversationMgr.ListConversations:input_type -> header.ListConversationsRequest
	65,  // 193: header.ConversationMgr.ListConversations2:input_type -> header.ListConversationsRequest
	16,  // 194: header.ConversationMgr.MatchConversations:input_type -> header.Ids
	66,  // 195: header.ConversationMgr.TagConversation:input_type -> header.TagRequest
	66,  // 196: header.ConversationMgr.UntagConversation:input_type -> header.TagRequest
	67,  // 197: header.ConversationMgr.JoinConversation:input_type -> header.ConversationMember
	67,  // 198: header.ConversationMgr.LeftConversation:input_type -> header.ConversationMember
	68,  // 199: header.ConversationMgr.UpdateConversationInfo:input_type -> header.Conversation
	68,  // 200: header.ConversationMgr.UpdateMuteConversation:input_type -> header.Conversation
	67,  // 201: header.ConversationMgr.UpdateConversationMember:input_type -> header.ConversationMember
	68,  // 202: header.ConversationMgr.UnwatchConversation:input_type -> header.Conversation
	68,  // 203: header.ConversationMgr.UnhiddenConversation:input_type -> header.Conversation
	69,  // 204: header.ConversationMgr.UpdateEndchatSetting:input_type -> header.EndchatSetting
	1,   // 205: header.ConversationMgr.GetEndchatSetting:input_type -> header.Id
	70,  // 206: header.ConversationMgr.TerminateBot:input_type -> header.BotTerminated
	48,  // 207: header.ConversationMgr.SendMessage:input_type -> header.Event
	71,  // 208: header.ConversationMgr.SendOmniChannelMessage:input_type -> header.SendOmniChannelMessageRequest
	48,  // 209: header.ConversationMgr.UpdateMessage:input_type -> header.Event
	48,  // 210: header.ConversationMgr.PinMessage:input_type -> header.Event
	48,  // 211: header.ConversationMgr.UnpinMessage:input_type -> header.Event
	72,  // 212: header.ConversationMgr.ListEvents:input_type -> header.ListConversationEventsRequest
	1,   // 213: header.ConversationMgr.Deintegrate:input_type -> header.Id
	1,   // 214: header.ConversationMgr.ListIntegrations:input_type -> header.Id
	73,  // 215: header.ConversationMgr.Integrate:input_type -> header.Integration
	1,   // 216: header.ConversationMgr.GetIntegration:input_type -> header.Id
	56,  // 217: header.ConversationMgr.UpdateIntegrationMember:input_type -> header.ResourceGroupMember
	56,  // 218: header.ConversationMgr.RemoveIntegrationMember:input_type -> header.ResourceGroupMember
	74,  // 219: header.ConversationMgr.UpdateRule:input_type -> header.Rule
	74,  // 220: header.ConversationMgr.CreateRule:input_type -> header.Rule
	1,   // 221: header.ConversationMgr.DeleteRule:input_type -> header.Id
	1,   // 222: header.ConversationMgr.ReadRule:input_type -> header.Id
	1,   // 223: header.ConversationMgr.ListRules:input_type -> header.Id
	1,   // 224: header.ConversationMgr.ListConversationAutomations:input_type -> header.Id
	75,  // 225: header.ConversationMgr.UpdateConversationAutomation:input_type -> header.ConversationAutomation
	1,   // 226: header.ConversationMgr.DeleteConversationAutomation:input_type -> header.Id
	1,   // 227: header.ConversationMgr.ReadConversationAutomation:input_type -> header.Id
	1,   // 228: header.ConversationMgr.ListPhoneDevices:input_type -> header.Id
	76,  // 229: header.ConversationMgr.CreatePhoneDevice:input_type -> header.PhoneDevice
	76,  // 230: header.ConversationMgr.UpdatePhoneDevice:input_type -> header.PhoneDevice
	1,   // 231: header.ConversationMgr.DeletePhoneDevice:input_type -> header.Id
	1,   // 232: header.ConversationMgr.ReadPhoneDevice:input_type -> header.Id
	1,   // 233: header.ConversationMgr.TestNumber:input_type -> header.Id
	73,  // 234: header.ConversationMgr.ActiveNumber:input_type -> header.Integration
	1,   // 235: header.ConversationMgr.ListCallSettings:input_type -> header.Id
	77,  // 236: header.ConversationMgr.UpdateCallSetting:input_type -> header.CallSetting
	78,  // 237: header.ConversationMgr.BlockNumber:input_type -> header.BlockedNumber
	1,   // 238: header.ConversationMgr.ListBlockedNumbers:input_type -> header.Id
	78,  // 239: header.ConversationMgr.UnblockNumber:input_type -> header.BlockedNumber
	1,   // 240: header.ConversationMgr.ListGreetingAudio:input_type -> header.Id
	79,  // 241: header.ConversationMgr.CreateGreetingAudio:input_type -> header.GreetingAudio
	79,  // 242: header.ConversationMgr.UpdateGreetingAudio:input_type -> header.GreetingAudio
	64,  // 243: header.ConversationMgr.OriginateCall:input_type -> header.StartRequest
	1,   // 244: header.ConversationMgr.ListMyRecentCalls:input_type -> header.Id
	48,  // 245: header.ConversationMgr.SaveMessage:input_type -> header.Event
	48,  // 246: header.ConversationMgr.ApplyMessage:input_type -> header.Event
	80,  // 247: header.TicketMgr.CreateTicketType:input_type -> header.TicketType
	80,  // 248: header.TicketMgr.UpdateTicketType:input_type -> header.TicketType
	1,   // 249: header.TicketMgr.ListTicketTypes:input_type -> header.Id
	1,   // 250: header.TicketMgr.GetTicketType:input_type -> header.Id
	1,   // 251: header.TicketMgr.DeleteTicketType:input_type -> header.Id
	81,  // 252: header.TicketMgr.CreateTicket:input_type -> header.Ticket
	81,  // 253: header.TicketMgr.UpdateTicket:input_type -> header.Ticket
	1,   // 254: header.TicketMgr.DeleteTicket:input_type -> header.Id
	1,   // 255: header.TicketMgr.RecoverTicket:input_type -> header.Id
	1,   // 256: header.TicketMgr.GetTicket:input_type -> header.Id
	82,  // 257: header.TicketMgr.ListTickets:input_type -> header.ListTicketRequest
	16,  // 258: header.TicketMgr.MatchTickets:input_type -> header.Ids
	83,  // 259: header.TicketMgr.CreateTicketView:input_type -> header.TicketView
	83,  // 260: header.TicketMgr.UpdateTicketView:input_type -> header.TicketView
	1,   // 261: header.TicketMgr.DeleteTicketView:input_type -> header.Id
	1,   // 262: header.TicketMgr.GetTicketView:input_type -> header.Id
	11,  // 263: header.TicketMgr.ListTicketViews:input_type -> header.Empty
	84,  // 264: header.TicketMgr.CreateTicketTemplate:input_type -> header.TicketTemplate
	84,  // 265: header.TicketMgr.UpdateTicketTemplate:input_type -> header.TicketTemplate
	1,   // 266: header.TicketMgr.DeleteTicketTemplate:input_type -> header.Id
	1,   // 267: header.TicketMgr.GetTicketTemplate:input_type -> header.Id
	11,  // 268: header.TicketMgr.ListTicketTemplates:input_type -> header.Empty
	48,  // 269: header.TicketMgr.PongTicketEvent:input_type -> header.Event
	66,  // 270: header.TicketMgr.TagTicket:input_type -> header.TagRequest
	66,  // 271: header.TicketMgr.UntagTicket:input_type -> header.TagRequest
	67,  // 272: header.TicketMgr.JoinTicket:input_type -> header.ConversationMember
	67,  // 273: header.TicketMgr.LeftTicket:input_type -> header.ConversationMember
	16,  // 274: header.TicketMgr.ReadTickets:input_type -> header.Ids
	16,  // 275: header.TicketMgr.UnreadTickets:input_type -> header.Ids
	16,  // 276: header.TicketMgr.SubscribedTickets:input_type -> header.Ids
	16,  // 277: header.TicketMgr.UnSubscribedTickets:input_type -> header.Ids
	48,  // 278: header.TicketMgr.SendTicketEvent:input_type -> header.Event
	72,  // 279: header.TicketMgr.ListTicketEvents:input_type -> header.ListConversationEventsRequest
	56,  // 280: header.TicketMgr.UpdateTicketTypeMember:input_type -> header.ResourceGroupMember
	56,  // 281: header.TicketMgr.RemoveTicketTypeMember:input_type -> header.ResourceGroupMember
	85,  // 282: header.TicketMgr.CreateSLAPolicy:input_type -> header.SLAPolicy
	85,  // 283: header.TicketMgr.UpdateSLAPolicy:input_type -> header.SLAPolicy
	1,   // 284: header.TicketMgr.DeleteSLAPolicy:input_type -> header.Id
	11,  // 285: header.TicketMgr.ListSLAPolicies:input_type -> header.Empty
	1,   // 286: header.TicketMgr.GetSLAPolicy:input_type -> header.Id
	1,   // 287: header.TicketMgr.ListTicketSLAViolations:input_type -> header.Id
	86,  // 288: header.TicketMgr.RateTicket:input_type -> header.Rating
	1,   // 289: header.TicketMgr.GetTicketRating:input_type -> header.Id
	74,  // 290: header.TicketMgr.UpdateTicketRule:input_type -> header.Rule
	74,  // 291: header.TicketMgr.CreateTicketRule:input_type -> header.Rule
	1,   // 292: header.TicketMgr.DeleteTicketRule:input_type -> header.Id
	1,   // 293: header.TicketMgr.ReadTicketRule:input_type -> header.Id
	1,   // 294: header.TicketMgr.ListTicketRules:input_type -> header.Id
	8,   // 295: header.TicketMgr.Report:input_type -> header.ConvoReportRequest
	1,   // 296: header.TicketMgr.GetTicketIdsByConvoId:input_type -> header.Id
	87,  // 297: header.TemplateMgr.CreateTemplate:input_type -> header.Template
	87,  // 298: header.TemplateMgr.UpdateTemplate:input_type -> header.Template
	1,   // 299: header.TemplateMgr.DeleteTemplate:input_type -> header.Id
	1,   // 300: header.TemplateMgr.GetTemplate:input_type -> header.Id
	88,  // 301: header.TemplateMgr.ListTemplates:input_type -> header.SearchTemplate
	1,   // 302: header.TemplateMgr.PickTemplate:input_type -> header.Id
	89,  // 303: header.TemplateMgr.CreateModal:input_type -> header.ConversationModal
	89,  // 304: header.TemplateMgr.UpdateModal:input_type -> header.ConversationModal
	1,   // 305: header.TemplateMgr.DeleteModal:input_type -> header.Id
	1,   // 306: header.TemplateMgr.GetModal:input_type -> header.Id
	1,   // 307: header.TemplateMgr.ListModals:input_type -> header.Id
	90,  // 308: header.TemplateMgr.PickModal:input_type -> header.ConversationModalPickRequest
	91,  // 309: header.TagMgr.CreateTag:input_type -> header.Tag
	91,  // 310: header.TagMgr.UpdateTag:input_type -> header.Tag
	1,   // 311: header.TagMgr.DeleteTag:input_type -> header.Id
	1,   // 312: header.TagMgr.ListTags:input_type -> header.Id
	1,   // 313: header.TagMgr.GetTag:input_type -> header.Id
	1,   // 314: header.Noti5Service.ReadNotificationSetting:input_type -> header.Id
	92,  // 315: header.Noti5Service.UpdateNotificationSetting:input_type -> noti5.Setting
	93,  // 316: header.Noti5Service.Noti:input_type -> header.PushNoti
	94,  // 317: header.Noti5Service.AddToken:input_type -> noti5.Token
	94,  // 318: header.Noti5Service.RemoveToken:input_type -> noti5.Token
	94,  // 319: header.Noti5Service.CheckTokenExists:input_type -> noti5.Token
	95,  // 320: header.PaymentMgr.SearchSub:input_type -> account.SearchSubRequest
	1,   // 321: header.PaymentMgr.GetSub:input_type -> header.Id
	96,  // 322: header.PaymentMgr.Purchase:input_type -> payment.PurchaseRequest
	97,  // 323: header.PaymentMgr.UpdateSubscription:input_type -> payment.Subscription
	1,   // 324: header.PaymentMgr.GetSubscription:input_type -> header.Id
	98,  // 325: header.PaymentMgr.Pay:input_type -> payment.PayRequest
	99,  // 326: header.PaymentMgr.CreateInvoice:input_type -> payment.Invoice
	99,  // 327: header.PaymentMgr.UpdateInvoice:input_type -> payment.Invoice
	100, // 328: header.PaymentMgr.FilterInvoices:input_type -> payment.ListInvoiceRequest
	97,  // 329: header.PaymentMgr.DraftInvoice:input_type -> payment.Subscription
	101, // 330: header.PaymentMgr.ListComments:input_type -> payment.ListCommentsRequest
	102, // 331: header.PaymentMgr.AddComment:input_type -> payment.Comment
	1,   // 332: header.PaymentMgr.ExportInvoice:input_type -> header.Id
	99,  // 333: header.PaymentMgr.ConvertInvoiceToHtml:input_type -> payment.Invoice
	103, // 334: header.PaymentMgr.GetExchangeRate:input_type -> header.ExchangeRate
	98,  // 335: header.PaymentMgr.TransferMoney:input_type -> payment.PayRequest
	104, // 336: header.PaymentMgr.ListLogs:input_type -> payment.ListLogsRequest
	105, // 337: header.Pubsub.Fire:input_type -> header.PsMessage
	105, // 338: header.Pubsub.IsSubscribed:input_type -> header.PsMessage
	106, // 339: header.Pubsub.Poll:input_type -> header.RealtimeSubscription
	106, // 340: header.Pubsub.Subscribe:input_type -> header.RealtimeSubscription
	1,   // 341: header.FabikonService.ReadFbFanpageSetting:input_type -> header.Id
	107, // 342: header.FabikonService.UpdateFbFanpageSetting:input_type -> header.FbFanpageSetting
	1,   // 343: header.FabikonService.ListFbFanpageSettings:input_type -> header.Id
	1,   // 344: header.FabikonService.ListFbPosts:input_type -> header.Id
	108, // 345: header.FabikonService.GetFbPost:input_type -> header.FacebookPost
	0,   // 346: header.FabikonService.SendEventToFacebook:input_type -> header.Events
	39,  // 347: header.FabikonService.RemoveFbUserLabel:input_type -> header.User
	39,  // 348: header.FabikonService.AddFbUserLabel:input_type -> header.User
	1,   // 349: header.FabikonService.GenerateRefLink:input_type -> header.Id
	1,   // 350: header.ChannelConnector.GetIntegration:input_type -> header.Id
	73,  // 351: header.ChannelConnector.UpdateIntegration:input_type -> header.Integration
	0,   // 352: header.ZalokonService.SendEventToZalo:input_type -> header.Events
	1,   // 353: header.ZalokonService.ListZnsTemplates:input_type -> header.Id
	109, // 354: header.ZalokonService.RequestZaloUserInfo:input_type -> header.ZaloUserRequest
	109, // 355: header.ZalokonService.RequestZaloUserToMakeCall:input_type -> header.ZaloUserRequest
	109, // 356: header.ZalokonService.MakeSureZaloUser:input_type -> header.ZaloUserRequest
	109, // 357: header.ZalokonService.GetZaloUserCallConsent:input_type -> header.ZaloUserRequest
	110, // 358: header.ZalokonService.SendZNS:input_type -> header.ZnsRequest
	0,   // 359: header.MailkonService.SendEmail:input_type -> header.Events
	73,  // 360: header.MailkonService.CreateEmailIdentity:input_type -> header.Integration
	73,  // 361: header.MailkonService.DeleteEmailIdentity:input_type -> header.Integration
	73,  // 362: header.MailkonService.ResendSenderVerificationEmail:input_type -> header.Integration
	73,  // 363: header.MailkonService.VerifySenderDomain:input_type -> header.Integration
	1,   // 364: header.MailkonService.ListBusinessEmailAddresses:input_type -> header.Id
	111, // 365: header.MailkonService.UpsertBusinessEmailAddress:input_type -> header.BusinessEmailAddress
	1,   // 366: header.MailkonService.DeleteBusinessEmailAddress:input_type -> header.Id
	112, // 367: header.MailkonService.TrackLink:input_type -> header.LinkData
	113, // 368: header.MailkonService.ListBouncedEmails:input_type -> header.BouncedEmail
	113, // 369: header.MailkonService.UpsertBouncedEmail:input_type -> header.BouncedEmail
	1,   // 370: header.MailkonService.DeleteBouncedEmail:input_type -> header.Id
	114, // 371: header.MailkonService.ListBlockedEmails:input_type -> header.BlockedEmail
	114, // 372: header.MailkonService.BlockEmail:input_type -> header.BlockedEmail
	1,   // 373: header.MailkonService.UnblockEmail:input_type -> header.Id
	1,   // 374: header.WidgetService.Read:input_type -> header.Id
	115, // 375: header.WidgetService.Update:input_type -> header.WidgetSetting
	1,   // 376: header.WidgetService.ReadUserSetting:input_type -> header.Id
	1,   // 377: header.WidgetService.ReadAccountSetting:input_type -> header.Id
	116, // 378: header.WidgetService.SubmitImpression:input_type -> header.Impression
	117, // 379: header.WidgetService.SubmitConversion:input_type -> header.Conversion
	118, // 380: header.WidgetService.SubmitUserCampaignStatus:input_type -> header.UserCampaignStatus
	119, // 381: header.WidgetService.ReportCampaign:input_type -> header.ReportCampaignRequest
	120, // 382: header.WidgetService.ListConversions:input_type -> header.ConversionRequest
	120, // 383: header.WidgetService.ExportConversions:input_type -> header.ConversionRequest
	121, // 384: header.WidgetService.UploadImage:input_type -> header.UploadedImage
	1,   // 385: header.WidgetService.ListUploadedImage:input_type -> header.Id
	121, // 386: header.WidgetService.DeleteUploadedImage:input_type -> header.UploadedImage
	1,   // 387: header.WidgetService.ListWebPlugins:input_type -> header.Id
	122, // 388: header.WidgetService.UpdateWebPlugin:input_type -> header.WebPlugin
	122, // 389: header.WidgetService.UpdateWebPluginEnabled:input_type -> header.WebPlugin
	122, // 390: header.WidgetService.CreateWebPlugin:input_type -> header.WebPlugin
	1,   // 391: header.WidgetService.DeleteWebPlugin:input_type -> header.Id
	122, // 392: header.WidgetService.UpdateWebPluginTemplate:input_type -> header.WebPlugin
	1,   // 393: header.WidgetService.ListWebPluginTemplates:input_type -> header.Id
	1,   // 394: header.WidgetService.DeleteWebPluginTemplate:input_type -> header.Id
	123, // 395: header.WidgetService.ReportWebPlugin:input_type -> header.ReportWebPluginRequest
	1,   // 396: header.WidgetService.SearchImages:input_type -> header.Id
	1,   // 397: header.WidgetService.ListNotifProfiles:input_type -> header.Id
	1,   // 398: header.WidgetService.ListNotifBackgrounds:input_type -> header.Id
	124, // 399: header.Bizbot.ListBots:input_type -> header.BotsRequest
	1,   // 400: header.Bizbot.GetBot:input_type -> header.Id
	125, // 401: header.Bizbot.UpdateBotRunState:input_type -> header.Bot
	125, // 402: header.Bizbot.CreateBot:input_type -> header.Bot
	125, // 403: header.Bizbot.UpdateBot:input_type -> header.Bot
	1,   // 404: header.Bizbot.DeleteBot:input_type -> header.Id
	126, // 405: header.Bizbot.OnEvent:input_type -> header.BotRunRequest
	126, // 406: header.Bizbot.StartBot:input_type -> header.BotRunRequest
	126, // 407: header.Bizbot.StopBot:input_type -> header.BotRunRequest
	126, // 408: header.Bizbot.TryAction:input_type -> header.BotRunRequest
	127, // 409: header.Bizbot.ReportBot2:input_type -> header.BotrunMetricsRequest
	128, // 410: header.Bizbot.ReportAction:input_type -> header.ActionrunMetricsRequest
	129, // 411: header.Bizbot.ListObjects:input_type -> header.ListObjectsRequest
	130, // 412: header.Bizbot.ReportBot:input_type -> header.ReportBotRequest
	131, // 413: header.Sendback.CreateWebhook:input_type -> header.Webhook
	1,   // 414: header.Sendback.PingWebhook:input_type -> header.Id
	1,   // 415: header.Sendback.DeleteWebhook:input_type -> header.Id
	1,   // 416: header.Sendback.ListWebhooks:input_type -> header.Id
	1,   // 417: header.Sendback.ReadWebhook:input_type -> header.Id
	131, // 418: header.Sendback.UpdateWebhook:input_type -> header.Webhook
	1,   // 419: header.Sendback.UpdateWebhookSecret:input_type -> header.Id
	132, // 420: header.Sendback.ListRecentIndexDeliveries:input_type -> header.RecentIndexDeliveryRequest
	133, // 421: header.Sendback.GetDelivery:input_type -> header.DeliveryRequest
	48,  // 422: header.Sendback.SendWebhookEvent:input_type -> header.Event
	134, // 423: header.Notibox.SendNoti:input_type -> header.Notification
	135, // 424: header.Notibox.ListNoties:input_type -> header.ListNotiRequest
	1,   // 425: header.Notibox.MarkReadNoti:input_type -> header.Id
	1,   // 426: header.Notibox.MarkReadNotiTopic:input_type -> header.Id
	46,  // 427: header.Proder.ReadProduct:input_type -> header.Product
	46,  // 428: header.Proder.CreateProduct:input_type -> header.Product
	46,  // 429: header.Proder.UpdateProduct:input_type -> header.Product
	1,   // 430: header.Proder.DeleteProduct:input_type -> header.Id
	136, // 431: header.Proder.ListProducts2:input_type -> header.ProductsRequest
	137, // 432: header.Proder.ImportProduct:input_type -> header.ImportProductRequest
	16,  // 433: header.Proder.ListProductCollections:input_type -> header.Ids
	138, // 434: header.Proder.CreateProductCollection:input_type -> header.ProductCollection
	138, // 435: header.Proder.UpdateProductCollection:input_type -> header.ProductCollection
	1,   // 436: header.Proder.DeleteProductCollection:input_type -> header.Id
	1,   // 437: header.Proder.ListProductFeeds:input_type -> header.Id
	139, // 438: header.Proder.CreateProductFeed:input_type -> header.ProductFeed
	139, // 439: header.Proder.UpdateProductFeed:input_type -> header.ProductFeed
	1,   // 440: header.Proder.DeleteProductFeed:input_type -> header.Id
	16,  // 441: header.Proder.ListProductCategories:input_type -> header.Ids
	1,   // 442: header.Proder.ReadOrder:input_type -> header.Id
	31,  // 443: header.Proder.CreateOrder:input_type -> header.Order
	31,  // 444: header.Proder.UpdateOrder:input_type -> header.Order
	1,   // 445: header.Proder.DeleteOrder:input_type -> header.Id
	140, // 446: header.Proder.ListOrders:input_type -> header.OrdersRequest
	141, // 447: header.Proder.CountOrders2:input_type -> header.CountOrdersRequest
	142, // 448: header.Proder.ImportOrders:input_type -> header.Orders
	143, // 449: header.Proder.MakeOrderPayment:input_type -> header.Bill
	143, // 450: header.Proder.UpdatePurchase:input_type -> header.Bill
	143, // 451: header.Proder.CancelPurchase:input_type -> header.Bill
	48,  // 452: header.Proder.AddOrderComment:input_type -> header.Event
	48,  // 453: header.Proder.EditOrderComment:input_type -> header.Event
	144, // 454: header.Proder.DeleteOrderComment:input_type -> header.Key
	1,   // 455: header.Proder.ListOrderEvents:input_type -> header.Id
	145, // 456: header.Proder.ListOrderBills:input_type -> header.BillsRequest
	146, // 457: header.Proder.DownloadOrder:input_type -> header.DownloadOrderRequest
	1,   // 458: header.Proder.GetShopeeAuthUrl:input_type -> header.Id
	147, // 459: header.Proder.AuthorizeShopeeShop:input_type -> header.AuthorizeShopeeRequest
	1,   // 460: header.Proder.DeauthorizeShopeeShop:input_type -> header.Id
	148, // 461: header.Proder.SyncShopeeProducts:input_type -> header.ShopeeSyncProductRequest
	149, // 462: header.Proder.GHTKShippingStatus:input_type -> header.GHTKOrder
	150, // 463: header.Proder.GHNShippingStatus:input_type -> header.GHNOrder2
	151, // 464: header.Proder.ShippingFee:input_type -> header.ShippingInfo
	1,   // 465: header.Proder.ShipOrder:input_type -> header.Id
	31,  // 466: header.Proder.UpdateShippingCode:input_type -> header.Order
	1,   // 467: header.Proder.CancelShippingOrder:input_type -> header.Id
	16,  // 468: header.Proder.PrintShippingOrders:input_type -> header.Ids
	1,   // 469: header.Proder.SeenOrder:input_type -> header.Id
	1,   // 470: header.Proder.FollowOrder:input_type -> header.Id
	1,   // 471: header.Proder.UnfollowOrder:input_type -> header.Id
	66,  // 472: header.Proder.TagOrder:input_type -> header.TagRequest
	66,  // 473: header.Proder.UntagOrder:input_type -> header.TagRequest
	1,   // 474: header.Proder.ReadPipeline:input_type -> header.Id
	152, // 475: header.Proder.CreatePipeline:input_type -> header.Pipeline
	152, // 476: header.Proder.UpdatePipeline:input_type -> header.Pipeline
	1,   // 477: header.Proder.DeletePipeline:input_type -> header.Id
	16,  // 478: header.Proder.ListPipelines:input_type -> header.Ids
	153, // 479: header.Proder.DeletePipelineStage:input_type -> header.PipelineStage
	1,   // 480: header.Proder.PreselectPipeline:input_type -> header.Id
	154, // 481: header.Proder.ReportOrder:input_type -> header.OrderMetricsRequest
	16,  // 482: header.Proder.MoveOrderToPrimary:input_type -> header.Ids
	1,   // 483: header.TaskMgr.ReadTask:input_type -> header.Id
	51,  // 484: header.TaskMgr.CreateTask:input_type -> header.Task
	51,  // 485: header.TaskMgr.UpdateTask:input_type -> header.Task
	1,   // 486: header.TaskMgr.DeleteTask:input_type -> header.Id
	155, // 487: header.TaskMgr.ListTasks:input_type -> header.TasksRequest
	1,   // 488: header.TaskMgr.SeenTask:input_type -> header.Id
	1,   // 489: header.TaskMgr.CloseTaskReminder:input_type -> header.Id
	1,   // 490: header.TaskMgr.MuteTask:input_type -> header.Id
	1,   // 491: header.TaskMgr.UnmuteTask:input_type -> header.Id
	48,  // 492: header.TaskMgr.AddTaskComment:input_type -> header.Event
	48,  // 493: header.TaskMgr.EditTaskComment:input_type -> header.Event
	144, // 494: header.TaskMgr.DeleteTaskComment:input_type -> header.Key
	1,   // 495: header.TaskMgr.ListTaskComments:input_type -> header.Id
	156, // 496: header.Speex.TextToSpeech:input_type -> header.TTSVoiceSelection
	16,  // 497: header.CampaignMgr.ListCampaigns:input_type -> header.Ids
	1,   // 498: header.CampaignMgr.ReadCampaign:input_type -> header.Id
	157, // 499: header.CampaignMgr.CreateCampaign:input_type -> header.Campaign
	157, // 500: header.CampaignMgr.UpdateCampaign:input_type -> header.Campaign
	1,   // 501: header.CampaignMgr.DeleteCampaign:input_type -> header.Id
	48,  // 502: header.CampaignMgr.OnEvent:input_type -> header.Event
	158, // 503: header.CampaignMgr.ListCampaignSendLog:input_type -> header.CampaignSendLogRequest
	1,   // 504: header.CampaignMgr.ReportBroadcastCampaign:input_type -> header.Id
	159, // 505: header.CampaignMgr.ListOutboundCallEntries:input_type -> header.ListOutboundCallRequest
	160, // 506: header.CampaignMgr.UpdateOutboundCall:input_type -> header.OutboundCallEntry
	161, // 507: header.CampaignMgr.ImportOutboundCall:input_type -> header.ImportOutboundCallEntryRequest
	160, // 508: header.CampaignMgr.GetOutboundCall:input_type -> header.OutboundCallEntry
	160, // 509: header.CampaignMgr.RemoveOutboudCall:input_type -> header.OutboundCallEntry
	162, // 510: header.CampaignMgr.ReportOutboundCalls:input_type -> header.OutboundCallReportRequest
	159, // 511: header.CampaignMgr.ReassignOutboundCall:input_type -> header.ListOutboundCallRequest
	163, // 512: header.CreditMgr.TrySpendCredit:input_type -> header.CreditSpendEntry
	164, // 513: header.CreditMgr.ReportCreditSpend:input_type -> header.CreditSpendReportRequest
	165, // 514: header.CreditMgr.ListCreditSpendLog:input_type -> header.CreditSpendLogRequest
	1,   // 515: header.CreditMgr.ListCredits:input_type -> header.Id
	166, // 516: header.CreditMgr.AddCredit:input_type -> header.Credit
	1,   // 517: header.CreditMgr.DeleteCredit:input_type -> header.Id
	166, // 518: header.CreditMgr.UpdateCredit:input_type -> header.Credit
	1,   // 519: header.FormMgr.ListForms:input_type -> header.Id
	167, // 520: header.FormMgr.CreateForm:input_type -> header.Form
	167, // 521: header.FormMgr.UpdateForm:input_type -> header.Form
	1,   // 522: header.FormMgr.DeleteForm:input_type -> header.Id
	168, // 523: header.FormMgr.ReportForm:input_type -> header.FormReportRequest
	169, // 524: header.FormMgr.ListFormSubmissions:input_type -> header.ListFormSubmissionRequest
	170, // 525: header.Scheduler.RegisterTask:input_type -> header.SchedulerTask
	170, // 526: header.Scheduler.UnregisterTask:input_type -> header.SchedulerTask
	171, // 527: header.KB.CreateKnowledgeBase:input_type -> header.KnowledgeBase
	171, // 528: header.KB.UpdateKnowledgeBase:input_type -> header.KnowledgeBase
	1,   // 529: header.KB.DeleteKnowledgeBase:input_type -> header.Id
	1,   // 530: header.KB.GetKnowledgeBase:input_type -> header.Id
	1,   // 531: header.KB.ListKnowledgeBases:input_type -> header.Id
	172, // 532: header.KB.CreateArticle:input_type -> header.Article
	172, // 533: header.KB.UpdateArticle:input_type -> header.Article
	1,   // 534: header.KB.DeleteArticle:input_type -> header.Id
	1,   // 535: header.KB.GetArticle:input_type -> header.Id
	173, // 536: header.KB.ListArticles:input_type -> header.ListArticleRequest
	174, // 537: header.KB.CreateArticleCategory:input_type -> header.ArticleCategory
	174, // 538: header.KB.UpdateArticleCategory:input_type -> header.ArticleCategory
	1,   // 539: header.KB.DeleteArticleCategory:input_type -> header.Id
	1,   // 540: header.KB.GetArticleCategory:input_type -> header.Id
	1,   // 541: header.KB.ListArticleCategories:input_type -> header.Id
	11,  // 542: header.GooglekonService.SendEventToGoogle:output_type -> header.Empty
	2,   // 543: header.GooglekonService.ReadGoogleLocationSetting:output_type -> header.GoogleLocationSetting
	2,   // 544: header.GooglekonService.UpdateGoogleLocationSetting:output_type -> header.GoogleLocationSetting
	175, // 545: header.GooglekonService.ListGoogleLocationSettings:output_type -> header.GoogleLocationSettings
	11,  // 546: header.KafkaConsumer.Consume:output_type -> header.Empty
	176, // 547: header.RateLimit.SyncRateLimit:output_type -> header.RateLimitSyncResponse
	11,  // 548: header.DocSearch.IndexConvo:output_type -> header.Empty
	177, // 549: header.DocSearch.SearchConvos:output_type -> header.DocSearchResponse
	11,  // 550: header.DocSearch.Index:output_type -> header.Empty
	11,  // 551: header.DocSearch.IndexStatic:output_type -> header.Empty
	177, // 552: header.DocSearch.Search:output_type -> header.DocSearchResponse
	16,  // 553: header.DocSearch.SearchIds:output_type -> header.Ids
	178, // 554: header.DocSearch.ReportConversation:output_type -> header.ConversationMetrics
	179, // 555: header.DocSearch.Report:output_type -> header.ConvoReportResponse
	180, // 556: header.DocSearch.ListIds:output_type -> header.Conversations
	180, // 557: header.DocSearch.ListConversationIds:output_type -> header.Conversations
	181, // 558: header.DocSearch.ReportCall:output_type -> header.CallMetrics
	180, // 559: header.DocSearch.ListCallIds:output_type -> header.Conversations
	182, // 560: header.DocSearch.ReportAgent:output_type -> header.AgentMetrics
	11,  // 561: header.DocSearch.HealthCheckReport:output_type -> header.Empty
	11,  // 562: header.DocSearch.HealthCheckIndex:output_type -> header.Empty
	13,  // 563: header.NumberRegistry.Compact:output_type -> header.Number
	12,  // 564: header.NumberRegistry.Uncompact:output_type -> header.String
	14,  // 565: header.NumberRegistry.CompactM:output_type -> header.StrNumM
	13,  // 566: header.NumberRegistry.Shorten:output_type -> header.Number
	12,  // 567: header.NumberRegistry.Lookup:output_type -> header.String
	1,   // 568: header.NumberRegistry.NewID2:output_type -> header.Id
	183, // 569: header.Map.Predict:output_type -> header.AddressAutocompleteResponses
	29,  // 570: header.Map.LookupAddress:output_type -> header.Address
	184, // 571: header.Map.PredictAddress:output_type -> header.Addresses
	184, // 572: header.Map.ListDistricts:output_type -> header.Addresses
	184, // 573: header.Map.ListProvinces:output_type -> header.Addresses
	184, // 574: header.Map.ListWards:output_type -> header.Addresses
	184, // 575: header.Map.ListStreets:output_type -> header.Addresses
	184, // 576: header.Map.ListAddresses:output_type -> header.Addresses
	29,  // 577: header.Map.ReadAddress:output_type -> header.Address
	185, // 578: header.RefererMgr.ListReferrerPayouts:output_type -> account.ReferrerPayoutBills
	17,  // 579: header.RefererMgr.PayReferrer:output_type -> account.ReferrerPayoutBill
	186, // 580: header.RefererMgr.ListReferredCustomers:output_type -> account.ReferredCustomers
	187, // 581: header.RefererMgr.ListReferredInvoices:output_type -> account.ReferredInvoices
	18,  // 582: header.RefererMgr.GetReferrerAgent:output_type -> account.ReferrerAgent
	188, // 583: header.RefererMgr.ListPayoutReferrerAgents:output_type -> account.ReferrerAgents
	11,  // 584: header.RefererMgr.RefererAccount:output_type -> header.Empty
	18,  // 585: header.RefererMgr.UpdateReferrerAgent:output_type -> account.ReferrerAgent
	19,  // 586: header.AccountMgr.CreateGroup:output_type -> header.AgentGroup
	19,  // 587: header.AccountMgr.UpdateGroup:output_type -> header.AgentGroup
	19,  // 588: header.AccountMgr.GetGroup:output_type -> header.AgentGroup
	11,  // 589: header.AccountMgr.RequestPassword:output_type -> header.Empty
	21,  // 590: header.AccountMgr.UpdatePassword:output_type -> account.Agent
	21,  // 591: header.AccountMgr.UpdateAgent:output_type -> account.Agent
	21,  // 592: header.AccountMgr.DeleteAgent:output_type -> account.Agent
	22,  // 593: header.AccountMgr.DeleteAccount:output_type -> account.Account
	22,  // 594: header.AccountMgr.SubizUpdateAccount:output_type -> account.Account
	11,  // 595: header.AccountMgr.RequestChangeEmail:output_type -> header.Empty
	21,  // 596: header.AccountMgr.ConfirmChangeEmail:output_type -> account.Agent
	21,  // 597: header.AccountMgr.AcceptInvitation:output_type -> account.Agent
	21,  // 598: header.AccountMgr.GetInvitation:output_type -> account.Agent
	21,  // 599: header.AccountMgr.InviteAgent:output_type -> account.Agent
	21,  // 600: header.AccountMgr.GetAgent:output_type -> account.Agent
	21,  // 601: header.AccountMgr.LookupAgentById:output_type -> account.Agent
	22,  // 602: header.AccountMgr.ConfirmAccount:output_type -> account.Account
	22,  // 603: header.AccountMgr.GetAccount:output_type -> account.Account
	22,  // 604: header.AccountMgr.UpdateAccount:output_type -> account.Account
	22,  // 605: header.AccountMgr.CreateAccount:output_type -> account.Account
	189, // 606: header.AccountMgr.ListAgents:output_type -> header.Response
	11,  // 607: header.AccountMgr.DeleteGroup:output_type -> header.Empty
	190, // 608: header.AccountMgr.ListGroups:output_type -> header.AgentGroups
	21,  // 609: header.AccountMgr.ChangeEmail:output_type -> account.Agent
	191, // 610: header.AccountMgr.SyncPublicHolidays:output_type -> account.BusinessHours
	21,  // 611: header.AccountMgr.TransferOwner:output_type -> account.Agent
	26,  // 612: header.AccountMgr.CheckLoginSession:output_type -> header.LoginSession
	26,  // 613: header.AccountMgr.CreateLoginSession:output_type -> header.LoginSession
	192, // 614: header.AccountMgr.ListLoginSessions:output_type -> header.LoginSessions
	192, // 615: header.AccountMgr.ListApiKeys:output_type -> header.LoginSessions
	11,  // 616: header.AccountMgr.LogoutSession:output_type -> header.Empty
	26,  // 617: header.AccountMgr.CreateApiKey:output_type -> header.LoginSession
	193, // 618: header.AccountMgr.GetLanguage:output_type -> header.Lang
	27,  // 619: header.AccountMgr.UpdateLanguage:output_type -> header.LangMessage
	28,  // 620: header.AccountMgr.GetShopSetting:output_type -> header.ShopSetting
	28,  // 621: header.AccountMgr.UpdateShopSetting:output_type -> header.ShopSetting
	194, // 622: header.AccountMgr.ReadCurrency:output_type -> header.Currency
	11,  // 623: header.AccountMgr.AutoSyncCurrency:output_type -> header.Empty
	184, // 624: header.AccountMgr.ListShopAddresses:output_type -> header.Addresses
	29,  // 625: header.AccountMgr.CreateShopAddress:output_type -> header.Address
	29,  // 626: header.AccountMgr.UpdateShopAddress:output_type -> header.Address
	11,  // 627: header.AccountMgr.DeleteShopAddress:output_type -> header.Empty
	189, // 628: header.AccountMgr.ListTaxes:output_type -> header.Response
	30,  // 629: header.AccountMgr.CreateTax:output_type -> header.Tax
	30,  // 630: header.AccountMgr.UpdateTax:output_type -> header.Tax
	11,  // 631: header.AccountMgr.DeleteTax:output_type -> header.Empty
	195, // 632: header.AccountMgr.CheckShippingPolicy:output_type -> header.ShippingPolicies
	195, // 633: header.AccountMgr.ListShippingPolicies:output_type -> header.ShippingPolicies
	32,  // 634: header.AccountMgr.CreateShippingPolicy:output_type -> header.ShippingPolicy
	32,  // 635: header.AccountMgr.UpdateShippingPolicy:output_type -> header.ShippingPolicy
	11,  // 636: header.AccountMgr.DeleteShippingPolicy:output_type -> header.Empty
	33,  // 637: header.AccountMgr.CreateCancellationCode:output_type -> header.CancellationCode
	196, // 638: header.AccountMgr.ListCancellationCodes:output_type -> header.CancellationCodes
	33,  // 639: header.AccountMgr.UpdateCancellationCode:output_type -> header.CancellationCode
	11,  // 640: header.AccountMgr.MakeDefaultTax:output_type -> header.Empty
	197, // 641: header.AccountMgr.ListPaymentMethods:output_type -> header.PaymentMethods
	34,  // 642: header.AccountMgr.CreatePaymentMethod:output_type -> header.PaymentMethod
	34,  // 643: header.AccountMgr.UpdatePaymentMethod:output_type -> header.PaymentMethod
	11,  // 644: header.AccountMgr.DeletePaymentMethod:output_type -> header.Empty
	11,  // 645: header.AccountMgr.MakeDefaultPaymentMethod:output_type -> header.Empty
	198, // 646: header.AccountMgr.ListIntegratedShippingProviders:output_type -> header.IntegratedShippings
	11,  // 647: header.AccountMgr.DeintegrateShippingProvider:output_type -> header.Empty
	35,  // 648: header.AccountMgr.IntegrateShippingProvider:output_type -> header.IntegratedShipping
	35,  // 649: header.AccountMgr.SendGHNAffiliateOTP:output_type -> header.IntegratedShipping
	35,  // 650: header.AccountMgr.EnterGHNAffiliateOTP:output_type -> header.IntegratedShipping
	36,  // 651: header.AccountMgr.UpdateAgentPresence:output_type -> account.Presence
	199, // 652: header.AccountMgr.ListAgentPresences:output_type -> account.Presences
	200, // 653: header.AccountMgr.ReportAvailibilities:output_type -> header.ReportResponse
	1,   // 654: header.AccountMgr.NewID:output_type -> header.Id
	1,   // 655: header.AccountMgr.LockLogin:output_type -> header.Id
	1,   // 656: header.AccountMgr.UnlockLogin:output_type -> header.Id
	201, // 657: header.AccountMgr.ListBills:output_type -> payment.Bills
	39,  // 658: header.UserMgr.MergeUser:output_type -> header.User
	11,  // 659: header.UserMgr.DetachUser:output_type -> header.Empty
	39,  // 660: header.UserMgr.CreateUser2:output_type -> header.User
	39,  // 661: header.UserMgr.UpdateUser:output_type -> header.User
	202, // 662: header.UserMgr.TryUpdateUser:output_type -> header.TryUpdateUserResult
	11,  // 663: header.UserMgr.RemoveUser:output_type -> header.Empty
	11,  // 664: header.UserMgr.RestoreUser:output_type -> header.Empty
	39,  // 665: header.UserMgr.ReadUser:output_type -> header.User
	39,  // 666: header.UserMgr.ReadOrCreateUserByContactProfile:output_type -> header.User
	38,  // 667: header.UserMgr.MatchUsers:output_type -> header.Users
	39,  // 668: header.UserMgr.BanUser:output_type -> header.User
	39,  // 669: header.UserMgr.UnbanUser:output_type -> header.User
	38,  // 670: header.UserMgr.LookupByPhone:output_type -> header.Users
	40,  // 671: header.UserMgr.UpdateView:output_type -> header.UserView
	40,  // 672: header.UserMgr.CreateView:output_type -> header.UserView
	11,  // 673: header.UserMgr.DeleteView:output_type -> header.Empty
	40,  // 674: header.UserMgr.GetView:output_type -> header.UserView
	203, // 675: header.UserMgr.ListViews:output_type -> header.UserViews
	41,  // 676: header.UserMgr.UpdateSegment:output_type -> header.Segment
	41,  // 677: header.UserMgr.CreateSegment:output_type -> header.Segment
	11,  // 678: header.UserMgr.DeleteSegment:output_type -> header.Empty
	41,  // 679: header.UserMgr.GetSegment:output_type -> header.Segment
	204, // 680: header.UserMgr.ListSegments:output_type -> header.Segments
	11,  // 681: header.UserMgr.AddToSegment:output_type -> header.Empty
	11,  // 682: header.UserMgr.RemoveFromSegment:output_type -> header.Empty
	43,  // 683: header.UserMgr.UpsertLabel:output_type -> header.Label
	11,  // 684: header.UserMgr.DeleteLabel:output_type -> header.Empty
	205, // 685: header.UserMgr.ListLabels:output_type -> header.Labels
	43,  // 686: header.UserMgr.GetLabel:output_type -> header.Label
	11,  // 687: header.UserMgr.AddLeadOwner:output_type -> header.Empty
	11,  // 688: header.UserMgr.RemoveLeadOwner:output_type -> header.Empty
	11,  // 689: header.UserMgr.AddUserLabel:output_type -> header.Empty
	11,  // 690: header.UserMgr.RemoveUserLabel:output_type -> header.Empty
	11,  // 691: header.UserMgr.AddLeadConversionBy:output_type -> header.Empty
	29,  // 692: header.UserMgr.CreateShippingAddress:output_type -> header.Address
	29,  // 693: header.UserMgr.UpdateShippingAddress:output_type -> header.Address
	11,  // 694: header.UserMgr.RemoveShippingAddress:output_type -> header.Empty
	206, // 695: header.UserMgr.ListShippingAddress:output_type -> header.ShippingAddresses
	11,  // 696: header.UserMgr.MakeDefaultShippingAddress:output_type -> header.Empty
	38,  // 697: header.UserMgr.ListLeads:output_type -> header.Users
	207, // 698: header.UserMgr.SuggestLeadField:output_type -> header.SuggestLeadFieldResponse
	46,  // 699: header.UserMgr.LinkProductUrl:output_type -> header.Product
	0,   // 700: header.UserMgr.ListUserEvents:output_type -> header.Events
	48,  // 701: header.UserMgr.CreateUserEvent:output_type -> header.Event
	49,  // 702: header.UserMgr.FillDevice:output_type -> common.Device
	208, // 703: header.UserMgr.ImportLead:output_type -> header.ImportLeadResponse
	11,  // 704: header.UserMgr.LinkTask:output_type -> header.Empty
	209, // 705: header.UserMgr.CountUserProfiles:output_type -> header.CountTouchpointResponse
	16,  // 706: header.UserMgr.ListUserIds:output_type -> header.Ids
	38,  // 707: header.UserMgr.ListUserIdWithPhones:output_type -> header.Users
	177, // 708: header.UserMgr.SearchUsers:output_type -> header.DocSearchResponse
	210, // 709: header.UserMgr.ReportUser:output_type -> header.UserReportResponse
	54,  // 710: header.UserMgr.FetchLiveUsers:output_type -> header.LiveUserView
	11,  // 711: header.UserMgr.StopLiveUsers:output_type -> header.Empty
	207, // 712: header.UserMgr.SuggestLiveFields:output_type -> header.SuggestLeadFieldResponse
	211, // 713: header.UserMgr.Presences:output_type -> header.PresencesResponse
	56,  // 714: header.UserMgr.UpdateSegmentMember:output_type -> header.ResourceGroupMember
	11,  // 715: header.UserMgr.RemoveSegmentMember:output_type -> header.Empty
	212, // 716: header.NoteMgr.ListNotes:output_type -> header.Notes
	58,  // 717: header.NoteMgr.AddNote:output_type -> header.Note
	58,  // 718: header.NoteMgr.UpdateNote:output_type -> header.Note
	11,  // 719: header.NoteMgr.DeleteNote:output_type -> header.Empty
	213, // 720: header.AttributeMgr.ListAttributeDefinitions:output_type -> header.AttributeDefinitions
	60,  // 721: header.AttributeMgr.CreateAttributeDefinition:output_type -> header.AttributeDefinition
	60,  // 722: header.AttributeMgr.UpdateAttributeDefinition:output_type -> header.AttributeDefinition
	189, // 723: header.AutomationMgr.ListWorkflows:output_type -> header.Response
	189, // 724: header.AutomationMgr.UpdateWorkflow:output_type -> header.Response
	189, // 725: header.AutomationMgr.CreateWorkflow:output_type -> header.Response
	189, // 726: header.AutomationMgr.DeleteWorkflow:output_type -> header.Response
	189, // 727: header.AutomationMgr.ReadWorkflow:output_type -> header.Response
	189, // 728: header.AutomationMgr.ListWorkflowLog:output_type -> header.Response
	214, // 729: header.ConversationMgr.AssignRule:output_type -> header.RouteResult
	48,  // 730: header.ConversationMgr.PongMessage:output_type -> header.Event
	68,  // 731: header.ConversationMgr.StartConversation:output_type -> header.Conversation
	68,  // 732: header.ConversationMgr.EndConversation:output_type -> header.Conversation
	68,  // 733: header.ConversationMgr.GetConversation:output_type -> header.Conversation
	180, // 734: header.ConversationMgr.ListConversations:output_type -> header.Conversations
	189, // 735: header.ConversationMgr.ListConversations2:output_type -> header.Response
	180, // 736: header.ConversationMgr.MatchConversations:output_type -> header.Conversations
	11,  // 737: header.ConversationMgr.TagConversation:output_type -> header.Empty
	11,  // 738: header.ConversationMgr.UntagConversation:output_type -> header.Empty
	11,  // 739: header.ConversationMgr.JoinConversation:output_type -> header.Empty
	11,  // 740: header.ConversationMgr.LeftConversation:output_type -> header.Empty
	68,  // 741: header.ConversationMgr.UpdateConversationInfo:output_type -> header.Conversation
	11,  // 742: header.ConversationMgr.UpdateMuteConversation:output_type -> header.Empty
	11,  // 743: header.ConversationMgr.UpdateConversationMember:output_type -> header.Empty
	11,  // 744: header.ConversationMgr.UnwatchConversation:output_type -> header.Empty
	11,  // 745: header.ConversationMgr.UnhiddenConversation:output_type -> header.Empty
	69,  // 746: header.ConversationMgr.UpdateEndchatSetting:output_type -> header.EndchatSetting
	69,  // 747: header.ConversationMgr.GetEndchatSetting:output_type -> header.EndchatSetting
	48,  // 748: header.ConversationMgr.TerminateBot:output_type -> header.Event
	48,  // 749: header.ConversationMgr.SendMessage:output_type -> header.Event
	48,  // 750: header.ConversationMgr.SendOmniChannelMessage:output_type -> header.Event
	48,  // 751: header.ConversationMgr.UpdateMessage:output_type -> header.Event
	11,  // 752: header.ConversationMgr.PinMessage:output_type -> header.Empty
	11,  // 753: header.ConversationMgr.UnpinMessage:output_type -> header.Empty
	0,   // 754: header.ConversationMgr.ListEvents:output_type -> header.Events
	11,  // 755: header.ConversationMgr.Deintegrate:output_type -> header.Empty
	215, // 756: header.ConversationMgr.ListIntegrations:output_type -> header.Integrations
	73,  // 757: header.ConversationMgr.Integrate:output_type -> header.Integration
	73,  // 758: header.ConversationMgr.GetIntegration:output_type -> header.Integration
	56,  // 759: header.ConversationMgr.UpdateIntegrationMember:output_type -> header.ResourceGroupMember
	11,  // 760: header.ConversationMgr.RemoveIntegrationMember:output_type -> header.Empty
	74,  // 761: header.ConversationMgr.UpdateRule:output_type -> header.Rule
	74,  // 762: header.ConversationMgr.CreateRule:output_type -> header.Rule
	11,  // 763: header.ConversationMgr.DeleteRule:output_type -> header.Empty
	74,  // 764: header.ConversationMgr.ReadRule:output_type -> header.Rule
	216, // 765: header.ConversationMgr.ListRules:output_type -> header.Route
	217, // 766: header.ConversationMgr.ListConversationAutomations:output_type -> header.ConversationAutomations
	75,  // 767: header.ConversationMgr.UpdateConversationAutomation:output_type -> header.ConversationAutomation
	11,  // 768: header.ConversationMgr.DeleteConversationAutomation:output_type -> header.Empty
	75,  // 769: header.ConversationMgr.ReadConversationAutomation:output_type -> header.ConversationAutomation
	218, // 770: header.ConversationMgr.ListPhoneDevices:output_type -> header.PhoneDevices
	76,  // 771: header.ConversationMgr.CreatePhoneDevice:output_type -> header.PhoneDevice
	76,  // 772: header.ConversationMgr.UpdatePhoneDevice:output_type -> header.PhoneDevice
	11,  // 773: header.ConversationMgr.DeletePhoneDevice:output_type -> header.Empty
	76,  // 774: header.ConversationMgr.ReadPhoneDevice:output_type -> header.PhoneDevice
	73,  // 775: header.ConversationMgr.TestNumber:output_type -> header.Integration
	73,  // 776: header.ConversationMgr.ActiveNumber:output_type -> header.Integration
	219, // 777: header.ConversationMgr.ListCallSettings:output_type -> header.CallSettings
	77,  // 778: header.ConversationMgr.UpdateCallSetting:output_type -> header.CallSetting
	78,  // 779: header.ConversationMgr.BlockNumber:output_type -> header.BlockedNumber
	220, // 780: header.ConversationMgr.ListBlockedNumbers:output_type -> header.BlockedNumbers
	11,  // 781: header.ConversationMgr.UnblockNumber:output_type -> header.Empty
	221, // 782: header.ConversationMgr.ListGreetingAudio:output_type -> header.GreetingAudios
	79,  // 783: header.ConversationMgr.CreateGreetingAudio:output_type -> header.GreetingAudio
	189, // 784: header.ConversationMgr.UpdateGreetingAudio:output_type -> header.Response
	68,  // 785: header.ConversationMgr.OriginateCall:output_type -> header.Conversation
	222, // 786: header.ConversationMgr.ListMyRecentCalls:output_type -> header.RecentCallRecords
	48,  // 787: header.ConversationMgr.SaveMessage:output_type -> header.Event
	48,  // 788: header.ConversationMgr.ApplyMessage:output_type -> header.Event
	80,  // 789: header.TicketMgr.CreateTicketType:output_type -> header.TicketType
	80,  // 790: header.TicketMgr.UpdateTicketType:output_type -> header.TicketType
	189, // 791: header.TicketMgr.ListTicketTypes:output_type -> header.Response
	80,  // 792: header.TicketMgr.GetTicketType:output_type -> header.TicketType
	11,  // 793: header.TicketMgr.DeleteTicketType:output_type -> header.Empty
	81,  // 794: header.TicketMgr.CreateTicket:output_type -> header.Ticket
	81,  // 795: header.TicketMgr.UpdateTicket:output_type -> header.Ticket
	11,  // 796: header.TicketMgr.DeleteTicket:output_type -> header.Empty
	11,  // 797: header.TicketMgr.RecoverTicket:output_type -> header.Empty
	81,  // 798: header.TicketMgr.GetTicket:output_type -> header.Ticket
	189, // 799: header.TicketMgr.ListTickets:output_type -> header.Response
	189, // 800: header.TicketMgr.MatchTickets:output_type -> header.Response
	83,  // 801: header.TicketMgr.CreateTicketView:output_type -> header.TicketView
	83,  // 802: header.TicketMgr.UpdateTicketView:output_type -> header.TicketView
	11,  // 803: header.TicketMgr.DeleteTicketView:output_type -> header.Empty
	83,  // 804: header.TicketMgr.GetTicketView:output_type -> header.TicketView
	189, // 805: header.TicketMgr.ListTicketViews:output_type -> header.Response
	84,  // 806: header.TicketMgr.CreateTicketTemplate:output_type -> header.TicketTemplate
	84,  // 807: header.TicketMgr.UpdateTicketTemplate:output_type -> header.TicketTemplate
	11,  // 808: header.TicketMgr.DeleteTicketTemplate:output_type -> header.Empty
	84,  // 809: header.TicketMgr.GetTicketTemplate:output_type -> header.TicketTemplate
	189, // 810: header.TicketMgr.ListTicketTemplates:output_type -> header.Response
	48,  // 811: header.TicketMgr.PongTicketEvent:output_type -> header.Event
	11,  // 812: header.TicketMgr.TagTicket:output_type -> header.Empty
	11,  // 813: header.TicketMgr.UntagTicket:output_type -> header.Empty
	11,  // 814: header.TicketMgr.JoinTicket:output_type -> header.Empty
	11,  // 815: header.TicketMgr.LeftTicket:output_type -> header.Empty
	11,  // 816: header.TicketMgr.ReadTickets:output_type -> header.Empty
	11,  // 817: header.TicketMgr.UnreadTickets:output_type -> header.Empty
	11,  // 818: header.TicketMgr.SubscribedTickets:output_type -> header.Empty
	11,  // 819: header.TicketMgr.UnSubscribedTickets:output_type -> header.Empty
	48,  // 820: header.TicketMgr.SendTicketEvent:output_type -> header.Event
	0,   // 821: header.TicketMgr.ListTicketEvents:output_type -> header.Events
	56,  // 822: header.TicketMgr.UpdateTicketTypeMember:output_type -> header.ResourceGroupMember
	11,  // 823: header.TicketMgr.RemoveTicketTypeMember:output_type -> header.Empty
	85,  // 824: header.TicketMgr.CreateSLAPolicy:output_type -> header.SLAPolicy
	85,  // 825: header.TicketMgr.UpdateSLAPolicy:output_type -> header.SLAPolicy
	11,  // 826: header.TicketMgr.DeleteSLAPolicy:output_type -> header.Empty
	189, // 827: header.TicketMgr.ListSLAPolicies:output_type -> header.Response
	85,  // 828: header.TicketMgr.GetSLAPolicy:output_type -> header.SLAPolicy
	189, // 829: header.TicketMgr.ListTicketSLAViolations:output_type -> header.Response
	189, // 830: header.TicketMgr.RateTicket:output_type -> header.Response
	86,  // 831: header.TicketMgr.GetTicketRating:output_type -> header.Rating
	189, // 832: header.TicketMgr.UpdateTicketRule:output_type -> header.Response
	189, // 833: header.TicketMgr.CreateTicketRule:output_type -> header.Response
	11,  // 834: header.TicketMgr.DeleteTicketRule:output_type -> header.Empty
	189, // 835: header.TicketMgr.ReadTicketRule:output_type -> header.Response
	189, // 836: header.TicketMgr.ListTicketRules:output_type -> header.Response
	179, // 837: header.TicketMgr.Report:output_type -> header.ConvoReportResponse
	16,  // 838: header.TicketMgr.GetTicketIdsByConvoId:output_type -> header.Ids
	87,  // 839: header.TemplateMgr.CreateTemplate:output_type -> header.Template
	87,  // 840: header.TemplateMgr.UpdateTemplate:output_type -> header.Template
	11,  // 841: header.TemplateMgr.DeleteTemplate:output_type -> header.Empty
	87,  // 842: header.TemplateMgr.GetTemplate:output_type -> header.Template
	223, // 843: header.TemplateMgr.ListTemplates:output_type -> header.Templates
	11,  // 844: header.TemplateMgr.PickTemplate:output_type -> header.Empty
	89,  // 845: header.TemplateMgr.CreateModal:output_type -> header.ConversationModal
	89,  // 846: header.TemplateMgr.UpdateModal:output_type -> header.ConversationModal
	11,  // 847: header.TemplateMgr.DeleteModal:output_type -> header.Empty
	89,  // 848: header.TemplateMgr.GetModal:output_type -> header.ConversationModal
	224, // 849: header.TemplateMgr.ListModals:output_type -> header.ConversationModals
	225, // 850: header.TemplateMgr.PickModal:output_type -> header.ConversationModalPicked
	91,  // 851: header.TagMgr.CreateTag:output_type -> header.Tag
	91,  // 852: header.TagMgr.UpdateTag:output_type -> header.Tag
	11,  // 853: header.TagMgr.DeleteTag:output_type -> header.Empty
	226, // 854: header.TagMgr.ListTags:output_type -> header.Tags
	91,  // 855: header.TagMgr.GetTag:output_type -> header.Tag
	92,  // 856: header.Noti5Service.ReadNotificationSetting:output_type -> noti5.Setting
	92,  // 857: header.Noti5Service.UpdateNotificationSetting:output_type -> noti5.Setting
	11,  // 858: header.Noti5Service.Noti:output_type -> header.Empty
	11,  // 859: header.Noti5Service.AddToken:output_type -> header.Empty
	11,  // 860: header.Noti5Service.RemoveToken:output_type -> header.Empty
	11,  // 861: header.Noti5Service.CheckTokenExists:output_type -> header.Empty
	227, // 862: header.PaymentMgr.SearchSub:output_type -> header.AccSubs
	228, // 863: header.PaymentMgr.GetSub:output_type -> header.AccSub
	99,  // 864: header.PaymentMgr.Purchase:output_type -> payment.Invoice
	97,  // 865: header.PaymentMgr.UpdateSubscription:output_type -> payment.Subscription
	97,  // 866: header.PaymentMgr.GetSubscription:output_type -> payment.Subscription
	229, // 867: header.PaymentMgr.Pay:output_type -> payment.Bill
	99,  // 868: header.PaymentMgr.CreateInvoice:output_type -> payment.Invoice
	99,  // 869: header.PaymentMgr.UpdateInvoice:output_type -> payment.Invoice
	230, // 870: header.PaymentMgr.FilterInvoices:output_type -> payment.Invoices
	99,  // 871: header.PaymentMgr.DraftInvoice:output_type -> payment.Invoice
	231, // 872: header.PaymentMgr.ListComments:output_type -> payment.Comments
	102, // 873: header.PaymentMgr.AddComment:output_type -> payment.Comment
	232, // 874: header.PaymentMgr.ExportInvoice:output_type -> payment.String
	232, // 875: header.PaymentMgr.ConvertInvoiceToHtml:output_type -> payment.String
	103, // 876: header.PaymentMgr.GetExchangeRate:output_type -> header.ExchangeRate
	229, // 877: header.PaymentMgr.TransferMoney:output_type -> payment.Bill
	233, // 878: header.PaymentMgr.ListLogs:output_type -> payment.Logs
	11,  // 879: header.Pubsub.Fire:output_type -> header.Empty
	1,   // 880: header.Pubsub.IsSubscribed:output_type -> header.Id
	234, // 881: header.Pubsub.Poll:output_type -> header.PollResult
	106, // 882: header.Pubsub.Subscribe:output_type -> header.RealtimeSubscription
	107, // 883: header.FabikonService.ReadFbFanpageSetting:output_type -> header.FbFanpageSetting
	107, // 884: header.FabikonService.UpdateFbFanpageSetting:output_type -> header.FbFanpageSetting
	235, // 885: header.FabikonService.ListFbFanpageSettings:output_type -> header.FbFanpageSettings
	236, // 886: header.FabikonService.ListFbPosts:output_type -> header.FacebookPosts
	108, // 887: header.FabikonService.GetFbPost:output_type -> header.FacebookPost
	11,  // 888: header.FabikonService.SendEventToFacebook:output_type -> header.Empty
	11,  // 889: header.FabikonService.RemoveFbUserLabel:output_type -> header.Empty
	11,  // 890: header.FabikonService.AddFbUserLabel:output_type -> header.Empty
	1,   // 891: header.FabikonService.GenerateRefLink:output_type -> header.Id
	73,  // 892: header.ChannelConnector.GetIntegration:output_type -> header.Integration
	73,  // 893: header.ChannelConnector.UpdateIntegration:output_type -> header.Integration
	11,  // 894: header.ZalokonService.SendEventToZalo:output_type -> header.Empty
	237, // 895: header.ZalokonService.ListZnsTemplates:output_type -> zalokon.ZnsTemplates
	11,  // 896: header.ZalokonService.RequestZaloUserInfo:output_type -> header.Empty
	11,  // 897: header.ZalokonService.RequestZaloUserToMakeCall:output_type -> header.Empty
	11,  // 898: header.ZalokonService.MakeSureZaloUser:output_type -> header.Empty
	189, // 899: header.ZalokonService.GetZaloUserCallConsent:output_type -> header.Response
	48,  // 900: header.ZalokonService.SendZNS:output_type -> header.Event
	11,  // 901: header.MailkonService.SendEmail:output_type -> header.Empty
	73,  // 902: header.MailkonService.CreateEmailIdentity:output_type -> header.Integration
	11,  // 903: header.MailkonService.DeleteEmailIdentity:output_type -> header.Empty
	11,  // 904: header.MailkonService.ResendSenderVerificationEmail:output_type -> header.Empty
	238, // 905: header.MailkonService.VerifySenderDomain:output_type -> header.EmailSenderVerificationResult
	239, // 906: header.MailkonService.ListBusinessEmailAddresses:output_type -> header.BusinessEmailAddresses
	111, // 907: header.MailkonService.UpsertBusinessEmailAddress:output_type -> header.BusinessEmailAddress
	11,  // 908: header.MailkonService.DeleteBusinessEmailAddress:output_type -> header.Empty
	189, // 909: header.MailkonService.TrackLink:output_type -> header.Response
	189, // 910: header.MailkonService.ListBouncedEmails:output_type -> header.Response
	113, // 911: header.MailkonService.UpsertBouncedEmail:output_type -> header.BouncedEmail
	189, // 912: header.MailkonService.DeleteBouncedEmail:output_type -> header.Response
	189, // 913: header.MailkonService.ListBlockedEmails:output_type -> header.Response
	189, // 914: header.MailkonService.BlockEmail:output_type -> header.Response
	189, // 915: header.MailkonService.UnblockEmail:output_type -> header.Response
	115, // 916: header.WidgetService.Read:output_type -> header.WidgetSetting
	115, // 917: header.WidgetService.Update:output_type -> header.WidgetSetting
	240, // 918: header.WidgetService.ReadUserSetting:output_type -> header.WidgetUserSetting
	241, // 919: header.WidgetService.ReadAccountSetting:output_type -> header.AccountWeb
	116, // 920: header.WidgetService.SubmitImpression:output_type -> header.Impression
	117, // 921: header.WidgetService.SubmitConversion:output_type -> header.Conversion
	118, // 922: header.WidgetService.SubmitUserCampaignStatus:output_type -> header.UserCampaignStatus
	242, // 923: header.WidgetService.ReportCampaign:output_type -> header.ReportCampaignResponse
	243, // 924: header.WidgetService.ListConversions:output_type -> header.Conversions
	244, // 925: header.WidgetService.ExportConversions:output_type -> header.ConversionsExported
	121, // 926: header.WidgetService.UploadImage:output_type -> header.UploadedImage
	245, // 927: header.WidgetService.ListUploadedImage:output_type -> header.UploadedImages
	11,  // 928: header.WidgetService.DeleteUploadedImage:output_type -> header.Empty
	246, // 929: header.WidgetService.ListWebPlugins:output_type -> header.WebPlugins
	122, // 930: header.WidgetService.UpdateWebPlugin:output_type -> header.WebPlugin
	122, // 931: header.WidgetService.UpdateWebPluginEnabled:output_type -> header.WebPlugin
	122, // 932: header.WidgetService.CreateWebPlugin:output_type -> header.WebPlugin
	11,  // 933: header.WidgetService.DeleteWebPlugin:output_type -> header.Empty
	122, // 934: header.WidgetService.UpdateWebPluginTemplate:output_type -> header.WebPlugin
	246, // 935: header.WidgetService.ListWebPluginTemplates:output_type -> header.WebPlugins
	11,  // 936: header.WidgetService.DeleteWebPluginTemplate:output_type -> header.Empty
	247, // 937: header.WidgetService.ReportWebPlugin:output_type -> header.ReportWebPluginResponse
	245, // 938: header.WidgetService.SearchImages:output_type -> header.UploadedImages
	248, // 939: header.WidgetService.ListNotifProfiles:output_type -> header.NotifProfiles
	249, // 940: header.WidgetService.ListNotifBackgrounds:output_type -> header.Urls
	250, // 941: header.Bizbot.ListBots:output_type -> header.Bots
	125, // 942: header.Bizbot.GetBot:output_type -> header.Bot
	125, // 943: header.Bizbot.UpdateBotRunState:output_type -> header.Bot
	125, // 944: header.Bizbot.CreateBot:output_type -> header.Bot
	125, // 945: header.Bizbot.UpdateBot:output_type -> header.Bot
	11,  // 946: header.Bizbot.DeleteBot:output_type -> header.Empty
	11,  // 947: header.Bizbot.OnEvent:output_type -> header.Empty
	11,  // 948: header.Bizbot.StartBot:output_type -> header.Empty
	11,  // 949: header.Bizbot.StopBot:output_type -> header.Empty
	11,  // 950: header.Bizbot.TryAction:output_type -> header.Empty
	251, // 951: header.Bizbot.ReportBot2:output_type -> header.BotrunMetrics
	252, // 952: header.Bizbot.ReportAction:output_type -> header.ActionrunMetrics
	253, // 953: header.Bizbot.ListObjects:output_type -> header.ListObjectsResponse
	254, // 954: header.Bizbot.ReportBot:output_type -> header.ReportBotResponse
	131, // 955: header.Sendback.CreateWebhook:output_type -> header.Webhook
	255, // 956: header.Sendback.PingWebhook:output_type -> header.WebhookTestResult
	11,  // 957: header.Sendback.DeleteWebhook:output_type -> header.Empty
	256, // 958: header.Sendback.ListWebhooks:output_type -> header.Webhooks
	131, // 959: header.Sendback.ReadWebhook:output_type -> header.Webhook
	131, // 960: header.Sendback.UpdateWebhook:output_type -> header.Webhook
	131, // 961: header.Sendback.UpdateWebhookSecret:output_type -> header.Webhook
	257, // 962: header.Sendback.ListRecentIndexDeliveries:output_type -> header.WebhookDeliveries
	258, // 963: header.Sendback.GetDelivery:output_type -> header.WebhookDelivery
	11,  // 964: header.Sendback.SendWebhookEvent:output_type -> header.Empty
	11,  // 965: header.Notibox.SendNoti:output_type -> header.Empty
	259, // 966: header.Notibox.ListNoties:output_type -> header.Notifications
	11,  // 967: header.Notibox.MarkReadNoti:output_type -> header.Empty
	11,  // 968: header.Notibox.MarkReadNotiTopic:output_type -> header.Empty
	46,  // 969: header.Proder.ReadProduct:output_type -> header.Product
	46,  // 970: header.Proder.CreateProduct:output_type -> header.Product
	46,  // 971: header.Proder.UpdateProduct:output_type -> header.Product
	11,  // 972: header.Proder.DeleteProduct:output_type -> header.Empty
	260, // 973: header.Proder.ListProducts2:output_type -> header.Products
	261, // 974: header.Proder.ImportProduct:output_type -> header.ImportProductResponse
	262, // 975: header.Proder.ListProductCollections:output_type -> header.ProductCollections
	138, // 976: header.Proder.CreateProductCollection:output_type -> header.ProductCollection
	138, // 977: header.Proder.UpdateProductCollection:output_type -> header.ProductCollection
	11,  // 978: header.Proder.DeleteProductCollection:output_type -> header.Empty
	263, // 979: header.Proder.ListProductFeeds:output_type -> header.ProductFeeds
	139, // 980: header.Proder.CreateProductFeed:output_type -> header.ProductFeed
	139, // 981: header.Proder.UpdateProductFeed:output_type -> header.ProductFeed
	11,  // 982: header.Proder.DeleteProductFeed:output_type -> header.Empty
	264, // 983: header.Proder.ListProductCategories:output_type -> header.ProductCategories
	31,  // 984: header.Proder.ReadOrder:output_type -> header.Order
	31,  // 985: header.Proder.CreateOrder:output_type -> header.Order
	31,  // 986: header.Proder.UpdateOrder:output_type -> header.Order
	11,  // 987: header.Proder.DeleteOrder:output_type -> header.Empty
	142, // 988: header.Proder.ListOrders:output_type -> header.Orders
	265, // 989: header.Proder.CountOrders2:output_type -> header.CountOrdersResponse
	142, // 990: header.Proder.ImportOrders:output_type -> header.Orders
	48,  // 991: header.Proder.MakeOrderPayment:output_type -> header.Event
	48,  // 992: header.Proder.UpdatePurchase:output_type -> header.Event
	48,  // 993: header.Proder.CancelPurchase:output_type -> header.Event
	48,  // 994: header.Proder.AddOrderComment:output_type -> header.Event
	48,  // 995: header.Proder.EditOrderComment:output_type -> header.Event
	48,  // 996: header.Proder.DeleteOrderComment:output_type -> header.Event
	266, // 997: header.Proder.ListOrderEvents:output_type -> header.OrderHistoryEntries
	267, // 998: header.Proder.ListOrderBills:output_type -> header.Bills
	268, // 999: header.Proder.DownloadOrder:output_type -> header.File
	1,   // 1000: header.Proder.GetShopeeAuthUrl:output_type -> header.Id
	269, // 1001: header.Proder.AuthorizeShopeeShop:output_type -> header.ShopeeShop
	11,  // 1002: header.Proder.DeauthorizeShopeeShop:output_type -> header.Empty
	270, // 1003: header.Proder.SyncShopeeProducts:output_type -> header.ShopeeSyncProductResponse
	11,  // 1004: header.Proder.GHTKShippingStatus:output_type -> header.Empty
	11,  // 1005: header.Proder.GHNShippingStatus:output_type -> header.Empty
	151, // 1006: header.Proder.ShippingFee:output_type -> header.ShippingInfo
	31,  // 1007: header.Proder.ShipOrder:output_type -> header.Order
	31,  // 1008: header.Proder.UpdateShippingCode:output_type -> header.Order
	31,  // 1009: header.Proder.CancelShippingOrder:output_type -> header.Order
	268, // 1010: header.Proder.PrintShippingOrders:output_type -> header.File
	11,  // 1011: header.Proder.SeenOrder:output_type -> header.Empty
	11,  // 1012: header.Proder.FollowOrder:output_type -> header.Empty
	11,  // 1013: header.Proder.UnfollowOrder:output_type -> header.Empty
	11,  // 1014: header.Proder.TagOrder:output_type -> header.Empty
	11,  // 1015: header.Proder.UntagOrder:output_type -> header.Empty
	152, // 1016: header.Proder.ReadPipeline:output_type -> header.Pipeline
	152, // 1017: header.Proder.CreatePipeline:output_type -> header.Pipeline
	152, // 1018: header.Proder.UpdatePipeline:output_type -> header.Pipeline
	11,  // 1019: header.Proder.DeletePipeline:output_type -> header.Empty
	271, // 1020: header.Proder.ListPipelines:output_type -> header.Pipelines
	11,  // 1021: header.Proder.DeletePipelineStage:output_type -> header.Empty
	152, // 1022: header.Proder.PreselectPipeline:output_type -> header.Pipeline
	142, // 1023: header.Proder.ReportOrder:output_type -> header.Orders
	11,  // 1024: header.Proder.MoveOrderToPrimary:output_type -> header.Empty
	51,  // 1025: header.TaskMgr.ReadTask:output_type -> header.Task
	51,  // 1026: header.TaskMgr.CreateTask:output_type -> header.Task
	51,  // 1027: header.TaskMgr.UpdateTask:output_type -> header.Task
	11,  // 1028: header.TaskMgr.DeleteTask:output_type -> header.Empty
	272, // 1029: header.TaskMgr.ListTasks:output_type -> header.Tasks
	11,  // 1030: header.TaskMgr.SeenTask:output_type -> header.Empty
	11,  // 1031: header.TaskMgr.CloseTaskReminder:output_type -> header.Empty
	11,  // 1032: header.TaskMgr.MuteTask:output_type -> header.Empty
	11,  // 1033: header.TaskMgr.UnmuteTask:output_type -> header.Empty
	48,  // 1034: header.TaskMgr.AddTaskComment:output_type -> header.Event
	48,  // 1035: header.TaskMgr.EditTaskComment:output_type -> header.Event
	48,  // 1036: header.TaskMgr.DeleteTaskComment:output_type -> header.Event
	273, // 1037: header.TaskMgr.ListTaskComments:output_type -> header.TaskHistoryEntries
	156, // 1038: header.Speex.TextToSpeech:output_type -> header.TTSVoiceSelection
	274, // 1039: header.CampaignMgr.ListCampaigns:output_type -> header.Campaigns
	157, // 1040: header.CampaignMgr.ReadCampaign:output_type -> header.Campaign
	157, // 1041: header.CampaignMgr.CreateCampaign:output_type -> header.Campaign
	157, // 1042: header.CampaignMgr.UpdateCampaign:output_type -> header.Campaign
	11,  // 1043: header.CampaignMgr.DeleteCampaign:output_type -> header.Empty
	11,  // 1044: header.CampaignMgr.OnEvent:output_type -> header.Empty
	275, // 1045: header.CampaignMgr.ListCampaignSendLog:output_type -> header.CampaignSendLog
	276, // 1046: header.CampaignMgr.ReportBroadcastCampaign:output_type -> header.BroadcastCampaignMetrics
	277, // 1047: header.CampaignMgr.ListOutboundCallEntries:output_type -> header.OutboundCallEntries
	160, // 1048: header.CampaignMgr.UpdateOutboundCall:output_type -> header.OutboundCallEntry
	278, // 1049: header.CampaignMgr.ImportOutboundCall:output_type -> header.ImportOutboundCallEntryResponse
	160, // 1050: header.CampaignMgr.GetOutboundCall:output_type -> header.OutboundCallEntry
	11,  // 1051: header.CampaignMgr.RemoveOutboudCall:output_type -> header.Empty
	279, // 1052: header.CampaignMgr.ReportOutboundCalls:output_type -> header.OutboundCallReportResponse
	11,  // 1053: header.CampaignMgr.ReassignOutboundCall:output_type -> header.Empty
	280, // 1054: header.CreditMgr.TrySpendCredit:output_type -> header.TrySpendCreditResponse
	281, // 1055: header.CreditMgr.ReportCreditSpend:output_type -> header.CreditSpendReportResponse
	282, // 1056: header.CreditMgr.ListCreditSpendLog:output_type -> header.CreditSpendEntries
	189, // 1057: header.CreditMgr.ListCredits:output_type -> header.Response
	189, // 1058: header.CreditMgr.AddCredit:output_type -> header.Response
	189, // 1059: header.CreditMgr.DeleteCredit:output_type -> header.Response
	189, // 1060: header.CreditMgr.UpdateCredit:output_type -> header.Response
	283, // 1061: header.FormMgr.ListForms:output_type -> header.Forms
	167, // 1062: header.FormMgr.CreateForm:output_type -> header.Form
	167, // 1063: header.FormMgr.UpdateForm:output_type -> header.Form
	11,  // 1064: header.FormMgr.DeleteForm:output_type -> header.Empty
	284, // 1065: header.FormMgr.ReportForm:output_type -> header.FormReportResponse
	285, // 1066: header.FormMgr.ListFormSubmissions:output_type -> header.FormSubmissions
	170, // 1067: header.Scheduler.RegisterTask:output_type -> header.SchedulerTask
	189, // 1068: header.Scheduler.UnregisterTask:output_type -> header.Response
	171, // 1069: header.KB.CreateKnowledgeBase:output_type -> header.KnowledgeBase
	171, // 1070: header.KB.UpdateKnowledgeBase:output_type -> header.KnowledgeBase
	11,  // 1071: header.KB.DeleteKnowledgeBase:output_type -> header.Empty
	171, // 1072: header.KB.GetKnowledgeBase:output_type -> header.KnowledgeBase
	189, // 1073: header.KB.ListKnowledgeBases:output_type -> header.Response
	172, // 1074: header.KB.CreateArticle:output_type -> header.Article
	172, // 1075: header.KB.UpdateArticle:output_type -> header.Article
	11,  // 1076: header.KB.DeleteArticle:output_type -> header.Empty
	172, // 1077: header.KB.GetArticle:output_type -> header.Article
	189, // 1078: header.KB.ListArticles:output_type -> header.Response
	174, // 1079: header.KB.CreateArticleCategory:output_type -> header.ArticleCategory
	174, // 1080: header.KB.UpdateArticleCategory:output_type -> header.ArticleCategory
	11,  // 1081: header.KB.DeleteArticleCategory:output_type -> header.Empty
	174, // 1082: header.KB.GetArticleCategory:output_type -> header.ArticleCategory
	189, // 1083: header.KB.ListArticleCategories:output_type -> header.Response
	542, // [542:1084] is the sub-list for method output_type
	0,   // [0:542] is the sub-list for method input_type
	0,   // [0:0] is the sub-list for extension type_name
	0,   // [0:0] is the sub-list for extension extendee
	0,   // [0:0] is the sub-list for field type_name
}

func init() { file_service_proto_init() }
func file_service_proto_init() {
	if File_service_proto != nil {
		return
	}
	file_header_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   35,
		},
		GoTypes:           file_service_proto_goTypes,
		DependencyIndexes: file_service_proto_depIdxs,
	}.Build()
	File_service_proto = out.File
	file_service_proto_rawDesc = nil
	file_service_proto_goTypes = nil
	file_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GooglekonServiceClient is the client API for GooglekonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GooglekonServiceClient interface {
	SendEventToGoogle(ctx context.Context, in *Events, opts ...grpc.CallOption) (*Empty, error)
	ReadGoogleLocationSetting(ctx context.Context, in *Id, opts ...grpc.CallOption) (*GoogleLocationSetting, error)
	UpdateGoogleLocationSetting(ctx context.Context, in *GoogleLocationSetting, opts ...grpc.CallOption) (*GoogleLocationSetting, error)
	ListGoogleLocationSettings(ctx context.Context, in *Id, opts ...grpc.CallOption) (*GoogleLocationSettings, error)
}

type googlekonServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGooglekonServiceClient(cc grpc.ClientConnInterface) GooglekonServiceClient {
	return &googlekonServiceClient{cc}
}

func (c *googlekonServiceClient) SendEventToGoogle(ctx context.Context, in *Events, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.GooglekonService/SendEventToGoogle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *googlekonServiceClient) ReadGoogleLocationSetting(ctx context.Context, in *Id, opts ...grpc.CallOption) (*GoogleLocationSetting, error) {
	out := new(GoogleLocationSetting)
	err := c.cc.Invoke(ctx, "/header.GooglekonService/ReadGoogleLocationSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *googlekonServiceClient) UpdateGoogleLocationSetting(ctx context.Context, in *GoogleLocationSetting, opts ...grpc.CallOption) (*GoogleLocationSetting, error) {
	out := new(GoogleLocationSetting)
	err := c.cc.Invoke(ctx, "/header.GooglekonService/UpdateGoogleLocationSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *googlekonServiceClient) ListGoogleLocationSettings(ctx context.Context, in *Id, opts ...grpc.CallOption) (*GoogleLocationSettings, error) {
	out := new(GoogleLocationSettings)
	err := c.cc.Invoke(ctx, "/header.GooglekonService/ListGoogleLocationSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GooglekonServiceServer is the server API for GooglekonService service.
type GooglekonServiceServer interface {
	SendEventToGoogle(context.Context, *Events) (*Empty, error)
	ReadGoogleLocationSetting(context.Context, *Id) (*GoogleLocationSetting, error)
	UpdateGoogleLocationSetting(context.Context, *GoogleLocationSetting) (*GoogleLocationSetting, error)
	ListGoogleLocationSettings(context.Context, *Id) (*GoogleLocationSettings, error)
}

// UnimplementedGooglekonServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGooglekonServiceServer struct {
}

func (*UnimplementedGooglekonServiceServer) SendEventToGoogle(context.Context, *Events) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEventToGoogle not implemented")
}
func (*UnimplementedGooglekonServiceServer) ReadGoogleLocationSetting(context.Context, *Id) (*GoogleLocationSetting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadGoogleLocationSetting not implemented")
}
func (*UnimplementedGooglekonServiceServer) UpdateGoogleLocationSetting(context.Context, *GoogleLocationSetting) (*GoogleLocationSetting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGoogleLocationSetting not implemented")
}
func (*UnimplementedGooglekonServiceServer) ListGoogleLocationSettings(context.Context, *Id) (*GoogleLocationSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGoogleLocationSettings not implemented")
}

func RegisterGooglekonServiceServer(s *grpc.Server, srv GooglekonServiceServer) {
	s.RegisterService(&_GooglekonService_serviceDesc, srv)
}

func _GooglekonService_SendEventToGoogle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Events)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GooglekonServiceServer).SendEventToGoogle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.GooglekonService/SendEventToGoogle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GooglekonServiceServer).SendEventToGoogle(ctx, req.(*Events))
	}
	return interceptor(ctx, in, info, handler)
}

func _GooglekonService_ReadGoogleLocationSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GooglekonServiceServer).ReadGoogleLocationSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.GooglekonService/ReadGoogleLocationSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GooglekonServiceServer).ReadGoogleLocationSetting(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _GooglekonService_UpdateGoogleLocationSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoogleLocationSetting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GooglekonServiceServer).UpdateGoogleLocationSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.GooglekonService/UpdateGoogleLocationSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GooglekonServiceServer).UpdateGoogleLocationSetting(ctx, req.(*GoogleLocationSetting))
	}
	return interceptor(ctx, in, info, handler)
}

func _GooglekonService_ListGoogleLocationSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GooglekonServiceServer).ListGoogleLocationSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.GooglekonService/ListGoogleLocationSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GooglekonServiceServer).ListGoogleLocationSettings(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _GooglekonService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.GooglekonService",
	HandlerType: (*GooglekonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendEventToGoogle",
			Handler:    _GooglekonService_SendEventToGoogle_Handler,
		},
		{
			MethodName: "ReadGoogleLocationSetting",
			Handler:    _GooglekonService_ReadGoogleLocationSetting_Handler,
		},
		{
			MethodName: "UpdateGoogleLocationSetting",
			Handler:    _GooglekonService_UpdateGoogleLocationSetting_Handler,
		},
		{
			MethodName: "ListGoogleLocationSettings",
			Handler:    _GooglekonService_ListGoogleLocationSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// KafkaConsumerClient is the client API for KafkaConsumer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KafkaConsumerClient interface {
	Consume(ctx context.Context, in *KafkaMessage, opts ...grpc.CallOption) (*Empty, error)
}

type kafkaConsumerClient struct {
	cc grpc.ClientConnInterface
}

func NewKafkaConsumerClient(cc grpc.ClientConnInterface) KafkaConsumerClient {
	return &kafkaConsumerClient{cc}
}

func (c *kafkaConsumerClient) Consume(ctx context.Context, in *KafkaMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.KafkaConsumer/Consume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KafkaConsumerServer is the server API for KafkaConsumer service.
type KafkaConsumerServer interface {
	Consume(context.Context, *KafkaMessage) (*Empty, error)
}

// UnimplementedKafkaConsumerServer can be embedded to have forward compatible implementations.
type UnimplementedKafkaConsumerServer struct {
}

func (*UnimplementedKafkaConsumerServer) Consume(context.Context, *KafkaMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Consume not implemented")
}

func RegisterKafkaConsumerServer(s *grpc.Server, srv KafkaConsumerServer) {
	s.RegisterService(&_KafkaConsumer_serviceDesc, srv)
}

func _KafkaConsumer_Consume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KafkaMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaConsumerServer).Consume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.KafkaConsumer/Consume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaConsumerServer).Consume(ctx, req.(*KafkaMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _KafkaConsumer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.KafkaConsumer",
	HandlerType: (*KafkaConsumerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Consume",
			Handler:    _KafkaConsumer_Consume_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// RateLimitClient is the client API for RateLimit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RateLimitClient interface {
	SyncRateLimit(ctx context.Context, in *RateLimitSyncRequest, opts ...grpc.CallOption) (*RateLimitSyncResponse, error)
}

type rateLimitClient struct {
	cc grpc.ClientConnInterface
}

func NewRateLimitClient(cc grpc.ClientConnInterface) RateLimitClient {
	return &rateLimitClient{cc}
}

func (c *rateLimitClient) SyncRateLimit(ctx context.Context, in *RateLimitSyncRequest, opts ...grpc.CallOption) (*RateLimitSyncResponse, error) {
	out := new(RateLimitSyncResponse)
	err := c.cc.Invoke(ctx, "/header.RateLimit/SyncRateLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RateLimitServer is the server API for RateLimit service.
type RateLimitServer interface {
	SyncRateLimit(context.Context, *RateLimitSyncRequest) (*RateLimitSyncResponse, error)
}

// UnimplementedRateLimitServer can be embedded to have forward compatible implementations.
type UnimplementedRateLimitServer struct {
}

func (*UnimplementedRateLimitServer) SyncRateLimit(context.Context, *RateLimitSyncRequest) (*RateLimitSyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncRateLimit not implemented")
}

func RegisterRateLimitServer(s *grpc.Server, srv RateLimitServer) {
	s.RegisterService(&_RateLimit_serviceDesc, srv)
}

func _RateLimit_SyncRateLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RateLimitSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimitServer).SyncRateLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.RateLimit/SyncRateLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimitServer).SyncRateLimit(ctx, req.(*RateLimitSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RateLimit_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.RateLimit",
	HandlerType: (*RateLimitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncRateLimit",
			Handler:    _RateLimit_SyncRateLimit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// DocSearchClient is the client API for DocSearch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DocSearchClient interface {
	IndexConvo(ctx context.Context, in *DocIndexRequest, opts ...grpc.CallOption) (*Empty, error)
	SearchConvos(ctx context.Context, in *DocSearchRequest, opts ...grpc.CallOption) (*DocSearchResponse, error)
	Index(ctx context.Context, in *DocIndexRequest, opts ...grpc.CallOption) (*Empty, error)
	IndexStatic(ctx context.Context, in *DocIndexRequest, opts ...grpc.CallOption) (*Empty, error)
	Search(ctx context.Context, in *DocSearchRequest, opts ...grpc.CallOption) (*DocSearchResponse, error)
	SearchIds(ctx context.Context, in *DocSearchRequest, opts ...grpc.CallOption) (*Ids, error)
	ReportConversation(ctx context.Context, in *ConversationMetricsRequest, opts ...grpc.CallOption) (*ConversationMetrics, error)
	Report(ctx context.Context, in *ConvoReportRequest, opts ...grpc.CallOption) (*ConvoReportResponse, error)
	ListIds(ctx context.Context, in *ConvoReportRequest, opts ...grpc.CallOption) (*Conversations, error)
	ListConversationIds(ctx context.Context, in *ConversationMetricsRequest, opts ...grpc.CallOption) (*Conversations, error)
	ReportCall(ctx context.Context, in *CallMetricsRequest, opts ...grpc.CallOption) (*CallMetrics, error)
	ListCallIds(ctx context.Context, in *CallMetricsRequest, opts ...grpc.CallOption) (*Conversations, error)
	ReportAgent(ctx context.Context, in *AgentMetricsRequest, opts ...grpc.CallOption) (*AgentMetrics, error)
	// healthcheck
	HealthCheckReport(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	HealthCheckIndex(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type docSearchClient struct {
	cc grpc.ClientConnInterface
}

func NewDocSearchClient(cc grpc.ClientConnInterface) DocSearchClient {
	return &docSearchClient{cc}
}

func (c *docSearchClient) IndexConvo(ctx context.Context, in *DocIndexRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.DocSearch/IndexConvo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docSearchClient) SearchConvos(ctx context.Context, in *DocSearchRequest, opts ...grpc.CallOption) (*DocSearchResponse, error) {
	out := new(DocSearchResponse)
	err := c.cc.Invoke(ctx, "/header.DocSearch/SearchConvos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docSearchClient) Index(ctx context.Context, in *DocIndexRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.DocSearch/Index", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docSearchClient) IndexStatic(ctx context.Context, in *DocIndexRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.DocSearch/IndexStatic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docSearchClient) Search(ctx context.Context, in *DocSearchRequest, opts ...grpc.CallOption) (*DocSearchResponse, error) {
	out := new(DocSearchResponse)
	err := c.cc.Invoke(ctx, "/header.DocSearch/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docSearchClient) SearchIds(ctx context.Context, in *DocSearchRequest, opts ...grpc.CallOption) (*Ids, error) {
	out := new(Ids)
	err := c.cc.Invoke(ctx, "/header.DocSearch/SearchIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docSearchClient) ReportConversation(ctx context.Context, in *ConversationMetricsRequest, opts ...grpc.CallOption) (*ConversationMetrics, error) {
	out := new(ConversationMetrics)
	err := c.cc.Invoke(ctx, "/header.DocSearch/ReportConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docSearchClient) Report(ctx context.Context, in *ConvoReportRequest, opts ...grpc.CallOption) (*ConvoReportResponse, error) {
	out := new(ConvoReportResponse)
	err := c.cc.Invoke(ctx, "/header.DocSearch/Report", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docSearchClient) ListIds(ctx context.Context, in *ConvoReportRequest, opts ...grpc.CallOption) (*Conversations, error) {
	out := new(Conversations)
	err := c.cc.Invoke(ctx, "/header.DocSearch/ListIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docSearchClient) ListConversationIds(ctx context.Context, in *ConversationMetricsRequest, opts ...grpc.CallOption) (*Conversations, error) {
	out := new(Conversations)
	err := c.cc.Invoke(ctx, "/header.DocSearch/ListConversationIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docSearchClient) ReportCall(ctx context.Context, in *CallMetricsRequest, opts ...grpc.CallOption) (*CallMetrics, error) {
	out := new(CallMetrics)
	err := c.cc.Invoke(ctx, "/header.DocSearch/ReportCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docSearchClient) ListCallIds(ctx context.Context, in *CallMetricsRequest, opts ...grpc.CallOption) (*Conversations, error) {
	out := new(Conversations)
	err := c.cc.Invoke(ctx, "/header.DocSearch/ListCallIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docSearchClient) ReportAgent(ctx context.Context, in *AgentMetricsRequest, opts ...grpc.CallOption) (*AgentMetrics, error) {
	out := new(AgentMetrics)
	err := c.cc.Invoke(ctx, "/header.DocSearch/ReportAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docSearchClient) HealthCheckReport(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.DocSearch/HealthCheckReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docSearchClient) HealthCheckIndex(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.DocSearch/HealthCheckIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DocSearchServer is the server API for DocSearch service.
type DocSearchServer interface {
	IndexConvo(context.Context, *DocIndexRequest) (*Empty, error)
	SearchConvos(context.Context, *DocSearchRequest) (*DocSearchResponse, error)
	Index(context.Context, *DocIndexRequest) (*Empty, error)
	IndexStatic(context.Context, *DocIndexRequest) (*Empty, error)
	Search(context.Context, *DocSearchRequest) (*DocSearchResponse, error)
	SearchIds(context.Context, *DocSearchRequest) (*Ids, error)
	ReportConversation(context.Context, *ConversationMetricsRequest) (*ConversationMetrics, error)
	Report(context.Context, *ConvoReportRequest) (*ConvoReportResponse, error)
	ListIds(context.Context, *ConvoReportRequest) (*Conversations, error)
	ListConversationIds(context.Context, *ConversationMetricsRequest) (*Conversations, error)
	ReportCall(context.Context, *CallMetricsRequest) (*CallMetrics, error)
	ListCallIds(context.Context, *CallMetricsRequest) (*Conversations, error)
	ReportAgent(context.Context, *AgentMetricsRequest) (*AgentMetrics, error)
	// healthcheck
	HealthCheckReport(context.Context, *Empty) (*Empty, error)
	HealthCheckIndex(context.Context, *Empty) (*Empty, error)
}

// UnimplementedDocSearchServer can be embedded to have forward compatible implementations.
type UnimplementedDocSearchServer struct {
}

func (*UnimplementedDocSearchServer) IndexConvo(context.Context, *DocIndexRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IndexConvo not implemented")
}
func (*UnimplementedDocSearchServer) SearchConvos(context.Context, *DocSearchRequest) (*DocSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchConvos not implemented")
}
func (*UnimplementedDocSearchServer) Index(context.Context, *DocIndexRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Index not implemented")
}
func (*UnimplementedDocSearchServer) IndexStatic(context.Context, *DocIndexRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IndexStatic not implemented")
}
func (*UnimplementedDocSearchServer) Search(context.Context, *DocSearchRequest) (*DocSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (*UnimplementedDocSearchServer) SearchIds(context.Context, *DocSearchRequest) (*Ids, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchIds not implemented")
}
func (*UnimplementedDocSearchServer) ReportConversation(context.Context, *ConversationMetricsRequest) (*ConversationMetrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportConversation not implemented")
}
func (*UnimplementedDocSearchServer) Report(context.Context, *ConvoReportRequest) (*ConvoReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Report not implemented")
}
func (*UnimplementedDocSearchServer) ListIds(context.Context, *ConvoReportRequest) (*Conversations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIds not implemented")
}
func (*UnimplementedDocSearchServer) ListConversationIds(context.Context, *ConversationMetricsRequest) (*Conversations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConversationIds not implemented")
}
func (*UnimplementedDocSearchServer) ReportCall(context.Context, *CallMetricsRequest) (*CallMetrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportCall not implemented")
}
func (*UnimplementedDocSearchServer) ListCallIds(context.Context, *CallMetricsRequest) (*Conversations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCallIds not implemented")
}
func (*UnimplementedDocSearchServer) ReportAgent(context.Context, *AgentMetricsRequest) (*AgentMetrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportAgent not implemented")
}
func (*UnimplementedDocSearchServer) HealthCheckReport(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheckReport not implemented")
}
func (*UnimplementedDocSearchServer) HealthCheckIndex(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheckIndex not implemented")
}

func RegisterDocSearchServer(s *grpc.Server, srv DocSearchServer) {
	s.RegisterService(&_DocSearch_serviceDesc, srv)
}

func _DocSearch_IndexConvo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocSearchServer).IndexConvo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.DocSearch/IndexConvo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocSearchServer).IndexConvo(ctx, req.(*DocIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocSearch_SearchConvos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocSearchServer).SearchConvos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.DocSearch/SearchConvos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocSearchServer).SearchConvos(ctx, req.(*DocSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocSearch_Index_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocSearchServer).Index(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.DocSearch/Index",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocSearchServer).Index(ctx, req.(*DocIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocSearch_IndexStatic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocSearchServer).IndexStatic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.DocSearch/IndexStatic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocSearchServer).IndexStatic(ctx, req.(*DocIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocSearch_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocSearchServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.DocSearch/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocSearchServer).Search(ctx, req.(*DocSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocSearch_SearchIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocSearchServer).SearchIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.DocSearch/SearchIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocSearchServer).SearchIds(ctx, req.(*DocSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocSearch_ReportConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversationMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocSearchServer).ReportConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.DocSearch/ReportConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocSearchServer).ReportConversation(ctx, req.(*ConversationMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocSearch_Report_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConvoReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocSearchServer).Report(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.DocSearch/Report",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocSearchServer).Report(ctx, req.(*ConvoReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocSearch_ListIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConvoReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocSearchServer).ListIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.DocSearch/ListIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocSearchServer).ListIds(ctx, req.(*ConvoReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocSearch_ListConversationIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversationMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocSearchServer).ListConversationIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.DocSearch/ListConversationIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocSearchServer).ListConversationIds(ctx, req.(*ConversationMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocSearch_ReportCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocSearchServer).ReportCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.DocSearch/ReportCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocSearchServer).ReportCall(ctx, req.(*CallMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocSearch_ListCallIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocSearchServer).ListCallIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.DocSearch/ListCallIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocSearchServer).ListCallIds(ctx, req.(*CallMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocSearch_ReportAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocSearchServer).ReportAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.DocSearch/ReportAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocSearchServer).ReportAgent(ctx, req.(*AgentMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocSearch_HealthCheckReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocSearchServer).HealthCheckReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.DocSearch/HealthCheckReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocSearchServer).HealthCheckReport(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocSearch_HealthCheckIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocSearchServer).HealthCheckIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.DocSearch/HealthCheckIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocSearchServer).HealthCheckIndex(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _DocSearch_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.DocSearch",
	HandlerType: (*DocSearchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IndexConvo",
			Handler:    _DocSearch_IndexConvo_Handler,
		},
		{
			MethodName: "SearchConvos",
			Handler:    _DocSearch_SearchConvos_Handler,
		},
		{
			MethodName: "Index",
			Handler:    _DocSearch_Index_Handler,
		},
		{
			MethodName: "IndexStatic",
			Handler:    _DocSearch_IndexStatic_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _DocSearch_Search_Handler,
		},
		{
			MethodName: "SearchIds",
			Handler:    _DocSearch_SearchIds_Handler,
		},
		{
			MethodName: "ReportConversation",
			Handler:    _DocSearch_ReportConversation_Handler,
		},
		{
			MethodName: "Report",
			Handler:    _DocSearch_Report_Handler,
		},
		{
			MethodName: "ListIds",
			Handler:    _DocSearch_ListIds_Handler,
		},
		{
			MethodName: "ListConversationIds",
			Handler:    _DocSearch_ListConversationIds_Handler,
		},
		{
			MethodName: "ReportCall",
			Handler:    _DocSearch_ReportCall_Handler,
		},
		{
			MethodName: "ListCallIds",
			Handler:    _DocSearch_ListCallIds_Handler,
		},
		{
			MethodName: "ReportAgent",
			Handler:    _DocSearch_ReportAgent_Handler,
		},
		{
			MethodName: "HealthCheckReport",
			Handler:    _DocSearch_HealthCheckReport_Handler,
		},
		{
			MethodName: "HealthCheckIndex",
			Handler:    _DocSearch_HealthCheckIndex_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// NumberRegistryClient is the client API for NumberRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NumberRegistryClient interface {
	Compact(ctx context.Context, in *String, opts ...grpc.CallOption) (*Number, error)
	Uncompact(ctx context.Context, in *Number, opts ...grpc.CallOption) (*String, error)
	CompactM(ctx context.Context, in *StrNumM, opts ...grpc.CallOption) (*StrNumM, error)
	Shorten(ctx context.Context, in *String, opts ...grpc.CallOption) (*Number, error)
	Lookup(ctx context.Context, in *Number, opts ...grpc.CallOption) (*String, error)
	NewID2(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Id, error)
}

type numberRegistryClient struct {
	cc grpc.ClientConnInterface
}

func NewNumberRegistryClient(cc grpc.ClientConnInterface) NumberRegistryClient {
	return &numberRegistryClient{cc}
}

func (c *numberRegistryClient) Compact(ctx context.Context, in *String, opts ...grpc.CallOption) (*Number, error) {
	out := new(Number)
	err := c.cc.Invoke(ctx, "/header.NumberRegistry/Compact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *numberRegistryClient) Uncompact(ctx context.Context, in *Number, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/header.NumberRegistry/Uncompact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *numberRegistryClient) CompactM(ctx context.Context, in *StrNumM, opts ...grpc.CallOption) (*StrNumM, error) {
	out := new(StrNumM)
	err := c.cc.Invoke(ctx, "/header.NumberRegistry/CompactM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *numberRegistryClient) Shorten(ctx context.Context, in *String, opts ...grpc.CallOption) (*Number, error) {
	out := new(Number)
	err := c.cc.Invoke(ctx, "/header.NumberRegistry/Shorten", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *numberRegistryClient) Lookup(ctx context.Context, in *Number, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/header.NumberRegistry/Lookup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *numberRegistryClient) NewID2(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/header.NumberRegistry/NewID2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NumberRegistryServer is the server API for NumberRegistry service.
type NumberRegistryServer interface {
	Compact(context.Context, *String) (*Number, error)
	Uncompact(context.Context, *Number) (*String, error)
	CompactM(context.Context, *StrNumM) (*StrNumM, error)
	Shorten(context.Context, *String) (*Number, error)
	Lookup(context.Context, *Number) (*String, error)
	NewID2(context.Context, *Id) (*Id, error)
}

// UnimplementedNumberRegistryServer can be embedded to have forward compatible implementations.
type UnimplementedNumberRegistryServer struct {
}

func (*UnimplementedNumberRegistryServer) Compact(context.Context, *String) (*Number, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Compact not implemented")
}
func (*UnimplementedNumberRegistryServer) Uncompact(context.Context, *Number) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Uncompact not implemented")
}
func (*UnimplementedNumberRegistryServer) CompactM(context.Context, *StrNumM) (*StrNumM, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompactM not implemented")
}
func (*UnimplementedNumberRegistryServer) Shorten(context.Context, *String) (*Number, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shorten not implemented")
}
func (*UnimplementedNumberRegistryServer) Lookup(context.Context, *Number) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lookup not implemented")
}
func (*UnimplementedNumberRegistryServer) NewID2(context.Context, *Id) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewID2 not implemented")
}

func RegisterNumberRegistryServer(s *grpc.Server, srv NumberRegistryServer) {
	s.RegisterService(&_NumberRegistry_serviceDesc, srv)
}

func _NumberRegistry_Compact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NumberRegistryServer).Compact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.NumberRegistry/Compact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NumberRegistryServer).Compact(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _NumberRegistry_Uncompact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Number)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NumberRegistryServer).Uncompact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.NumberRegistry/Uncompact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NumberRegistryServer).Uncompact(ctx, req.(*Number))
	}
	return interceptor(ctx, in, info, handler)
}

func _NumberRegistry_CompactM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StrNumM)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NumberRegistryServer).CompactM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.NumberRegistry/CompactM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NumberRegistryServer).CompactM(ctx, req.(*StrNumM))
	}
	return interceptor(ctx, in, info, handler)
}

func _NumberRegistry_Shorten_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NumberRegistryServer).Shorten(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.NumberRegistry/Shorten",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NumberRegistryServer).Shorten(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _NumberRegistry_Lookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Number)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NumberRegistryServer).Lookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.NumberRegistry/Lookup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NumberRegistryServer).Lookup(ctx, req.(*Number))
	}
	return interceptor(ctx, in, info, handler)
}

func _NumberRegistry_NewID2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NumberRegistryServer).NewID2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.NumberRegistry/NewID2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NumberRegistryServer).NewID2(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _NumberRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.NumberRegistry",
	HandlerType: (*NumberRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Compact",
			Handler:    _NumberRegistry_Compact_Handler,
		},
		{
			MethodName: "Uncompact",
			Handler:    _NumberRegistry_Uncompact_Handler,
		},
		{
			MethodName: "CompactM",
			Handler:    _NumberRegistry_CompactM_Handler,
		},
		{
			MethodName: "Shorten",
			Handler:    _NumberRegistry_Shorten_Handler,
		},
		{
			MethodName: "Lookup",
			Handler:    _NumberRegistry_Lookup_Handler,
		},
		{
			MethodName: "NewID2",
			Handler:    _NumberRegistry_NewID2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// MapClient is the client API for Map service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MapClient interface {
	Predict(ctx context.Context, in *AddressAutocompleteRequest, opts ...grpc.CallOption) (*AddressAutocompleteResponses, error)
	LookupAddress(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Address, error)
	PredictAddress(ctx context.Context, in *AddressAutocompleteRequest, opts ...grpc.CallOption) (*Addresses, error)
	ListDistricts(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Addresses, error)
	ListProvinces(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Addresses, error)
	ListWards(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Addresses, error)
	ListStreets(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Addresses, error)
	ListAddresses(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Addresses, error)
	ReadAddress(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Address, error)
}

type mapClient struct {
	cc grpc.ClientConnInterface
}

func NewMapClient(cc grpc.ClientConnInterface) MapClient {
	return &mapClient{cc}
}

func (c *mapClient) Predict(ctx context.Context, in *AddressAutocompleteRequest, opts ...grpc.CallOption) (*AddressAutocompleteResponses, error) {
	out := new(AddressAutocompleteResponses)
	err := c.cc.Invoke(ctx, "/header.Map/Predict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapClient) LookupAddress(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Address, error) {
	out := new(Address)
	err := c.cc.Invoke(ctx, "/header.Map/LookupAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapClient) PredictAddress(ctx context.Context, in *AddressAutocompleteRequest, opts ...grpc.CallOption) (*Addresses, error) {
	out := new(Addresses)
	err := c.cc.Invoke(ctx, "/header.Map/PredictAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapClient) ListDistricts(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Addresses, error) {
	out := new(Addresses)
	err := c.cc.Invoke(ctx, "/header.Map/ListDistricts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapClient) ListProvinces(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Addresses, error) {
	out := new(Addresses)
	err := c.cc.Invoke(ctx, "/header.Map/ListProvinces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapClient) ListWards(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Addresses, error) {
	out := new(Addresses)
	err := c.cc.Invoke(ctx, "/header.Map/ListWards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapClient) ListStreets(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Addresses, error) {
	out := new(Addresses)
	err := c.cc.Invoke(ctx, "/header.Map/ListStreets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapClient) ListAddresses(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Addresses, error) {
	out := new(Addresses)
	err := c.cc.Invoke(ctx, "/header.Map/ListAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapClient) ReadAddress(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Address, error) {
	out := new(Address)
	err := c.cc.Invoke(ctx, "/header.Map/ReadAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MapServer is the server API for Map service.
type MapServer interface {
	Predict(context.Context, *AddressAutocompleteRequest) (*AddressAutocompleteResponses, error)
	LookupAddress(context.Context, *Id) (*Address, error)
	PredictAddress(context.Context, *AddressAutocompleteRequest) (*Addresses, error)
	ListDistricts(context.Context, *Id) (*Addresses, error)
	ListProvinces(context.Context, *Id) (*Addresses, error)
	ListWards(context.Context, *Id) (*Addresses, error)
	ListStreets(context.Context, *Id) (*Addresses, error)
	ListAddresses(context.Context, *Ids) (*Addresses, error)
	ReadAddress(context.Context, *Id) (*Address, error)
}

// UnimplementedMapServer can be embedded to have forward compatible implementations.
type UnimplementedMapServer struct {
}

func (*UnimplementedMapServer) Predict(context.Context, *AddressAutocompleteRequest) (*AddressAutocompleteResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Predict not implemented")
}
func (*UnimplementedMapServer) LookupAddress(context.Context, *Id) (*Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupAddress not implemented")
}
func (*UnimplementedMapServer) PredictAddress(context.Context, *AddressAutocompleteRequest) (*Addresses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PredictAddress not implemented")
}
func (*UnimplementedMapServer) ListDistricts(context.Context, *Id) (*Addresses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDistricts not implemented")
}
func (*UnimplementedMapServer) ListProvinces(context.Context, *Id) (*Addresses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProvinces not implemented")
}
func (*UnimplementedMapServer) ListWards(context.Context, *Id) (*Addresses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWards not implemented")
}
func (*UnimplementedMapServer) ListStreets(context.Context, *Id) (*Addresses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStreets not implemented")
}
func (*UnimplementedMapServer) ListAddresses(context.Context, *Ids) (*Addresses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAddresses not implemented")
}
func (*UnimplementedMapServer) ReadAddress(context.Context, *Id) (*Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAddress not implemented")
}

func RegisterMapServer(s *grpc.Server, srv MapServer) {
	s.RegisterService(&_Map_serviceDesc, srv)
}

func _Map_Predict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressAutocompleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapServer).Predict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Map/Predict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapServer).Predict(ctx, req.(*AddressAutocompleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Map_LookupAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapServer).LookupAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Map/LookupAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapServer).LookupAddress(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Map_PredictAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressAutocompleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapServer).PredictAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Map/PredictAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapServer).PredictAddress(ctx, req.(*AddressAutocompleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Map_ListDistricts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapServer).ListDistricts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Map/ListDistricts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapServer).ListDistricts(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Map_ListProvinces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapServer).ListProvinces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Map/ListProvinces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapServer).ListProvinces(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Map_ListWards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapServer).ListWards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Map/ListWards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapServer).ListWards(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Map_ListStreets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapServer).ListStreets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Map/ListStreets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapServer).ListStreets(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Map_ListAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapServer).ListAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Map/ListAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapServer).ListAddresses(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _Map_ReadAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapServer).ReadAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Map/ReadAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapServer).ReadAddress(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _Map_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.Map",
	HandlerType: (*MapServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Predict",
			Handler:    _Map_Predict_Handler,
		},
		{
			MethodName: "LookupAddress",
			Handler:    _Map_LookupAddress_Handler,
		},
		{
			MethodName: "PredictAddress",
			Handler:    _Map_PredictAddress_Handler,
		},
		{
			MethodName: "ListDistricts",
			Handler:    _Map_ListDistricts_Handler,
		},
		{
			MethodName: "ListProvinces",
			Handler:    _Map_ListProvinces_Handler,
		},
		{
			MethodName: "ListWards",
			Handler:    _Map_ListWards_Handler,
		},
		{
			MethodName: "ListStreets",
			Handler:    _Map_ListStreets_Handler,
		},
		{
			MethodName: "ListAddresses",
			Handler:    _Map_ListAddresses_Handler,
		},
		{
			MethodName: "ReadAddress",
			Handler:    _Map_ReadAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// RefererMgrClient is the client API for RefererMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RefererMgrClient interface {
	ListReferrerPayouts(ctx context.Context, in *Id, opts ...grpc.CallOption) (*account.ReferrerPayoutBills, error)
	PayReferrer(ctx context.Context, in *account.ReferrerPayoutBill, opts ...grpc.CallOption) (*account.ReferrerPayoutBill, error)
	ListReferredCustomers(ctx context.Context, in *Id, opts ...grpc.CallOption) (*account.ReferredCustomers, error)
	ListReferredInvoices(ctx context.Context, in *Id, opts ...grpc.CallOption) (*account.ReferredInvoices, error)
	GetReferrerAgent(ctx context.Context, in *Id, opts ...grpc.CallOption) (*account.ReferrerAgent, error)
	ListPayoutReferrerAgents(ctx context.Context, in *Id, opts ...grpc.CallOption) (*account.ReferrerAgents, error)
	RefererAccount(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	UpdateReferrerAgent(ctx context.Context, in *account.ReferrerAgent, opts ...grpc.CallOption) (*account.ReferrerAgent, error)
}

type refererMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewRefererMgrClient(cc grpc.ClientConnInterface) RefererMgrClient {
	return &refererMgrClient{cc}
}

func (c *refererMgrClient) ListReferrerPayouts(ctx context.Context, in *Id, opts ...grpc.CallOption) (*account.ReferrerPayoutBills, error) {
	out := new(account.ReferrerPayoutBills)
	err := c.cc.Invoke(ctx, "/header.RefererMgr/ListReferrerPayouts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refererMgrClient) PayReferrer(ctx context.Context, in *account.ReferrerPayoutBill, opts ...grpc.CallOption) (*account.ReferrerPayoutBill, error) {
	out := new(account.ReferrerPayoutBill)
	err := c.cc.Invoke(ctx, "/header.RefererMgr/PayReferrer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refererMgrClient) ListReferredCustomers(ctx context.Context, in *Id, opts ...grpc.CallOption) (*account.ReferredCustomers, error) {
	out := new(account.ReferredCustomers)
	err := c.cc.Invoke(ctx, "/header.RefererMgr/ListReferredCustomers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refererMgrClient) ListReferredInvoices(ctx context.Context, in *Id, opts ...grpc.CallOption) (*account.ReferredInvoices, error) {
	out := new(account.ReferredInvoices)
	err := c.cc.Invoke(ctx, "/header.RefererMgr/ListReferredInvoices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refererMgrClient) GetReferrerAgent(ctx context.Context, in *Id, opts ...grpc.CallOption) (*account.ReferrerAgent, error) {
	out := new(account.ReferrerAgent)
	err := c.cc.Invoke(ctx, "/header.RefererMgr/GetReferrerAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refererMgrClient) ListPayoutReferrerAgents(ctx context.Context, in *Id, opts ...grpc.CallOption) (*account.ReferrerAgents, error) {
	out := new(account.ReferrerAgents)
	err := c.cc.Invoke(ctx, "/header.RefererMgr/ListPayoutReferrerAgents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refererMgrClient) RefererAccount(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.RefererMgr/RefererAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refererMgrClient) UpdateReferrerAgent(ctx context.Context, in *account.ReferrerAgent, opts ...grpc.CallOption) (*account.ReferrerAgent, error) {
	out := new(account.ReferrerAgent)
	err := c.cc.Invoke(ctx, "/header.RefererMgr/UpdateReferrerAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RefererMgrServer is the server API for RefererMgr service.
type RefererMgrServer interface {
	ListReferrerPayouts(context.Context, *Id) (*account.ReferrerPayoutBills, error)
	PayReferrer(context.Context, *account.ReferrerPayoutBill) (*account.ReferrerPayoutBill, error)
	ListReferredCustomers(context.Context, *Id) (*account.ReferredCustomers, error)
	ListReferredInvoices(context.Context, *Id) (*account.ReferredInvoices, error)
	GetReferrerAgent(context.Context, *Id) (*account.ReferrerAgent, error)
	ListPayoutReferrerAgents(context.Context, *Id) (*account.ReferrerAgents, error)
	RefererAccount(context.Context, *Id) (*Empty, error)
	UpdateReferrerAgent(context.Context, *account.ReferrerAgent) (*account.ReferrerAgent, error)
}

// UnimplementedRefererMgrServer can be embedded to have forward compatible implementations.
type UnimplementedRefererMgrServer struct {
}

func (*UnimplementedRefererMgrServer) ListReferrerPayouts(context.Context, *Id) (*account.ReferrerPayoutBills, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReferrerPayouts not implemented")
}
func (*UnimplementedRefererMgrServer) PayReferrer(context.Context, *account.ReferrerPayoutBill) (*account.ReferrerPayoutBill, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayReferrer not implemented")
}
func (*UnimplementedRefererMgrServer) ListReferredCustomers(context.Context, *Id) (*account.ReferredCustomers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReferredCustomers not implemented")
}
func (*UnimplementedRefererMgrServer) ListReferredInvoices(context.Context, *Id) (*account.ReferredInvoices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReferredInvoices not implemented")
}
func (*UnimplementedRefererMgrServer) GetReferrerAgent(context.Context, *Id) (*account.ReferrerAgent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReferrerAgent not implemented")
}
func (*UnimplementedRefererMgrServer) ListPayoutReferrerAgents(context.Context, *Id) (*account.ReferrerAgents, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPayoutReferrerAgents not implemented")
}
func (*UnimplementedRefererMgrServer) RefererAccount(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefererAccount not implemented")
}
func (*UnimplementedRefererMgrServer) UpdateReferrerAgent(context.Context, *account.ReferrerAgent) (*account.ReferrerAgent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReferrerAgent not implemented")
}

func RegisterRefererMgrServer(s *grpc.Server, srv RefererMgrServer) {
	s.RegisterService(&_RefererMgr_serviceDesc, srv)
}

func _RefererMgr_ListReferrerPayouts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefererMgrServer).ListReferrerPayouts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.RefererMgr/ListReferrerPayouts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefererMgrServer).ListReferrerPayouts(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _RefererMgr_PayReferrer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.ReferrerPayoutBill)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefererMgrServer).PayReferrer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.RefererMgr/PayReferrer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefererMgrServer).PayReferrer(ctx, req.(*account.ReferrerPayoutBill))
	}
	return interceptor(ctx, in, info, handler)
}

func _RefererMgr_ListReferredCustomers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefererMgrServer).ListReferredCustomers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.RefererMgr/ListReferredCustomers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefererMgrServer).ListReferredCustomers(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _RefererMgr_ListReferredInvoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefererMgrServer).ListReferredInvoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.RefererMgr/ListReferredInvoices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefererMgrServer).ListReferredInvoices(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _RefererMgr_GetReferrerAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefererMgrServer).GetReferrerAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.RefererMgr/GetReferrerAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefererMgrServer).GetReferrerAgent(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _RefererMgr_ListPayoutReferrerAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefererMgrServer).ListPayoutReferrerAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.RefererMgr/ListPayoutReferrerAgents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefererMgrServer).ListPayoutReferrerAgents(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _RefererMgr_RefererAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefererMgrServer).RefererAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.RefererMgr/RefererAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefererMgrServer).RefererAccount(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _RefererMgr_UpdateReferrerAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.ReferrerAgent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefererMgrServer).UpdateReferrerAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.RefererMgr/UpdateReferrerAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefererMgrServer).UpdateReferrerAgent(ctx, req.(*account.ReferrerAgent))
	}
	return interceptor(ctx, in, info, handler)
}

var _RefererMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.RefererMgr",
	HandlerType: (*RefererMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListReferrerPayouts",
			Handler:    _RefererMgr_ListReferrerPayouts_Handler,
		},
		{
			MethodName: "PayReferrer",
			Handler:    _RefererMgr_PayReferrer_Handler,
		},
		{
			MethodName: "ListReferredCustomers",
			Handler:    _RefererMgr_ListReferredCustomers_Handler,
		},
		{
			MethodName: "ListReferredInvoices",
			Handler:    _RefererMgr_ListReferredInvoices_Handler,
		},
		{
			MethodName: "GetReferrerAgent",
			Handler:    _RefererMgr_GetReferrerAgent_Handler,
		},
		{
			MethodName: "ListPayoutReferrerAgents",
			Handler:    _RefererMgr_ListPayoutReferrerAgents_Handler,
		},
		{
			MethodName: "RefererAccount",
			Handler:    _RefererMgr_RefererAccount_Handler,
		},
		{
			MethodName: "UpdateReferrerAgent",
			Handler:    _RefererMgr_UpdateReferrerAgent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// AccountMgrClient is the client API for AccountMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AccountMgrClient interface {
	CreateGroup(ctx context.Context, in *AgentGroup, opts ...grpc.CallOption) (*AgentGroup, error)
	UpdateGroup(ctx context.Context, in *AgentGroup, opts ...grpc.CallOption) (*AgentGroup, error)
	GetGroup(ctx context.Context, in *Id, opts ...grpc.CallOption) (*AgentGroup, error)
	RequestPassword(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	UpdatePassword(ctx context.Context, in *NewPassword, opts ...grpc.CallOption) (*account.Agent, error)
	UpdateAgent(ctx context.Context, in *account.Agent, opts ...grpc.CallOption) (*account.Agent, error)
	DeleteAgent(ctx context.Context, in *Id, opts ...grpc.CallOption) (*account.Agent, error)
	DeleteAccount(ctx context.Context, in *Id, opts ...grpc.CallOption) (*account.Account, error)
	SubizUpdateAccount(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error)
	RequestChangeEmail(ctx context.Context, in *account.Agent, opts ...grpc.CallOption) (*Empty, error)
	ConfirmChangeEmail(ctx context.Context, in *account.Token, opts ...grpc.CallOption) (*account.Agent, error)
	AcceptInvitation(ctx context.Context, in *NewPassword, opts ...grpc.CallOption) (*account.Agent, error)
	GetInvitation(ctx context.Context, in *account.Token, opts ...grpc.CallOption) (*account.Agent, error)
	InviteAgent(ctx context.Context, in *account.Agent, opts ...grpc.CallOption) (*account.Agent, error)
	GetAgent(ctx context.Context, in *Id, opts ...grpc.CallOption) (*account.Agent, error)
	LookupAgentById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*account.Agent, error)
	ConfirmAccount(ctx context.Context, in *account.Token, opts ...grpc.CallOption) (*account.Account, error)
	GetAccount(ctx context.Context, in *Id, opts ...grpc.CallOption) (*account.Account, error)
	UpdateAccount(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error)
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*account.Account, error)
	ListAgents(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error)
	DeleteGroup(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	ListGroups(ctx context.Context, in *Id, opts ...grpc.CallOption) (*AgentGroups, error)
	ChangeEmail(ctx context.Context, in *account.Agent, opts ...grpc.CallOption) (*account.Agent, error)
	SyncPublicHolidays(ctx context.Context, in *account.SyncPublicHolidaysRequest, opts ...grpc.CallOption) (*account.BusinessHours, error)
	TransferOwner(ctx context.Context, in *Id, opts ...grpc.CallOption) (*account.Agent, error)
	CheckLoginSession(ctx context.Context, in *LoginSession, opts ...grpc.CallOption) (*LoginSession, error)
	CreateLoginSession(ctx context.Context, in *Id, opts ...grpc.CallOption) (*LoginSession, error)
	ListLoginSessions(ctx context.Context, in *Id, opts ...grpc.CallOption) (*LoginSessions, error)
	ListApiKeys(ctx context.Context, in *Id, opts ...grpc.CallOption) (*LoginSessions, error)
	LogoutSession(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	CreateApiKey(ctx context.Context, in *LoginSession, opts ...grpc.CallOption) (*LoginSession, error)
	GetLanguage(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Lang, error)
	UpdateLanguage(ctx context.Context, in *LangMessage, opts ...grpc.CallOption) (*LangMessage, error)
	GetShopSetting(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ShopSetting, error)
	UpdateShopSetting(ctx context.Context, in *ShopSetting, opts ...grpc.CallOption) (*ShopSetting, error)
	ReadCurrency(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Currency, error)
	// internal
	AutoSyncCurrency(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	ListShopAddresses(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Addresses, error)
	CreateShopAddress(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Address, error)
	UpdateShopAddress(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Address, error)
	DeleteShopAddress(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	ListTaxes(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error)
	CreateTax(ctx context.Context, in *Tax, opts ...grpc.CallOption) (*Tax, error)
	UpdateTax(ctx context.Context, in *Tax, opts ...grpc.CallOption) (*Tax, error)
	DeleteTax(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	CheckShippingPolicy(ctx context.Context, in *Order, opts ...grpc.CallOption) (*ShippingPolicies, error)
	ListShippingPolicies(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ShippingPolicies, error)
	CreateShippingPolicy(ctx context.Context, in *ShippingPolicy, opts ...grpc.CallOption) (*ShippingPolicy, error)
	UpdateShippingPolicy(ctx context.Context, in *ShippingPolicy, opts ...grpc.CallOption) (*ShippingPolicy, error)
	DeleteShippingPolicy(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	CreateCancellationCode(ctx context.Context, in *CancellationCode, opts ...grpc.CallOption) (*CancellationCode, error)
	ListCancellationCodes(ctx context.Context, in *Id, opts ...grpc.CallOption) (*CancellationCodes, error)
	UpdateCancellationCode(ctx context.Context, in *CancellationCode, opts ...grpc.CallOption) (*CancellationCode, error)
	MakeDefaultTax(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	ListPaymentMethods(ctx context.Context, in *Id, opts ...grpc.CallOption) (*PaymentMethods, error)
	CreatePaymentMethod(ctx context.Context, in *PaymentMethod, opts ...grpc.CallOption) (*PaymentMethod, error)
	UpdatePaymentMethod(ctx context.Context, in *PaymentMethod, opts ...grpc.CallOption) (*PaymentMethod, error)
	DeletePaymentMethod(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	MakeDefaultPaymentMethod(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	ListIntegratedShippingProviders(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*IntegratedShippings, error)
	DeintegrateShippingProvider(ctx context.Context, in *IntegratedShipping, opts ...grpc.CallOption) (*Empty, error)
	IntegrateShippingProvider(ctx context.Context, in *IntegratedShipping, opts ...grpc.CallOption) (*IntegratedShipping, error)
	SendGHNAffiliateOTP(ctx context.Context, in *IntegratedShipping, opts ...grpc.CallOption) (*IntegratedShipping, error)
	EnterGHNAffiliateOTP(ctx context.Context, in *IntegratedShipping, opts ...grpc.CallOption) (*IntegratedShipping, error)
	UpdateAgentPresence(ctx context.Context, in *account.Presence, opts ...grpc.CallOption) (*account.Presence, error)
	ListAgentPresences(ctx context.Context, in *Id, opts ...grpc.CallOption) (*account.Presences, error)
	ReportAvailibilities(ctx context.Context, in *AvailibilityReportRequest, opts ...grpc.CallOption) (*ReportResponse, error)
	NewID(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Id, error)
	LockLogin(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Id, error)
	UnlockLogin(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Id, error)
	ListBills(ctx context.Context, in *Id, opts ...grpc.CallOption) (*payment.Bills, error)
}

type accountMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountMgrClient(cc grpc.ClientConnInterface) AccountMgrClient {
	return &accountMgrClient{cc}
}

func (c *accountMgrClient) CreateGroup(ctx context.Context, in *AgentGroup, opts ...grpc.CallOption) (*AgentGroup, error) {
	out := new(AgentGroup)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) UpdateGroup(ctx context.Context, in *AgentGroup, opts ...grpc.CallOption) (*AgentGroup, error) {
	out := new(AgentGroup)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/UpdateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) GetGroup(ctx context.Context, in *Id, opts ...grpc.CallOption) (*AgentGroup, error) {
	out := new(AgentGroup)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/GetGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) RequestPassword(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/RequestPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) UpdatePassword(ctx context.Context, in *NewPassword, opts ...grpc.CallOption) (*account.Agent, error) {
	out := new(account.Agent)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/UpdatePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) UpdateAgent(ctx context.Context, in *account.Agent, opts ...grpc.CallOption) (*account.Agent, error) {
	out := new(account.Agent)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/UpdateAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) DeleteAgent(ctx context.Context, in *Id, opts ...grpc.CallOption) (*account.Agent, error) {
	out := new(account.Agent)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/DeleteAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) DeleteAccount(ctx context.Context, in *Id, opts ...grpc.CallOption) (*account.Account, error) {
	out := new(account.Account)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/DeleteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) SubizUpdateAccount(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error) {
	out := new(account.Account)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/SubizUpdateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) RequestChangeEmail(ctx context.Context, in *account.Agent, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/RequestChangeEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) ConfirmChangeEmail(ctx context.Context, in *account.Token, opts ...grpc.CallOption) (*account.Agent, error) {
	out := new(account.Agent)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/ConfirmChangeEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) AcceptInvitation(ctx context.Context, in *NewPassword, opts ...grpc.CallOption) (*account.Agent, error) {
	out := new(account.Agent)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/AcceptInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) GetInvitation(ctx context.Context, in *account.Token, opts ...grpc.CallOption) (*account.Agent, error) {
	out := new(account.Agent)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/GetInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) InviteAgent(ctx context.Context, in *account.Agent, opts ...grpc.CallOption) (*account.Agent, error) {
	out := new(account.Agent)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/InviteAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) GetAgent(ctx context.Context, in *Id, opts ...grpc.CallOption) (*account.Agent, error) {
	out := new(account.Agent)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/GetAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) LookupAgentById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*account.Agent, error) {
	out := new(account.Agent)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/LookupAgentById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) ConfirmAccount(ctx context.Context, in *account.Token, opts ...grpc.CallOption) (*account.Account, error) {
	out := new(account.Account)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/ConfirmAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) GetAccount(ctx context.Context, in *Id, opts ...grpc.CallOption) (*account.Account, error) {
	out := new(account.Account)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) UpdateAccount(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error) {
	out := new(account.Account)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/UpdateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*account.Account, error) {
	out := new(account.Account)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) ListAgents(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/ListAgents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) DeleteGroup(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/DeleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) ListGroups(ctx context.Context, in *Id, opts ...grpc.CallOption) (*AgentGroups, error) {
	out := new(AgentGroups)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/ListGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) ChangeEmail(ctx context.Context, in *account.Agent, opts ...grpc.CallOption) (*account.Agent, error) {
	out := new(account.Agent)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/ChangeEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) SyncPublicHolidays(ctx context.Context, in *account.SyncPublicHolidaysRequest, opts ...grpc.CallOption) (*account.BusinessHours, error) {
	out := new(account.BusinessHours)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/SyncPublicHolidays", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) TransferOwner(ctx context.Context, in *Id, opts ...grpc.CallOption) (*account.Agent, error) {
	out := new(account.Agent)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/TransferOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) CheckLoginSession(ctx context.Context, in *LoginSession, opts ...grpc.CallOption) (*LoginSession, error) {
	out := new(LoginSession)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/CheckLoginSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) CreateLoginSession(ctx context.Context, in *Id, opts ...grpc.CallOption) (*LoginSession, error) {
	out := new(LoginSession)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/CreateLoginSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) ListLoginSessions(ctx context.Context, in *Id, opts ...grpc.CallOption) (*LoginSessions, error) {
	out := new(LoginSessions)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/ListLoginSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) ListApiKeys(ctx context.Context, in *Id, opts ...grpc.CallOption) (*LoginSessions, error) {
	out := new(LoginSessions)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/ListApiKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) LogoutSession(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/LogoutSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) CreateApiKey(ctx context.Context, in *LoginSession, opts ...grpc.CallOption) (*LoginSession, error) {
	out := new(LoginSession)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/CreateApiKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) GetLanguage(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Lang, error) {
	out := new(Lang)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/GetLanguage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) UpdateLanguage(ctx context.Context, in *LangMessage, opts ...grpc.CallOption) (*LangMessage, error) {
	out := new(LangMessage)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/UpdateLanguage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) GetShopSetting(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ShopSetting, error) {
	out := new(ShopSetting)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/GetShopSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) UpdateShopSetting(ctx context.Context, in *ShopSetting, opts ...grpc.CallOption) (*ShopSetting, error) {
	out := new(ShopSetting)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/UpdateShopSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) ReadCurrency(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Currency, error) {
	out := new(Currency)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/ReadCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) AutoSyncCurrency(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/AutoSyncCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) ListShopAddresses(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Addresses, error) {
	out := new(Addresses)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/ListShopAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) CreateShopAddress(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Address, error) {
	out := new(Address)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/CreateShopAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) UpdateShopAddress(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Address, error) {
	out := new(Address)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/UpdateShopAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) DeleteShopAddress(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/DeleteShopAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) ListTaxes(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/ListTaxes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) CreateTax(ctx context.Context, in *Tax, opts ...grpc.CallOption) (*Tax, error) {
	out := new(Tax)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/CreateTax", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) UpdateTax(ctx context.Context, in *Tax, opts ...grpc.CallOption) (*Tax, error) {
	out := new(Tax)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/UpdateTax", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) DeleteTax(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/DeleteTax", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) CheckShippingPolicy(ctx context.Context, in *Order, opts ...grpc.CallOption) (*ShippingPolicies, error) {
	out := new(ShippingPolicies)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/CheckShippingPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) ListShippingPolicies(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ShippingPolicies, error) {
	out := new(ShippingPolicies)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/ListShippingPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) CreateShippingPolicy(ctx context.Context, in *ShippingPolicy, opts ...grpc.CallOption) (*ShippingPolicy, error) {
	out := new(ShippingPolicy)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/CreateShippingPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) UpdateShippingPolicy(ctx context.Context, in *ShippingPolicy, opts ...grpc.CallOption) (*ShippingPolicy, error) {
	out := new(ShippingPolicy)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/UpdateShippingPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) DeleteShippingPolicy(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/DeleteShippingPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) CreateCancellationCode(ctx context.Context, in *CancellationCode, opts ...grpc.CallOption) (*CancellationCode, error) {
	out := new(CancellationCode)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/CreateCancellationCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) ListCancellationCodes(ctx context.Context, in *Id, opts ...grpc.CallOption) (*CancellationCodes, error) {
	out := new(CancellationCodes)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/ListCancellationCodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) UpdateCancellationCode(ctx context.Context, in *CancellationCode, opts ...grpc.CallOption) (*CancellationCode, error) {
	out := new(CancellationCode)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/UpdateCancellationCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) MakeDefaultTax(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/MakeDefaultTax", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) ListPaymentMethods(ctx context.Context, in *Id, opts ...grpc.CallOption) (*PaymentMethods, error) {
	out := new(PaymentMethods)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/ListPaymentMethods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) CreatePaymentMethod(ctx context.Context, in *PaymentMethod, opts ...grpc.CallOption) (*PaymentMethod, error) {
	out := new(PaymentMethod)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/CreatePaymentMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) UpdatePaymentMethod(ctx context.Context, in *PaymentMethod, opts ...grpc.CallOption) (*PaymentMethod, error) {
	out := new(PaymentMethod)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/UpdatePaymentMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) DeletePaymentMethod(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/DeletePaymentMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) MakeDefaultPaymentMethod(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/MakeDefaultPaymentMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) ListIntegratedShippingProviders(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*IntegratedShippings, error) {
	out := new(IntegratedShippings)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/ListIntegratedShippingProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) DeintegrateShippingProvider(ctx context.Context, in *IntegratedShipping, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/DeintegrateShippingProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) IntegrateShippingProvider(ctx context.Context, in *IntegratedShipping, opts ...grpc.CallOption) (*IntegratedShipping, error) {
	out := new(IntegratedShipping)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/IntegrateShippingProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) SendGHNAffiliateOTP(ctx context.Context, in *IntegratedShipping, opts ...grpc.CallOption) (*IntegratedShipping, error) {
	out := new(IntegratedShipping)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/SendGHNAffiliateOTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) EnterGHNAffiliateOTP(ctx context.Context, in *IntegratedShipping, opts ...grpc.CallOption) (*IntegratedShipping, error) {
	out := new(IntegratedShipping)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/EnterGHNAffiliateOTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) UpdateAgentPresence(ctx context.Context, in *account.Presence, opts ...grpc.CallOption) (*account.Presence, error) {
	out := new(account.Presence)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/UpdateAgentPresence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) ListAgentPresences(ctx context.Context, in *Id, opts ...grpc.CallOption) (*account.Presences, error) {
	out := new(account.Presences)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/ListAgentPresences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) ReportAvailibilities(ctx context.Context, in *AvailibilityReportRequest, opts ...grpc.CallOption) (*ReportResponse, error) {
	out := new(ReportResponse)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/ReportAvailibilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) NewID(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/NewID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) LockLogin(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/LockLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) UnlockLogin(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/UnlockLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) ListBills(ctx context.Context, in *Id, opts ...grpc.CallOption) (*payment.Bills, error) {
	out := new(payment.Bills)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/ListBills", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountMgrServer is the server API for AccountMgr service.
type AccountMgrServer interface {
	CreateGroup(context.Context, *AgentGroup) (*AgentGroup, error)
	UpdateGroup(context.Context, *AgentGroup) (*AgentGroup, error)
	GetGroup(context.Context, *Id) (*AgentGroup, error)
	RequestPassword(context.Context, *Id) (*Empty, error)
	UpdatePassword(context.Context, *NewPassword) (*account.Agent, error)
	UpdateAgent(context.Context, *account.Agent) (*account.Agent, error)
	DeleteAgent(context.Context, *Id) (*account.Agent, error)
	DeleteAccount(context.Context, *Id) (*account.Account, error)
	SubizUpdateAccount(context.Context, *account.Account) (*account.Account, error)
	RequestChangeEmail(context.Context, *account.Agent) (*Empty, error)
	ConfirmChangeEmail(context.Context, *account.Token) (*account.Agent, error)
	AcceptInvitation(context.Context, *NewPassword) (*account.Agent, error)
	GetInvitation(context.Context, *account.Token) (*account.Agent, error)
	InviteAgent(context.Context, *account.Agent) (*account.Agent, error)
	GetAgent(context.Context, *Id) (*account.Agent, error)
	LookupAgentById(context.Context, *Id) (*account.Agent, error)
	ConfirmAccount(context.Context, *account.Token) (*account.Account, error)
	GetAccount(context.Context, *Id) (*account.Account, error)
	UpdateAccount(context.Context, *account.Account) (*account.Account, error)
	CreateAccount(context.Context, *CreateAccountRequest) (*account.Account, error)
	ListAgents(context.Context, *Id) (*Response, error)
	DeleteGroup(context.Context, *Id) (*Empty, error)
	ListGroups(context.Context, *Id) (*AgentGroups, error)
	ChangeEmail(context.Context, *account.Agent) (*account.Agent, error)
	SyncPublicHolidays(context.Context, *account.SyncPublicHolidaysRequest) (*account.BusinessHours, error)
	TransferOwner(context.Context, *Id) (*account.Agent, error)
	CheckLoginSession(context.Context, *LoginSession) (*LoginSession, error)
	CreateLoginSession(context.Context, *Id) (*LoginSession, error)
	ListLoginSessions(context.Context, *Id) (*LoginSessions, error)
	ListApiKeys(context.Context, *Id) (*LoginSessions, error)
	LogoutSession(context.Context, *Id) (*Empty, error)
	CreateApiKey(context.Context, *LoginSession) (*LoginSession, error)
	GetLanguage(context.Context, *Id) (*Lang, error)
	UpdateLanguage(context.Context, *LangMessage) (*LangMessage, error)
	GetShopSetting(context.Context, *Id) (*ShopSetting, error)
	UpdateShopSetting(context.Context, *ShopSetting) (*ShopSetting, error)
	ReadCurrency(context.Context, *Id) (*Currency, error)
	// internal
	AutoSyncCurrency(context.Context, *Id) (*Empty, error)
	ListShopAddresses(context.Context, *Id) (*Addresses, error)
	CreateShopAddress(context.Context, *Address) (*Address, error)
	UpdateShopAddress(context.Context, *Address) (*Address, error)
	DeleteShopAddress(context.Context, *Id) (*Empty, error)
	ListTaxes(context.Context, *Id) (*Response, error)
	CreateTax(context.Context, *Tax) (*Tax, error)
	UpdateTax(context.Context, *Tax) (*Tax, error)
	DeleteTax(context.Context, *Id) (*Empty, error)
	CheckShippingPolicy(context.Context, *Order) (*ShippingPolicies, error)
	ListShippingPolicies(context.Context, *Id) (*ShippingPolicies, error)
	CreateShippingPolicy(context.Context, *ShippingPolicy) (*ShippingPolicy, error)
	UpdateShippingPolicy(context.Context, *ShippingPolicy) (*ShippingPolicy, error)
	DeleteShippingPolicy(context.Context, *Id) (*Empty, error)
	CreateCancellationCode(context.Context, *CancellationCode) (*CancellationCode, error)
	ListCancellationCodes(context.Context, *Id) (*CancellationCodes, error)
	UpdateCancellationCode(context.Context, *CancellationCode) (*CancellationCode, error)
	MakeDefaultTax(context.Context, *Id) (*Empty, error)
	ListPaymentMethods(context.Context, *Id) (*PaymentMethods, error)
	CreatePaymentMethod(context.Context, *PaymentMethod) (*PaymentMethod, error)
	UpdatePaymentMethod(context.Context, *PaymentMethod) (*PaymentMethod, error)
	DeletePaymentMethod(context.Context, *Id) (*Empty, error)
	MakeDefaultPaymentMethod(context.Context, *Id) (*Empty, error)
	ListIntegratedShippingProviders(context.Context, *Ids) (*IntegratedShippings, error)
	DeintegrateShippingProvider(context.Context, *IntegratedShipping) (*Empty, error)
	IntegrateShippingProvider(context.Context, *IntegratedShipping) (*IntegratedShipping, error)
	SendGHNAffiliateOTP(context.Context, *IntegratedShipping) (*IntegratedShipping, error)
	EnterGHNAffiliateOTP(context.Context, *IntegratedShipping) (*IntegratedShipping, error)
	UpdateAgentPresence(context.Context, *account.Presence) (*account.Presence, error)
	ListAgentPresences(context.Context, *Id) (*account.Presences, error)
	ReportAvailibilities(context.Context, *AvailibilityReportRequest) (*ReportResponse, error)
	NewID(context.Context, *Id) (*Id, error)
	LockLogin(context.Context, *Id) (*Id, error)
	UnlockLogin(context.Context, *Id) (*Id, error)
	ListBills(context.Context, *Id) (*payment.Bills, error)
}

// UnimplementedAccountMgrServer can be embedded to have forward compatible implementations.
type UnimplementedAccountMgrServer struct {
}

func (*UnimplementedAccountMgrServer) CreateGroup(context.Context, *AgentGroup) (*AgentGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (*UnimplementedAccountMgrServer) UpdateGroup(context.Context, *AgentGroup) (*AgentGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (*UnimplementedAccountMgrServer) GetGroup(context.Context, *Id) (*AgentGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (*UnimplementedAccountMgrServer) RequestPassword(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestPassword not implemented")
}
func (*UnimplementedAccountMgrServer) UpdatePassword(context.Context, *NewPassword) (*account.Agent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassword not implemented")
}
func (*UnimplementedAccountMgrServer) UpdateAgent(context.Context, *account.Agent) (*account.Agent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgent not implemented")
}
func (*UnimplementedAccountMgrServer) DeleteAgent(context.Context, *Id) (*account.Agent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAgent not implemented")
}
func (*UnimplementedAccountMgrServer) DeleteAccount(context.Context, *Id) (*account.Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (*UnimplementedAccountMgrServer) SubizUpdateAccount(context.Context, *account.Account) (*account.Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubizUpdateAccount not implemented")
}
func (*UnimplementedAccountMgrServer) RequestChangeEmail(context.Context, *account.Agent) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestChangeEmail not implemented")
}
func (*UnimplementedAccountMgrServer) ConfirmChangeEmail(context.Context, *account.Token) (*account.Agent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmChangeEmail not implemented")
}
func (*UnimplementedAccountMgrServer) AcceptInvitation(context.Context, *NewPassword) (*account.Agent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptInvitation not implemented")
}
func (*UnimplementedAccountMgrServer) GetInvitation(context.Context, *account.Token) (*account.Agent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvitation not implemented")
}
func (*UnimplementedAccountMgrServer) InviteAgent(context.Context, *account.Agent) (*account.Agent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteAgent not implemented")
}
func (*UnimplementedAccountMgrServer) GetAgent(context.Context, *Id) (*account.Agent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgent not implemented")
}
func (*UnimplementedAccountMgrServer) LookupAgentById(context.Context, *Id) (*account.Agent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupAgentById not implemented")
}
func (*UnimplementedAccountMgrServer) ConfirmAccount(context.Context, *account.Token) (*account.Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmAccount not implemented")
}
func (*UnimplementedAccountMgrServer) GetAccount(context.Context, *Id) (*account.Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (*UnimplementedAccountMgrServer) UpdateAccount(context.Context, *account.Account) (*account.Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (*UnimplementedAccountMgrServer) CreateAccount(context.Context, *CreateAccountRequest) (*account.Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (*UnimplementedAccountMgrServer) ListAgents(context.Context, *Id) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgents not implemented")
}
func (*UnimplementedAccountMgrServer) DeleteGroup(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (*UnimplementedAccountMgrServer) ListGroups(context.Context, *Id) (*AgentGroups, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroups not implemented")
}
func (*UnimplementedAccountMgrServer) ChangeEmail(context.Context, *account.Agent) (*account.Agent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeEmail not implemented")
}
func (*UnimplementedAccountMgrServer) SyncPublicHolidays(context.Context, *account.SyncPublicHolidaysRequest) (*account.BusinessHours, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncPublicHolidays not implemented")
}
func (*UnimplementedAccountMgrServer) TransferOwner(context.Context, *Id) (*account.Agent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferOwner not implemented")
}
func (*UnimplementedAccountMgrServer) CheckLoginSession(context.Context, *LoginSession) (*LoginSession, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckLoginSession not implemented")
}
func (*UnimplementedAccountMgrServer) CreateLoginSession(context.Context, *Id) (*LoginSession, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLoginSession not implemented")
}
func (*UnimplementedAccountMgrServer) ListLoginSessions(context.Context, *Id) (*LoginSessions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLoginSessions not implemented")
}
func (*UnimplementedAccountMgrServer) ListApiKeys(context.Context, *Id) (*LoginSessions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApiKeys not implemented")
}
func (*UnimplementedAccountMgrServer) LogoutSession(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogoutSession not implemented")
}
func (*UnimplementedAccountMgrServer) CreateApiKey(context.Context, *LoginSession) (*LoginSession, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApiKey not implemented")
}
func (*UnimplementedAccountMgrServer) GetLanguage(context.Context, *Id) (*Lang, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLanguage not implemented")
}
func (*UnimplementedAccountMgrServer) UpdateLanguage(context.Context, *LangMessage) (*LangMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLanguage not implemented")
}
func (*UnimplementedAccountMgrServer) GetShopSetting(context.Context, *Id) (*ShopSetting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShopSetting not implemented")
}
func (*UnimplementedAccountMgrServer) UpdateShopSetting(context.Context, *ShopSetting) (*ShopSetting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShopSetting not implemented")
}
func (*UnimplementedAccountMgrServer) ReadCurrency(context.Context, *Id) (*Currency, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadCurrency not implemented")
}
func (*UnimplementedAccountMgrServer) AutoSyncCurrency(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutoSyncCurrency not implemented")
}
func (*UnimplementedAccountMgrServer) ListShopAddresses(context.Context, *Id) (*Addresses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShopAddresses not implemented")
}
func (*UnimplementedAccountMgrServer) CreateShopAddress(context.Context, *Address) (*Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShopAddress not implemented")
}
func (*UnimplementedAccountMgrServer) UpdateShopAddress(context.Context, *Address) (*Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShopAddress not implemented")
}
func (*UnimplementedAccountMgrServer) DeleteShopAddress(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShopAddress not implemented")
}
func (*UnimplementedAccountMgrServer) ListTaxes(context.Context, *Id) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTaxes not implemented")
}
func (*UnimplementedAccountMgrServer) CreateTax(context.Context, *Tax) (*Tax, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTax not implemented")
}
func (*UnimplementedAccountMgrServer) UpdateTax(context.Context, *Tax) (*Tax, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTax not implemented")
}
func (*UnimplementedAccountMgrServer) DeleteTax(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTax not implemented")
}
func (*UnimplementedAccountMgrServer) CheckShippingPolicy(context.Context, *Order) (*ShippingPolicies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckShippingPolicy not implemented")
}
func (*UnimplementedAccountMgrServer) ListShippingPolicies(context.Context, *Id) (*ShippingPolicies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShippingPolicies not implemented")
}
func (*UnimplementedAccountMgrServer) CreateShippingPolicy(context.Context, *ShippingPolicy) (*ShippingPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShippingPolicy not implemented")
}
func (*UnimplementedAccountMgrServer) UpdateShippingPolicy(context.Context, *ShippingPolicy) (*ShippingPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShippingPolicy not implemented")
}
func (*UnimplementedAccountMgrServer) DeleteShippingPolicy(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShippingPolicy not implemented")
}
func (*UnimplementedAccountMgrServer) CreateCancellationCode(context.Context, *CancellationCode) (*CancellationCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCancellationCode not implemented")
}
func (*UnimplementedAccountMgrServer) ListCancellationCodes(context.Context, *Id) (*CancellationCodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCancellationCodes not implemented")
}
func (*UnimplementedAccountMgrServer) UpdateCancellationCode(context.Context, *CancellationCode) (*CancellationCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCancellationCode not implemented")
}
func (*UnimplementedAccountMgrServer) MakeDefaultTax(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeDefaultTax not implemented")
}
func (*UnimplementedAccountMgrServer) ListPaymentMethods(context.Context, *Id) (*PaymentMethods, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPaymentMethods not implemented")
}
func (*UnimplementedAccountMgrServer) CreatePaymentMethod(context.Context, *PaymentMethod) (*PaymentMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePaymentMethod not implemented")
}
func (*UnimplementedAccountMgrServer) UpdatePaymentMethod(context.Context, *PaymentMethod) (*PaymentMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePaymentMethod not implemented")
}
func (*UnimplementedAccountMgrServer) DeletePaymentMethod(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePaymentMethod not implemented")
}
func (*UnimplementedAccountMgrServer) MakeDefaultPaymentMethod(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeDefaultPaymentMethod not implemented")
}
func (*UnimplementedAccountMgrServer) ListIntegratedShippingProviders(context.Context, *Ids) (*IntegratedShippings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIntegratedShippingProviders not implemented")
}
func (*UnimplementedAccountMgrServer) DeintegrateShippingProvider(context.Context, *IntegratedShipping) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeintegrateShippingProvider not implemented")
}
func (*UnimplementedAccountMgrServer) IntegrateShippingProvider(context.Context, *IntegratedShipping) (*IntegratedShipping, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntegrateShippingProvider not implemented")
}
func (*UnimplementedAccountMgrServer) SendGHNAffiliateOTP(context.Context, *IntegratedShipping) (*IntegratedShipping, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendGHNAffiliateOTP not implemented")
}
func (*UnimplementedAccountMgrServer) EnterGHNAffiliateOTP(context.Context, *IntegratedShipping) (*IntegratedShipping, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnterGHNAffiliateOTP not implemented")
}
func (*UnimplementedAccountMgrServer) UpdateAgentPresence(context.Context, *account.Presence) (*account.Presence, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgentPresence not implemented")
}
func (*UnimplementedAccountMgrServer) ListAgentPresences(context.Context, *Id) (*account.Presences, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgentPresences not implemented")
}
func (*UnimplementedAccountMgrServer) ReportAvailibilities(context.Context, *AvailibilityReportRequest) (*ReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportAvailibilities not implemented")
}
func (*UnimplementedAccountMgrServer) NewID(context.Context, *Id) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewID not implemented")
}
func (*UnimplementedAccountMgrServer) LockLogin(context.Context, *Id) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockLogin not implemented")
}
func (*UnimplementedAccountMgrServer) UnlockLogin(context.Context, *Id) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockLogin not implemented")
}
func (*UnimplementedAccountMgrServer) ListBills(context.Context, *Id) (*payment.Bills, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBills not implemented")
}

func RegisterAccountMgrServer(s *grpc.Server, srv AccountMgrServer) {
	s.RegisterService(&_AccountMgr_serviceDesc, srv)
}

func _AccountMgr_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).CreateGroup(ctx, req.(*AgentGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/UpdateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).UpdateGroup(ctx, req.(*AgentGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/GetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).GetGroup(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_RequestPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).RequestPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/RequestPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).RequestPassword(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/UpdatePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).UpdatePassword(ctx, req.(*NewPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_UpdateAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Agent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).UpdateAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/UpdateAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).UpdateAgent(ctx, req.(*account.Agent))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_DeleteAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).DeleteAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/DeleteAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).DeleteAgent(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/DeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).DeleteAccount(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_SubizUpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).SubizUpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/SubizUpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).SubizUpdateAccount(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_RequestChangeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Agent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).RequestChangeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/RequestChangeEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).RequestChangeEmail(ctx, req.(*account.Agent))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_ConfirmChangeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).ConfirmChangeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/ConfirmChangeEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).ConfirmChangeEmail(ctx, req.(*account.Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_AcceptInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).AcceptInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/AcceptInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).AcceptInvitation(ctx, req.(*NewPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_GetInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).GetInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/GetInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).GetInvitation(ctx, req.(*account.Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_InviteAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Agent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).InviteAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/InviteAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).InviteAgent(ctx, req.(*account.Agent))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_GetAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).GetAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/GetAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).GetAgent(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_LookupAgentById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).LookupAgentById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/LookupAgentById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).LookupAgentById(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_ConfirmAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).ConfirmAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/ConfirmAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).ConfirmAccount(ctx, req.(*account.Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).GetAccount(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).UpdateAccount(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_ListAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).ListAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/ListAgents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).ListAgents(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).DeleteGroup(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_ListGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).ListGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/ListGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).ListGroups(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_ChangeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Agent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).ChangeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/ChangeEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).ChangeEmail(ctx, req.(*account.Agent))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_SyncPublicHolidays_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.SyncPublicHolidaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).SyncPublicHolidays(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/SyncPublicHolidays",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).SyncPublicHolidays(ctx, req.(*account.SyncPublicHolidaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_TransferOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).TransferOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/TransferOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).TransferOwner(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_CheckLoginSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).CheckLoginSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/CheckLoginSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).CheckLoginSession(ctx, req.(*LoginSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_CreateLoginSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).CreateLoginSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/CreateLoginSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).CreateLoginSession(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_ListLoginSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).ListLoginSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/ListLoginSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).ListLoginSessions(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_ListApiKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).ListApiKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/ListApiKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).ListApiKeys(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_LogoutSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).LogoutSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/LogoutSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).LogoutSession(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_CreateApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).CreateApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/CreateApiKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).CreateApiKey(ctx, req.(*LoginSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_GetLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).GetLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/GetLanguage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).GetLanguage(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_UpdateLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LangMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).UpdateLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/UpdateLanguage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).UpdateLanguage(ctx, req.(*LangMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_GetShopSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).GetShopSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/GetShopSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).GetShopSetting(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_UpdateShopSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShopSetting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).UpdateShopSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/UpdateShopSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).UpdateShopSetting(ctx, req.(*ShopSetting))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_ReadCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).ReadCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/ReadCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).ReadCurrency(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_AutoSyncCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).AutoSyncCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/AutoSyncCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).AutoSyncCurrency(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_ListShopAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).ListShopAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/ListShopAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).ListShopAddresses(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_CreateShopAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).CreateShopAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/CreateShopAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).CreateShopAddress(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_UpdateShopAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).UpdateShopAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/UpdateShopAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).UpdateShopAddress(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_DeleteShopAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).DeleteShopAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/DeleteShopAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).DeleteShopAddress(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_ListTaxes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).ListTaxes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/ListTaxes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).ListTaxes(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_CreateTax_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tax)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).CreateTax(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/CreateTax",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).CreateTax(ctx, req.(*Tax))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_UpdateTax_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tax)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).UpdateTax(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/UpdateTax",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).UpdateTax(ctx, req.(*Tax))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_DeleteTax_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).DeleteTax(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/DeleteTax",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).DeleteTax(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_CheckShippingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).CheckShippingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/CheckShippingPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).CheckShippingPolicy(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_ListShippingPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).ListShippingPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/ListShippingPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).ListShippingPolicies(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_CreateShippingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShippingPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).CreateShippingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/CreateShippingPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).CreateShippingPolicy(ctx, req.(*ShippingPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_UpdateShippingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShippingPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).UpdateShippingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/UpdateShippingPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).UpdateShippingPolicy(ctx, req.(*ShippingPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_DeleteShippingPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).DeleteShippingPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/DeleteShippingPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).DeleteShippingPolicy(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_CreateCancellationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancellationCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).CreateCancellationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/CreateCancellationCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).CreateCancellationCode(ctx, req.(*CancellationCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_ListCancellationCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).ListCancellationCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/ListCancellationCodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).ListCancellationCodes(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_UpdateCancellationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancellationCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).UpdateCancellationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/UpdateCancellationCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).UpdateCancellationCode(ctx, req.(*CancellationCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_MakeDefaultTax_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).MakeDefaultTax(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/MakeDefaultTax",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).MakeDefaultTax(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_ListPaymentMethods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).ListPaymentMethods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/ListPaymentMethods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).ListPaymentMethods(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_CreatePaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentMethod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).CreatePaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/CreatePaymentMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).CreatePaymentMethod(ctx, req.(*PaymentMethod))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_UpdatePaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentMethod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).UpdatePaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/UpdatePaymentMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).UpdatePaymentMethod(ctx, req.(*PaymentMethod))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_DeletePaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).DeletePaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/DeletePaymentMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).DeletePaymentMethod(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_MakeDefaultPaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).MakeDefaultPaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/MakeDefaultPaymentMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).MakeDefaultPaymentMethod(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_ListIntegratedShippingProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).ListIntegratedShippingProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/ListIntegratedShippingProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).ListIntegratedShippingProviders(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_DeintegrateShippingProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntegratedShipping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).DeintegrateShippingProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/DeintegrateShippingProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).DeintegrateShippingProvider(ctx, req.(*IntegratedShipping))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_IntegrateShippingProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntegratedShipping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).IntegrateShippingProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/IntegrateShippingProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).IntegrateShippingProvider(ctx, req.(*IntegratedShipping))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_SendGHNAffiliateOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntegratedShipping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).SendGHNAffiliateOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/SendGHNAffiliateOTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).SendGHNAffiliateOTP(ctx, req.(*IntegratedShipping))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_EnterGHNAffiliateOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntegratedShipping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).EnterGHNAffiliateOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/EnterGHNAffiliateOTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).EnterGHNAffiliateOTP(ctx, req.(*IntegratedShipping))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_UpdateAgentPresence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Presence)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).UpdateAgentPresence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/UpdateAgentPresence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).UpdateAgentPresence(ctx, req.(*account.Presence))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_ListAgentPresences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).ListAgentPresences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/ListAgentPresences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).ListAgentPresences(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_ReportAvailibilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AvailibilityReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).ReportAvailibilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/ReportAvailibilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).ReportAvailibilities(ctx, req.(*AvailibilityReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_NewID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).NewID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/NewID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).NewID(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_LockLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).LockLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/LockLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).LockLogin(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_UnlockLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).UnlockLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/UnlockLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).UnlockLogin(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_ListBills_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).ListBills(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/ListBills",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).ListBills(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccountMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.AccountMgr",
	HandlerType: (*AccountMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGroup",
			Handler:    _AccountMgr_CreateGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _AccountMgr_UpdateGroup_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _AccountMgr_GetGroup_Handler,
		},
		{
			MethodName: "RequestPassword",
			Handler:    _AccountMgr_RequestPassword_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _AccountMgr_UpdatePassword_Handler,
		},
		{
			MethodName: "UpdateAgent",
			Handler:    _AccountMgr_UpdateAgent_Handler,
		},
		{
			MethodName: "DeleteAgent",
			Handler:    _AccountMgr_DeleteAgent_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _AccountMgr_DeleteAccount_Handler,
		},
		{
			MethodName: "SubizUpdateAccount",
			Handler:    _AccountMgr_SubizUpdateAccount_Handler,
		},
		{
			MethodName: "RequestChangeEmail",
			Handler:    _AccountMgr_RequestChangeEmail_Handler,
		},
		{
			MethodName: "ConfirmChangeEmail",
			Handler:    _AccountMgr_ConfirmChangeEmail_Handler,
		},
		{
			MethodName: "AcceptInvitation",
			Handler:    _AccountMgr_AcceptInvitation_Handler,
		},
		{
			MethodName: "GetInvitation",
			Handler:    _AccountMgr_GetInvitation_Handler,
		},
		{
			MethodName: "InviteAgent",
			Handler:    _AccountMgr_InviteAgent_Handler,
		},
		{
			MethodName: "GetAgent",
			Handler:    _AccountMgr_GetAgent_Handler,
		},
		{
			MethodName: "LookupAgentById",
			Handler:    _AccountMgr_LookupAgentById_Handler,
		},
		{
			MethodName: "ConfirmAccount",
			Handler:    _AccountMgr_ConfirmAccount_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _AccountMgr_GetAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _AccountMgr_UpdateAccount_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _AccountMgr_CreateAccount_Handler,
		},
		{
			MethodName: "ListAgents",
			Handler:    _AccountMgr_ListAgents_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _AccountMgr_DeleteGroup_Handler,
		},
		{
			MethodName: "ListGroups",
			Handler:    _AccountMgr_ListGroups_Handler,
		},
		{
			MethodName: "ChangeEmail",
			Handler:    _AccountMgr_ChangeEmail_Handler,
		},
		{
			MethodName: "SyncPublicHolidays",
			Handler:    _AccountMgr_SyncPublicHolidays_Handler,
		},
		{
			MethodName: "TransferOwner",
			Handler:    _AccountMgr_TransferOwner_Handler,
		},
		{
			MethodName: "CheckLoginSession",
			Handler:    _AccountMgr_CheckLoginSession_Handler,
		},
		{
			MethodName: "CreateLoginSession",
			Handler:    _AccountMgr_CreateLoginSession_Handler,
		},
		{
			MethodName: "ListLoginSessions",
			Handler:    _AccountMgr_ListLoginSessions_Handler,
		},
		{
			MethodName: "ListApiKeys",
			Handler:    _AccountMgr_ListApiKeys_Handler,
		},
		{
			MethodName: "LogoutSession",
			Handler:    _AccountMgr_LogoutSession_Handler,
		},
		{
			MethodName: "CreateApiKey",
			Handler:    _AccountMgr_CreateApiKey_Handler,
		},
		{
			MethodName: "GetLanguage",
			Handler:    _AccountMgr_GetLanguage_Handler,
		},
		{
			MethodName: "UpdateLanguage",
			Handler:    _AccountMgr_UpdateLanguage_Handler,
		},
		{
			MethodName: "GetShopSetting",
			Handler:    _AccountMgr_GetShopSetting_Handler,
		},
		{
			MethodName: "UpdateShopSetting",
			Handler:    _AccountMgr_UpdateShopSetting_Handler,
		},
		{
			MethodName: "ReadCurrency",
			Handler:    _AccountMgr_ReadCurrency_Handler,
		},
		{
			MethodName: "AutoSyncCurrency",
			Handler:    _AccountMgr_AutoSyncCurrency_Handler,
		},
		{
			MethodName: "ListShopAddresses",
			Handler:    _AccountMgr_ListShopAddresses_Handler,
		},
		{
			MethodName: "CreateShopAddress",
			Handler:    _AccountMgr_CreateShopAddress_Handler,
		},
		{
			MethodName: "UpdateShopAddress",
			Handler:    _AccountMgr_UpdateShopAddress_Handler,
		},
		{
			MethodName: "DeleteShopAddress",
			Handler:    _AccountMgr_DeleteShopAddress_Handler,
		},
		{
			MethodName: "ListTaxes",
			Handler:    _AccountMgr_ListTaxes_Handler,
		},
		{
			MethodName: "CreateTax",
			Handler:    _AccountMgr_CreateTax_Handler,
		},
		{
			MethodName: "UpdateTax",
			Handler:    _AccountMgr_UpdateTax_Handler,
		},
		{
			MethodName: "DeleteTax",
			Handler:    _AccountMgr_DeleteTax_Handler,
		},
		{
			MethodName: "CheckShippingPolicy",
			Handler:    _AccountMgr_CheckShippingPolicy_Handler,
		},
		{
			MethodName: "ListShippingPolicies",
			Handler:    _AccountMgr_ListShippingPolicies_Handler,
		},
		{
			MethodName: "CreateShippingPolicy",
			Handler:    _AccountMgr_CreateShippingPolicy_Handler,
		},
		{
			MethodName: "UpdateShippingPolicy",
			Handler:    _AccountMgr_UpdateShippingPolicy_Handler,
		},
		{
			MethodName: "DeleteShippingPolicy",
			Handler:    _AccountMgr_DeleteShippingPolicy_Handler,
		},
		{
			MethodName: "CreateCancellationCode",
			Handler:    _AccountMgr_CreateCancellationCode_Handler,
		},
		{
			MethodName: "ListCancellationCodes",
			Handler:    _AccountMgr_ListCancellationCodes_Handler,
		},
		{
			MethodName: "UpdateCancellationCode",
			Handler:    _AccountMgr_UpdateCancellationCode_Handler,
		},
		{
			MethodName: "MakeDefaultTax",
			Handler:    _AccountMgr_MakeDefaultTax_Handler,
		},
		{
			MethodName: "ListPaymentMethods",
			Handler:    _AccountMgr_ListPaymentMethods_Handler,
		},
		{
			MethodName: "CreatePaymentMethod",
			Handler:    _AccountMgr_CreatePaymentMethod_Handler,
		},
		{
			MethodName: "UpdatePaymentMethod",
			Handler:    _AccountMgr_UpdatePaymentMethod_Handler,
		},
		{
			MethodName: "DeletePaymentMethod",
			Handler:    _AccountMgr_DeletePaymentMethod_Handler,
		},
		{
			MethodName: "MakeDefaultPaymentMethod",
			Handler:    _AccountMgr_MakeDefaultPaymentMethod_Handler,
		},
		{
			MethodName: "ListIntegratedShippingProviders",
			Handler:    _AccountMgr_ListIntegratedShippingProviders_Handler,
		},
		{
			MethodName: "DeintegrateShippingProvider",
			Handler:    _AccountMgr_DeintegrateShippingProvider_Handler,
		},
		{
			MethodName: "IntegrateShippingProvider",
			Handler:    _AccountMgr_IntegrateShippingProvider_Handler,
		},
		{
			MethodName: "SendGHNAffiliateOTP",
			Handler:    _AccountMgr_SendGHNAffiliateOTP_Handler,
		},
		{
			MethodName: "EnterGHNAffiliateOTP",
			Handler:    _AccountMgr_EnterGHNAffiliateOTP_Handler,
		},
		{
			MethodName: "UpdateAgentPresence",
			Handler:    _AccountMgr_UpdateAgentPresence_Handler,
		},
		{
			MethodName: "ListAgentPresences",
			Handler:    _AccountMgr_ListAgentPresences_Handler,
		},
		{
			MethodName: "ReportAvailibilities",
			Handler:    _AccountMgr_ReportAvailibilities_Handler,
		},
		{
			MethodName: "NewID",
			Handler:    _AccountMgr_NewID_Handler,
		},
		{
			MethodName: "LockLogin",
			Handler:    _AccountMgr_LockLogin_Handler,
		},
		{
			MethodName: "UnlockLogin",
			Handler:    _AccountMgr_UnlockLogin_Handler,
		},
		{
			MethodName: "ListBills",
			Handler:    _AccountMgr_ListBills_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// UserMgrClient is the client API for UserMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserMgrClient interface {
	MergeUser(ctx context.Context, in *Users, opts ...grpc.CallOption) (*User, error)
	DetachUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	CreateUser2(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	TryUpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*TryUpdateUserResult, error)
	RemoveUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	RestoreUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	ReadUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*User, error)
	ReadOrCreateUserByContactProfile(ctx context.Context, in *Id, opts ...grpc.CallOption) (*User, error)
	MatchUsers(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Users, error)
	BanUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*User, error)
	UnbanUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*User, error)
	LookupByPhone(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Users, error)
	UpdateView(ctx context.Context, in *UserView, opts ...grpc.CallOption) (*UserView, error)
	CreateView(ctx context.Context, in *UserView, opts ...grpc.CallOption) (*UserView, error)
	DeleteView(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	GetView(ctx context.Context, in *Id, opts ...grpc.CallOption) (*UserView, error)
	ListViews(ctx context.Context, in *Id, opts ...grpc.CallOption) (*UserViews, error)
	UpdateSegment(ctx context.Context, in *Segment, opts ...grpc.CallOption) (*Segment, error)
	CreateSegment(ctx context.Context, in *Segment, opts ...grpc.CallOption) (*Segment, error)
	DeleteSegment(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	GetSegment(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Segment, error)
	ListSegments(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Segments, error)
	AddToSegment(ctx context.Context, in *SegmentUsers, opts ...grpc.CallOption) (*Empty, error)
	RemoveFromSegment(ctx context.Context, in *SegmentUsers, opts ...grpc.CallOption) (*Empty, error)
	UpsertLabel(ctx context.Context, in *Label, opts ...grpc.CallOption) (*Label, error)
	DeleteLabel(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	ListLabels(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Labels, error)
	GetLabel(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Label, error)
	AddLeadOwner(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Empty, error)
	RemoveLeadOwner(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Empty, error)
	AddUserLabel(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Empty, error)
	RemoveUserLabel(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Empty, error)
	AddLeadConversionBy(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Empty, error)
	CreateShippingAddress(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Address, error)
	UpdateShippingAddress(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Address, error)
	RemoveShippingAddress(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Empty, error)
	ListShippingAddress(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ShippingAddresses, error)
	MakeDefaultShippingAddress(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Empty, error)
	ListLeads(ctx context.Context, in *UserView, opts ...grpc.CallOption) (*Users, error)
	SuggestLeadField(ctx context.Context, in *SuggestLeadFieldRequest, opts ...grpc.CallOption) (*SuggestLeadFieldResponse, error)
	LinkProductUrl(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Product, error)
	ListUserEvents(ctx context.Context, in *ListUserEventsRequest, opts ...grpc.CallOption) (*Events, error)
	CreateUserEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error)
	FillDevice(ctx context.Context, in *common.Device, opts ...grpc.CallOption) (*common.Device, error)
	ImportLead(ctx context.Context, in *ImportLeadRequest, opts ...grpc.CallOption) (*ImportLeadResponse, error)
	LinkTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Empty, error)
	CountUserProfiles(ctx context.Context, in *UsersRequest, opts ...grpc.CallOption) (*CountTouchpointResponse, error)
	ListUserIds(ctx context.Context, in *UsersRequest, opts ...grpc.CallOption) (*Ids, error)
	ListUserIdWithPhones(ctx context.Context, in *UsersRequest, opts ...grpc.CallOption) (*Users, error)
	SearchUsers(ctx context.Context, in *DocSearchRequest, opts ...grpc.CallOption) (*DocSearchResponse, error)
	ReportUser(ctx context.Context, in *UserReportRequest, opts ...grpc.CallOption) (*UserReportResponse, error)
	FetchLiveUsers(ctx context.Context, in *LiveUserView, opts ...grpc.CallOption) (*LiveUserView, error)
	StopLiveUsers(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	SuggestLiveFields(ctx context.Context, in *SuggestLeadFieldRequest, opts ...grpc.CallOption) (*SuggestLeadFieldResponse, error)
	Presences(ctx context.Context, in *PresencesRequest, opts ...grpc.CallOption) (*PresencesResponse, error)
	UpdateSegmentMember(ctx context.Context, in *ResourceGroupMember, opts ...grpc.CallOption) (*ResourceGroupMember, error)
	RemoveSegmentMember(ctx context.Context, in *ResourceGroupMember, opts ...grpc.CallOption) (*Empty, error)
}

type userMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewUserMgrClient(cc grpc.ClientConnInterface) UserMgrClient {
	return &userMgrClient{cc}
}

func (c *userMgrClient) MergeUser(ctx context.Context, in *Users, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/header.UserMgr/MergeUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) DetachUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.UserMgr/DetachUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) CreateUser2(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/header.UserMgr/CreateUser2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/header.UserMgr/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) TryUpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*TryUpdateUserResult, error) {
	out := new(TryUpdateUserResult)
	err := c.cc.Invoke(ctx, "/header.UserMgr/TryUpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) RemoveUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.UserMgr/RemoveUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) RestoreUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.UserMgr/RestoreUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) ReadUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/header.UserMgr/ReadUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) ReadOrCreateUserByContactProfile(ctx context.Context, in *Id, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/header.UserMgr/ReadOrCreateUserByContactProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) MatchUsers(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/header.UserMgr/MatchUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) BanUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/header.UserMgr/BanUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) UnbanUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/header.UserMgr/UnbanUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) LookupByPhone(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/header.UserMgr/LookupByPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) UpdateView(ctx context.Context, in *UserView, opts ...grpc.CallOption) (*UserView, error) {
	out := new(UserView)
	err := c.cc.Invoke(ctx, "/header.UserMgr/UpdateView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) CreateView(ctx context.Context, in *UserView, opts ...grpc.CallOption) (*UserView, error) {
	out := new(UserView)
	err := c.cc.Invoke(ctx, "/header.UserMgr/CreateView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) DeleteView(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.UserMgr/DeleteView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) GetView(ctx context.Context, in *Id, opts ...grpc.CallOption) (*UserView, error) {
	out := new(UserView)
	err := c.cc.Invoke(ctx, "/header.UserMgr/GetView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) ListViews(ctx context.Context, in *Id, opts ...grpc.CallOption) (*UserViews, error) {
	out := new(UserViews)
	err := c.cc.Invoke(ctx, "/header.UserMgr/ListViews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) UpdateSegment(ctx context.Context, in *Segment, opts ...grpc.CallOption) (*Segment, error) {
	out := new(Segment)
	err := c.cc.Invoke(ctx, "/header.UserMgr/UpdateSegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) CreateSegment(ctx context.Context, in *Segment, opts ...grpc.CallOption) (*Segment, error) {
	out := new(Segment)
	err := c.cc.Invoke(ctx, "/header.UserMgr/CreateSegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) DeleteSegment(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.UserMgr/DeleteSegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) GetSegment(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Segment, error) {
	out := new(Segment)
	err := c.cc.Invoke(ctx, "/header.UserMgr/GetSegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) ListSegments(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Segments, error) {
	out := new(Segments)
	err := c.cc.Invoke(ctx, "/header.UserMgr/ListSegments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) AddToSegment(ctx context.Context, in *SegmentUsers, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.UserMgr/AddToSegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) RemoveFromSegment(ctx context.Context, in *SegmentUsers, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.UserMgr/RemoveFromSegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) UpsertLabel(ctx context.Context, in *Label, opts ...grpc.CallOption) (*Label, error) {
	out := new(Label)
	err := c.cc.Invoke(ctx, "/header.UserMgr/UpsertLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) DeleteLabel(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.UserMgr/DeleteLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) ListLabels(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Labels, error) {
	out := new(Labels)
	err := c.cc.Invoke(ctx, "/header.UserMgr/ListLabels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) GetLabel(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Label, error) {
	out := new(Label)
	err := c.cc.Invoke(ctx, "/header.UserMgr/GetLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) AddLeadOwner(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.UserMgr/AddLeadOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) RemoveLeadOwner(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.UserMgr/RemoveLeadOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) AddUserLabel(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.UserMgr/AddUserLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) RemoveUserLabel(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.UserMgr/RemoveUserLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) AddLeadConversionBy(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.UserMgr/AddLeadConversionBy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) CreateShippingAddress(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Address, error) {
	out := new(Address)
	err := c.cc.Invoke(ctx, "/header.UserMgr/CreateShippingAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) UpdateShippingAddress(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Address, error) {
	out := new(Address)
	err := c.cc.Invoke(ctx, "/header.UserMgr/UpdateShippingAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) RemoveShippingAddress(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.UserMgr/RemoveShippingAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) ListShippingAddress(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ShippingAddresses, error) {
	out := new(ShippingAddresses)
	err := c.cc.Invoke(ctx, "/header.UserMgr/ListShippingAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) MakeDefaultShippingAddress(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.UserMgr/MakeDefaultShippingAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) ListLeads(ctx context.Context, in *UserView, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/header.UserMgr/ListLeads", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) SuggestLeadField(ctx context.Context, in *SuggestLeadFieldRequest, opts ...grpc.CallOption) (*SuggestLeadFieldResponse, error) {
	out := new(SuggestLeadFieldResponse)
	err := c.cc.Invoke(ctx, "/header.UserMgr/SuggestLeadField", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) LinkProductUrl(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, "/header.UserMgr/LinkProductUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) ListUserEvents(ctx context.Context, in *ListUserEventsRequest, opts ...grpc.CallOption) (*Events, error) {
	out := new(Events)
	err := c.cc.Invoke(ctx, "/header.UserMgr/ListUserEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) CreateUserEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/header.UserMgr/CreateUserEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) FillDevice(ctx context.Context, in *common.Device, opts ...grpc.CallOption) (*common.Device, error) {
	out := new(common.Device)
	err := c.cc.Invoke(ctx, "/header.UserMgr/FillDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) ImportLead(ctx context.Context, in *ImportLeadRequest, opts ...grpc.CallOption) (*ImportLeadResponse, error) {
	out := new(ImportLeadResponse)
	err := c.cc.Invoke(ctx, "/header.UserMgr/ImportLead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) LinkTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.UserMgr/LinkTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) CountUserProfiles(ctx context.Context, in *UsersRequest, opts ...grpc.CallOption) (*CountTouchpointResponse, error) {
	out := new(CountTouchpointResponse)
	err := c.cc.Invoke(ctx, "/header.UserMgr/CountUserProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) ListUserIds(ctx context.Context, in *UsersRequest, opts ...grpc.CallOption) (*Ids, error) {
	out := new(Ids)
	err := c.cc.Invoke(ctx, "/header.UserMgr/ListUserIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) ListUserIdWithPhones(ctx context.Context, in *UsersRequest, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/header.UserMgr/ListUserIdWithPhones", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) SearchUsers(ctx context.Context, in *DocSearchRequest, opts ...grpc.CallOption) (*DocSearchResponse, error) {
	out := new(DocSearchResponse)
	err := c.cc.Invoke(ctx, "/header.UserMgr/SearchUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) ReportUser(ctx context.Context, in *UserReportRequest, opts ...grpc.CallOption) (*UserReportResponse, error) {
	out := new(UserReportResponse)
	err := c.cc.Invoke(ctx, "/header.UserMgr/ReportUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) FetchLiveUsers(ctx context.Context, in *LiveUserView, opts ...grpc.CallOption) (*LiveUserView, error) {
	out := new(LiveUserView)
	err := c.cc.Invoke(ctx, "/header.UserMgr/FetchLiveUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) StopLiveUsers(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.UserMgr/StopLiveUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) SuggestLiveFields(ctx context.Context, in *SuggestLeadFieldRequest, opts ...grpc.CallOption) (*SuggestLeadFieldResponse, error) {
	out := new(SuggestLeadFieldResponse)
	err := c.cc.Invoke(ctx, "/header.UserMgr/SuggestLiveFields", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) Presences(ctx context.Context, in *PresencesRequest, opts ...grpc.CallOption) (*PresencesResponse, error) {
	out := new(PresencesResponse)
	err := c.cc.Invoke(ctx, "/header.UserMgr/Presences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) UpdateSegmentMember(ctx context.Context, in *ResourceGroupMember, opts ...grpc.CallOption) (*ResourceGroupMember, error) {
	out := new(ResourceGroupMember)
	err := c.cc.Invoke(ctx, "/header.UserMgr/UpdateSegmentMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) RemoveSegmentMember(ctx context.Context, in *ResourceGroupMember, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.UserMgr/RemoveSegmentMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserMgrServer is the server API for UserMgr service.
type UserMgrServer interface {
	MergeUser(context.Context, *Users) (*User, error)
	DetachUser(context.Context, *Id) (*Empty, error)
	CreateUser2(context.Context, *User) (*User, error)
	UpdateUser(context.Context, *User) (*User, error)
	TryUpdateUser(context.Context, *User) (*TryUpdateUserResult, error)
	RemoveUser(context.Context, *Id) (*Empty, error)
	RestoreUser(context.Context, *Id) (*Empty, error)
	ReadUser(context.Context, *Id) (*User, error)
	ReadOrCreateUserByContactProfile(context.Context, *Id) (*User, error)
	MatchUsers(context.Context, *Ids) (*Users, error)
	BanUser(context.Context, *Id) (*User, error)
	UnbanUser(context.Context, *Id) (*User, error)
	LookupByPhone(context.Context, *Id) (*Users, error)
	UpdateView(context.Context, *UserView) (*UserView, error)
	CreateView(context.Context, *UserView) (*UserView, error)
	DeleteView(context.Context, *Id) (*Empty, error)
	GetView(context.Context, *Id) (*UserView, error)
	ListViews(context.Context, *Id) (*UserViews, error)
	UpdateSegment(context.Context, *Segment) (*Segment, error)
	CreateSegment(context.Context, *Segment) (*Segment, error)
	DeleteSegment(context.Context, *Id) (*Empty, error)
	GetSegment(context.Context, *Id) (*Segment, error)
	ListSegments(context.Context, *Id) (*Segments, error)
	AddToSegment(context.Context, *SegmentUsers) (*Empty, error)
	RemoveFromSegment(context.Context, *SegmentUsers) (*Empty, error)
	UpsertLabel(context.Context, *Label) (*Label, error)
	DeleteLabel(context.Context, *Id) (*Empty, error)
	ListLabels(context.Context, *Id) (*Labels, error)
	GetLabel(context.Context, *Id) (*Label, error)
	AddLeadOwner(context.Context, *UserRequest) (*Empty, error)
	RemoveLeadOwner(context.Context, *UserRequest) (*Empty, error)
	AddUserLabel(context.Context, *UserRequest) (*Empty, error)
	RemoveUserLabel(context.Context, *UserRequest) (*Empty, error)
	AddLeadConversionBy(context.Context, *UserRequest) (*Empty, error)
	CreateShippingAddress(context.Context, *Address) (*Address, error)
	UpdateShippingAddress(context.Context, *Address) (*Address, error)
	RemoveShippingAddress(context.Context, *Address) (*Empty, error)
	ListShippingAddress(context.Context, *Id) (*ShippingAddresses, error)
	MakeDefaultShippingAddress(context.Context, *Address) (*Empty, error)
	ListLeads(context.Context, *UserView) (*Users, error)
	SuggestLeadField(context.Context, *SuggestLeadFieldRequest) (*SuggestLeadFieldResponse, error)
	LinkProductUrl(context.Context, *Product) (*Product, error)
	ListUserEvents(context.Context, *ListUserEventsRequest) (*Events, error)
	CreateUserEvent(context.Context, *Event) (*Event, error)
	FillDevice(context.Context, *common.Device) (*common.Device, error)
	ImportLead(context.Context, *ImportLeadRequest) (*ImportLeadResponse, error)
	LinkTask(context.Context, *Task) (*Empty, error)
	CountUserProfiles(context.Context, *UsersRequest) (*CountTouchpointResponse, error)
	ListUserIds(context.Context, *UsersRequest) (*Ids, error)
	ListUserIdWithPhones(context.Context, *UsersRequest) (*Users, error)
	SearchUsers(context.Context, *DocSearchRequest) (*DocSearchResponse, error)
	ReportUser(context.Context, *UserReportRequest) (*UserReportResponse, error)
	FetchLiveUsers(context.Context, *LiveUserView) (*LiveUserView, error)
	StopLiveUsers(context.Context, *Id) (*Empty, error)
	SuggestLiveFields(context.Context, *SuggestLeadFieldRequest) (*SuggestLeadFieldResponse, error)
	Presences(context.Context, *PresencesRequest) (*PresencesResponse, error)
	UpdateSegmentMember(context.Context, *ResourceGroupMember) (*ResourceGroupMember, error)
	RemoveSegmentMember(context.Context, *ResourceGroupMember) (*Empty, error)
}

// UnimplementedUserMgrServer can be embedded to have forward compatible implementations.
type UnimplementedUserMgrServer struct {
}

func (*UnimplementedUserMgrServer) MergeUser(context.Context, *Users) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeUser not implemented")
}
func (*UnimplementedUserMgrServer) DetachUser(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetachUser not implemented")
}
func (*UnimplementedUserMgrServer) CreateUser2(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser2 not implemented")
}
func (*UnimplementedUserMgrServer) UpdateUser(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (*UnimplementedUserMgrServer) TryUpdateUser(context.Context, *User) (*TryUpdateUserResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TryUpdateUser not implemented")
}
func (*UnimplementedUserMgrServer) RemoveUser(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUser not implemented")
}
func (*UnimplementedUserMgrServer) RestoreUser(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreUser not implemented")
}
func (*UnimplementedUserMgrServer) ReadUser(context.Context, *Id) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadUser not implemented")
}
func (*UnimplementedUserMgrServer) ReadOrCreateUserByContactProfile(context.Context, *Id) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadOrCreateUserByContactProfile not implemented")
}
func (*UnimplementedUserMgrServer) MatchUsers(context.Context, *Ids) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatchUsers not implemented")
}
func (*UnimplementedUserMgrServer) BanUser(context.Context, *Id) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BanUser not implemented")
}
func (*UnimplementedUserMgrServer) UnbanUser(context.Context, *Id) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbanUser not implemented")
}
func (*UnimplementedUserMgrServer) LookupByPhone(context.Context, *Id) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupByPhone not implemented")
}
func (*UnimplementedUserMgrServer) UpdateView(context.Context, *UserView) (*UserView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateView not implemented")
}
func (*UnimplementedUserMgrServer) CreateView(context.Context, *UserView) (*UserView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateView not implemented")
}
func (*UnimplementedUserMgrServer) DeleteView(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteView not implemented")
}
func (*UnimplementedUserMgrServer) GetView(context.Context, *Id) (*UserView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetView not implemented")
}
func (*UnimplementedUserMgrServer) ListViews(context.Context, *Id) (*UserViews, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListViews not implemented")
}
func (*UnimplementedUserMgrServer) UpdateSegment(context.Context, *Segment) (*Segment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSegment not implemented")
}
func (*UnimplementedUserMgrServer) CreateSegment(context.Context, *Segment) (*Segment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSegment not implemented")
}
func (*UnimplementedUserMgrServer) DeleteSegment(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSegment not implemented")
}
func (*UnimplementedUserMgrServer) GetSegment(context.Context, *Id) (*Segment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSegment not implemented")
}
func (*UnimplementedUserMgrServer) ListSegments(context.Context, *Id) (*Segments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSegments not implemented")
}
func (*UnimplementedUserMgrServer) AddToSegment(context.Context, *SegmentUsers) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToSegment not implemented")
}
func (*UnimplementedUserMgrServer) RemoveFromSegment(context.Context, *SegmentUsers) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromSegment not implemented")
}
func (*UnimplementedUserMgrServer) UpsertLabel(context.Context, *Label) (*Label, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertLabel not implemented")
}
func (*UnimplementedUserMgrServer) DeleteLabel(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLabel not implemented")
}
func (*UnimplementedUserMgrServer) ListLabels(context.Context, *Id) (*Labels, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLabels not implemented")
}
func (*UnimplementedUserMgrServer) GetLabel(context.Context, *Id) (*Label, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLabel not implemented")
}
func (*UnimplementedUserMgrServer) AddLeadOwner(context.Context, *UserRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLeadOwner not implemented")
}
func (*UnimplementedUserMgrServer) RemoveLeadOwner(context.Context, *UserRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLeadOwner not implemented")
}
func (*UnimplementedUserMgrServer) AddUserLabel(context.Context, *UserRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserLabel not implemented")
}
func (*UnimplementedUserMgrServer) RemoveUserLabel(context.Context, *UserRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserLabel not implemented")
}
func (*UnimplementedUserMgrServer) AddLeadConversionBy(context.Context, *UserRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLeadConversionBy not implemented")
}
func (*UnimplementedUserMgrServer) CreateShippingAddress(context.Context, *Address) (*Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShippingAddress not implemented")
}
func (*UnimplementedUserMgrServer) UpdateShippingAddress(context.Context, *Address) (*Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShippingAddress not implemented")
}
func (*UnimplementedUserMgrServer) RemoveShippingAddress(context.Context, *Address) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveShippingAddress not implemented")
}
func (*UnimplementedUserMgrServer) ListShippingAddress(context.Context, *Id) (*ShippingAddresses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShippingAddress not implemented")
}
func (*UnimplementedUserMgrServer) MakeDefaultShippingAddress(context.Context, *Address) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeDefaultShippingAddress not implemented")
}
func (*UnimplementedUserMgrServer) ListLeads(context.Context, *UserView) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLeads not implemented")
}
func (*UnimplementedUserMgrServer) SuggestLeadField(context.Context, *SuggestLeadFieldRequest) (*SuggestLeadFieldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuggestLeadField not implemented")
}
func (*UnimplementedUserMgrServer) LinkProductUrl(context.Context, *Product) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkProductUrl not implemented")
}
func (*UnimplementedUserMgrServer) ListUserEvents(context.Context, *ListUserEventsRequest) (*Events, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserEvents not implemented")
}
func (*UnimplementedUserMgrServer) CreateUserEvent(context.Context, *Event) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserEvent not implemented")
}
func (*UnimplementedUserMgrServer) FillDevice(context.Context, *common.Device) (*common.Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FillDevice not implemented")
}
func (*UnimplementedUserMgrServer) ImportLead(context.Context, *ImportLeadRequest) (*ImportLeadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportLead not implemented")
}
func (*UnimplementedUserMgrServer) LinkTask(context.Context, *Task) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkTask not implemented")
}
func (*UnimplementedUserMgrServer) CountUserProfiles(context.Context, *UsersRequest) (*CountTouchpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountUserProfiles not implemented")
}
func (*UnimplementedUserMgrServer) ListUserIds(context.Context, *UsersRequest) (*Ids, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserIds not implemented")
}
func (*UnimplementedUserMgrServer) ListUserIdWithPhones(context.Context, *UsersRequest) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserIdWithPhones not implemented")
}
func (*UnimplementedUserMgrServer) SearchUsers(context.Context, *DocSearchRequest) (*DocSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUsers not implemented")
}
func (*UnimplementedUserMgrServer) ReportUser(context.Context, *UserReportRequest) (*UserReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportUser not implemented")
}
func (*UnimplementedUserMgrServer) FetchLiveUsers(context.Context, *LiveUserView) (*LiveUserView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchLiveUsers not implemented")
}
func (*UnimplementedUserMgrServer) StopLiveUsers(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopLiveUsers not implemented")
}
func (*UnimplementedUserMgrServer) SuggestLiveFields(context.Context, *SuggestLeadFieldRequest) (*SuggestLeadFieldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuggestLiveFields not implemented")
}
func (*UnimplementedUserMgrServer) Presences(context.Context, *PresencesRequest) (*PresencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Presences not implemented")
}
func (*UnimplementedUserMgrServer) UpdateSegmentMember(context.Context, *ResourceGroupMember) (*ResourceGroupMember, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSegmentMember not implemented")
}
func (*UnimplementedUserMgrServer) RemoveSegmentMember(context.Context, *ResourceGroupMember) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSegmentMember not implemented")
}

func RegisterUserMgrServer(s *grpc.Server, srv UserMgrServer) {
	s.RegisterService(&_UserMgr_serviceDesc, srv)
}

func _UserMgr_MergeUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Users)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).MergeUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/MergeUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).MergeUser(ctx, req.(*Users))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_DetachUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).DetachUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/DetachUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).DetachUser(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_CreateUser2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).CreateUser2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/CreateUser2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).CreateUser2(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).UpdateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_TryUpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).TryUpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/TryUpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).TryUpdateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_RemoveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).RemoveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/RemoveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).RemoveUser(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_RestoreUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).RestoreUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/RestoreUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).RestoreUser(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_ReadUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).ReadUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/ReadUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).ReadUser(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_ReadOrCreateUserByContactProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).ReadOrCreateUserByContactProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/ReadOrCreateUserByContactProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).ReadOrCreateUserByContactProfile(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_MatchUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).MatchUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/MatchUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).MatchUsers(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_BanUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).BanUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/BanUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).BanUser(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_UnbanUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).UnbanUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/UnbanUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).UnbanUser(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_LookupByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).LookupByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/LookupByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).LookupByPhone(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_UpdateView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserView)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).UpdateView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/UpdateView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).UpdateView(ctx, req.(*UserView))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_CreateView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserView)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).CreateView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/CreateView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).CreateView(ctx, req.(*UserView))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_DeleteView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).DeleteView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/DeleteView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).DeleteView(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_GetView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).GetView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/GetView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).GetView(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_ListViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).ListViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/ListViews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).ListViews(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_UpdateSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Segment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).UpdateSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/UpdateSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).UpdateSegment(ctx, req.(*Segment))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_CreateSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Segment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).CreateSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/CreateSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).CreateSegment(ctx, req.(*Segment))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_DeleteSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).DeleteSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/DeleteSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).DeleteSegment(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_GetSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).GetSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/GetSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).GetSegment(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_ListSegments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).ListSegments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/ListSegments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).ListSegments(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_AddToSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SegmentUsers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).AddToSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/AddToSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).AddToSegment(ctx, req.(*SegmentUsers))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_RemoveFromSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SegmentUsers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).RemoveFromSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/RemoveFromSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).RemoveFromSegment(ctx, req.(*SegmentUsers))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_UpsertLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Label)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).UpsertLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/UpsertLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).UpsertLabel(ctx, req.(*Label))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_DeleteLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).DeleteLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/DeleteLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).DeleteLabel(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_ListLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).ListLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/ListLabels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).ListLabels(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_GetLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).GetLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/GetLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).GetLabel(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_AddLeadOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).AddLeadOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/AddLeadOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).AddLeadOwner(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_RemoveLeadOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).RemoveLeadOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/RemoveLeadOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).RemoveLeadOwner(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_AddUserLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).AddUserLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/AddUserLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).AddUserLabel(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_RemoveUserLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).RemoveUserLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/RemoveUserLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).RemoveUserLabel(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_AddLeadConversionBy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).AddLeadConversionBy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/AddLeadConversionBy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).AddLeadConversionBy(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_CreateShippingAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).CreateShippingAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/CreateShippingAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).CreateShippingAddress(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_UpdateShippingAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).UpdateShippingAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/UpdateShippingAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).UpdateShippingAddress(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_RemoveShippingAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).RemoveShippingAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/RemoveShippingAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).RemoveShippingAddress(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_ListShippingAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).ListShippingAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/ListShippingAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).ListShippingAddress(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_MakeDefaultShippingAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).MakeDefaultShippingAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/MakeDefaultShippingAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).MakeDefaultShippingAddress(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_ListLeads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserView)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).ListLeads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/ListLeads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).ListLeads(ctx, req.(*UserView))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_SuggestLeadField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestLeadFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).SuggestLeadField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/SuggestLeadField",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).SuggestLeadField(ctx, req.(*SuggestLeadFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_LinkProductUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).LinkProductUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/LinkProductUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).LinkProductUrl(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_ListUserEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).ListUserEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/ListUserEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).ListUserEvents(ctx, req.(*ListUserEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_CreateUserEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).CreateUserEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/CreateUserEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).CreateUserEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_FillDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).FillDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/FillDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).FillDevice(ctx, req.(*common.Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_ImportLead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportLeadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).ImportLead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/ImportLead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).ImportLead(ctx, req.(*ImportLeadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_LinkTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).LinkTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/LinkTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).LinkTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_CountUserProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).CountUserProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/CountUserProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).CountUserProfiles(ctx, req.(*UsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_ListUserIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).ListUserIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/ListUserIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).ListUserIds(ctx, req.(*UsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_ListUserIdWithPhones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).ListUserIdWithPhones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/ListUserIdWithPhones",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).ListUserIdWithPhones(ctx, req.(*UsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_SearchUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).SearchUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/SearchUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).SearchUsers(ctx, req.(*DocSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_ReportUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).ReportUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/ReportUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).ReportUser(ctx, req.(*UserReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_FetchLiveUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiveUserView)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).FetchLiveUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/FetchLiveUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).FetchLiveUsers(ctx, req.(*LiveUserView))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_StopLiveUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).StopLiveUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/StopLiveUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).StopLiveUsers(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_SuggestLiveFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestLeadFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).SuggestLiveFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/SuggestLiveFields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).SuggestLiveFields(ctx, req.(*SuggestLeadFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_Presences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PresencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).Presences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/Presences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).Presences(ctx, req.(*PresencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_UpdateSegmentMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceGroupMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).UpdateSegmentMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/UpdateSegmentMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).UpdateSegmentMember(ctx, req.(*ResourceGroupMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_RemoveSegmentMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceGroupMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).RemoveSegmentMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/RemoveSegmentMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).RemoveSegmentMember(ctx, req.(*ResourceGroupMember))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.UserMgr",
	HandlerType: (*UserMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MergeUser",
			Handler:    _UserMgr_MergeUser_Handler,
		},
		{
			MethodName: "DetachUser",
			Handler:    _UserMgr_DetachUser_Handler,
		},
		{
			MethodName: "CreateUser2",
			Handler:    _UserMgr_CreateUser2_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserMgr_UpdateUser_Handler,
		},
		{
			MethodName: "TryUpdateUser",
			Handler:    _UserMgr_TryUpdateUser_Handler,
		},
		{
			MethodName: "RemoveUser",
			Handler:    _UserMgr_RemoveUser_Handler,
		},
		{
			MethodName: "RestoreUser",
			Handler:    _UserMgr_RestoreUser_Handler,
		},
		{
			MethodName: "ReadUser",
			Handler:    _UserMgr_ReadUser_Handler,
		},
		{
			MethodName: "ReadOrCreateUserByContactProfile",
			Handler:    _UserMgr_ReadOrCreateUserByContactProfile_Handler,
		},
		{
			MethodName: "MatchUsers",
			Handler:    _UserMgr_MatchUsers_Handler,
		},
		{
			MethodName: "BanUser",
			Handler:    _UserMgr_BanUser_Handler,
		},
		{
			MethodName: "UnbanUser",
			Handler:    _UserMgr_UnbanUser_Handler,
		},
		{
			MethodName: "LookupByPhone",
			Handler:    _UserMgr_LookupByPhone_Handler,
		},
		{
			MethodName: "UpdateView",
			Handler:    _UserMgr_UpdateView_Handler,
		},
		{
			MethodName: "CreateView",
			Handler:    _UserMgr_CreateView_Handler,
		},
		{
			MethodName: "DeleteView",
			Handler:    _UserMgr_DeleteView_Handler,
		},
		{
			MethodName: "GetView",
			Handler:    _UserMgr_GetView_Handler,
		},
		{
			MethodName: "ListViews",
			Handler:    _UserMgr_ListViews_Handler,
		},
		{
			MethodName: "UpdateSegment",
			Handler:    _UserMgr_UpdateSegment_Handler,
		},
		{
			MethodName: "CreateSegment",
			Handler:    _UserMgr_CreateSegment_Handler,
		},
		{
			MethodName: "DeleteSegment",
			Handler:    _UserMgr_DeleteSegment_Handler,
		},
		{
			MethodName: "GetSegment",
			Handler:    _UserMgr_GetSegment_Handler,
		},
		{
			MethodName: "ListSegments",
			Handler:    _UserMgr_ListSegments_Handler,
		},
		{
			MethodName: "AddToSegment",
			Handler:    _UserMgr_AddToSegment_Handler,
		},
		{
			MethodName: "RemoveFromSegment",
			Handler:    _UserMgr_RemoveFromSegment_Handler,
		},
		{
			MethodName: "UpsertLabel",
			Handler:    _UserMgr_UpsertLabel_Handler,
		},
		{
			MethodName: "DeleteLabel",
			Handler:    _UserMgr_DeleteLabel_Handler,
		},
		{
			MethodName: "ListLabels",
			Handler:    _UserMgr_ListLabels_Handler,
		},
		{
			MethodName: "GetLabel",
			Handler:    _UserMgr_GetLabel_Handler,
		},
		{
			MethodName: "AddLeadOwner",
			Handler:    _UserMgr_AddLeadOwner_Handler,
		},
		{
			MethodName: "RemoveLeadOwner",
			Handler:    _UserMgr_RemoveLeadOwner_Handler,
		},
		{
			MethodName: "AddUserLabel",
			Handler:    _UserMgr_AddUserLabel_Handler,
		},
		{
			MethodName: "RemoveUserLabel",
			Handler:    _UserMgr_RemoveUserLabel_Handler,
		},
		{
			MethodName: "AddLeadConversionBy",
			Handler:    _UserMgr_AddLeadConversionBy_Handler,
		},
		{
			MethodName: "CreateShippingAddress",
			Handler:    _UserMgr_CreateShippingAddress_Handler,
		},
		{
			MethodName: "UpdateShippingAddress",
			Handler:    _UserMgr_UpdateShippingAddress_Handler,
		},
		{
			MethodName: "RemoveShippingAddress",
			Handler:    _UserMgr_RemoveShippingAddress_Handler,
		},
		{
			MethodName: "ListShippingAddress",
			Handler:    _UserMgr_ListShippingAddress_Handler,
		},
		{
			MethodName: "MakeDefaultShippingAddress",
			Handler:    _UserMgr_MakeDefaultShippingAddress_Handler,
		},
		{
			MethodName: "ListLeads",
			Handler:    _UserMgr_ListLeads_Handler,
		},
		{
			MethodName: "SuggestLeadField",
			Handler:    _UserMgr_SuggestLeadField_Handler,
		},
		{
			MethodName: "LinkProductUrl",
			Handler:    _UserMgr_LinkProductUrl_Handler,
		},
		{
			MethodName: "ListUserEvents",
			Handler:    _UserMgr_ListUserEvents_Handler,
		},
		{
			MethodName: "CreateUserEvent",
			Handler:    _UserMgr_CreateUserEvent_Handler,
		},
		{
			MethodName: "FillDevice",
			Handler:    _UserMgr_FillDevice_Handler,
		},
		{
			MethodName: "ImportLead",
			Handler:    _UserMgr_ImportLead_Handler,
		},
		{
			MethodName: "LinkTask",
			Handler:    _UserMgr_LinkTask_Handler,
		},
		{
			MethodName: "CountUserProfiles",
			Handler:    _UserMgr_CountUserProfiles_Handler,
		},
		{
			MethodName: "ListUserIds",
			Handler:    _UserMgr_ListUserIds_Handler,
		},
		{
			MethodName: "ListUserIdWithPhones",
			Handler:    _UserMgr_ListUserIdWithPhones_Handler,
		},
		{
			MethodName: "SearchUsers",
			Handler:    _UserMgr_SearchUsers_Handler,
		},
		{
			MethodName: "ReportUser",
			Handler:    _UserMgr_ReportUser_Handler,
		},
		{
			MethodName: "FetchLiveUsers",
			Handler:    _UserMgr_FetchLiveUsers_Handler,
		},
		{
			MethodName: "StopLiveUsers",
			Handler:    _UserMgr_StopLiveUsers_Handler,
		},
		{
			MethodName: "SuggestLiveFields",
			Handler:    _UserMgr_SuggestLiveFields_Handler,
		},
		{
			MethodName: "Presences",
			Handler:    _UserMgr_Presences_Handler,
		},
		{
			MethodName: "UpdateSegmentMember",
			Handler:    _UserMgr_UpdateSegmentMember_Handler,
		},
		{
			MethodName: "RemoveSegmentMember",
			Handler:    _UserMgr_RemoveSegmentMember_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// NoteMgrClient is the client API for NoteMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NoteMgrClient interface {
	ListNotes(ctx context.Context, in *ListNotesRequest, opts ...grpc.CallOption) (*Notes, error)
	AddNote(ctx context.Context, in *Note, opts ...grpc.CallOption) (*Note, error)
	UpdateNote(ctx context.Context, in *Note, opts ...grpc.CallOption) (*Note, error)
	DeleteNote(ctx context.Context, in *DeleteNoteRequest, opts ...grpc.CallOption) (*Empty, error)
}

type noteMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewNoteMgrClient(cc grpc.ClientConnInterface) NoteMgrClient {
	return &noteMgrClient{cc}
}

func (c *noteMgrClient) ListNotes(ctx context.Context, in *ListNotesRequest, opts ...grpc.CallOption) (*Notes, error) {
	out := new(Notes)
	err := c.cc.Invoke(ctx, "/header.NoteMgr/ListNotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteMgrClient) AddNote(ctx context.Context, in *Note, opts ...grpc.CallOption) (*Note, error) {
	out := new(Note)
	err := c.cc.Invoke(ctx, "/header.NoteMgr/AddNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteMgrClient) UpdateNote(ctx context.Context, in *Note, opts ...grpc.CallOption) (*Note, error) {
	out := new(Note)
	err := c.cc.Invoke(ctx, "/header.NoteMgr/UpdateNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteMgrClient) DeleteNote(ctx context.Context, in *DeleteNoteRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.NoteMgr/DeleteNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NoteMgrServer is the server API for NoteMgr service.
type NoteMgrServer interface {
	ListNotes(context.Context, *ListNotesRequest) (*Notes, error)
	AddNote(context.Context, *Note) (*Note, error)
	UpdateNote(context.Context, *Note) (*Note, error)
	DeleteNote(context.Context, *DeleteNoteRequest) (*Empty, error)
}

// UnimplementedNoteMgrServer can be embedded to have forward compatible implementations.
type UnimplementedNoteMgrServer struct {
}

func (*UnimplementedNoteMgrServer) ListNotes(context.Context, *ListNotesRequest) (*Notes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNotes not implemented")
}
func (*UnimplementedNoteMgrServer) AddNote(context.Context, *Note) (*Note, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNote not implemented")
}
func (*UnimplementedNoteMgrServer) UpdateNote(context.Context, *Note) (*Note, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNote not implemented")
}
func (*UnimplementedNoteMgrServer) DeleteNote(context.Context, *DeleteNoteRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNote not implemented")
}

func RegisterNoteMgrServer(s *grpc.Server, srv NoteMgrServer) {
	s.RegisterService(&_NoteMgr_serviceDesc, srv)
}

func _NoteMgr_ListNotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteMgrServer).ListNotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.NoteMgr/ListNotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteMgrServer).ListNotes(ctx, req.(*ListNotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteMgr_AddNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Note)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteMgrServer).AddNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.NoteMgr/AddNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteMgrServer).AddNote(ctx, req.(*Note))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteMgr_UpdateNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Note)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteMgrServer).UpdateNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.NoteMgr/UpdateNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteMgrServer).UpdateNote(ctx, req.(*Note))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteMgr_DeleteNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteMgrServer).DeleteNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.NoteMgr/DeleteNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteMgrServer).DeleteNote(ctx, req.(*DeleteNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NoteMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.NoteMgr",
	HandlerType: (*NoteMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListNotes",
			Handler:    _NoteMgr_ListNotes_Handler,
		},
		{
			MethodName: "AddNote",
			Handler:    _NoteMgr_AddNote_Handler,
		},
		{
			MethodName: "UpdateNote",
			Handler:    _NoteMgr_UpdateNote_Handler,
		},
		{
			MethodName: "DeleteNote",
			Handler:    _NoteMgr_DeleteNote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// AttributeMgrClient is the client API for AttributeMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AttributeMgrClient interface {
	ListAttributeDefinitions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AttributeDefinitions, error)
	CreateAttributeDefinition(ctx context.Context, in *AttributeDefinition, opts ...grpc.CallOption) (*AttributeDefinition, error)
	UpdateAttributeDefinition(ctx context.Context, in *AttributeDefinition, opts ...grpc.CallOption) (*AttributeDefinition, error)
}

type attributeMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewAttributeMgrClient(cc grpc.ClientConnInterface) AttributeMgrClient {
	return &attributeMgrClient{cc}
}

func (c *attributeMgrClient) ListAttributeDefinitions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AttributeDefinitions, error) {
	out := new(AttributeDefinitions)
	err := c.cc.Invoke(ctx, "/header.AttributeMgr/ListAttributeDefinitions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attributeMgrClient) CreateAttributeDefinition(ctx context.Context, in *AttributeDefinition, opts ...grpc.CallOption) (*AttributeDefinition, error) {
	out := new(AttributeDefinition)
	err := c.cc.Invoke(ctx, "/header.AttributeMgr/CreateAttributeDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attributeMgrClient) UpdateAttributeDefinition(ctx context.Context, in *AttributeDefinition, opts ...grpc.CallOption) (*AttributeDefinition, error) {
	out := new(AttributeDefinition)
	err := c.cc.Invoke(ctx, "/header.AttributeMgr/UpdateAttributeDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttributeMgrServer is the server API for AttributeMgr service.
type AttributeMgrServer interface {
	ListAttributeDefinitions(context.Context, *Empty) (*AttributeDefinitions, error)
	CreateAttributeDefinition(context.Context, *AttributeDefinition) (*AttributeDefinition, error)
	UpdateAttributeDefinition(context.Context, *AttributeDefinition) (*AttributeDefinition, error)
}

// UnimplementedAttributeMgrServer can be embedded to have forward compatible implementations.
type UnimplementedAttributeMgrServer struct {
}

func (*UnimplementedAttributeMgrServer) ListAttributeDefinitions(context.Context, *Empty) (*AttributeDefinitions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAttributeDefinitions not implemented")
}
func (*UnimplementedAttributeMgrServer) CreateAttributeDefinition(context.Context, *AttributeDefinition) (*AttributeDefinition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAttributeDefinition not implemented")
}
func (*UnimplementedAttributeMgrServer) UpdateAttributeDefinition(context.Context, *AttributeDefinition) (*AttributeDefinition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAttributeDefinition not implemented")
}

func RegisterAttributeMgrServer(s *grpc.Server, srv AttributeMgrServer) {
	s.RegisterService(&_AttributeMgr_serviceDesc, srv)
}

func _AttributeMgr_ListAttributeDefinitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttributeMgrServer).ListAttributeDefinitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AttributeMgr/ListAttributeDefinitions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttributeMgrServer).ListAttributeDefinitions(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttributeMgr_CreateAttributeDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttributeDefinition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttributeMgrServer).CreateAttributeDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AttributeMgr/CreateAttributeDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttributeMgrServer).CreateAttributeDefinition(ctx, req.(*AttributeDefinition))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttributeMgr_UpdateAttributeDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttributeDefinition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttributeMgrServer).UpdateAttributeDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AttributeMgr/UpdateAttributeDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttributeMgrServer).UpdateAttributeDefinition(ctx, req.(*AttributeDefinition))
	}
	return interceptor(ctx, in, info, handler)
}

var _AttributeMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.AttributeMgr",
	HandlerType: (*AttributeMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAttributeDefinitions",
			Handler:    _AttributeMgr_ListAttributeDefinitions_Handler,
		},
		{
			MethodName: "CreateAttributeDefinition",
			Handler:    _AttributeMgr_CreateAttributeDefinition_Handler,
		},
		{
			MethodName: "UpdateAttributeDefinition",
			Handler:    _AttributeMgr_UpdateAttributeDefinition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// AutomationMgrClient is the client API for AutomationMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AutomationMgrClient interface {
	ListWorkflows(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error)
	UpdateWorkflow(ctx context.Context, in *Automation, opts ...grpc.CallOption) (*Response, error)
	CreateWorkflow(ctx context.Context, in *Automation, opts ...grpc.CallOption) (*Response, error)
	DeleteWorkflow(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error)
	ReadWorkflow(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error)
	ListWorkflowLog(ctx context.Context, in *WorkflowLogRequest, opts ...grpc.CallOption) (*Response, error)
}

type automationMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewAutomationMgrClient(cc grpc.ClientConnInterface) AutomationMgrClient {
	return &automationMgrClient{cc}
}

func (c *automationMgrClient) ListWorkflows(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/header.AutomationMgr/ListWorkflows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *automationMgrClient) UpdateWorkflow(ctx context.Context, in *Automation, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/header.AutomationMgr/UpdateWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *automationMgrClient) CreateWorkflow(ctx context.Context, in *Automation, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/header.AutomationMgr/CreateWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *automationMgrClient) DeleteWorkflow(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/header.AutomationMgr/DeleteWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *automationMgrClient) ReadWorkflow(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/header.AutomationMgr/ReadWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *automationMgrClient) ListWorkflowLog(ctx context.Context, in *WorkflowLogRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/header.AutomationMgr/ListWorkflowLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AutomationMgrServer is the server API for AutomationMgr service.
type AutomationMgrServer interface {
	ListWorkflows(context.Context, *Id) (*Response, error)
	UpdateWorkflow(context.Context, *Automation) (*Response, error)
	CreateWorkflow(context.Context, *Automation) (*Response, error)
	DeleteWorkflow(context.Context, *Id) (*Response, error)
	ReadWorkflow(context.Context, *Id) (*Response, error)
	ListWorkflowLog(context.Context, *WorkflowLogRequest) (*Response, error)
}

// UnimplementedAutomationMgrServer can be embedded to have forward compatible implementations.
type UnimplementedAutomationMgrServer struct {
}

func (*UnimplementedAutomationMgrServer) ListWorkflows(context.Context, *Id) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkflows not implemented")
}
func (*UnimplementedAutomationMgrServer) UpdateWorkflow(context.Context, *Automation) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkflow not implemented")
}
func (*UnimplementedAutomationMgrServer) CreateWorkflow(context.Context, *Automation) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkflow not implemented")
}
func (*UnimplementedAutomationMgrServer) DeleteWorkflow(context.Context, *Id) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkflow not implemented")
}
func (*UnimplementedAutomationMgrServer) ReadWorkflow(context.Context, *Id) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadWorkflow not implemented")
}
func (*UnimplementedAutomationMgrServer) ListWorkflowLog(context.Context, *WorkflowLogRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkflowLog not implemented")
}

func RegisterAutomationMgrServer(s *grpc.Server, srv AutomationMgrServer) {
	s.RegisterService(&_AutomationMgr_serviceDesc, srv)
}

func _AutomationMgr_ListWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomationMgrServer).ListWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AutomationMgr/ListWorkflows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomationMgrServer).ListWorkflows(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutomationMgr_UpdateWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Automation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomationMgrServer).UpdateWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AutomationMgr/UpdateWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomationMgrServer).UpdateWorkflow(ctx, req.(*Automation))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutomationMgr_CreateWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Automation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomationMgrServer).CreateWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AutomationMgr/CreateWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomationMgrServer).CreateWorkflow(ctx, req.(*Automation))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutomationMgr_DeleteWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomationMgrServer).DeleteWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AutomationMgr/DeleteWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomationMgrServer).DeleteWorkflow(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutomationMgr_ReadWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomationMgrServer).ReadWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AutomationMgr/ReadWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomationMgrServer).ReadWorkflow(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutomationMgr_ListWorkflowLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomationMgrServer).ListWorkflowLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AutomationMgr/ListWorkflowLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomationMgrServer).ListWorkflowLog(ctx, req.(*WorkflowLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AutomationMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.AutomationMgr",
	HandlerType: (*AutomationMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListWorkflows",
			Handler:    _AutomationMgr_ListWorkflows_Handler,
		},
		{
			MethodName: "UpdateWorkflow",
			Handler:    _AutomationMgr_UpdateWorkflow_Handler,
		},
		{
			MethodName: "CreateWorkflow",
			Handler:    _AutomationMgr_CreateWorkflow_Handler,
		},
		{
			MethodName: "DeleteWorkflow",
			Handler:    _AutomationMgr_DeleteWorkflow_Handler,
		},
		{
			MethodName: "ReadWorkflow",
			Handler:    _AutomationMgr_ReadWorkflow_Handler,
		},
		{
			MethodName: "ListWorkflowLog",
			Handler:    _AutomationMgr_ListWorkflowLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// ConversationMgrClient is the client API for ConversationMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConversationMgrClient interface {
	AssignRule(ctx context.Context, in *AssignRequest, opts ...grpc.CallOption) (*RouteResult, error)
	PongMessage(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error)
	StartConversation(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*Conversation, error)
	EndConversation(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Conversation, error)
	GetConversation(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Conversation, error)
	ListConversations(ctx context.Context, in *ListConversationsRequest, opts ...grpc.CallOption) (*Conversations, error)
	ListConversations2(ctx context.Context, in *ListConversationsRequest, opts ...grpc.CallOption) (*Response, error)
	MatchConversations(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Conversations, error)
	TagConversation(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*Empty, error)
	UntagConversation(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*Empty, error)
	JoinConversation(ctx context.Context, in *ConversationMember, opts ...grpc.CallOption) (*Empty, error)
	LeftConversation(ctx context.Context, in *ConversationMember, opts ...grpc.CallOption) (*Empty, error)
	UpdateConversationInfo(ctx context.Context, in *Conversation, opts ...grpc.CallOption) (*Conversation, error)
	UpdateMuteConversation(ctx context.Context, in *Conversation, opts ...grpc.CallOption) (*Empty, error)
	UpdateConversationMember(ctx context.Context, in *ConversationMember, opts ...grpc.CallOption) (*Empty, error)
	UnwatchConversation(ctx context.Context, in *Conversation, opts ...grpc.CallOption) (*Empty, error)
	UnhiddenConversation(ctx context.Context, in *Conversation, opts ...grpc.CallOption) (*Empty, error)
	UpdateEndchatSetting(ctx context.Context, in *EndchatSetting, opts ...grpc.CallOption) (*EndchatSetting, error)
	GetEndchatSetting(ctx context.Context, in *Id, opts ...grpc.CallOption) (*EndchatSetting, error)
	TerminateBot(ctx context.Context, in *BotTerminated, opts ...grpc.CallOption) (*Event, error)
	SendMessage(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error)
	SendOmniChannelMessage(ctx context.Context, in *SendOmniChannelMessageRequest, opts ...grpc.CallOption) (*Event, error)
	UpdateMessage(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error)
	PinMessage(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Empty, error)
	UnpinMessage(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Empty, error)
	ListEvents(ctx context.Context, in *ListConversationEventsRequest, opts ...grpc.CallOption) (*Events, error)
	Deintegrate(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	ListIntegrations(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Integrations, error)
	Integrate(ctx context.Context, in *Integration, opts ...grpc.CallOption) (*Integration, error)
	GetIntegration(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Integration, error)
	UpdateIntegrationMember(ctx context.Context, in *ResourceGroupMember, opts ...grpc.CallOption) (*ResourceGroupMember, error)
	RemoveIntegrationMember(ctx context.Context, in *ResourceGroupMember, opts ...grpc.CallOption) (*Empty, error)
	UpdateRule(ctx context.Context, in *Rule, opts ...grpc.CallOption) (*Rule, error)
	CreateRule(ctx context.Context, in *Rule, opts ...grpc.CallOption) (*Rule, error)
	DeleteRule(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	ReadRule(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Rule, error)
	ListRules(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Route, error)
	ListConversationAutomations(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ConversationAutomations, error)
	UpdateConversationAutomation(ctx context.Context, in *ConversationAutomation, opts ...grpc.CallOption) (*ConversationAutomation, error)
	DeleteConversationAutomation(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	ReadConversationAutomation(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ConversationAutomation, error)
	ListPhoneDevices(ctx context.Context, in *Id, opts ...grpc.CallOption) (*PhoneDevices, error)
	CreatePhoneDevice(ctx context.Context, in *PhoneDevice, opts ...grpc.CallOption) (*PhoneDevice, error)
	UpdatePhoneDevice(ctx context.Context, in *PhoneDevice, opts ...grpc.CallOption) (*PhoneDevice, error)
	DeletePhoneDevice(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	ReadPhoneDevice(ctx context.Context, in *Id, opts ...grpc.CallOption) (*PhoneDevice, error)
	TestNumber(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Integration, error)
	ActiveNumber(ctx context.Context, in *Integration, opts ...grpc.CallOption) (*Integration, error)
	ListCallSettings(ctx context.Context, in *Id, opts ...grpc.CallOption) (*CallSettings, error)
	UpdateCallSetting(ctx context.Context, in *CallSetting, opts ...grpc.CallOption) (*CallSetting, error)
	BlockNumber(ctx context.Context, in *BlockedNumber, opts ...grpc.CallOption) (*BlockedNumber, error)
	ListBlockedNumbers(ctx context.Context, in *Id, opts ...grpc.CallOption) (*BlockedNumbers, error)
	UnblockNumber(ctx context.Context, in *BlockedNumber, opts ...grpc.CallOption) (*Empty, error)
	ListGreetingAudio(ctx context.Context, in *Id, opts ...grpc.CallOption) (*GreetingAudios, error)
	CreateGreetingAudio(ctx context.Context, in *GreetingAudio, opts ...grpc.CallOption) (*GreetingAudio, error)
	UpdateGreetingAudio(ctx context.Context, in *GreetingAudio, opts ...grpc.CallOption) (*Response, error)
	// try to make an outbound call from subiz
	OriginateCall(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*Conversation, error)
	ListMyRecentCalls(ctx context.Context, in *Id, opts ...grpc.CallOption) (*RecentCallRecords, error)
	// sync, called from fabikon
	SaveMessage(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error)
	ApplyMessage(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error)
}

type conversationMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewConversationMgrClient(cc grpc.ClientConnInterface) ConversationMgrClient {
	return &conversationMgrClient{cc}
}

func (c *conversationMgrClient) AssignRule(ctx context.Context, in *AssignRequest, opts ...grpc.CallOption) (*RouteResult, error) {
	out := new(RouteResult)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/AssignRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) PongMessage(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/PongMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) StartConversation(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*Conversation, error) {
	out := new(Conversation)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/StartConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) EndConversation(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Conversation, error) {
	out := new(Conversation)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/EndConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) GetConversation(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Conversation, error) {
	out := new(Conversation)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/GetConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) ListConversations(ctx context.Context, in *ListConversationsRequest, opts ...grpc.CallOption) (*Conversations, error) {
	out := new(Conversations)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/ListConversations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) ListConversations2(ctx context.Context, in *ListConversationsRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/ListConversations2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) MatchConversations(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Conversations, error) {
	out := new(Conversations)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/MatchConversations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) TagConversation(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/TagConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) UntagConversation(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/UntagConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) JoinConversation(ctx context.Context, in *ConversationMember, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/JoinConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) LeftConversation(ctx context.Context, in *ConversationMember, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/LeftConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) UpdateConversationInfo(ctx context.Context, in *Conversation, opts ...grpc.CallOption) (*Conversation, error) {
	out := new(Conversation)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/UpdateConversationInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) UpdateMuteConversation(ctx context.Context, in *Conversation, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/UpdateMuteConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) UpdateConversationMember(ctx context.Context, in *ConversationMember, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/UpdateConversationMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) UnwatchConversation(ctx context.Context, in *Conversation, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/UnwatchConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) UnhiddenConversation(ctx context.Context, in *Conversation, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/UnhiddenConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) UpdateEndchatSetting(ctx context.Context, in *EndchatSetting, opts ...grpc.CallOption) (*EndchatSetting, error) {
	out := new(EndchatSetting)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/UpdateEndchatSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) GetEndchatSetting(ctx context.Context, in *Id, opts ...grpc.CallOption) (*EndchatSetting, error) {
	out := new(EndchatSetting)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/GetEndchatSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) TerminateBot(ctx context.Context, in *BotTerminated, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/TerminateBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) SendMessage(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) SendOmniChannelMessage(ctx context.Context, in *SendOmniChannelMessageRequest, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/SendOmniChannelMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) UpdateMessage(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/UpdateMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) PinMessage(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/PinMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) UnpinMessage(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/UnpinMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) ListEvents(ctx context.Context, in *ListConversationEventsRequest, opts ...grpc.CallOption) (*Events, error) {
	out := new(Events)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/ListEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) Deintegrate(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/Deintegrate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) ListIntegrations(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Integrations, error) {
	out := new(Integrations)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/ListIntegrations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) Integrate(ctx context.Context, in *Integration, opts ...grpc.CallOption) (*Integration, error) {
	out := new(Integration)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/Integrate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) GetIntegration(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Integration, error) {
	out := new(Integration)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/GetIntegration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) UpdateIntegrationMember(ctx context.Context, in *ResourceGroupMember, opts ...grpc.CallOption) (*ResourceGroupMember, error) {
	out := new(ResourceGroupMember)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/UpdateIntegrationMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) RemoveIntegrationMember(ctx context.Context, in *ResourceGroupMember, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/RemoveIntegrationMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) UpdateRule(ctx context.Context, in *Rule, opts ...grpc.CallOption) (*Rule, error) {
	out := new(Rule)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/UpdateRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) CreateRule(ctx context.Context, in *Rule, opts ...grpc.CallOption) (*Rule, error) {
	out := new(Rule)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/CreateRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) DeleteRule(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/DeleteRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) ReadRule(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Rule, error) {
	out := new(Rule)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/ReadRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) ListRules(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Route, error) {
	out := new(Route)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/ListRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) ListConversationAutomations(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ConversationAutomations, error) {
	out := new(ConversationAutomations)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/ListConversationAutomations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) UpdateConversationAutomation(ctx context.Context, in *ConversationAutomation, opts ...grpc.CallOption) (*ConversationAutomation, error) {
	out := new(ConversationAutomation)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/UpdateConversationAutomation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) DeleteConversationAutomation(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/DeleteConversationAutomation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) ReadConversationAutomation(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ConversationAutomation, error) {
	out := new(ConversationAutomation)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/ReadConversationAutomation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) ListPhoneDevices(ctx context.Context, in *Id, opts ...grpc.CallOption) (*PhoneDevices, error) {
	out := new(PhoneDevices)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/ListPhoneDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) CreatePhoneDevice(ctx context.Context, in *PhoneDevice, opts ...grpc.CallOption) (*PhoneDevice, error) {
	out := new(PhoneDevice)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/CreatePhoneDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) UpdatePhoneDevice(ctx context.Context, in *PhoneDevice, opts ...grpc.CallOption) (*PhoneDevice, error) {
	out := new(PhoneDevice)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/UpdatePhoneDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) DeletePhoneDevice(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/DeletePhoneDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) ReadPhoneDevice(ctx context.Context, in *Id, opts ...grpc.CallOption) (*PhoneDevice, error) {
	out := new(PhoneDevice)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/ReadPhoneDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) TestNumber(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Integration, error) {
	out := new(Integration)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/TestNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) ActiveNumber(ctx context.Context, in *Integration, opts ...grpc.CallOption) (*Integration, error) {
	out := new(Integration)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/ActiveNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) ListCallSettings(ctx context.Context, in *Id, opts ...grpc.CallOption) (*CallSettings, error) {
	out := new(CallSettings)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/ListCallSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) UpdateCallSetting(ctx context.Context, in *CallSetting, opts ...grpc.CallOption) (*CallSetting, error) {
	out := new(CallSetting)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/UpdateCallSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) BlockNumber(ctx context.Context, in *BlockedNumber, opts ...grpc.CallOption) (*BlockedNumber, error) {
	out := new(BlockedNumber)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/BlockNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) ListBlockedNumbers(ctx context.Context, in *Id, opts ...grpc.CallOption) (*BlockedNumbers, error) {
	out := new(BlockedNumbers)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/ListBlockedNumbers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) UnblockNumber(ctx context.Context, in *BlockedNumber, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/UnblockNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) ListGreetingAudio(ctx context.Context, in *Id, opts ...grpc.CallOption) (*GreetingAudios, error) {
	out := new(GreetingAudios)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/ListGreetingAudio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) CreateGreetingAudio(ctx context.Context, in *GreetingAudio, opts ...grpc.CallOption) (*GreetingAudio, error) {
	out := new(GreetingAudio)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/CreateGreetingAudio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) UpdateGreetingAudio(ctx context.Context, in *GreetingAudio, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/UpdateGreetingAudio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) OriginateCall(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*Conversation, error) {
	out := new(Conversation)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/OriginateCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) ListMyRecentCalls(ctx context.Context, in *Id, opts ...grpc.CallOption) (*RecentCallRecords, error) {
	out := new(RecentCallRecords)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/ListMyRecentCalls", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) SaveMessage(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/SaveMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) ApplyMessage(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/ApplyMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConversationMgrServer is the server API for ConversationMgr service.
type ConversationMgrServer interface {
	AssignRule(context.Context, *AssignRequest) (*RouteResult, error)
	PongMessage(context.Context, *Event) (*Event, error)
	StartConversation(context.Context, *StartRequest) (*Conversation, error)
	EndConversation(context.Context, *Id) (*Conversation, error)
	GetConversation(context.Context, *Id) (*Conversation, error)
	ListConversations(context.Context, *ListConversationsRequest) (*Conversations, error)
	ListConversations2(context.Context, *ListConversationsRequest) (*Response, error)
	MatchConversations(context.Context, *Ids) (*Conversations, error)
	TagConversation(context.Context, *TagRequest) (*Empty, error)
	UntagConversation(context.Context, *TagRequest) (*Empty, error)
	JoinConversation(context.Context, *ConversationMember) (*Empty, error)
	LeftConversation(context.Context, *ConversationMember) (*Empty, error)
	UpdateConversationInfo(context.Context, *Conversation) (*Conversation, error)
	UpdateMuteConversation(context.Context, *Conversation) (*Empty, error)
	UpdateConversationMember(context.Context, *ConversationMember) (*Empty, error)
	UnwatchConversation(context.Context, *Conversation) (*Empty, error)
	UnhiddenConversation(context.Context, *Conversation) (*Empty, error)
	UpdateEndchatSetting(context.Context, *EndchatSetting) (*EndchatSetting, error)
	GetEndchatSetting(context.Context, *Id) (*EndchatSetting, error)
	TerminateBot(context.Context, *BotTerminated) (*Event, error)
	SendMessage(context.Context, *Event) (*Event, error)
	SendOmniChannelMessage(context.Context, *SendOmniChannelMessageRequest) (*Event, error)
	UpdateMessage(context.Context, *Event) (*Event, error)
	PinMessage(context.Context, *Event) (*Empty, error)
	UnpinMessage(context.Context, *Event) (*Empty, error)
	ListEvents(context.Context, *ListConversationEventsRequest) (*Events, error)
	Deintegrate(context.Context, *Id) (*Empty, error)
	ListIntegrations(context.Context, *Id) (*Integrations, error)
	Integrate(context.Context, *Integration) (*Integration, error)
	GetIntegration(context.Context, *Id) (*Integration, error)
	UpdateIntegrationMember(context.Context, *ResourceGroupMember) (*ResourceGroupMember, error)
	RemoveIntegrationMember(context.Context, *ResourceGroupMember) (*Empty, error)
	UpdateRule(context.Context, *Rule) (*Rule, error)
	CreateRule(context.Context, *Rule) (*Rule, error)
	DeleteRule(context.Context, *Id) (*Empty, error)
	ReadRule(context.Context, *Id) (*Rule, error)
	ListRules(context.Context, *Id) (*Route, error)
	ListConversationAutomations(context.Context, *Id) (*ConversationAutomations, error)
	UpdateConversationAutomation(context.Context, *ConversationAutomation) (*ConversationAutomation, error)
	DeleteConversationAutomation(context.Context, *Id) (*Empty, error)
	ReadConversationAutomation(context.Context, *Id) (*ConversationAutomation, error)
	ListPhoneDevices(context.Context, *Id) (*PhoneDevices, error)
	CreatePhoneDevice(context.Context, *PhoneDevice) (*PhoneDevice, error)
	UpdatePhoneDevice(context.Context, *PhoneDevice) (*PhoneDevice, error)
	DeletePhoneDevice(context.Context, *Id) (*Empty, error)
	ReadPhoneDevice(context.Context, *Id) (*PhoneDevice, error)
	TestNumber(context.Context, *Id) (*Integration, error)
	ActiveNumber(context.Context, *Integration) (*Integration, error)
	ListCallSettings(context.Context, *Id) (*CallSettings, error)
	UpdateCallSetting(context.Context, *CallSetting) (*CallSetting, error)
	BlockNumber(context.Context, *BlockedNumber) (*BlockedNumber, error)
	ListBlockedNumbers(context.Context, *Id) (*BlockedNumbers, error)
	UnblockNumber(context.Context, *BlockedNumber) (*Empty, error)
	ListGreetingAudio(context.Context, *Id) (*GreetingAudios, error)
	CreateGreetingAudio(context.Context, *GreetingAudio) (*GreetingAudio, error)
	UpdateGreetingAudio(context.Context, *GreetingAudio) (*Response, error)
	// try to make an outbound call from subiz
	OriginateCall(context.Context, *StartRequest) (*Conversation, error)
	ListMyRecentCalls(context.Context, *Id) (*RecentCallRecords, error)
	// sync, called from fabikon
	SaveMessage(context.Context, *Event) (*Event, error)
	ApplyMessage(context.Context, *Event) (*Event, error)
}

// UnimplementedConversationMgrServer can be embedded to have forward compatible implementations.
type UnimplementedConversationMgrServer struct {
}

func (*UnimplementedConversationMgrServer) AssignRule(context.Context, *AssignRequest) (*RouteResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignRule not implemented")
}
func (*UnimplementedConversationMgrServer) PongMessage(context.Context, *Event) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PongMessage not implemented")
}
func (*UnimplementedConversationMgrServer) StartConversation(context.Context, *StartRequest) (*Conversation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartConversation not implemented")
}
func (*UnimplementedConversationMgrServer) EndConversation(context.Context, *Id) (*Conversation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndConversation not implemented")
}
func (*UnimplementedConversationMgrServer) GetConversation(context.Context, *Id) (*Conversation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversation not implemented")
}
func (*UnimplementedConversationMgrServer) ListConversations(context.Context, *ListConversationsRequest) (*Conversations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConversations not implemented")
}
func (*UnimplementedConversationMgrServer) ListConversations2(context.Context, *ListConversationsRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConversations2 not implemented")
}
func (*UnimplementedConversationMgrServer) MatchConversations(context.Context, *Ids) (*Conversations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatchConversations not implemented")
}
func (*UnimplementedConversationMgrServer) TagConversation(context.Context, *TagRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagConversation not implemented")
}
func (*UnimplementedConversationMgrServer) UntagConversation(context.Context, *TagRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UntagConversation not implemented")
}
func (*UnimplementedConversationMgrServer) JoinConversation(context.Context, *ConversationMember) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinConversation not implemented")
}
func (*UnimplementedConversationMgrServer) LeftConversation(context.Context, *ConversationMember) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeftConversation not implemented")
}
func (*UnimplementedConversationMgrServer) UpdateConversationInfo(context.Context, *Conversation) (*Conversation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConversationInfo not implemented")
}
func (*UnimplementedConversationMgrServer) UpdateMuteConversation(context.Context, *Conversation) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMuteConversation not implemented")
}
func (*UnimplementedConversationMgrServer) UpdateConversationMember(context.Context, *ConversationMember) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConversationMember not implemented")
}
func (*UnimplementedConversationMgrServer) UnwatchConversation(context.Context, *Conversation) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnwatchConversation not implemented")
}
func (*UnimplementedConversationMgrServer) UnhiddenConversation(context.Context, *Conversation) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnhiddenConversation not implemented")
}
func (*UnimplementedConversationMgrServer) UpdateEndchatSetting(context.Context, *EndchatSetting) (*EndchatSetting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEndchatSetting not implemented")
}
func (*UnimplementedConversationMgrServer) GetEndchatSetting(context.Context, *Id) (*EndchatSetting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEndchatSetting not implemented")
}
func (*UnimplementedConversationMgrServer) TerminateBot(context.Context, *BotTerminated) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateBot not implemented")
}
func (*UnimplementedConversationMgrServer) SendMessage(context.Context, *Event) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (*UnimplementedConversationMgrServer) SendOmniChannelMessage(context.Context, *SendOmniChannelMessageRequest) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOmniChannelMessage not implemented")
}
func (*UnimplementedConversationMgrServer) UpdateMessage(context.Context, *Event) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMessage not implemented")
}
func (*UnimplementedConversationMgrServer) PinMessage(context.Context, *Event) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PinMessage not implemented")
}
func (*UnimplementedConversationMgrServer) UnpinMessage(context.Context, *Event) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpinMessage not implemented")
}
func (*UnimplementedConversationMgrServer) ListEvents(context.Context, *ListConversationEventsRequest) (*Events, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEvents not implemented")
}
func (*UnimplementedConversationMgrServer) Deintegrate(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deintegrate not implemented")
}
func (*UnimplementedConversationMgrServer) ListIntegrations(context.Context, *Id) (*Integrations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIntegrations not implemented")
}
func (*UnimplementedConversationMgrServer) Integrate(context.Context, *Integration) (*Integration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Integrate not implemented")
}
func (*UnimplementedConversationMgrServer) GetIntegration(context.Context, *Id) (*Integration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntegration not implemented")
}
func (*UnimplementedConversationMgrServer) UpdateIntegrationMember(context.Context, *ResourceGroupMember) (*ResourceGroupMember, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIntegrationMember not implemented")
}
func (*UnimplementedConversationMgrServer) RemoveIntegrationMember(context.Context, *ResourceGroupMember) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIntegrationMember not implemented")
}
func (*UnimplementedConversationMgrServer) UpdateRule(context.Context, *Rule) (*Rule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRule not implemented")
}
func (*UnimplementedConversationMgrServer) CreateRule(context.Context, *Rule) (*Rule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRule not implemented")
}
func (*UnimplementedConversationMgrServer) DeleteRule(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRule not implemented")
}
func (*UnimplementedConversationMgrServer) ReadRule(context.Context, *Id) (*Rule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadRule not implemented")
}
func (*UnimplementedConversationMgrServer) ListRules(context.Context, *Id) (*Route, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRules not implemented")
}
func (*UnimplementedConversationMgrServer) ListConversationAutomations(context.Context, *Id) (*ConversationAutomations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConversationAutomations not implemented")
}
func (*UnimplementedConversationMgrServer) UpdateConversationAutomation(context.Context, *ConversationAutomation) (*ConversationAutomation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConversationAutomation not implemented")
}
func (*UnimplementedConversationMgrServer) DeleteConversationAutomation(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConversationAutomation not implemented")
}
func (*UnimplementedConversationMgrServer) ReadConversationAutomation(context.Context, *Id) (*ConversationAutomation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadConversationAutomation not implemented")
}
func (*UnimplementedConversationMgrServer) ListPhoneDevices(context.Context, *Id) (*PhoneDevices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPhoneDevices not implemented")
}
func (*UnimplementedConversationMgrServer) CreatePhoneDevice(context.Context, *PhoneDevice) (*PhoneDevice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePhoneDevice not implemented")
}
func (*UnimplementedConversationMgrServer) UpdatePhoneDevice(context.Context, *PhoneDevice) (*PhoneDevice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePhoneDevice not implemented")
}
func (*UnimplementedConversationMgrServer) DeletePhoneDevice(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePhoneDevice not implemented")
}
func (*UnimplementedConversationMgrServer) ReadPhoneDevice(context.Context, *Id) (*PhoneDevice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPhoneDevice not implemented")
}
func (*UnimplementedConversationMgrServer) TestNumber(context.Context, *Id) (*Integration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestNumber not implemented")
}
func (*UnimplementedConversationMgrServer) ActiveNumber(context.Context, *Integration) (*Integration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActiveNumber not implemented")
}
func (*UnimplementedConversationMgrServer) ListCallSettings(context.Context, *Id) (*CallSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCallSettings not implemented")
}
func (*UnimplementedConversationMgrServer) UpdateCallSetting(context.Context, *CallSetting) (*CallSetting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCallSetting not implemented")
}
func (*UnimplementedConversationMgrServer) BlockNumber(context.Context, *BlockedNumber) (*BlockedNumber, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockNumber not implemented")
}
func (*UnimplementedConversationMgrServer) ListBlockedNumbers(context.Context, *Id) (*BlockedNumbers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBlockedNumbers not implemented")
}
func (*UnimplementedConversationMgrServer) UnblockNumber(context.Context, *BlockedNumber) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnblockNumber not implemented")
}
func (*UnimplementedConversationMgrServer) ListGreetingAudio(context.Context, *Id) (*GreetingAudios, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGreetingAudio not implemented")
}
func (*UnimplementedConversationMgrServer) CreateGreetingAudio(context.Context, *GreetingAudio) (*GreetingAudio, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGreetingAudio not implemented")
}
func (*UnimplementedConversationMgrServer) UpdateGreetingAudio(context.Context, *GreetingAudio) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGreetingAudio not implemented")
}
func (*UnimplementedConversationMgrServer) OriginateCall(context.Context, *StartRequest) (*Conversation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OriginateCall not implemented")
}
func (*UnimplementedConversationMgrServer) ListMyRecentCalls(context.Context, *Id) (*RecentCallRecords, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMyRecentCalls not implemented")
}
func (*UnimplementedConversationMgrServer) SaveMessage(context.Context, *Event) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveMessage not implemented")
}
func (*UnimplementedConversationMgrServer) ApplyMessage(context.Context, *Event) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyMessage not implemented")
}

func RegisterConversationMgrServer(s *grpc.Server, srv ConversationMgrServer) {
	s.RegisterService(&_ConversationMgr_serviceDesc, srv)
}

func _ConversationMgr_AssignRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).AssignRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/AssignRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).AssignRule(ctx, req.(*AssignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_PongMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).PongMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/PongMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).PongMessage(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_StartConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).StartConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/StartConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).StartConversation(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_EndConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).EndConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/EndConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).EndConversation(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_GetConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).GetConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/GetConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).GetConversation(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_ListConversations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConversationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).ListConversations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/ListConversations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).ListConversations(ctx, req.(*ListConversationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_ListConversations2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConversationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).ListConversations2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/ListConversations2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).ListConversations2(ctx, req.(*ListConversationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_MatchConversations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).MatchConversations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/MatchConversations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).MatchConversations(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_TagConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).TagConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/TagConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).TagConversation(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_UntagConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).UntagConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/UntagConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).UntagConversation(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_JoinConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversationMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).JoinConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/JoinConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).JoinConversation(ctx, req.(*ConversationMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_LeftConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversationMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).LeftConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/LeftConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).LeftConversation(ctx, req.(*ConversationMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_UpdateConversationInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Conversation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).UpdateConversationInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/UpdateConversationInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).UpdateConversationInfo(ctx, req.(*Conversation))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_UpdateMuteConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Conversation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).UpdateMuteConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/UpdateMuteConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).UpdateMuteConversation(ctx, req.(*Conversation))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_UpdateConversationMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversationMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).UpdateConversationMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/UpdateConversationMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).UpdateConversationMember(ctx, req.(*ConversationMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_UnwatchConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Conversation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).UnwatchConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/UnwatchConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).UnwatchConversation(ctx, req.(*Conversation))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_UnhiddenConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Conversation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).UnhiddenConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/UnhiddenConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).UnhiddenConversation(ctx, req.(*Conversation))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_UpdateEndchatSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndchatSetting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).UpdateEndchatSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/UpdateEndchatSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).UpdateEndchatSetting(ctx, req.(*EndchatSetting))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_GetEndchatSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).GetEndchatSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/GetEndchatSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).GetEndchatSetting(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_TerminateBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotTerminated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).TerminateBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/TerminateBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).TerminateBot(ctx, req.(*BotTerminated))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).SendMessage(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_SendOmniChannelMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendOmniChannelMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).SendOmniChannelMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/SendOmniChannelMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).SendOmniChannelMessage(ctx, req.(*SendOmniChannelMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_UpdateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).UpdateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/UpdateMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).UpdateMessage(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_PinMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).PinMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/PinMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).PinMessage(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_UnpinMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).UnpinMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/UnpinMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).UnpinMessage(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_ListEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConversationEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).ListEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/ListEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).ListEvents(ctx, req.(*ListConversationEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_Deintegrate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).Deintegrate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/Deintegrate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).Deintegrate(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_ListIntegrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).ListIntegrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/ListIntegrations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).ListIntegrations(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_Integrate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Integration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).Integrate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/Integrate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).Integrate(ctx, req.(*Integration))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_GetIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).GetIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/GetIntegration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).GetIntegration(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_UpdateIntegrationMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceGroupMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).UpdateIntegrationMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/UpdateIntegrationMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).UpdateIntegrationMember(ctx, req.(*ResourceGroupMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_RemoveIntegrationMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceGroupMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).RemoveIntegrationMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/RemoveIntegrationMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).RemoveIntegrationMember(ctx, req.(*ResourceGroupMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_UpdateRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Rule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).UpdateRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/UpdateRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).UpdateRule(ctx, req.(*Rule))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_CreateRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Rule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).CreateRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/CreateRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).CreateRule(ctx, req.(*Rule))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_DeleteRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).DeleteRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/DeleteRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).DeleteRule(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_ReadRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).ReadRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/ReadRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).ReadRule(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_ListRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).ListRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/ListRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).ListRules(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_ListConversationAutomations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).ListConversationAutomations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/ListConversationAutomations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).ListConversationAutomations(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_UpdateConversationAutomation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversationAutomation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).UpdateConversationAutomation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/UpdateConversationAutomation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).UpdateConversationAutomation(ctx, req.(*ConversationAutomation))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_DeleteConversationAutomation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).DeleteConversationAutomation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/DeleteConversationAutomation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).DeleteConversationAutomation(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_ReadConversationAutomation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).ReadConversationAutomation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/ReadConversationAutomation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).ReadConversationAutomation(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_ListPhoneDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).ListPhoneDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/ListPhoneDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).ListPhoneDevices(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_CreatePhoneDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhoneDevice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).CreatePhoneDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/CreatePhoneDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).CreatePhoneDevice(ctx, req.(*PhoneDevice))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_UpdatePhoneDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhoneDevice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).UpdatePhoneDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/UpdatePhoneDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).UpdatePhoneDevice(ctx, req.(*PhoneDevice))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_DeletePhoneDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).DeletePhoneDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/DeletePhoneDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).DeletePhoneDevice(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_ReadPhoneDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).ReadPhoneDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/ReadPhoneDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).ReadPhoneDevice(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_TestNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).TestNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/TestNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).TestNumber(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_ActiveNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Integration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).ActiveNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/ActiveNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).ActiveNumber(ctx, req.(*Integration))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_ListCallSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).ListCallSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/ListCallSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).ListCallSettings(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_UpdateCallSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallSetting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).UpdateCallSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/UpdateCallSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).UpdateCallSetting(ctx, req.(*CallSetting))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_BlockNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockedNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).BlockNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/BlockNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).BlockNumber(ctx, req.(*BlockedNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_ListBlockedNumbers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).ListBlockedNumbers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/ListBlockedNumbers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).ListBlockedNumbers(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_UnblockNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockedNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).UnblockNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/UnblockNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).UnblockNumber(ctx, req.(*BlockedNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_ListGreetingAudio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).ListGreetingAudio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/ListGreetingAudio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).ListGreetingAudio(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_CreateGreetingAudio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreetingAudio)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).CreateGreetingAudio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/CreateGreetingAudio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).CreateGreetingAudio(ctx, req.(*GreetingAudio))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_UpdateGreetingAudio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreetingAudio)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).UpdateGreetingAudio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/UpdateGreetingAudio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).UpdateGreetingAudio(ctx, req.(*GreetingAudio))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_OriginateCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).OriginateCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/OriginateCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).OriginateCall(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_ListMyRecentCalls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).ListMyRecentCalls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/ListMyRecentCalls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).ListMyRecentCalls(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_SaveMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).SaveMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/SaveMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).SaveMessage(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_ApplyMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).ApplyMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/ApplyMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).ApplyMessage(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConversationMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.ConversationMgr",
	HandlerType: (*ConversationMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssignRule",
			Handler:    _ConversationMgr_AssignRule_Handler,
		},
		{
			MethodName: "PongMessage",
			Handler:    _ConversationMgr_PongMessage_Handler,
		},
		{
			MethodName: "StartConversation",
			Handler:    _ConversationMgr_StartConversation_Handler,
		},
		{
			MethodName: "EndConversation",
			Handler:    _ConversationMgr_EndConversation_Handler,
		},
		{
			MethodName: "GetConversation",
			Handler:    _ConversationMgr_GetConversation_Handler,
		},
		{
			MethodName: "ListConversations",
			Handler:    _ConversationMgr_ListConversations_Handler,
		},
		{
			MethodName: "ListConversations2",
			Handler:    _ConversationMgr_ListConversations2_Handler,
		},
		{
			MethodName: "MatchConversations",
			Handler:    _ConversationMgr_MatchConversations_Handler,
		},
		{
			MethodName: "TagConversation",
			Handler:    _ConversationMgr_TagConversation_Handler,
		},
		{
			MethodName: "UntagConversation",
			Handler:    _ConversationMgr_UntagConversation_Handler,
		},
		{
			MethodName: "JoinConversation",
			Handler:    _ConversationMgr_JoinConversation_Handler,
		},
		{
			MethodName: "LeftConversation",
			Handler:    _ConversationMgr_LeftConversation_Handler,
		},
		{
			MethodName: "UpdateConversationInfo",
			Handler:    _ConversationMgr_UpdateConversationInfo_Handler,
		},
		{
			MethodName: "UpdateMuteConversation",
			Handler:    _ConversationMgr_UpdateMuteConversation_Handler,
		},
		{
			MethodName: "UpdateConversationMember",
			Handler:    _ConversationMgr_UpdateConversationMember_Handler,
		},
		{
			MethodName: "UnwatchConversation",
			Handler:    _ConversationMgr_UnwatchConversation_Handler,
		},
		{
			MethodName: "UnhiddenConversation",
			Handler:    _ConversationMgr_UnhiddenConversation_Handler,
		},
		{
			MethodName: "UpdateEndchatSetting",
			Handler:    _ConversationMgr_UpdateEndchatSetting_Handler,
		},
		{
			MethodName: "GetEndchatSetting",
			Handler:    _ConversationMgr_GetEndchatSetting_Handler,
		},
		{
			MethodName: "TerminateBot",
			Handler:    _ConversationMgr_TerminateBot_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _ConversationMgr_SendMessage_Handler,
		},
		{
			MethodName: "SendOmniChannelMessage",
			Handler:    _ConversationMgr_SendOmniChannelMessage_Handler,
		},
		{
			MethodName: "UpdateMessage",
			Handler:    _ConversationMgr_UpdateMessage_Handler,
		},
		{
			MethodName: "PinMessage",
			Handler:    _ConversationMgr_PinMessage_Handler,
		},
		{
			MethodName: "UnpinMessage",
			Handler:    _ConversationMgr_UnpinMessage_Handler,
		},
		{
			MethodName: "ListEvents",
			Handler:    _ConversationMgr_ListEvents_Handler,
		},
		{
			MethodName: "Deintegrate",
			Handler:    _ConversationMgr_Deintegrate_Handler,
		},
		{
			MethodName: "ListIntegrations",
			Handler:    _ConversationMgr_ListIntegrations_Handler,
		},
		{
			MethodName: "Integrate",
			Handler:    _ConversationMgr_Integrate_Handler,
		},
		{
			MethodName: "GetIntegration",
			Handler:    _ConversationMgr_GetIntegration_Handler,
		},
		{
			MethodName: "UpdateIntegrationMember",
			Handler:    _ConversationMgr_UpdateIntegrationMember_Handler,
		},
		{
			MethodName: "RemoveIntegrationMember",
			Handler:    _ConversationMgr_RemoveIntegrationMember_Handler,
		},
		{
			MethodName: "UpdateRule",
			Handler:    _ConversationMgr_UpdateRule_Handler,
		},
		{
			MethodName: "CreateRule",
			Handler:    _ConversationMgr_CreateRule_Handler,
		},
		{
			MethodName: "DeleteRule",
			Handler:    _ConversationMgr_DeleteRule_Handler,
		},
		{
			MethodName: "ReadRule",
			Handler:    _ConversationMgr_ReadRule_Handler,
		},
		{
			MethodName: "ListRules",
			Handler:    _ConversationMgr_ListRules_Handler,
		},
		{
			MethodName: "ListConversationAutomations",
			Handler:    _ConversationMgr_ListConversationAutomations_Handler,
		},
		{
			MethodName: "UpdateConversationAutomation",
			Handler:    _ConversationMgr_UpdateConversationAutomation_Handler,
		},
		{
			MethodName: "DeleteConversationAutomation",
			Handler:    _ConversationMgr_DeleteConversationAutomation_Handler,
		},
		{
			MethodName: "ReadConversationAutomation",
			Handler:    _ConversationMgr_ReadConversationAutomation_Handler,
		},
		{
			MethodName: "ListPhoneDevices",
			Handler:    _ConversationMgr_ListPhoneDevices_Handler,
		},
		{
			MethodName: "CreatePhoneDevice",
			Handler:    _ConversationMgr_CreatePhoneDevice_Handler,
		},
		{
			MethodName: "UpdatePhoneDevice",
			Handler:    _ConversationMgr_UpdatePhoneDevice_Handler,
		},
		{
			MethodName: "DeletePhoneDevice",
			Handler:    _ConversationMgr_DeletePhoneDevice_Handler,
		},
		{
			MethodName: "ReadPhoneDevice",
			Handler:    _ConversationMgr_ReadPhoneDevice_Handler,
		},
		{
			MethodName: "TestNumber",
			Handler:    _ConversationMgr_TestNumber_Handler,
		},
		{
			MethodName: "ActiveNumber",
			Handler:    _ConversationMgr_ActiveNumber_Handler,
		},
		{
			MethodName: "ListCallSettings",
			Handler:    _ConversationMgr_ListCallSettings_Handler,
		},
		{
			MethodName: "UpdateCallSetting",
			Handler:    _ConversationMgr_UpdateCallSetting_Handler,
		},
		{
			MethodName: "BlockNumber",
			Handler:    _ConversationMgr_BlockNumber_Handler,
		},
		{
			MethodName: "ListBlockedNumbers",
			Handler:    _ConversationMgr_ListBlockedNumbers_Handler,
		},
		{
			MethodName: "UnblockNumber",
			Handler:    _ConversationMgr_UnblockNumber_Handler,
		},
		{
			MethodName: "ListGreetingAudio",
			Handler:    _ConversationMgr_ListGreetingAudio_Handler,
		},
		{
			MethodName: "CreateGreetingAudio",
			Handler:    _ConversationMgr_CreateGreetingAudio_Handler,
		},
		{
			MethodName: "UpdateGreetingAudio",
			Handler:    _ConversationMgr_UpdateGreetingAudio_Handler,
		},
		{
			MethodName: "OriginateCall",
			Handler:    _ConversationMgr_OriginateCall_Handler,
		},
		{
			MethodName: "ListMyRecentCalls",
			Handler:    _ConversationMgr_ListMyRecentCalls_Handler,
		},
		{
			MethodName: "SaveMessage",
			Handler:    _ConversationMgr_SaveMessage_Handler,
		},
		{
			MethodName: "ApplyMessage",
			Handler:    _ConversationMgr_ApplyMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// TicketMgrClient is the client API for TicketMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TicketMgrClient interface {
	// ticket type
	CreateTicketType(ctx context.Context, in *TicketType, opts ...grpc.CallOption) (*TicketType, error)
	UpdateTicketType(ctx context.Context, in *TicketType, opts ...grpc.CallOption) (*TicketType, error)
	ListTicketTypes(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error)
	GetTicketType(ctx context.Context, in *Id, opts ...grpc.CallOption) (*TicketType, error)
	DeleteTicketType(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	CreateTicket(ctx context.Context, in *Ticket, opts ...grpc.CallOption) (*Ticket, error)
	UpdateTicket(ctx context.Context, in *Ticket, opts ...grpc.CallOption) (*Ticket, error)
	DeleteTicket(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	RecoverTicket(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	GetTicket(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Ticket, error)
	ListTickets(ctx context.Context, in *ListTicketRequest, opts ...grpc.CallOption) (*Response, error)
	MatchTickets(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Response, error)
	CreateTicketView(ctx context.Context, in *TicketView, opts ...grpc.CallOption) (*TicketView, error)
	UpdateTicketView(ctx context.Context, in *TicketView, opts ...grpc.CallOption) (*TicketView, error)
	DeleteTicketView(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	GetTicketView(ctx context.Context, in *Id, opts ...grpc.CallOption) (*TicketView, error)
	ListTicketViews(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error)
	CreateTicketTemplate(ctx context.Context, in *TicketTemplate, opts ...grpc.CallOption) (*TicketTemplate, error)
	UpdateTicketTemplate(ctx context.Context, in *TicketTemplate, opts ...grpc.CallOption) (*TicketTemplate, error)
	DeleteTicketTemplate(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	GetTicketTemplate(ctx context.Context, in *Id, opts ...grpc.CallOption) (*TicketTemplate, error)
	ListTicketTemplates(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error)
	PongTicketEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error)
	TagTicket(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*Empty, error)
	UntagTicket(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*Empty, error)
	JoinTicket(ctx context.Context, in *ConversationMember, opts ...grpc.CallOption) (*Empty, error)
	LeftTicket(ctx context.Context, in *ConversationMember, opts ...grpc.CallOption) (*Empty, error)
	ReadTickets(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error)
	UnreadTickets(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error)
	SubscribedTickets(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error)
	UnSubscribedTickets(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error)
	SendTicketEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error)
	ListTicketEvents(ctx context.Context, in *ListConversationEventsRequest, opts ...grpc.CallOption) (*Events, error)
	UpdateTicketTypeMember(ctx context.Context, in *ResourceGroupMember, opts ...grpc.CallOption) (*ResourceGroupMember, error)
	RemoveTicketTypeMember(ctx context.Context, in *ResourceGroupMember, opts ...grpc.CallOption) (*Empty, error)
	CreateSLAPolicy(ctx context.Context, in *SLAPolicy, opts ...grpc.CallOption) (*SLAPolicy, error)
	UpdateSLAPolicy(ctx context.Context, in *SLAPolicy, opts ...grpc.CallOption) (*SLAPolicy, error)
	DeleteSLAPolicy(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	ListSLAPolicies(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error)
	GetSLAPolicy(ctx context.Context, in *Id, opts ...grpc.CallOption) (*SLAPolicy, error)
	ListTicketSLAViolations(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error)
	RateTicket(ctx context.Context, in *Rating, opts ...grpc.CallOption) (*Response, error)
	GetTicketRating(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Rating, error)
	UpdateTicketRule(ctx context.Context, in *Rule, opts ...grpc.CallOption) (*Response, error)
	CreateTicketRule(ctx context.Context, in *Rule, opts ...grpc.CallOption) (*Response, error)
	DeleteTicketRule(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	ReadTicketRule(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error)
	ListTicketRules(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error)
	Report(ctx context.Context, in *ConvoReportRequest, opts ...grpc.CallOption) (*ConvoReportResponse, error)
	// internal only
	GetTicketIdsByConvoId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Ids, error)
}

type ticketMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewTicketMgrClient(cc grpc.ClientConnInterface) TicketMgrClient {
	return &ticketMgrClient{cc}
}

func (c *ticketMgrClient) CreateTicketType(ctx context.Context, in *TicketType, opts ...grpc.CallOption) (*TicketType, error) {
	out := new(TicketType)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/CreateTicketType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) UpdateTicketType(ctx context.Context, in *TicketType, opts ...grpc.CallOption) (*TicketType, error) {
	out := new(TicketType)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/UpdateTicketType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) ListTicketTypes(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/ListTicketTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) GetTicketType(ctx context.Context, in *Id, opts ...grpc.CallOption) (*TicketType, error) {
	out := new(TicketType)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/GetTicketType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) DeleteTicketType(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/DeleteTicketType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) CreateTicket(ctx context.Context, in *Ticket, opts ...grpc.CallOption) (*Ticket, error) {
	out := new(Ticket)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/CreateTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) UpdateTicket(ctx context.Context, in *Ticket, opts ...grpc.CallOption) (*Ticket, error) {
	out := new(Ticket)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/UpdateTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) DeleteTicket(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/DeleteTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) RecoverTicket(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/RecoverTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) GetTicket(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Ticket, error) {
	out := new(Ticket)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/GetTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) ListTickets(ctx context.Context, in *ListTicketRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/ListTickets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) MatchTickets(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/MatchTickets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) CreateTicketView(ctx context.Context, in *TicketView, opts ...grpc.CallOption) (*TicketView, error) {
	out := new(TicketView)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/CreateTicketView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) UpdateTicketView(ctx context.Context, in *TicketView, opts ...grpc.CallOption) (*TicketView, error) {
	out := new(TicketView)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/UpdateTicketView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) DeleteTicketView(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/DeleteTicketView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) GetTicketView(ctx context.Context, in *Id, opts ...grpc.CallOption) (*TicketView, error) {
	out := new(TicketView)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/GetTicketView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) ListTicketViews(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/ListTicketViews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) CreateTicketTemplate(ctx context.Context, in *TicketTemplate, opts ...grpc.CallOption) (*TicketTemplate, error) {
	out := new(TicketTemplate)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/CreateTicketTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) UpdateTicketTemplate(ctx context.Context, in *TicketTemplate, opts ...grpc.CallOption) (*TicketTemplate, error) {
	out := new(TicketTemplate)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/UpdateTicketTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) DeleteTicketTemplate(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/DeleteTicketTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) GetTicketTemplate(ctx context.Context, in *Id, opts ...grpc.CallOption) (*TicketTemplate, error) {
	out := new(TicketTemplate)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/GetTicketTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) ListTicketTemplates(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/ListTicketTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) PongTicketEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/PongTicketEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) TagTicket(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/TagTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) UntagTicket(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/UntagTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) JoinTicket(ctx context.Context, in *ConversationMember, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/JoinTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) LeftTicket(ctx context.Context, in *ConversationMember, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/LeftTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) ReadTickets(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/ReadTickets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) UnreadTickets(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/UnreadTickets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) SubscribedTickets(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/SubscribedTickets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) UnSubscribedTickets(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/UnSubscribedTickets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) SendTicketEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/SendTicketEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) ListTicketEvents(ctx context.Context, in *ListConversationEventsRequest, opts ...grpc.CallOption) (*Events, error) {
	out := new(Events)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/ListTicketEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) UpdateTicketTypeMember(ctx context.Context, in *ResourceGroupMember, opts ...grpc.CallOption) (*ResourceGroupMember, error) {
	out := new(ResourceGroupMember)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/UpdateTicketTypeMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) RemoveTicketTypeMember(ctx context.Context, in *ResourceGroupMember, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/RemoveTicketTypeMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) CreateSLAPolicy(ctx context.Context, in *SLAPolicy, opts ...grpc.CallOption) (*SLAPolicy, error) {
	out := new(SLAPolicy)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/CreateSLAPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) UpdateSLAPolicy(ctx context.Context, in *SLAPolicy, opts ...grpc.CallOption) (*SLAPolicy, error) {
	out := new(SLAPolicy)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/UpdateSLAPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) DeleteSLAPolicy(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/DeleteSLAPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) ListSLAPolicies(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/ListSLAPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) GetSLAPolicy(ctx context.Context, in *Id, opts ...grpc.CallOption) (*SLAPolicy, error) {
	out := new(SLAPolicy)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/GetSLAPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) ListTicketSLAViolations(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/ListTicketSLAViolations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) RateTicket(ctx context.Context, in *Rating, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/RateTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) GetTicketRating(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Rating, error) {
	out := new(Rating)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/GetTicketRating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) UpdateTicketRule(ctx context.Context, in *Rule, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/UpdateTicketRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) CreateTicketRule(ctx context.Context, in *Rule, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/CreateTicketRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) DeleteTicketRule(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/DeleteTicketRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) ReadTicketRule(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/ReadTicketRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) ListTicketRules(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/ListTicketRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) Report(ctx context.Context, in *ConvoReportRequest, opts ...grpc.CallOption) (*ConvoReportResponse, error) {
	out := new(ConvoReportResponse)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/Report", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMgrClient) GetTicketIdsByConvoId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Ids, error) {
	out := new(Ids)
	err := c.cc.Invoke(ctx, "/header.TicketMgr/GetTicketIdsByConvoId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TicketMgrServer is the server API for TicketMgr service.
type TicketMgrServer interface {
	// ticket type
	CreateTicketType(context.Context, *TicketType) (*TicketType, error)
	UpdateTicketType(context.Context, *TicketType) (*TicketType, error)
	ListTicketTypes(context.Context, *Id) (*Response, error)
	GetTicketType(context.Context, *Id) (*TicketType, error)
	DeleteTicketType(context.Context, *Id) (*Empty, error)
	CreateTicket(context.Context, *Ticket) (*Ticket, error)
	UpdateTicket(context.Context, *Ticket) (*Ticket, error)
	DeleteTicket(context.Context, *Id) (*Empty, error)
	RecoverTicket(context.Context, *Id) (*Empty, error)
	GetTicket(context.Context, *Id) (*Ticket, error)
	ListTickets(context.Context, *ListTicketRequest) (*Response, error)
	MatchTickets(context.Context, *Ids) (*Response, error)
	CreateTicketView(context.Context, *TicketView) (*TicketView, error)
	UpdateTicketView(context.Context, *TicketView) (*TicketView, error)
	DeleteTicketView(context.Context, *Id) (*Empty, error)
	GetTicketView(context.Context, *Id) (*TicketView, error)
	ListTicketViews(context.Context, *Empty) (*Response, error)
	CreateTicketTemplate(context.Context, *TicketTemplate) (*TicketTemplate, error)
	UpdateTicketTemplate(context.Context, *TicketTemplate) (*TicketTemplate, error)
	DeleteTicketTemplate(context.Context, *Id) (*Empty, error)
	GetTicketTemplate(context.Context, *Id) (*TicketTemplate, error)
	ListTicketTemplates(context.Context, *Empty) (*Response, error)
	PongTicketEvent(context.Context, *Event) (*Event, error)
	TagTicket(context.Context, *TagRequest) (*Empty, error)
	UntagTicket(context.Context, *TagRequest) (*Empty, error)
	JoinTicket(context.Context, *ConversationMember) (*Empty, error)
	LeftTicket(context.Context, *ConversationMember) (*Empty, error)
	ReadTickets(context.Context, *Ids) (*Empty, error)
	UnreadTickets(context.Context, *Ids) (*Empty, error)
	SubscribedTickets(context.Context, *Ids) (*Empty, error)
	UnSubscribedTickets(context.Context, *Ids) (*Empty, error)
	SendTicketEvent(context.Context, *Event) (*Event, error)
	ListTicketEvents(context.Context, *ListConversationEventsRequest) (*Events, error)
	UpdateTicketTypeMember(context.Context, *ResourceGroupMember) (*ResourceGroupMember, error)
	RemoveTicketTypeMember(context.Context, *ResourceGroupMember) (*Empty, error)
	CreateSLAPolicy(context.Context, *SLAPolicy) (*SLAPolicy, error)
	UpdateSLAPolicy(context.Context, *SLAPolicy) (*SLAPolicy, error)
	DeleteSLAPolicy(context.Context, *Id) (*Empty, error)
	ListSLAPolicies(context.Context, *Empty) (*Response, error)
	GetSLAPolicy(context.Context, *Id) (*SLAPolicy, error)
	ListTicketSLAViolations(context.Context, *Id) (*Response, error)
	RateTicket(context.Context, *Rating) (*Response, error)
	GetTicketRating(context.Context, *Id) (*Rating, error)
	UpdateTicketRule(context.Context, *Rule) (*Response, error)
	CreateTicketRule(context.Context, *Rule) (*Response, error)
	DeleteTicketRule(context.Context, *Id) (*Empty, error)
	ReadTicketRule(context.Context, *Id) (*Response, error)
	ListTicketRules(context.Context, *Id) (*Response, error)
	Report(context.Context, *ConvoReportRequest) (*ConvoReportResponse, error)
	// internal only
	GetTicketIdsByConvoId(context.Context, *Id) (*Ids, error)
}

// UnimplementedTicketMgrServer can be embedded to have forward compatible implementations.
type UnimplementedTicketMgrServer struct {
}

func (*UnimplementedTicketMgrServer) CreateTicketType(context.Context, *TicketType) (*TicketType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTicketType not implemented")
}
func (*UnimplementedTicketMgrServer) UpdateTicketType(context.Context, *TicketType) (*TicketType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTicketType not implemented")
}
func (*UnimplementedTicketMgrServer) ListTicketTypes(context.Context, *Id) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTicketTypes not implemented")
}
func (*UnimplementedTicketMgrServer) GetTicketType(context.Context, *Id) (*TicketType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicketType not implemented")
}
func (*UnimplementedTicketMgrServer) DeleteTicketType(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTicketType not implemented")
}
func (*UnimplementedTicketMgrServer) CreateTicket(context.Context, *Ticket) (*Ticket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTicket not implemented")
}
func (*UnimplementedTicketMgrServer) UpdateTicket(context.Context, *Ticket) (*Ticket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTicket not implemented")
}
func (*UnimplementedTicketMgrServer) DeleteTicket(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTicket not implemented")
}
func (*UnimplementedTicketMgrServer) RecoverTicket(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverTicket not implemented")
}
func (*UnimplementedTicketMgrServer) GetTicket(context.Context, *Id) (*Ticket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicket not implemented")
}
func (*UnimplementedTicketMgrServer) ListTickets(context.Context, *ListTicketRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTickets not implemented")
}
func (*UnimplementedTicketMgrServer) MatchTickets(context.Context, *Ids) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatchTickets not implemented")
}
func (*UnimplementedTicketMgrServer) CreateTicketView(context.Context, *TicketView) (*TicketView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTicketView not implemented")
}
func (*UnimplementedTicketMgrServer) UpdateTicketView(context.Context, *TicketView) (*TicketView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTicketView not implemented")
}
func (*UnimplementedTicketMgrServer) DeleteTicketView(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTicketView not implemented")
}
func (*UnimplementedTicketMgrServer) GetTicketView(context.Context, *Id) (*TicketView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicketView not implemented")
}
func (*UnimplementedTicketMgrServer) ListTicketViews(context.Context, *Empty) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTicketViews not implemented")
}
func (*UnimplementedTicketMgrServer) CreateTicketTemplate(context.Context, *TicketTemplate) (*TicketTemplate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTicketTemplate not implemented")
}
func (*UnimplementedTicketMgrServer) UpdateTicketTemplate(context.Context, *TicketTemplate) (*TicketTemplate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTicketTemplate not implemented")
}
func (*UnimplementedTicketMgrServer) DeleteTicketTemplate(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTicketTemplate not implemented")
}
func (*UnimplementedTicketMgrServer) GetTicketTemplate(context.Context, *Id) (*TicketTemplate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicketTemplate not implemented")
}
func (*UnimplementedTicketMgrServer) ListTicketTemplates(context.Context, *Empty) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTicketTemplates not implemented")
}
func (*UnimplementedTicketMgrServer) PongTicketEvent(context.Context, *Event) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PongTicketEvent not implemented")
}
func (*UnimplementedTicketMgrServer) TagTicket(context.Context, *TagRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagTicket not implemented")
}
func (*UnimplementedTicketMgrServer) UntagTicket(context.Context, *TagRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UntagTicket not implemented")
}
func (*UnimplementedTicketMgrServer) JoinTicket(context.Context, *ConversationMember) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinTicket not implemented")
}
func (*UnimplementedTicketMgrServer) LeftTicket(context.Context, *ConversationMember) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeftTicket not implemented")
}
func (*UnimplementedTicketMgrServer) ReadTickets(context.Context, *Ids) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadTickets not implemented")
}
func (*UnimplementedTicketMgrServer) UnreadTickets(context.Context, *Ids) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnreadTickets not implemented")
}
func (*UnimplementedTicketMgrServer) SubscribedTickets(context.Context, *Ids) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribedTickets not implemented")
}
func (*UnimplementedTicketMgrServer) UnSubscribedTickets(context.Context, *Ids) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnSubscribedTickets not implemented")
}
func (*UnimplementedTicketMgrServer) SendTicketEvent(context.Context, *Event) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTicketEvent not implemented")
}
func (*UnimplementedTicketMgrServer) ListTicketEvents(context.Context, *ListConversationEventsRequest) (*Events, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTicketEvents not implemented")
}
func (*UnimplementedTicketMgrServer) UpdateTicketTypeMember(context.Context, *ResourceGroupMember) (*ResourceGroupMember, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTicketTypeMember not implemented")
}
func (*UnimplementedTicketMgrServer) RemoveTicketTypeMember(context.Context, *ResourceGroupMember) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTicketTypeMember not implemented")
}
func (*UnimplementedTicketMgrServer) CreateSLAPolicy(context.Context, *SLAPolicy) (*SLAPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSLAPolicy not implemented")
}
func (*UnimplementedTicketMgrServer) UpdateSLAPolicy(context.Context, *SLAPolicy) (*SLAPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSLAPolicy not implemented")
}
func (*UnimplementedTicketMgrServer) DeleteSLAPolicy(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSLAPolicy not implemented")
}
func (*UnimplementedTicketMgrServer) ListSLAPolicies(context.Context, *Empty) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSLAPolicies not implemented")
}
func (*UnimplementedTicketMgrServer) GetSLAPolicy(context.Context, *Id) (*SLAPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSLAPolicy not implemented")
}
func (*UnimplementedTicketMgrServer) ListTicketSLAViolations(context.Context, *Id) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTicketSLAViolations not implemented")
}
func (*UnimplementedTicketMgrServer) RateTicket(context.Context, *Rating) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RateTicket not implemented")
}
func (*UnimplementedTicketMgrServer) GetTicketRating(context.Context, *Id) (*Rating, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicketRating not implemented")
}
func (*UnimplementedTicketMgrServer) UpdateTicketRule(context.Context, *Rule) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTicketRule not implemented")
}
func (*UnimplementedTicketMgrServer) CreateTicketRule(context.Context, *Rule) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTicketRule not implemented")
}
func (*UnimplementedTicketMgrServer) DeleteTicketRule(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTicketRule not implemented")
}
func (*UnimplementedTicketMgrServer) ReadTicketRule(context.Context, *Id) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadTicketRule not implemented")
}
func (*UnimplementedTicketMgrServer) ListTicketRules(context.Context, *Id) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTicketRules not implemented")
}
func (*UnimplementedTicketMgrServer) Report(context.Context, *ConvoReportRequest) (*ConvoReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Report not implemented")
}
func (*UnimplementedTicketMgrServer) GetTicketIdsByConvoId(context.Context, *Id) (*Ids, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicketIdsByConvoId not implemented")
}

func RegisterTicketMgrServer(s *grpc.Server, srv TicketMgrServer) {
	s.RegisterService(&_TicketMgr_serviceDesc, srv)
}

func _TicketMgr_CreateTicketType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).CreateTicketType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/CreateTicketType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).CreateTicketType(ctx, req.(*TicketType))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_UpdateTicketType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).UpdateTicketType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/UpdateTicketType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).UpdateTicketType(ctx, req.(*TicketType))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_ListTicketTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).ListTicketTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/ListTicketTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).ListTicketTypes(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_GetTicketType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).GetTicketType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/GetTicketType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).GetTicketType(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_DeleteTicketType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).DeleteTicketType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/DeleteTicketType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).DeleteTicketType(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_CreateTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ticket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).CreateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/CreateTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).CreateTicket(ctx, req.(*Ticket))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_UpdateTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ticket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).UpdateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/UpdateTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).UpdateTicket(ctx, req.(*Ticket))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_DeleteTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).DeleteTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/DeleteTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).DeleteTicket(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_RecoverTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).RecoverTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/RecoverTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).RecoverTicket(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_GetTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).GetTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/GetTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).GetTicket(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_ListTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).ListTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/ListTickets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).ListTickets(ctx, req.(*ListTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_MatchTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).MatchTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/MatchTickets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).MatchTickets(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_CreateTicketView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketView)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).CreateTicketView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/CreateTicketView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).CreateTicketView(ctx, req.(*TicketView))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_UpdateTicketView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketView)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).UpdateTicketView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/UpdateTicketView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).UpdateTicketView(ctx, req.(*TicketView))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_DeleteTicketView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).DeleteTicketView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/DeleteTicketView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).DeleteTicketView(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_GetTicketView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).GetTicketView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/GetTicketView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).GetTicketView(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_ListTicketViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).ListTicketViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/ListTicketViews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).ListTicketViews(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_CreateTicketTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketTemplate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).CreateTicketTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/CreateTicketTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).CreateTicketTemplate(ctx, req.(*TicketTemplate))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_UpdateTicketTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketTemplate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).UpdateTicketTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/UpdateTicketTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).UpdateTicketTemplate(ctx, req.(*TicketTemplate))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_DeleteTicketTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).DeleteTicketTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/DeleteTicketTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).DeleteTicketTemplate(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_GetTicketTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).GetTicketTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/GetTicketTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).GetTicketTemplate(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_ListTicketTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).ListTicketTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/ListTicketTemplates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).ListTicketTemplates(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_PongTicketEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).PongTicketEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/PongTicketEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).PongTicketEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_TagTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).TagTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/TagTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).TagTicket(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_UntagTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).UntagTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/UntagTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).UntagTicket(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_JoinTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversationMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).JoinTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/JoinTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).JoinTicket(ctx, req.(*ConversationMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_LeftTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversationMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).LeftTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/LeftTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).LeftTicket(ctx, req.(*ConversationMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_ReadTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).ReadTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/ReadTickets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).ReadTickets(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_UnreadTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).UnreadTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/UnreadTickets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).UnreadTickets(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_SubscribedTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).SubscribedTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/SubscribedTickets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).SubscribedTickets(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_UnSubscribedTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).UnSubscribedTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/UnSubscribedTickets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).UnSubscribedTickets(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_SendTicketEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).SendTicketEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/SendTicketEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).SendTicketEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_ListTicketEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConversationEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).ListTicketEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/ListTicketEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).ListTicketEvents(ctx, req.(*ListConversationEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_UpdateTicketTypeMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceGroupMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).UpdateTicketTypeMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/UpdateTicketTypeMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).UpdateTicketTypeMember(ctx, req.(*ResourceGroupMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_RemoveTicketTypeMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceGroupMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).RemoveTicketTypeMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/RemoveTicketTypeMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).RemoveTicketTypeMember(ctx, req.(*ResourceGroupMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_CreateSLAPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SLAPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).CreateSLAPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/CreateSLAPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).CreateSLAPolicy(ctx, req.(*SLAPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_UpdateSLAPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SLAPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).UpdateSLAPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/UpdateSLAPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).UpdateSLAPolicy(ctx, req.(*SLAPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_DeleteSLAPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).DeleteSLAPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/DeleteSLAPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).DeleteSLAPolicy(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_ListSLAPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).ListSLAPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/ListSLAPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).ListSLAPolicies(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_GetSLAPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).GetSLAPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/GetSLAPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).GetSLAPolicy(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_ListTicketSLAViolations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).ListTicketSLAViolations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/ListTicketSLAViolations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).ListTicketSLAViolations(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_RateTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Rating)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).RateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/RateTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).RateTicket(ctx, req.(*Rating))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_GetTicketRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).GetTicketRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/GetTicketRating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).GetTicketRating(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_UpdateTicketRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Rule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).UpdateTicketRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/UpdateTicketRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).UpdateTicketRule(ctx, req.(*Rule))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_CreateTicketRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Rule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).CreateTicketRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/CreateTicketRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).CreateTicketRule(ctx, req.(*Rule))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_DeleteTicketRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).DeleteTicketRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/DeleteTicketRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).DeleteTicketRule(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_ReadTicketRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).ReadTicketRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/ReadTicketRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).ReadTicketRule(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_ListTicketRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).ListTicketRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/ListTicketRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).ListTicketRules(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_Report_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConvoReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).Report(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/Report",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).Report(ctx, req.(*ConvoReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMgr_GetTicketIdsByConvoId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMgrServer).GetTicketIdsByConvoId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TicketMgr/GetTicketIdsByConvoId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMgrServer).GetTicketIdsByConvoId(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _TicketMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.TicketMgr",
	HandlerType: (*TicketMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTicketType",
			Handler:    _TicketMgr_CreateTicketType_Handler,
		},
		{
			MethodName: "UpdateTicketType",
			Handler:    _TicketMgr_UpdateTicketType_Handler,
		},
		{
			MethodName: "ListTicketTypes",
			Handler:    _TicketMgr_ListTicketTypes_Handler,
		},
		{
			MethodName: "GetTicketType",
			Handler:    _TicketMgr_GetTicketType_Handler,
		},
		{
			MethodName: "DeleteTicketType",
			Handler:    _TicketMgr_DeleteTicketType_Handler,
		},
		{
			MethodName: "CreateTicket",
			Handler:    _TicketMgr_CreateTicket_Handler,
		},
		{
			MethodName: "UpdateTicket",
			Handler:    _TicketMgr_UpdateTicket_Handler,
		},
		{
			MethodName: "DeleteTicket",
			Handler:    _TicketMgr_DeleteTicket_Handler,
		},
		{
			MethodName: "RecoverTicket",
			Handler:    _TicketMgr_RecoverTicket_Handler,
		},
		{
			MethodName: "GetTicket",
			Handler:    _TicketMgr_GetTicket_Handler,
		},
		{
			MethodName: "ListTickets",
			Handler:    _TicketMgr_ListTickets_Handler,
		},
		{
			MethodName: "MatchTickets",
			Handler:    _TicketMgr_MatchTickets_Handler,
		},
		{
			MethodName: "CreateTicketView",
			Handler:    _TicketMgr_CreateTicketView_Handler,
		},
		{
			MethodName: "UpdateTicketView",
			Handler:    _TicketMgr_UpdateTicketView_Handler,
		},
		{
			MethodName: "DeleteTicketView",
			Handler:    _TicketMgr_DeleteTicketView_Handler,
		},
		{
			MethodName: "GetTicketView",
			Handler:    _TicketMgr_GetTicketView_Handler,
		},
		{
			MethodName: "ListTicketViews",
			Handler:    _TicketMgr_ListTicketViews_Handler,
		},
		{
			MethodName: "CreateTicketTemplate",
			Handler:    _TicketMgr_CreateTicketTemplate_Handler,
		},
		{
			MethodName: "UpdateTicketTemplate",
			Handler:    _TicketMgr_UpdateTicketTemplate_Handler,
		},
		{
			MethodName: "DeleteTicketTemplate",
			Handler:    _TicketMgr_DeleteTicketTemplate_Handler,
		},
		{
			MethodName: "GetTicketTemplate",
			Handler:    _TicketMgr_GetTicketTemplate_Handler,
		},
		{
			MethodName: "ListTicketTemplates",
			Handler:    _TicketMgr_ListTicketTemplates_Handler,
		},
		{
			MethodName: "PongTicketEvent",
			Handler:    _TicketMgr_PongTicketEvent_Handler,
		},
		{
			MethodName: "TagTicket",
			Handler:    _TicketMgr_TagTicket_Handler,
		},
		{
			MethodName: "UntagTicket",
			Handler:    _TicketMgr_UntagTicket_Handler,
		},
		{
			MethodName: "JoinTicket",
			Handler:    _TicketMgr_JoinTicket_Handler,
		},
		{
			MethodName: "LeftTicket",
			Handler:    _TicketMgr_LeftTicket_Handler,
		},
		{
			MethodName: "ReadTickets",
			Handler:    _TicketMgr_ReadTickets_Handler,
		},
		{
			MethodName: "UnreadTickets",
			Handler:    _TicketMgr_UnreadTickets_Handler,
		},
		{
			MethodName: "SubscribedTickets",
			Handler:    _TicketMgr_SubscribedTickets_Handler,
		},
		{
			MethodName: "UnSubscribedTickets",
			Handler:    _TicketMgr_UnSubscribedTickets_Handler,
		},
		{
			MethodName: "SendTicketEvent",
			Handler:    _TicketMgr_SendTicketEvent_Handler,
		},
		{
			MethodName: "ListTicketEvents",
			Handler:    _TicketMgr_ListTicketEvents_Handler,
		},
		{
			MethodName: "UpdateTicketTypeMember",
			Handler:    _TicketMgr_UpdateTicketTypeMember_Handler,
		},
		{
			MethodName: "RemoveTicketTypeMember",
			Handler:    _TicketMgr_RemoveTicketTypeMember_Handler,
		},
		{
			MethodName: "CreateSLAPolicy",
			Handler:    _TicketMgr_CreateSLAPolicy_Handler,
		},
		{
			MethodName: "UpdateSLAPolicy",
			Handler:    _TicketMgr_UpdateSLAPolicy_Handler,
		},
		{
			MethodName: "DeleteSLAPolicy",
			Handler:    _TicketMgr_DeleteSLAPolicy_Handler,
		},
		{
			MethodName: "ListSLAPolicies",
			Handler:    _TicketMgr_ListSLAPolicies_Handler,
		},
		{
			MethodName: "GetSLAPolicy",
			Handler:    _TicketMgr_GetSLAPolicy_Handler,
		},
		{
			MethodName: "ListTicketSLAViolations",
			Handler:    _TicketMgr_ListTicketSLAViolations_Handler,
		},
		{
			MethodName: "RateTicket",
			Handler:    _TicketMgr_RateTicket_Handler,
		},
		{
			MethodName: "GetTicketRating",
			Handler:    _TicketMgr_GetTicketRating_Handler,
		},
		{
			MethodName: "UpdateTicketRule",
			Handler:    _TicketMgr_UpdateTicketRule_Handler,
		},
		{
			MethodName: "CreateTicketRule",
			Handler:    _TicketMgr_CreateTicketRule_Handler,
		},
		{
			MethodName: "DeleteTicketRule",
			Handler:    _TicketMgr_DeleteTicketRule_Handler,
		},
		{
			MethodName: "ReadTicketRule",
			Handler:    _TicketMgr_ReadTicketRule_Handler,
		},
		{
			MethodName: "ListTicketRules",
			Handler:    _TicketMgr_ListTicketRules_Handler,
		},
		{
			MethodName: "Report",
			Handler:    _TicketMgr_Report_Handler,
		},
		{
			MethodName: "GetTicketIdsByConvoId",
			Handler:    _TicketMgr_GetTicketIdsByConvoId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// TemplateMgrClient is the client API for TemplateMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TemplateMgrClient interface {
	CreateTemplate(ctx context.Context, in *Template, opts ...grpc.CallOption) (*Template, error)
	UpdateTemplate(ctx context.Context, in *Template, opts ...grpc.CallOption) (*Template, error)
	DeleteTemplate(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	GetTemplate(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Template, error)
	ListTemplates(ctx context.Context, in *SearchTemplate, opts ...grpc.CallOption) (*Templates, error)
	PickTemplate(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	CreateModal(ctx context.Context, in *ConversationModal, opts ...grpc.CallOption) (*ConversationModal, error)
	UpdateModal(ctx context.Context, in *ConversationModal, opts ...grpc.CallOption) (*ConversationModal, error)
	DeleteModal(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	GetModal(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ConversationModal, error)
	ListModals(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ConversationModals, error)
	PickModal(ctx context.Context, in *ConversationModalPickRequest, opts ...grpc.CallOption) (*ConversationModalPicked, error)
}

type templateMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewTemplateMgrClient(cc grpc.ClientConnInterface) TemplateMgrClient {
	return &templateMgrClient{cc}
}

func (c *templateMgrClient) CreateTemplate(ctx context.Context, in *Template, opts ...grpc.CallOption) (*Template, error) {
	out := new(Template)
	err := c.cc.Invoke(ctx, "/header.TemplateMgr/CreateTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateMgrClient) UpdateTemplate(ctx context.Context, in *Template, opts ...grpc.CallOption) (*Template, error) {
	out := new(Template)
	err := c.cc.Invoke(ctx, "/header.TemplateMgr/UpdateTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateMgrClient) DeleteTemplate(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.TemplateMgr/DeleteTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateMgrClient) GetTemplate(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Template, error) {
	out := new(Template)
	err := c.cc.Invoke(ctx, "/header.TemplateMgr/GetTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateMgrClient) ListTemplates(ctx context.Context, in *SearchTemplate, opts ...grpc.CallOption) (*Templates, error) {
	out := new(Templates)
	err := c.cc.Invoke(ctx, "/header.TemplateMgr/ListTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateMgrClient) PickTemplate(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.TemplateMgr/PickTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateMgrClient) CreateModal(ctx context.Context, in *ConversationModal, opts ...grpc.CallOption) (*ConversationModal, error) {
	out := new(ConversationModal)
	err := c.cc.Invoke(ctx, "/header.TemplateMgr/CreateModal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateMgrClient) UpdateModal(ctx context.Context, in *ConversationModal, opts ...grpc.CallOption) (*ConversationModal, error) {
	out := new(ConversationModal)
	err := c.cc.Invoke(ctx, "/header.TemplateMgr/UpdateModal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateMgrClient) DeleteModal(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.TemplateMgr/DeleteModal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateMgrClient) GetModal(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ConversationModal, error) {
	out := new(ConversationModal)
	err := c.cc.Invoke(ctx, "/header.TemplateMgr/GetModal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateMgrClient) ListModals(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ConversationModals, error) {
	out := new(ConversationModals)
	err := c.cc.Invoke(ctx, "/header.TemplateMgr/ListModals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateMgrClient) PickModal(ctx context.Context, in *ConversationModalPickRequest, opts ...grpc.CallOption) (*ConversationModalPicked, error) {
	out := new(ConversationModalPicked)
	err := c.cc.Invoke(ctx, "/header.TemplateMgr/PickModal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TemplateMgrServer is the server API for TemplateMgr service.
type TemplateMgrServer interface {
	CreateTemplate(context.Context, *Template) (*Template, error)
	UpdateTemplate(context.Context, *Template) (*Template, error)
	DeleteTemplate(context.Context, *Id) (*Empty, error)
	GetTemplate(context.Context, *Id) (*Template, error)
	ListTemplates(context.Context, *SearchTemplate) (*Templates, error)
	PickTemplate(context.Context, *Id) (*Empty, error)
	CreateModal(context.Context, *ConversationModal) (*ConversationModal, error)
	UpdateModal(context.Context, *ConversationModal) (*ConversationModal, error)
	DeleteModal(context.Context, *Id) (*Empty, error)
	GetModal(context.Context, *Id) (*ConversationModal, error)
	ListModals(context.Context, *Id) (*ConversationModals, error)
	PickModal(context.Context, *ConversationModalPickRequest) (*ConversationModalPicked, error)
}

// UnimplementedTemplateMgrServer can be embedded to have forward compatible implementations.
type UnimplementedTemplateMgrServer struct {
}

func (*UnimplementedTemplateMgrServer) CreateTemplate(context.Context, *Template) (*Template, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTemplate not implemented")
}
func (*UnimplementedTemplateMgrServer) UpdateTemplate(context.Context, *Template) (*Template, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTemplate not implemented")
}
func (*UnimplementedTemplateMgrServer) DeleteTemplate(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemplate not implemented")
}
func (*UnimplementedTemplateMgrServer) GetTemplate(context.Context, *Id) (*Template, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplate not implemented")
}
func (*UnimplementedTemplateMgrServer) ListTemplates(context.Context, *SearchTemplate) (*Templates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplates not implemented")
}
func (*UnimplementedTemplateMgrServer) PickTemplate(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PickTemplate not implemented")
}
func (*UnimplementedTemplateMgrServer) CreateModal(context.Context, *ConversationModal) (*ConversationModal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModal not implemented")
}
func (*UnimplementedTemplateMgrServer) UpdateModal(context.Context, *ConversationModal) (*ConversationModal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModal not implemented")
}
func (*UnimplementedTemplateMgrServer) DeleteModal(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModal not implemented")
}
func (*UnimplementedTemplateMgrServer) GetModal(context.Context, *Id) (*ConversationModal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModal not implemented")
}
func (*UnimplementedTemplateMgrServer) ListModals(context.Context, *Id) (*ConversationModals, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModals not implemented")
}
func (*UnimplementedTemplateMgrServer) PickModal(context.Context, *ConversationModalPickRequest) (*ConversationModalPicked, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PickModal not implemented")
}

func RegisterTemplateMgrServer(s *grpc.Server, srv TemplateMgrServer) {
	s.RegisterService(&_TemplateMgr_serviceDesc, srv)
}

func _TemplateMgr_CreateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Template)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateMgrServer).CreateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TemplateMgr/CreateTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateMgrServer).CreateTemplate(ctx, req.(*Template))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateMgr_UpdateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Template)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateMgrServer).UpdateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TemplateMgr/UpdateTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateMgrServer).UpdateTemplate(ctx, req.(*Template))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateMgr_DeleteTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateMgrServer).DeleteTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TemplateMgr/DeleteTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateMgrServer).DeleteTemplate(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateMgr_GetTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateMgrServer).GetTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TemplateMgr/GetTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateMgrServer).GetTemplate(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateMgr_ListTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchTemplate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateMgrServer).ListTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TemplateMgr/ListTemplates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateMgrServer).ListTemplates(ctx, req.(*SearchTemplate))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateMgr_PickTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateMgrServer).PickTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TemplateMgr/PickTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateMgrServer).PickTemplate(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateMgr_CreateModal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversationModal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateMgrServer).CreateModal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TemplateMgr/CreateModal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateMgrServer).CreateModal(ctx, req.(*ConversationModal))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateMgr_UpdateModal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversationModal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateMgrServer).UpdateModal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TemplateMgr/UpdateModal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateMgrServer).UpdateModal(ctx, req.(*ConversationModal))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateMgr_DeleteModal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateMgrServer).DeleteModal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TemplateMgr/DeleteModal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateMgrServer).DeleteModal(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateMgr_GetModal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateMgrServer).GetModal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TemplateMgr/GetModal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateMgrServer).GetModal(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateMgr_ListModals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateMgrServer).ListModals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TemplateMgr/ListModals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateMgrServer).ListModals(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateMgr_PickModal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversationModalPickRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateMgrServer).PickModal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TemplateMgr/PickModal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateMgrServer).PickModal(ctx, req.(*ConversationModalPickRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TemplateMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.TemplateMgr",
	HandlerType: (*TemplateMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTemplate",
			Handler:    _TemplateMgr_CreateTemplate_Handler,
		},
		{
			MethodName: "UpdateTemplate",
			Handler:    _TemplateMgr_UpdateTemplate_Handler,
		},
		{
			MethodName: "DeleteTemplate",
			Handler:    _TemplateMgr_DeleteTemplate_Handler,
		},
		{
			MethodName: "GetTemplate",
			Handler:    _TemplateMgr_GetTemplate_Handler,
		},
		{
			MethodName: "ListTemplates",
			Handler:    _TemplateMgr_ListTemplates_Handler,
		},
		{
			MethodName: "PickTemplate",
			Handler:    _TemplateMgr_PickTemplate_Handler,
		},
		{
			MethodName: "CreateModal",
			Handler:    _TemplateMgr_CreateModal_Handler,
		},
		{
			MethodName: "UpdateModal",
			Handler:    _TemplateMgr_UpdateModal_Handler,
		},
		{
			MethodName: "DeleteModal",
			Handler:    _TemplateMgr_DeleteModal_Handler,
		},
		{
			MethodName: "GetModal",
			Handler:    _TemplateMgr_GetModal_Handler,
		},
		{
			MethodName: "ListModals",
			Handler:    _TemplateMgr_ListModals_Handler,
		},
		{
			MethodName: "PickModal",
			Handler:    _TemplateMgr_PickModal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// TagMgrClient is the client API for TagMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TagMgrClient interface {
	CreateTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*Tag, error)
	UpdateTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*Tag, error)
	DeleteTag(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	ListTags(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Tags, error)
	GetTag(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Tag, error)
}

type tagMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewTagMgrClient(cc grpc.ClientConnInterface) TagMgrClient {
	return &tagMgrClient{cc}
}

func (c *tagMgrClient) CreateTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*Tag, error) {
	out := new(Tag)
	err := c.cc.Invoke(ctx, "/header.TagMgr/CreateTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagMgrClient) UpdateTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*Tag, error) {
	out := new(Tag)
	err := c.cc.Invoke(ctx, "/header.TagMgr/UpdateTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagMgrClient) DeleteTag(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.TagMgr/DeleteTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagMgrClient) ListTags(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Tags, error) {
	out := new(Tags)
	err := c.cc.Invoke(ctx, "/header.TagMgr/ListTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagMgrClient) GetTag(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Tag, error) {
	out := new(Tag)
	err := c.cc.Invoke(ctx, "/header.TagMgr/GetTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TagMgrServer is the server API for TagMgr service.
type TagMgrServer interface {
	CreateTag(context.Context, *Tag) (*Tag, error)
	UpdateTag(context.Context, *Tag) (*Tag, error)
	DeleteTag(context.Context, *Id) (*Empty, error)
	ListTags(context.Context, *Id) (*Tags, error)
	GetTag(context.Context, *Id) (*Tag, error)
}

// UnimplementedTagMgrServer can be embedded to have forward compatible implementations.
type UnimplementedTagMgrServer struct {
}

func (*UnimplementedTagMgrServer) CreateTag(context.Context, *Tag) (*Tag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTag not implemented")
}
func (*UnimplementedTagMgrServer) UpdateTag(context.Context, *Tag) (*Tag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTag not implemented")
}
func (*UnimplementedTagMgrServer) DeleteTag(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTag not implemented")
}
func (*UnimplementedTagMgrServer) ListTags(context.Context, *Id) (*Tags, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTags not implemented")
}
func (*UnimplementedTagMgrServer) GetTag(context.Context, *Id) (*Tag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTag not implemented")
}

func RegisterTagMgrServer(s *grpc.Server, srv TagMgrServer) {
	s.RegisterService(&_TagMgr_serviceDesc, srv)
}

func _TagMgr_CreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagMgrServer).CreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TagMgr/CreateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagMgrServer).CreateTag(ctx, req.(*Tag))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagMgr_UpdateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagMgrServer).UpdateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TagMgr/UpdateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagMgrServer).UpdateTag(ctx, req.(*Tag))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagMgr_DeleteTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagMgrServer).DeleteTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TagMgr/DeleteTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagMgrServer).DeleteTag(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagMgr_ListTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagMgrServer).ListTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TagMgr/ListTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagMgrServer).ListTags(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagMgr_GetTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagMgrServer).GetTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TagMgr/GetTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagMgrServer).GetTag(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _TagMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.TagMgr",
	HandlerType: (*TagMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTag",
			Handler:    _TagMgr_CreateTag_Handler,
		},
		{
			MethodName: "UpdateTag",
			Handler:    _TagMgr_UpdateTag_Handler,
		},
		{
			MethodName: "DeleteTag",
			Handler:    _TagMgr_DeleteTag_Handler,
		},
		{
			MethodName: "ListTags",
			Handler:    _TagMgr_ListTags_Handler,
		},
		{
			MethodName: "GetTag",
			Handler:    _TagMgr_GetTag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// Noti5ServiceClient is the client API for Noti5Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Noti5ServiceClient interface {
	ReadNotificationSetting(ctx context.Context, in *Id, opts ...grpc.CallOption) (*noti5.Setting, error)
	UpdateNotificationSetting(ctx context.Context, in *noti5.Setting, opts ...grpc.CallOption) (*noti5.Setting, error)
	Noti(ctx context.Context, in *PushNoti, opts ...grpc.CallOption) (*Empty, error)
	AddToken(ctx context.Context, in *noti5.Token, opts ...grpc.CallOption) (*Empty, error)
	RemoveToken(ctx context.Context, in *noti5.Token, opts ...grpc.CallOption) (*Empty, error)
	CheckTokenExists(ctx context.Context, in *noti5.Token, opts ...grpc.CallOption) (*Empty, error)
}

type noti5ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNoti5ServiceClient(cc grpc.ClientConnInterface) Noti5ServiceClient {
	return &noti5ServiceClient{cc}
}

func (c *noti5ServiceClient) ReadNotificationSetting(ctx context.Context, in *Id, opts ...grpc.CallOption) (*noti5.Setting, error) {
	out := new(noti5.Setting)
	err := c.cc.Invoke(ctx, "/header.Noti5Service/ReadNotificationSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noti5ServiceClient) UpdateNotificationSetting(ctx context.Context, in *noti5.Setting, opts ...grpc.CallOption) (*noti5.Setting, error) {
	out := new(noti5.Setting)
	err := c.cc.Invoke(ctx, "/header.Noti5Service/UpdateNotificationSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noti5ServiceClient) Noti(ctx context.Context, in *PushNoti, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Noti5Service/Noti", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noti5ServiceClient) AddToken(ctx context.Context, in *noti5.Token, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Noti5Service/AddToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noti5ServiceClient) RemoveToken(ctx context.Context, in *noti5.Token, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Noti5Service/RemoveToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noti5ServiceClient) CheckTokenExists(ctx context.Context, in *noti5.Token, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Noti5Service/CheckTokenExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Noti5ServiceServer is the server API for Noti5Service service.
type Noti5ServiceServer interface {
	ReadNotificationSetting(context.Context, *Id) (*noti5.Setting, error)
	UpdateNotificationSetting(context.Context, *noti5.Setting) (*noti5.Setting, error)
	Noti(context.Context, *PushNoti) (*Empty, error)
	AddToken(context.Context, *noti5.Token) (*Empty, error)
	RemoveToken(context.Context, *noti5.Token) (*Empty, error)
	CheckTokenExists(context.Context, *noti5.Token) (*Empty, error)
}

// UnimplementedNoti5ServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNoti5ServiceServer struct {
}

func (*UnimplementedNoti5ServiceServer) ReadNotificationSetting(context.Context, *Id) (*noti5.Setting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadNotificationSetting not implemented")
}
func (*UnimplementedNoti5ServiceServer) UpdateNotificationSetting(context.Context, *noti5.Setting) (*noti5.Setting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotificationSetting not implemented")
}
func (*UnimplementedNoti5ServiceServer) Noti(context.Context, *PushNoti) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Noti not implemented")
}
func (*UnimplementedNoti5ServiceServer) AddToken(context.Context, *noti5.Token) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToken not implemented")
}
func (*UnimplementedNoti5ServiceServer) RemoveToken(context.Context, *noti5.Token) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveToken not implemented")
}
func (*UnimplementedNoti5ServiceServer) CheckTokenExists(context.Context, *noti5.Token) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTokenExists not implemented")
}

func RegisterNoti5ServiceServer(s *grpc.Server, srv Noti5ServiceServer) {
	s.RegisterService(&_Noti5Service_serviceDesc, srv)
}

func _Noti5Service_ReadNotificationSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Noti5ServiceServer).ReadNotificationSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Noti5Service/ReadNotificationSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Noti5ServiceServer).ReadNotificationSetting(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Noti5Service_UpdateNotificationSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(noti5.Setting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Noti5ServiceServer).UpdateNotificationSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Noti5Service/UpdateNotificationSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Noti5ServiceServer).UpdateNotificationSetting(ctx, req.(*noti5.Setting))
	}
	return interceptor(ctx, in, info, handler)
}

func _Noti5Service_Noti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushNoti)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Noti5ServiceServer).Noti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Noti5Service/Noti",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Noti5ServiceServer).Noti(ctx, req.(*PushNoti))
	}
	return interceptor(ctx, in, info, handler)
}

func _Noti5Service_AddToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(noti5.Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Noti5ServiceServer).AddToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Noti5Service/AddToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Noti5ServiceServer).AddToken(ctx, req.(*noti5.Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _Noti5Service_RemoveToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(noti5.Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Noti5ServiceServer).RemoveToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Noti5Service/RemoveToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Noti5ServiceServer).RemoveToken(ctx, req.(*noti5.Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _Noti5Service_CheckTokenExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(noti5.Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Noti5ServiceServer).CheckTokenExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Noti5Service/CheckTokenExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Noti5ServiceServer).CheckTokenExists(ctx, req.(*noti5.Token))
	}
	return interceptor(ctx, in, info, handler)
}

var _Noti5Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.Noti5Service",
	HandlerType: (*Noti5ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadNotificationSetting",
			Handler:    _Noti5Service_ReadNotificationSetting_Handler,
		},
		{
			MethodName: "UpdateNotificationSetting",
			Handler:    _Noti5Service_UpdateNotificationSetting_Handler,
		},
		{
			MethodName: "Noti",
			Handler:    _Noti5Service_Noti_Handler,
		},
		{
			MethodName: "AddToken",
			Handler:    _Noti5Service_AddToken_Handler,
		},
		{
			MethodName: "RemoveToken",
			Handler:    _Noti5Service_RemoveToken_Handler,
		},
		{
			MethodName: "CheckTokenExists",
			Handler:    _Noti5Service_CheckTokenExists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// PaymentMgrClient is the client API for PaymentMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PaymentMgrClient interface {
	SearchSub(ctx context.Context, in *account.SearchSubRequest, opts ...grpc.CallOption) (*AccSubs, error)
	GetSub(ctx context.Context, in *Id, opts ...grpc.CallOption) (*AccSub, error)
	Purchase(ctx context.Context, in *payment.PurchaseRequest, opts ...grpc.CallOption) (*payment.Invoice, error)
	UpdateSubscription(ctx context.Context, in *payment.Subscription, opts ...grpc.CallOption) (*payment.Subscription, error)
	GetSubscription(ctx context.Context, in *Id, opts ...grpc.CallOption) (*payment.Subscription, error)
	Pay(ctx context.Context, in *payment.PayRequest, opts ...grpc.CallOption) (*payment.Bill, error)
	CreateInvoice(ctx context.Context, in *payment.Invoice, opts ...grpc.CallOption) (*payment.Invoice, error)
	UpdateInvoice(ctx context.Context, in *payment.Invoice, opts ...grpc.CallOption) (*payment.Invoice, error)
	FilterInvoices(ctx context.Context, in *payment.ListInvoiceRequest, opts ...grpc.CallOption) (*payment.Invoices, error)
	DraftInvoice(ctx context.Context, in *payment.Subscription, opts ...grpc.CallOption) (*payment.Invoice, error)
	ListComments(ctx context.Context, in *payment.ListCommentsRequest, opts ...grpc.CallOption) (*payment.Comments, error)
	AddComment(ctx context.Context, in *payment.Comment, opts ...grpc.CallOption) (*payment.Comment, error)
	ExportInvoice(ctx context.Context, in *Id, opts ...grpc.CallOption) (*payment.String, error)
	ConvertInvoiceToHtml(ctx context.Context, in *payment.Invoice, opts ...grpc.CallOption) (*payment.String, error)
	GetExchangeRate(ctx context.Context, in *ExchangeRate, opts ...grpc.CallOption) (*ExchangeRate, error)
	TransferMoney(ctx context.Context, in *payment.PayRequest, opts ...grpc.CallOption) (*payment.Bill, error)
	ListLogs(ctx context.Context, in *payment.ListLogsRequest, opts ...grpc.CallOption) (*payment.Logs, error)
}

type paymentMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentMgrClient(cc grpc.ClientConnInterface) PaymentMgrClient {
	return &paymentMgrClient{cc}
}

func (c *paymentMgrClient) SearchSub(ctx context.Context, in *account.SearchSubRequest, opts ...grpc.CallOption) (*AccSubs, error) {
	out := new(AccSubs)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/SearchSub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) GetSub(ctx context.Context, in *Id, opts ...grpc.CallOption) (*AccSub, error) {
	out := new(AccSub)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/GetSub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) Purchase(ctx context.Context, in *payment.PurchaseRequest, opts ...grpc.CallOption) (*payment.Invoice, error) {
	out := new(payment.Invoice)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/Purchase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) UpdateSubscription(ctx context.Context, in *payment.Subscription, opts ...grpc.CallOption) (*payment.Subscription, error) {
	out := new(payment.Subscription)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/UpdateSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) GetSubscription(ctx context.Context, in *Id, opts ...grpc.CallOption) (*payment.Subscription, error) {
	out := new(payment.Subscription)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/GetSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) Pay(ctx context.Context, in *payment.PayRequest, opts ...grpc.CallOption) (*payment.Bill, error) {
	out := new(payment.Bill)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/Pay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) CreateInvoice(ctx context.Context, in *payment.Invoice, opts ...grpc.CallOption) (*payment.Invoice, error) {
	out := new(payment.Invoice)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/CreateInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) UpdateInvoice(ctx context.Context, in *payment.Invoice, opts ...grpc.CallOption) (*payment.Invoice, error) {
	out := new(payment.Invoice)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/UpdateInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) FilterInvoices(ctx context.Context, in *payment.ListInvoiceRequest, opts ...grpc.CallOption) (*payment.Invoices, error) {
	out := new(payment.Invoices)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/FilterInvoices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) DraftInvoice(ctx context.Context, in *payment.Subscription, opts ...grpc.CallOption) (*payment.Invoice, error) {
	out := new(payment.Invoice)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/DraftInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) ListComments(ctx context.Context, in *payment.ListCommentsRequest, opts ...grpc.CallOption) (*payment.Comments, error) {
	out := new(payment.Comments)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/ListComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) AddComment(ctx context.Context, in *payment.Comment, opts ...grpc.CallOption) (*payment.Comment, error) {
	out := new(payment.Comment)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/AddComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) ExportInvoice(ctx context.Context, in *Id, opts ...grpc.CallOption) (*payment.String, error) {
	out := new(payment.String)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/ExportInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) ConvertInvoiceToHtml(ctx context.Context, in *payment.Invoice, opts ...grpc.CallOption) (*payment.String, error) {
	out := new(payment.String)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/ConvertInvoiceToHtml", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) GetExchangeRate(ctx context.Context, in *ExchangeRate, opts ...grpc.CallOption) (*ExchangeRate, error) {
	out := new(ExchangeRate)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/GetExchangeRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) TransferMoney(ctx context.Context, in *payment.PayRequest, opts ...grpc.CallOption) (*payment.Bill, error) {
	out := new(payment.Bill)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/TransferMoney", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) ListLogs(ctx context.Context, in *payment.ListLogsRequest, opts ...grpc.CallOption) (*payment.Logs, error) {
	out := new(payment.Logs)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/ListLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentMgrServer is the server API for PaymentMgr service.
type PaymentMgrServer interface {
	SearchSub(context.Context, *account.SearchSubRequest) (*AccSubs, error)
	GetSub(context.Context, *Id) (*AccSub, error)
	Purchase(context.Context, *payment.PurchaseRequest) (*payment.Invoice, error)
	UpdateSubscription(context.Context, *payment.Subscription) (*payment.Subscription, error)
	GetSubscription(context.Context, *Id) (*payment.Subscription, error)
	Pay(context.Context, *payment.PayRequest) (*payment.Bill, error)
	CreateInvoice(context.Context, *payment.Invoice) (*payment.Invoice, error)
	UpdateInvoice(context.Context, *payment.Invoice) (*payment.Invoice, error)
	FilterInvoices(context.Context, *payment.ListInvoiceRequest) (*payment.Invoices, error)
	DraftInvoice(context.Context, *payment.Subscription) (*payment.Invoice, error)
	ListComments(context.Context, *payment.ListCommentsRequest) (*payment.Comments, error)
	AddComment(context.Context, *payment.Comment) (*payment.Comment, error)
	ExportInvoice(context.Context, *Id) (*payment.String, error)
	ConvertInvoiceToHtml(context.Context, *payment.Invoice) (*payment.String, error)
	GetExchangeRate(context.Context, *ExchangeRate) (*ExchangeRate, error)
	TransferMoney(context.Context, *payment.PayRequest) (*payment.Bill, error)
	ListLogs(context.Context, *payment.ListLogsRequest) (*payment.Logs, error)
}

// UnimplementedPaymentMgrServer can be embedded to have forward compatible implementations.
type UnimplementedPaymentMgrServer struct {
}

func (*UnimplementedPaymentMgrServer) SearchSub(context.Context, *account.SearchSubRequest) (*AccSubs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchSub not implemented")
}
func (*UnimplementedPaymentMgrServer) GetSub(context.Context, *Id) (*AccSub, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSub not implemented")
}
func (*UnimplementedPaymentMgrServer) Purchase(context.Context, *payment.PurchaseRequest) (*payment.Invoice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Purchase not implemented")
}
func (*UnimplementedPaymentMgrServer) UpdateSubscription(context.Context, *payment.Subscription) (*payment.Subscription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubscription not implemented")
}
func (*UnimplementedPaymentMgrServer) GetSubscription(context.Context, *Id) (*payment.Subscription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscription not implemented")
}
func (*UnimplementedPaymentMgrServer) Pay(context.Context, *payment.PayRequest) (*payment.Bill, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pay not implemented")
}
func (*UnimplementedPaymentMgrServer) CreateInvoice(context.Context, *payment.Invoice) (*payment.Invoice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvoice not implemented")
}
func (*UnimplementedPaymentMgrServer) UpdateInvoice(context.Context, *payment.Invoice) (*payment.Invoice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInvoice not implemented")
}
func (*UnimplementedPaymentMgrServer) FilterInvoices(context.Context, *payment.ListInvoiceRequest) (*payment.Invoices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterInvoices not implemented")
}
func (*UnimplementedPaymentMgrServer) DraftInvoice(context.Context, *payment.Subscription) (*payment.Invoice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DraftInvoice not implemented")
}
func (*UnimplementedPaymentMgrServer) ListComments(context.Context, *payment.ListCommentsRequest) (*payment.Comments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComments not implemented")
}
func (*UnimplementedPaymentMgrServer) AddComment(context.Context, *payment.Comment) (*payment.Comment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddComment not implemented")
}
func (*UnimplementedPaymentMgrServer) ExportInvoice(context.Context, *Id) (*payment.String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportInvoice not implemented")
}
func (*UnimplementedPaymentMgrServer) ConvertInvoiceToHtml(context.Context, *payment.Invoice) (*payment.String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertInvoiceToHtml not implemented")
}
func (*UnimplementedPaymentMgrServer) GetExchangeRate(context.Context, *ExchangeRate) (*ExchangeRate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExchangeRate not implemented")
}
func (*UnimplementedPaymentMgrServer) TransferMoney(context.Context, *payment.PayRequest) (*payment.Bill, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferMoney not implemented")
}
func (*UnimplementedPaymentMgrServer) ListLogs(context.Context, *payment.ListLogsRequest) (*payment.Logs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLogs not implemented")
}

func RegisterPaymentMgrServer(s *grpc.Server, srv PaymentMgrServer) {
	s.RegisterService(&_PaymentMgr_serviceDesc, srv)
}

func _PaymentMgr_SearchSub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.SearchSubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).SearchSub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/SearchSub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).SearchSub(ctx, req.(*account.SearchSubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_GetSub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).GetSub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/GetSub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).GetSub(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_Purchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.PurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).Purchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/Purchase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).Purchase(ctx, req.(*payment.PurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_UpdateSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.Subscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).UpdateSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/UpdateSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).UpdateSubscription(ctx, req.(*payment.Subscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_GetSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).GetSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/GetSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).GetSubscription(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_Pay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.PayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).Pay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/Pay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).Pay(ctx, req.(*payment.PayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_CreateInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.Invoice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).CreateInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/CreateInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).CreateInvoice(ctx, req.(*payment.Invoice))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_UpdateInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.Invoice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).UpdateInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/UpdateInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).UpdateInvoice(ctx, req.(*payment.Invoice))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_FilterInvoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.ListInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).FilterInvoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/FilterInvoices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).FilterInvoices(ctx, req.(*payment.ListInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_DraftInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.Subscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).DraftInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/DraftInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).DraftInvoice(ctx, req.(*payment.Subscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_ListComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.ListCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).ListComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/ListComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).ListComments(ctx, req.(*payment.ListCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_AddComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.Comment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).AddComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/AddComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).AddComment(ctx, req.(*payment.Comment))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_ExportInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).ExportInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/ExportInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).ExportInvoice(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_ConvertInvoiceToHtml_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.Invoice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).ConvertInvoiceToHtml(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/ConvertInvoiceToHtml",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).ConvertInvoiceToHtml(ctx, req.(*payment.Invoice))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_GetExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeRate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).GetExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/GetExchangeRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).GetExchangeRate(ctx, req.(*ExchangeRate))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_TransferMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.PayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).TransferMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/TransferMoney",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).TransferMoney(ctx, req.(*payment.PayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_ListLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.ListLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).ListLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/ListLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).ListLogs(ctx, req.(*payment.ListLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PaymentMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.PaymentMgr",
	HandlerType: (*PaymentMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchSub",
			Handler:    _PaymentMgr_SearchSub_Handler,
		},
		{
			MethodName: "GetSub",
			Handler:    _PaymentMgr_GetSub_Handler,
		},
		{
			MethodName: "Purchase",
			Handler:    _PaymentMgr_Purchase_Handler,
		},
		{
			MethodName: "UpdateSubscription",
			Handler:    _PaymentMgr_UpdateSubscription_Handler,
		},
		{
			MethodName: "GetSubscription",
			Handler:    _PaymentMgr_GetSubscription_Handler,
		},
		{
			MethodName: "Pay",
			Handler:    _PaymentMgr_Pay_Handler,
		},
		{
			MethodName: "CreateInvoice",
			Handler:    _PaymentMgr_CreateInvoice_Handler,
		},
		{
			MethodName: "UpdateInvoice",
			Handler:    _PaymentMgr_UpdateInvoice_Handler,
		},
		{
			MethodName: "FilterInvoices",
			Handler:    _PaymentMgr_FilterInvoices_Handler,
		},
		{
			MethodName: "DraftInvoice",
			Handler:    _PaymentMgr_DraftInvoice_Handler,
		},
		{
			MethodName: "ListComments",
			Handler:    _PaymentMgr_ListComments_Handler,
		},
		{
			MethodName: "AddComment",
			Handler:    _PaymentMgr_AddComment_Handler,
		},
		{
			MethodName: "ExportInvoice",
			Handler:    _PaymentMgr_ExportInvoice_Handler,
		},
		{
			MethodName: "ConvertInvoiceToHtml",
			Handler:    _PaymentMgr_ConvertInvoiceToHtml_Handler,
		},
		{
			MethodName: "GetExchangeRate",
			Handler:    _PaymentMgr_GetExchangeRate_Handler,
		},
		{
			MethodName: "TransferMoney",
			Handler:    _PaymentMgr_TransferMoney_Handler,
		},
		{
			MethodName: "ListLogs",
			Handler:    _PaymentMgr_ListLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// PubsubClient is the client API for Pubsub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PubsubClient interface {
	Fire(ctx context.Context, in *PsMessage, opts ...grpc.CallOption) (*Empty, error)
	IsSubscribed(ctx context.Context, in *PsMessage, opts ...grpc.CallOption) (*Id, error)
	Poll(ctx context.Context, in *RealtimeSubscription, opts ...grpc.CallOption) (*PollResult, error)
	Subscribe(ctx context.Context, in *RealtimeSubscription, opts ...grpc.CallOption) (*RealtimeSubscription, error)
}

type pubsubClient struct {
	cc grpc.ClientConnInterface
}

func NewPubsubClient(cc grpc.ClientConnInterface) PubsubClient {
	return &pubsubClient{cc}
}

func (c *pubsubClient) Fire(ctx context.Context, in *PsMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Pubsub/Fire", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubsubClient) IsSubscribed(ctx context.Context, in *PsMessage, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/header.Pubsub/IsSubscribed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubsubClient) Poll(ctx context.Context, in *RealtimeSubscription, opts ...grpc.CallOption) (*PollResult, error) {
	out := new(PollResult)
	err := c.cc.Invoke(ctx, "/header.Pubsub/Poll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubsubClient) Subscribe(ctx context.Context, in *RealtimeSubscription, opts ...grpc.CallOption) (*RealtimeSubscription, error) {
	out := new(RealtimeSubscription)
	err := c.cc.Invoke(ctx, "/header.Pubsub/Subscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PubsubServer is the server API for Pubsub service.
type PubsubServer interface {
	Fire(context.Context, *PsMessage) (*Empty, error)
	IsSubscribed(context.Context, *PsMessage) (*Id, error)
	Poll(context.Context, *RealtimeSubscription) (*PollResult, error)
	Subscribe(context.Context, *RealtimeSubscription) (*RealtimeSubscription, error)
}

// UnimplementedPubsubServer can be embedded to have forward compatible implementations.
type UnimplementedPubsubServer struct {
}

func (*UnimplementedPubsubServer) Fire(context.Context, *PsMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fire not implemented")
}
func (*UnimplementedPubsubServer) IsSubscribed(context.Context, *PsMessage) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsSubscribed not implemented")
}
func (*UnimplementedPubsubServer) Poll(context.Context, *RealtimeSubscription) (*PollResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Poll not implemented")
}
func (*UnimplementedPubsubServer) Subscribe(context.Context, *RealtimeSubscription) (*RealtimeSubscription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}

func RegisterPubsubServer(s *grpc.Server, srv PubsubServer) {
	s.RegisterService(&_Pubsub_serviceDesc, srv)
}

func _Pubsub_Fire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PsMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubsubServer).Fire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Pubsub/Fire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubsubServer).Fire(ctx, req.(*PsMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pubsub_IsSubscribed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PsMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubsubServer).IsSubscribed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Pubsub/IsSubscribed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubsubServer).IsSubscribed(ctx, req.(*PsMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pubsub_Poll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RealtimeSubscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubsubServer).Poll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Pubsub/Poll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubsubServer).Poll(ctx, req.(*RealtimeSubscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pubsub_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RealtimeSubscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubsubServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Pubsub/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubsubServer).Subscribe(ctx, req.(*RealtimeSubscription))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pubsub_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.Pubsub",
	HandlerType: (*PubsubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Fire",
			Handler:    _Pubsub_Fire_Handler,
		},
		{
			MethodName: "IsSubscribed",
			Handler:    _Pubsub_IsSubscribed_Handler,
		},
		{
			MethodName: "Poll",
			Handler:    _Pubsub_Poll_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _Pubsub_Subscribe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// FabikonServiceClient is the client API for FabikonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FabikonServiceClient interface {
	ReadFbFanpageSetting(ctx context.Context, in *Id, opts ...grpc.CallOption) (*FbFanpageSetting, error)
	UpdateFbFanpageSetting(ctx context.Context, in *FbFanpageSetting, opts ...grpc.CallOption) (*FbFanpageSetting, error)
	ListFbFanpageSettings(ctx context.Context, in *Id, opts ...grpc.CallOption) (*FbFanpageSettings, error)
	ListFbPosts(ctx context.Context, in *Id, opts ...grpc.CallOption) (*FacebookPosts, error)
	GetFbPost(ctx context.Context, in *FacebookPost, opts ...grpc.CallOption) (*FacebookPost, error)
	SendEventToFacebook(ctx context.Context, in *Events, opts ...grpc.CallOption) (*Empty, error)
	RemoveFbUserLabel(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error)
	AddFbUserLabel(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error)
	GenerateRefLink(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Id, error)
}

type fabikonServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFabikonServiceClient(cc grpc.ClientConnInterface) FabikonServiceClient {
	return &fabikonServiceClient{cc}
}

func (c *fabikonServiceClient) ReadFbFanpageSetting(ctx context.Context, in *Id, opts ...grpc.CallOption) (*FbFanpageSetting, error) {
	out := new(FbFanpageSetting)
	err := c.cc.Invoke(ctx, "/header.FabikonService/ReadFbFanpageSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fabikonServiceClient) UpdateFbFanpageSetting(ctx context.Context, in *FbFanpageSetting, opts ...grpc.CallOption) (*FbFanpageSetting, error) {
	out := new(FbFanpageSetting)
	err := c.cc.Invoke(ctx, "/header.FabikonService/UpdateFbFanpageSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fabikonServiceClient) ListFbFanpageSettings(ctx context.Context, in *Id, opts ...grpc.CallOption) (*FbFanpageSettings, error) {
	out := new(FbFanpageSettings)
	err := c.cc.Invoke(ctx, "/header.FabikonService/ListFbFanpageSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fabikonServiceClient) ListFbPosts(ctx context.Context, in *Id, opts ...grpc.CallOption) (*FacebookPosts, error) {
	out := new(FacebookPosts)
	err := c.cc.Invoke(ctx, "/header.FabikonService/ListFbPosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fabikonServiceClient) GetFbPost(ctx context.Context, in *FacebookPost, opts ...grpc.CallOption) (*FacebookPost, error) {
	out := new(FacebookPost)
	err := c.cc.Invoke(ctx, "/header.FabikonService/GetFbPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fabikonServiceClient) SendEventToFacebook(ctx context.Context, in *Events, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.FabikonService/SendEventToFacebook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fabikonServiceClient) RemoveFbUserLabel(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.FabikonService/RemoveFbUserLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fabikonServiceClient) AddFbUserLabel(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.FabikonService/AddFbUserLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fabikonServiceClient) GenerateRefLink(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/header.FabikonService/GenerateRefLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FabikonServiceServer is the server API for FabikonService service.
type FabikonServiceServer interface {
	ReadFbFanpageSetting(context.Context, *Id) (*FbFanpageSetting, error)
	UpdateFbFanpageSetting(context.Context, *FbFanpageSetting) (*FbFanpageSetting, error)
	ListFbFanpageSettings(context.Context, *Id) (*FbFanpageSettings, error)
	ListFbPosts(context.Context, *Id) (*FacebookPosts, error)
	GetFbPost(context.Context, *FacebookPost) (*FacebookPost, error)
	SendEventToFacebook(context.Context, *Events) (*Empty, error)
	RemoveFbUserLabel(context.Context, *User) (*Empty, error)
	AddFbUserLabel(context.Context, *User) (*Empty, error)
	GenerateRefLink(context.Context, *Id) (*Id, error)
}

// UnimplementedFabikonServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFabikonServiceServer struct {
}

func (*UnimplementedFabikonServiceServer) ReadFbFanpageSetting(context.Context, *Id) (*FbFanpageSetting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadFbFanpageSetting not implemented")
}
func (*UnimplementedFabikonServiceServer) UpdateFbFanpageSetting(context.Context, *FbFanpageSetting) (*FbFanpageSetting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFbFanpageSetting not implemented")
}
func (*UnimplementedFabikonServiceServer) ListFbFanpageSettings(context.Context, *Id) (*FbFanpageSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFbFanpageSettings not implemented")
}
func (*UnimplementedFabikonServiceServer) ListFbPosts(context.Context, *Id) (*FacebookPosts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFbPosts not implemented")
}
func (*UnimplementedFabikonServiceServer) GetFbPost(context.Context, *FacebookPost) (*FacebookPost, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFbPost not implemented")
}
func (*UnimplementedFabikonServiceServer) SendEventToFacebook(context.Context, *Events) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEventToFacebook not implemented")
}
func (*UnimplementedFabikonServiceServer) RemoveFbUserLabel(context.Context, *User) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFbUserLabel not implemented")
}
func (*UnimplementedFabikonServiceServer) AddFbUserLabel(context.Context, *User) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFbUserLabel not implemented")
}
func (*UnimplementedFabikonServiceServer) GenerateRefLink(context.Context, *Id) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateRefLink not implemented")
}

func RegisterFabikonServiceServer(s *grpc.Server, srv FabikonServiceServer) {
	s.RegisterService(&_FabikonService_serviceDesc, srv)
}

func _FabikonService_ReadFbFanpageSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FabikonServiceServer).ReadFbFanpageSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.FabikonService/ReadFbFanpageSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FabikonServiceServer).ReadFbFanpageSetting(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _FabikonService_UpdateFbFanpageSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FbFanpageSetting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FabikonServiceServer).UpdateFbFanpageSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.FabikonService/UpdateFbFanpageSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FabikonServiceServer).UpdateFbFanpageSetting(ctx, req.(*FbFanpageSetting))
	}
	return interceptor(ctx, in, info, handler)
}

func _FabikonService_ListFbFanpageSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FabikonServiceServer).ListFbFanpageSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.FabikonService/ListFbFanpageSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FabikonServiceServer).ListFbFanpageSettings(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _FabikonService_ListFbPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FabikonServiceServer).ListFbPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.FabikonService/ListFbPosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FabikonServiceServer).ListFbPosts(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _FabikonService_GetFbPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FacebookPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FabikonServiceServer).GetFbPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.FabikonService/GetFbPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FabikonServiceServer).GetFbPost(ctx, req.(*FacebookPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _FabikonService_SendEventToFacebook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Events)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FabikonServiceServer).SendEventToFacebook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.FabikonService/SendEventToFacebook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FabikonServiceServer).SendEventToFacebook(ctx, req.(*Events))
	}
	return interceptor(ctx, in, info, handler)
}

func _FabikonService_RemoveFbUserLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FabikonServiceServer).RemoveFbUserLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.FabikonService/RemoveFbUserLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FabikonServiceServer).RemoveFbUserLabel(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _FabikonService_AddFbUserLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FabikonServiceServer).AddFbUserLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.FabikonService/AddFbUserLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FabikonServiceServer).AddFbUserLabel(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _FabikonService_GenerateRefLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FabikonServiceServer).GenerateRefLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.FabikonService/GenerateRefLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FabikonServiceServer).GenerateRefLink(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _FabikonService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.FabikonService",
	HandlerType: (*FabikonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadFbFanpageSetting",
			Handler:    _FabikonService_ReadFbFanpageSetting_Handler,
		},
		{
			MethodName: "UpdateFbFanpageSetting",
			Handler:    _FabikonService_UpdateFbFanpageSetting_Handler,
		},
		{
			MethodName: "ListFbFanpageSettings",
			Handler:    _FabikonService_ListFbFanpageSettings_Handler,
		},
		{
			MethodName: "ListFbPosts",
			Handler:    _FabikonService_ListFbPosts_Handler,
		},
		{
			MethodName: "GetFbPost",
			Handler:    _FabikonService_GetFbPost_Handler,
		},
		{
			MethodName: "SendEventToFacebook",
			Handler:    _FabikonService_SendEventToFacebook_Handler,
		},
		{
			MethodName: "RemoveFbUserLabel",
			Handler:    _FabikonService_RemoveFbUserLabel_Handler,
		},
		{
			MethodName: "AddFbUserLabel",
			Handler:    _FabikonService_AddFbUserLabel_Handler,
		},
		{
			MethodName: "GenerateRefLink",
			Handler:    _FabikonService_GenerateRefLink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// ChannelConnectorClient is the client API for ChannelConnector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChannelConnectorClient interface {
	GetIntegration(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Integration, error)
	UpdateIntegration(ctx context.Context, in *Integration, opts ...grpc.CallOption) (*Integration, error)
}

type channelConnectorClient struct {
	cc grpc.ClientConnInterface
}

func NewChannelConnectorClient(cc grpc.ClientConnInterface) ChannelConnectorClient {
	return &channelConnectorClient{cc}
}

func (c *channelConnectorClient) GetIntegration(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Integration, error) {
	out := new(Integration)
	err := c.cc.Invoke(ctx, "/header.ChannelConnector/GetIntegration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelConnectorClient) UpdateIntegration(ctx context.Context, in *Integration, opts ...grpc.CallOption) (*Integration, error) {
	out := new(Integration)
	err := c.cc.Invoke(ctx, "/header.ChannelConnector/UpdateIntegration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChannelConnectorServer is the server API for ChannelConnector service.
type ChannelConnectorServer interface {
	GetIntegration(context.Context, *Id) (*Integration, error)
	UpdateIntegration(context.Context, *Integration) (*Integration, error)
}

// UnimplementedChannelConnectorServer can be embedded to have forward compatible implementations.
type UnimplementedChannelConnectorServer struct {
}

func (*UnimplementedChannelConnectorServer) GetIntegration(context.Context, *Id) (*Integration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntegration not implemented")
}
func (*UnimplementedChannelConnectorServer) UpdateIntegration(context.Context, *Integration) (*Integration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIntegration not implemented")
}

func RegisterChannelConnectorServer(s *grpc.Server, srv ChannelConnectorServer) {
	s.RegisterService(&_ChannelConnector_serviceDesc, srv)
}

func _ChannelConnector_GetIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelConnectorServer).GetIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ChannelConnector/GetIntegration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelConnectorServer).GetIntegration(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelConnector_UpdateIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Integration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelConnectorServer).UpdateIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ChannelConnector/UpdateIntegration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelConnectorServer).UpdateIntegration(ctx, req.(*Integration))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChannelConnector_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.ChannelConnector",
	HandlerType: (*ChannelConnectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIntegration",
			Handler:    _ChannelConnector_GetIntegration_Handler,
		},
		{
			MethodName: "UpdateIntegration",
			Handler:    _ChannelConnector_UpdateIntegration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// ZalokonServiceClient is the client API for ZalokonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ZalokonServiceClient interface {
	SendEventToZalo(ctx context.Context, in *Events, opts ...grpc.CallOption) (*Empty, error)
	ListZnsTemplates(ctx context.Context, in *Id, opts ...grpc.CallOption) (*zalokon.ZnsTemplates, error)
	RequestZaloUserInfo(ctx context.Context, in *ZaloUserRequest, opts ...grpc.CallOption) (*Empty, error)
	RequestZaloUserToMakeCall(ctx context.Context, in *ZaloUserRequest, opts ...grpc.CallOption) (*Empty, error)
	MakeSureZaloUser(ctx context.Context, in *ZaloUserRequest, opts ...grpc.CallOption) (*Empty, error)
	GetZaloUserCallConsent(ctx context.Context, in *ZaloUserRequest, opts ...grpc.CallOption) (*Response, error)
	SendZNS(ctx context.Context, in *ZnsRequest, opts ...grpc.CallOption) (*Event, error)
}

type zalokonServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewZalokonServiceClient(cc grpc.ClientConnInterface) ZalokonServiceClient {
	return &zalokonServiceClient{cc}
}

func (c *zalokonServiceClient) SendEventToZalo(ctx context.Context, in *Events, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.ZalokonService/SendEventToZalo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zalokonServiceClient) ListZnsTemplates(ctx context.Context, in *Id, opts ...grpc.CallOption) (*zalokon.ZnsTemplates, error) {
	out := new(zalokon.ZnsTemplates)
	err := c.cc.Invoke(ctx, "/header.ZalokonService/ListZnsTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zalokonServiceClient) RequestZaloUserInfo(ctx context.Context, in *ZaloUserRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.ZalokonService/RequestZaloUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zalokonServiceClient) RequestZaloUserToMakeCall(ctx context.Context, in *ZaloUserRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.ZalokonService/RequestZaloUserToMakeCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zalokonServiceClient) MakeSureZaloUser(ctx context.Context, in *ZaloUserRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.ZalokonService/MakeSureZaloUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zalokonServiceClient) GetZaloUserCallConsent(ctx context.Context, in *ZaloUserRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/header.ZalokonService/GetZaloUserCallConsent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zalokonServiceClient) SendZNS(ctx context.Context, in *ZnsRequest, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/header.ZalokonService/SendZNS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZalokonServiceServer is the server API for ZalokonService service.
type ZalokonServiceServer interface {
	SendEventToZalo(context.Context, *Events) (*Empty, error)
	ListZnsTemplates(context.Context, *Id) (*zalokon.ZnsTemplates, error)
	RequestZaloUserInfo(context.Context, *ZaloUserRequest) (*Empty, error)
	RequestZaloUserToMakeCall(context.Context, *ZaloUserRequest) (*Empty, error)
	MakeSureZaloUser(context.Context, *ZaloUserRequest) (*Empty, error)
	GetZaloUserCallConsent(context.Context, *ZaloUserRequest) (*Response, error)
	SendZNS(context.Context, *ZnsRequest) (*Event, error)
}

// UnimplementedZalokonServiceServer can be embedded to have forward compatible implementations.
type UnimplementedZalokonServiceServer struct {
}

func (*UnimplementedZalokonServiceServer) SendEventToZalo(context.Context, *Events) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEventToZalo not implemented")
}
func (*UnimplementedZalokonServiceServer) ListZnsTemplates(context.Context, *Id) (*zalokon.ZnsTemplates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListZnsTemplates not implemented")
}
func (*UnimplementedZalokonServiceServer) RequestZaloUserInfo(context.Context, *ZaloUserRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestZaloUserInfo not implemented")
}
func (*UnimplementedZalokonServiceServer) RequestZaloUserToMakeCall(context.Context, *ZaloUserRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestZaloUserToMakeCall not implemented")
}
func (*UnimplementedZalokonServiceServer) MakeSureZaloUser(context.Context, *ZaloUserRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeSureZaloUser not implemented")
}
func (*UnimplementedZalokonServiceServer) GetZaloUserCallConsent(context.Context, *ZaloUserRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetZaloUserCallConsent not implemented")
}
func (*UnimplementedZalokonServiceServer) SendZNS(context.Context, *ZnsRequest) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendZNS not implemented")
}

func RegisterZalokonServiceServer(s *grpc.Server, srv ZalokonServiceServer) {
	s.RegisterService(&_ZalokonService_serviceDesc, srv)
}

func _ZalokonService_SendEventToZalo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Events)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZalokonServiceServer).SendEventToZalo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ZalokonService/SendEventToZalo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZalokonServiceServer).SendEventToZalo(ctx, req.(*Events))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZalokonService_ListZnsTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZalokonServiceServer).ListZnsTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ZalokonService/ListZnsTemplates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZalokonServiceServer).ListZnsTemplates(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZalokonService_RequestZaloUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZaloUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZalokonServiceServer).RequestZaloUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ZalokonService/RequestZaloUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZalokonServiceServer).RequestZaloUserInfo(ctx, req.(*ZaloUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZalokonService_RequestZaloUserToMakeCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZaloUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZalokonServiceServer).RequestZaloUserToMakeCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ZalokonService/RequestZaloUserToMakeCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZalokonServiceServer).RequestZaloUserToMakeCall(ctx, req.(*ZaloUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZalokonService_MakeSureZaloUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZaloUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZalokonServiceServer).MakeSureZaloUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ZalokonService/MakeSureZaloUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZalokonServiceServer).MakeSureZaloUser(ctx, req.(*ZaloUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZalokonService_GetZaloUserCallConsent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZaloUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZalokonServiceServer).GetZaloUserCallConsent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ZalokonService/GetZaloUserCallConsent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZalokonServiceServer).GetZaloUserCallConsent(ctx, req.(*ZaloUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZalokonService_SendZNS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZnsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZalokonServiceServer).SendZNS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ZalokonService/SendZNS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZalokonServiceServer).SendZNS(ctx, req.(*ZnsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ZalokonService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.ZalokonService",
	HandlerType: (*ZalokonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendEventToZalo",
			Handler:    _ZalokonService_SendEventToZalo_Handler,
		},
		{
			MethodName: "ListZnsTemplates",
			Handler:    _ZalokonService_ListZnsTemplates_Handler,
		},
		{
			MethodName: "RequestZaloUserInfo",
			Handler:    _ZalokonService_RequestZaloUserInfo_Handler,
		},
		{
			MethodName: "RequestZaloUserToMakeCall",
			Handler:    _ZalokonService_RequestZaloUserToMakeCall_Handler,
		},
		{
			MethodName: "MakeSureZaloUser",
			Handler:    _ZalokonService_MakeSureZaloUser_Handler,
		},
		{
			MethodName: "GetZaloUserCallConsent",
			Handler:    _ZalokonService_GetZaloUserCallConsent_Handler,
		},
		{
			MethodName: "SendZNS",
			Handler:    _ZalokonService_SendZNS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// MailkonServiceClient is the client API for MailkonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MailkonServiceClient interface {
	SendEmail(ctx context.Context, in *Events, opts ...grpc.CallOption) (*Empty, error)
	CreateEmailIdentity(ctx context.Context, in *Integration, opts ...grpc.CallOption) (*Integration, error)
	DeleteEmailIdentity(ctx context.Context, in *Integration, opts ...grpc.CallOption) (*Empty, error)
	ResendSenderVerificationEmail(ctx context.Context, in *Integration, opts ...grpc.CallOption) (*Empty, error)
	VerifySenderDomain(ctx context.Context, in *Integration, opts ...grpc.CallOption) (*EmailSenderVerificationResult, error)
	ListBusinessEmailAddresses(ctx context.Context, in *Id, opts ...grpc.CallOption) (*BusinessEmailAddresses, error)
	UpsertBusinessEmailAddress(ctx context.Context, in *BusinessEmailAddress, opts ...grpc.CallOption) (*BusinessEmailAddress, error)
	DeleteBusinessEmailAddress(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	TrackLink(ctx context.Context, in *LinkData, opts ...grpc.CallOption) (*Response, error)
	ListBouncedEmails(ctx context.Context, in *BouncedEmail, opts ...grpc.CallOption) (*Response, error)
	UpsertBouncedEmail(ctx context.Context, in *BouncedEmail, opts ...grpc.CallOption) (*BouncedEmail, error)
	DeleteBouncedEmail(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error)
	ListBlockedEmails(ctx context.Context, in *BlockedEmail, opts ...grpc.CallOption) (*Response, error)
	BlockEmail(ctx context.Context, in *BlockedEmail, opts ...grpc.CallOption) (*Response, error)
	UnblockEmail(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error)
}

type mailkonServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMailkonServiceClient(cc grpc.ClientConnInterface) MailkonServiceClient {
	return &mailkonServiceClient{cc}
}

func (c *mailkonServiceClient) SendEmail(ctx context.Context, in *Events, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.MailkonService/SendEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailkonServiceClient) CreateEmailIdentity(ctx context.Context, in *Integration, opts ...grpc.CallOption) (*Integration, error) {
	out := new(Integration)
	err := c.cc.Invoke(ctx, "/header.MailkonService/CreateEmailIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailkonServiceClient) DeleteEmailIdentity(ctx context.Context, in *Integration, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.MailkonService/DeleteEmailIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailkonServiceClient) ResendSenderVerificationEmail(ctx context.Context, in *Integration, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.MailkonService/ResendSenderVerificationEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailkonServiceClient) VerifySenderDomain(ctx context.Context, in *Integration, opts ...grpc.CallOption) (*EmailSenderVerificationResult, error) {
	out := new(EmailSenderVerificationResult)
	err := c.cc.Invoke(ctx, "/header.MailkonService/VerifySenderDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailkonServiceClient) ListBusinessEmailAddresses(ctx context.Context, in *Id, opts ...grpc.CallOption) (*BusinessEmailAddresses, error) {
	out := new(BusinessEmailAddresses)
	err := c.cc.Invoke(ctx, "/header.MailkonService/ListBusinessEmailAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailkonServiceClient) UpsertBusinessEmailAddress(ctx context.Context, in *BusinessEmailAddress, opts ...grpc.CallOption) (*BusinessEmailAddress, error) {
	out := new(BusinessEmailAddress)
	err := c.cc.Invoke(ctx, "/header.MailkonService/UpsertBusinessEmailAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailkonServiceClient) DeleteBusinessEmailAddress(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.MailkonService/DeleteBusinessEmailAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailkonServiceClient) TrackLink(ctx context.Context, in *LinkData, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/header.MailkonService/TrackLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailkonServiceClient) ListBouncedEmails(ctx context.Context, in *BouncedEmail, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/header.MailkonService/ListBouncedEmails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailkonServiceClient) UpsertBouncedEmail(ctx context.Context, in *BouncedEmail, opts ...grpc.CallOption) (*BouncedEmail, error) {
	out := new(BouncedEmail)
	err := c.cc.Invoke(ctx, "/header.MailkonService/UpsertBouncedEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailkonServiceClient) DeleteBouncedEmail(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/header.MailkonService/DeleteBouncedEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailkonServiceClient) ListBlockedEmails(ctx context.Context, in *BlockedEmail, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/header.MailkonService/ListBlockedEmails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailkonServiceClient) BlockEmail(ctx context.Context, in *BlockedEmail, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/header.MailkonService/BlockEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailkonServiceClient) UnblockEmail(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/header.MailkonService/UnblockEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MailkonServiceServer is the server API for MailkonService service.
type MailkonServiceServer interface {
	SendEmail(context.Context, *Events) (*Empty, error)
	CreateEmailIdentity(context.Context, *Integration) (*Integration, error)
	DeleteEmailIdentity(context.Context, *Integration) (*Empty, error)
	ResendSenderVerificationEmail(context.Context, *Integration) (*Empty, error)
	VerifySenderDomain(context.Context, *Integration) (*EmailSenderVerificationResult, error)
	ListBusinessEmailAddresses(context.Context, *Id) (*BusinessEmailAddresses, error)
	UpsertBusinessEmailAddress(context.Context, *BusinessEmailAddress) (*BusinessEmailAddress, error)
	DeleteBusinessEmailAddress(context.Context, *Id) (*Empty, error)
	TrackLink(context.Context, *LinkData) (*Response, error)
	ListBouncedEmails(context.Context, *BouncedEmail) (*Response, error)
	UpsertBouncedEmail(context.Context, *BouncedEmail) (*BouncedEmail, error)
	DeleteBouncedEmail(context.Context, *Id) (*Response, error)
	ListBlockedEmails(context.Context, *BlockedEmail) (*Response, error)
	BlockEmail(context.Context, *BlockedEmail) (*Response, error)
	UnblockEmail(context.Context, *Id) (*Response, error)
}

// UnimplementedMailkonServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMailkonServiceServer struct {
}

func (*UnimplementedMailkonServiceServer) SendEmail(context.Context, *Events) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmail not implemented")
}
func (*UnimplementedMailkonServiceServer) CreateEmailIdentity(context.Context, *Integration) (*Integration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmailIdentity not implemented")
}
func (*UnimplementedMailkonServiceServer) DeleteEmailIdentity(context.Context, *Integration) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmailIdentity not implemented")
}
func (*UnimplementedMailkonServiceServer) ResendSenderVerificationEmail(context.Context, *Integration) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendSenderVerificationEmail not implemented")
}
func (*UnimplementedMailkonServiceServer) VerifySenderDomain(context.Context, *Integration) (*EmailSenderVerificationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifySenderDomain not implemented")
}
func (*UnimplementedMailkonServiceServer) ListBusinessEmailAddresses(context.Context, *Id) (*BusinessEmailAddresses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBusinessEmailAddresses not implemented")
}
func (*UnimplementedMailkonServiceServer) UpsertBusinessEmailAddress(context.Context, *BusinessEmailAddress) (*BusinessEmailAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertBusinessEmailAddress not implemented")
}
func (*UnimplementedMailkonServiceServer) DeleteBusinessEmailAddress(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBusinessEmailAddress not implemented")
}
func (*UnimplementedMailkonServiceServer) TrackLink(context.Context, *LinkData) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackLink not implemented")
}
func (*UnimplementedMailkonServiceServer) ListBouncedEmails(context.Context, *BouncedEmail) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBouncedEmails not implemented")
}
func (*UnimplementedMailkonServiceServer) UpsertBouncedEmail(context.Context, *BouncedEmail) (*BouncedEmail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertBouncedEmail not implemented")
}
func (*UnimplementedMailkonServiceServer) DeleteBouncedEmail(context.Context, *Id) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBouncedEmail not implemented")
}
func (*UnimplementedMailkonServiceServer) ListBlockedEmails(context.Context, *BlockedEmail) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBlockedEmails not implemented")
}
func (*UnimplementedMailkonServiceServer) BlockEmail(context.Context, *BlockedEmail) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockEmail not implemented")
}
func (*UnimplementedMailkonServiceServer) UnblockEmail(context.Context, *Id) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnblockEmail not implemented")
}

func RegisterMailkonServiceServer(s *grpc.Server, srv MailkonServiceServer) {
	s.RegisterService(&_MailkonService_serviceDesc, srv)
}

func _MailkonService_SendEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Events)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailkonServiceServer).SendEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.MailkonService/SendEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailkonServiceServer).SendEmail(ctx, req.(*Events))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailkonService_CreateEmailIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Integration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailkonServiceServer).CreateEmailIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.MailkonService/CreateEmailIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailkonServiceServer).CreateEmailIdentity(ctx, req.(*Integration))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailkonService_DeleteEmailIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Integration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailkonServiceServer).DeleteEmailIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.MailkonService/DeleteEmailIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailkonServiceServer).DeleteEmailIdentity(ctx, req.(*Integration))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailkonService_ResendSenderVerificationEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Integration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailkonServiceServer).ResendSenderVerificationEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.MailkonService/ResendSenderVerificationEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailkonServiceServer).ResendSenderVerificationEmail(ctx, req.(*Integration))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailkonService_VerifySenderDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Integration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailkonServiceServer).VerifySenderDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.MailkonService/VerifySenderDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailkonServiceServer).VerifySenderDomain(ctx, req.(*Integration))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailkonService_ListBusinessEmailAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailkonServiceServer).ListBusinessEmailAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.MailkonService/ListBusinessEmailAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailkonServiceServer).ListBusinessEmailAddresses(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailkonService_UpsertBusinessEmailAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessEmailAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailkonServiceServer).UpsertBusinessEmailAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.MailkonService/UpsertBusinessEmailAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailkonServiceServer).UpsertBusinessEmailAddress(ctx, req.(*BusinessEmailAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailkonService_DeleteBusinessEmailAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailkonServiceServer).DeleteBusinessEmailAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.MailkonService/DeleteBusinessEmailAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailkonServiceServer).DeleteBusinessEmailAddress(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailkonService_TrackLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailkonServiceServer).TrackLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.MailkonService/TrackLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailkonServiceServer).TrackLink(ctx, req.(*LinkData))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailkonService_ListBouncedEmails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BouncedEmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailkonServiceServer).ListBouncedEmails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.MailkonService/ListBouncedEmails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailkonServiceServer).ListBouncedEmails(ctx, req.(*BouncedEmail))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailkonService_UpsertBouncedEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BouncedEmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailkonServiceServer).UpsertBouncedEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.MailkonService/UpsertBouncedEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailkonServiceServer).UpsertBouncedEmail(ctx, req.(*BouncedEmail))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailkonService_DeleteBouncedEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailkonServiceServer).DeleteBouncedEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.MailkonService/DeleteBouncedEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailkonServiceServer).DeleteBouncedEmail(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailkonService_ListBlockedEmails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockedEmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailkonServiceServer).ListBlockedEmails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.MailkonService/ListBlockedEmails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailkonServiceServer).ListBlockedEmails(ctx, req.(*BlockedEmail))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailkonService_BlockEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockedEmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailkonServiceServer).BlockEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.MailkonService/BlockEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailkonServiceServer).BlockEmail(ctx, req.(*BlockedEmail))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailkonService_UnblockEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailkonServiceServer).UnblockEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.MailkonService/UnblockEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailkonServiceServer).UnblockEmail(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _MailkonService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.MailkonService",
	HandlerType: (*MailkonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendEmail",
			Handler:    _MailkonService_SendEmail_Handler,
		},
		{
			MethodName: "CreateEmailIdentity",
			Handler:    _MailkonService_CreateEmailIdentity_Handler,
		},
		{
			MethodName: "DeleteEmailIdentity",
			Handler:    _MailkonService_DeleteEmailIdentity_Handler,
		},
		{
			MethodName: "ResendSenderVerificationEmail",
			Handler:    _MailkonService_ResendSenderVerificationEmail_Handler,
		},
		{
			MethodName: "VerifySenderDomain",
			Handler:    _MailkonService_VerifySenderDomain_Handler,
		},
		{
			MethodName: "ListBusinessEmailAddresses",
			Handler:    _MailkonService_ListBusinessEmailAddresses_Handler,
		},
		{
			MethodName: "UpsertBusinessEmailAddress",
			Handler:    _MailkonService_UpsertBusinessEmailAddress_Handler,
		},
		{
			MethodName: "DeleteBusinessEmailAddress",
			Handler:    _MailkonService_DeleteBusinessEmailAddress_Handler,
		},
		{
			MethodName: "TrackLink",
			Handler:    _MailkonService_TrackLink_Handler,
		},
		{
			MethodName: "ListBouncedEmails",
			Handler:    _MailkonService_ListBouncedEmails_Handler,
		},
		{
			MethodName: "UpsertBouncedEmail",
			Handler:    _MailkonService_UpsertBouncedEmail_Handler,
		},
		{
			MethodName: "DeleteBouncedEmail",
			Handler:    _MailkonService_DeleteBouncedEmail_Handler,
		},
		{
			MethodName: "ListBlockedEmails",
			Handler:    _MailkonService_ListBlockedEmails_Handler,
		},
		{
			MethodName: "BlockEmail",
			Handler:    _MailkonService_BlockEmail_Handler,
		},
		{
			MethodName: "UnblockEmail",
			Handler:    _MailkonService_UnblockEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// WidgetServiceClient is the client API for WidgetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WidgetServiceClient interface {
	Read(ctx context.Context, in *Id, opts ...grpc.CallOption) (*WidgetSetting, error)
	Update(ctx context.Context, in *WidgetSetting, opts ...grpc.CallOption) (*WidgetSetting, error)
	ReadUserSetting(ctx context.Context, in *Id, opts ...grpc.CallOption) (*WidgetUserSetting, error)
	ReadAccountSetting(ctx context.Context, in *Id, opts ...grpc.CallOption) (*AccountWeb, error)
	SubmitImpression(ctx context.Context, in *Impression, opts ...grpc.CallOption) (*Impression, error)
	SubmitConversion(ctx context.Context, in *Conversion, opts ...grpc.CallOption) (*Conversion, error)
	SubmitUserCampaignStatus(ctx context.Context, in *UserCampaignStatus, opts ...grpc.CallOption) (*UserCampaignStatus, error)
	ReportCampaign(ctx context.Context, in *ReportCampaignRequest, opts ...grpc.CallOption) (*ReportCampaignResponse, error)
	ListConversions(ctx context.Context, in *ConversionRequest, opts ...grpc.CallOption) (*Conversions, error)
	ExportConversions(ctx context.Context, in *ConversionRequest, opts ...grpc.CallOption) (*ConversionsExported, error)
	UploadImage(ctx context.Context, in *UploadedImage, opts ...grpc.CallOption) (*UploadedImage, error)
	ListUploadedImage(ctx context.Context, in *Id, opts ...grpc.CallOption) (*UploadedImages, error)
	DeleteUploadedImage(ctx context.Context, in *UploadedImage, opts ...grpc.CallOption) (*Empty, error)
	ListWebPlugins(ctx context.Context, in *Id, opts ...grpc.CallOption) (*WebPlugins, error)
	UpdateWebPlugin(ctx context.Context, in *WebPlugin, opts ...grpc.CallOption) (*WebPlugin, error)
	UpdateWebPluginEnabled(ctx context.Context, in *WebPlugin, opts ...grpc.CallOption) (*WebPlugin, error)
	CreateWebPlugin(ctx context.Context, in *WebPlugin, opts ...grpc.CallOption) (*WebPlugin, error)
	DeleteWebPlugin(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	UpdateWebPluginTemplate(ctx context.Context, in *WebPlugin, opts ...grpc.CallOption) (*WebPlugin, error)
	ListWebPluginTemplates(ctx context.Context, in *Id, opts ...grpc.CallOption) (*WebPlugins, error)
	DeleteWebPluginTemplate(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	ReportWebPlugin(ctx context.Context, in *ReportWebPluginRequest, opts ...grpc.CallOption) (*ReportWebPluginResponse, error)
	SearchImages(ctx context.Context, in *Id, opts ...grpc.CallOption) (*UploadedImages, error)
	ListNotifProfiles(ctx context.Context, in *Id, opts ...grpc.CallOption) (*NotifProfiles, error)
	ListNotifBackgrounds(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Urls, error)
}

type widgetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWidgetServiceClient(cc grpc.ClientConnInterface) WidgetServiceClient {
	return &widgetServiceClient{cc}
}

func (c *widgetServiceClient) Read(ctx context.Context, in *Id, opts ...grpc.CallOption) (*WidgetSetting, error) {
	out := new(WidgetSetting)
	err := c.cc.Invoke(ctx, "/header.WidgetService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) Update(ctx context.Context, in *WidgetSetting, opts ...grpc.CallOption) (*WidgetSetting, error) {
	out := new(WidgetSetting)
	err := c.cc.Invoke(ctx, "/header.WidgetService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) ReadUserSetting(ctx context.Context, in *Id, opts ...grpc.CallOption) (*WidgetUserSetting, error) {
	out := new(WidgetUserSetting)
	err := c.cc.Invoke(ctx, "/header.WidgetService/ReadUserSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) ReadAccountSetting(ctx context.Context, in *Id, opts ...grpc.CallOption) (*AccountWeb, error) {
	out := new(AccountWeb)
	err := c.cc.Invoke(ctx, "/header.WidgetService/ReadAccountSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) SubmitImpression(ctx context.Context, in *Impression, opts ...grpc.CallOption) (*Impression, error) {
	out := new(Impression)
	err := c.cc.Invoke(ctx, "/header.WidgetService/SubmitImpression", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) SubmitConversion(ctx context.Context, in *Conversion, opts ...grpc.CallOption) (*Conversion, error) {
	out := new(Conversion)
	err := c.cc.Invoke(ctx, "/header.WidgetService/SubmitConversion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) SubmitUserCampaignStatus(ctx context.Context, in *UserCampaignStatus, opts ...grpc.CallOption) (*UserCampaignStatus, error) {
	out := new(UserCampaignStatus)
	err := c.cc.Invoke(ctx, "/header.WidgetService/SubmitUserCampaignStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) ReportCampaign(ctx context.Context, in *ReportCampaignRequest, opts ...grpc.CallOption) (*ReportCampaignResponse, error) {
	out := new(ReportCampaignResponse)
	err := c.cc.Invoke(ctx, "/header.WidgetService/ReportCampaign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) ListConversions(ctx context.Context, in *ConversionRequest, opts ...grpc.CallOption) (*Conversions, error) {
	out := new(Conversions)
	err := c.cc.Invoke(ctx, "/header.WidgetService/ListConversions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) ExportConversions(ctx context.Context, in *ConversionRequest, opts ...grpc.CallOption) (*ConversionsExported, error) {
	out := new(ConversionsExported)
	err := c.cc.Invoke(ctx, "/header.WidgetService/ExportConversions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) UploadImage(ctx context.Context, in *UploadedImage, opts ...grpc.CallOption) (*UploadedImage, error) {
	out := new(UploadedImage)
	err := c.cc.Invoke(ctx, "/header.WidgetService/UploadImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) ListUploadedImage(ctx context.Context, in *Id, opts ...grpc.CallOption) (*UploadedImages, error) {
	out := new(UploadedImages)
	err := c.cc.Invoke(ctx, "/header.WidgetService/ListUploadedImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) DeleteUploadedImage(ctx context.Context, in *UploadedImage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.WidgetService/DeleteUploadedImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) ListWebPlugins(ctx context.Context, in *Id, opts ...grpc.CallOption) (*WebPlugins, error) {
	out := new(WebPlugins)
	err := c.cc.Invoke(ctx, "/header.WidgetService/ListWebPlugins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) UpdateWebPlugin(ctx context.Context, in *WebPlugin, opts ...grpc.CallOption) (*WebPlugin, error) {
	out := new(WebPlugin)
	err := c.cc.Invoke(ctx, "/header.WidgetService/UpdateWebPlugin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) UpdateWebPluginEnabled(ctx context.Context, in *WebPlugin, opts ...grpc.CallOption) (*WebPlugin, error) {
	out := new(WebPlugin)
	err := c.cc.Invoke(ctx, "/header.WidgetService/UpdateWebPluginEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) CreateWebPlugin(ctx context.Context, in *WebPlugin, opts ...grpc.CallOption) (*WebPlugin, error) {
	out := new(WebPlugin)
	err := c.cc.Invoke(ctx, "/header.WidgetService/CreateWebPlugin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) DeleteWebPlugin(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.WidgetService/DeleteWebPlugin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) UpdateWebPluginTemplate(ctx context.Context, in *WebPlugin, opts ...grpc.CallOption) (*WebPlugin, error) {
	out := new(WebPlugin)
	err := c.cc.Invoke(ctx, "/header.WidgetService/UpdateWebPluginTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) ListWebPluginTemplates(ctx context.Context, in *Id, opts ...grpc.CallOption) (*WebPlugins, error) {
	out := new(WebPlugins)
	err := c.cc.Invoke(ctx, "/header.WidgetService/ListWebPluginTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) DeleteWebPluginTemplate(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.WidgetService/DeleteWebPluginTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) ReportWebPlugin(ctx context.Context, in *ReportWebPluginRequest, opts ...grpc.CallOption) (*ReportWebPluginResponse, error) {
	out := new(ReportWebPluginResponse)
	err := c.cc.Invoke(ctx, "/header.WidgetService/ReportWebPlugin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) SearchImages(ctx context.Context, in *Id, opts ...grpc.CallOption) (*UploadedImages, error) {
	out := new(UploadedImages)
	err := c.cc.Invoke(ctx, "/header.WidgetService/SearchImages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) ListNotifProfiles(ctx context.Context, in *Id, opts ...grpc.CallOption) (*NotifProfiles, error) {
	out := new(NotifProfiles)
	err := c.cc.Invoke(ctx, "/header.WidgetService/ListNotifProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) ListNotifBackgrounds(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Urls, error) {
	out := new(Urls)
	err := c.cc.Invoke(ctx, "/header.WidgetService/ListNotifBackgrounds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WidgetServiceServer is the server API for WidgetService service.
type WidgetServiceServer interface {
	Read(context.Context, *Id) (*WidgetSetting, error)
	Update(context.Context, *WidgetSetting) (*WidgetSetting, error)
	ReadUserSetting(context.Context, *Id) (*WidgetUserSetting, error)
	ReadAccountSetting(context.Context, *Id) (*AccountWeb, error)
	SubmitImpression(context.Context, *Impression) (*Impression, error)
	SubmitConversion(context.Context, *Conversion) (*Conversion, error)
	SubmitUserCampaignStatus(context.Context, *UserCampaignStatus) (*UserCampaignStatus, error)
	ReportCampaign(context.Context, *ReportCampaignRequest) (*ReportCampaignResponse, error)
	ListConversions(context.Context, *ConversionRequest) (*Conversions, error)
	ExportConversions(context.Context, *ConversionRequest) (*ConversionsExported, error)
	UploadImage(context.Context, *UploadedImage) (*UploadedImage, error)
	ListUploadedImage(context.Context, *Id) (*UploadedImages, error)
	DeleteUploadedImage(context.Context, *UploadedImage) (*Empty, error)
	ListWebPlugins(context.Context, *Id) (*WebPlugins, error)
	UpdateWebPlugin(context.Context, *WebPlugin) (*WebPlugin, error)
	UpdateWebPluginEnabled(context.Context, *WebPlugin) (*WebPlugin, error)
	CreateWebPlugin(context.Context, *WebPlugin) (*WebPlugin, error)
	DeleteWebPlugin(context.Context, *Id) (*Empty, error)
	UpdateWebPluginTemplate(context.Context, *WebPlugin) (*WebPlugin, error)
	ListWebPluginTemplates(context.Context, *Id) (*WebPlugins, error)
	DeleteWebPluginTemplate(context.Context, *Id) (*Empty, error)
	ReportWebPlugin(context.Context, *ReportWebPluginRequest) (*ReportWebPluginResponse, error)
	SearchImages(context.Context, *Id) (*UploadedImages, error)
	ListNotifProfiles(context.Context, *Id) (*NotifProfiles, error)
	ListNotifBackgrounds(context.Context, *Id) (*Urls, error)
}

// UnimplementedWidgetServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWidgetServiceServer struct {
}

func (*UnimplementedWidgetServiceServer) Read(context.Context, *Id) (*WidgetSetting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (*UnimplementedWidgetServiceServer) Update(context.Context, *WidgetSetting) (*WidgetSetting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedWidgetServiceServer) ReadUserSetting(context.Context, *Id) (*WidgetUserSetting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadUserSetting not implemented")
}
func (*UnimplementedWidgetServiceServer) ReadAccountSetting(context.Context, *Id) (*AccountWeb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAccountSetting not implemented")
}
func (*UnimplementedWidgetServiceServer) SubmitImpression(context.Context, *Impression) (*Impression, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitImpression not implemented")
}
func (*UnimplementedWidgetServiceServer) SubmitConversion(context.Context, *Conversion) (*Conversion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitConversion not implemented")
}
func (*UnimplementedWidgetServiceServer) SubmitUserCampaignStatus(context.Context, *UserCampaignStatus) (*UserCampaignStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitUserCampaignStatus not implemented")
}
func (*UnimplementedWidgetServiceServer) ReportCampaign(context.Context, *ReportCampaignRequest) (*ReportCampaignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportCampaign not implemented")
}
func (*UnimplementedWidgetServiceServer) ListConversions(context.Context, *ConversionRequest) (*Conversions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConversions not implemented")
}
func (*UnimplementedWidgetServiceServer) ExportConversions(context.Context, *ConversionRequest) (*ConversionsExported, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportConversions not implemented")
}
func (*UnimplementedWidgetServiceServer) UploadImage(context.Context, *UploadedImage) (*UploadedImage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}
func (*UnimplementedWidgetServiceServer) ListUploadedImage(context.Context, *Id) (*UploadedImages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUploadedImage not implemented")
}
func (*UnimplementedWidgetServiceServer) DeleteUploadedImage(context.Context, *UploadedImage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUploadedImage not implemented")
}
func (*UnimplementedWidgetServiceServer) ListWebPlugins(context.Context, *Id) (*WebPlugins, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWebPlugins not implemented")
}
func (*UnimplementedWidgetServiceServer) UpdateWebPlugin(context.Context, *WebPlugin) (*WebPlugin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWebPlugin not implemented")
}
func (*UnimplementedWidgetServiceServer) UpdateWebPluginEnabled(context.Context, *WebPlugin) (*WebPlugin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWebPluginEnabled not implemented")
}
func (*UnimplementedWidgetServiceServer) CreateWebPlugin(context.Context, *WebPlugin) (*WebPlugin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWebPlugin not implemented")
}
func (*UnimplementedWidgetServiceServer) DeleteWebPlugin(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWebPlugin not implemented")
}
func (*UnimplementedWidgetServiceServer) UpdateWebPluginTemplate(context.Context, *WebPlugin) (*WebPlugin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWebPluginTemplate not implemented")
}
func (*UnimplementedWidgetServiceServer) ListWebPluginTemplates(context.Context, *Id) (*WebPlugins, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWebPluginTemplates not implemented")
}
func (*UnimplementedWidgetServiceServer) DeleteWebPluginTemplate(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWebPluginTemplate not implemented")
}
func (*UnimplementedWidgetServiceServer) ReportWebPlugin(context.Context, *ReportWebPluginRequest) (*ReportWebPluginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportWebPlugin not implemented")
}
func (*UnimplementedWidgetServiceServer) SearchImages(context.Context, *Id) (*UploadedImages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchImages not implemented")
}
func (*UnimplementedWidgetServiceServer) ListNotifProfiles(context.Context, *Id) (*NotifProfiles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNotifProfiles not implemented")
}
func (*UnimplementedWidgetServiceServer) ListNotifBackgrounds(context.Context, *Id) (*Urls, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNotifBackgrounds not implemented")
}

func RegisterWidgetServiceServer(s *grpc.Server, srv WidgetServiceServer) {
	s.RegisterService(&_WidgetService_serviceDesc, srv)
}

func _WidgetService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).Read(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WidgetSetting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).Update(ctx, req.(*WidgetSetting))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_ReadUserSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).ReadUserSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/ReadUserSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).ReadUserSetting(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_ReadAccountSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).ReadAccountSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/ReadAccountSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).ReadAccountSetting(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_SubmitImpression_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Impression)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).SubmitImpression(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/SubmitImpression",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).SubmitImpression(ctx, req.(*Impression))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_SubmitConversion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Conversion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).SubmitConversion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/SubmitConversion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).SubmitConversion(ctx, req.(*Conversion))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_SubmitUserCampaignStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCampaignStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).SubmitUserCampaignStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/SubmitUserCampaignStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).SubmitUserCampaignStatus(ctx, req.(*UserCampaignStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_ReportCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportCampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).ReportCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/ReportCampaign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).ReportCampaign(ctx, req.(*ReportCampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_ListConversions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).ListConversions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/ListConversions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).ListConversions(ctx, req.(*ConversionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_ExportConversions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).ExportConversions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/ExportConversions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).ExportConversions(ctx, req.(*ConversionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_UploadImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadedImage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).UploadImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/UploadImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).UploadImage(ctx, req.(*UploadedImage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_ListUploadedImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).ListUploadedImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/ListUploadedImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).ListUploadedImage(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_DeleteUploadedImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadedImage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).DeleteUploadedImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/DeleteUploadedImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).DeleteUploadedImage(ctx, req.(*UploadedImage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_ListWebPlugins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).ListWebPlugins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/ListWebPlugins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).ListWebPlugins(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_UpdateWebPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebPlugin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).UpdateWebPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/UpdateWebPlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).UpdateWebPlugin(ctx, req.(*WebPlugin))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_UpdateWebPluginEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebPlugin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).UpdateWebPluginEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/UpdateWebPluginEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).UpdateWebPluginEnabled(ctx, req.(*WebPlugin))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_CreateWebPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebPlugin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).CreateWebPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/CreateWebPlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).CreateWebPlugin(ctx, req.(*WebPlugin))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_DeleteWebPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).DeleteWebPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/DeleteWebPlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).DeleteWebPlugin(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_UpdateWebPluginTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebPlugin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).UpdateWebPluginTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/UpdateWebPluginTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).UpdateWebPluginTemplate(ctx, req.(*WebPlugin))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_ListWebPluginTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).ListWebPluginTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/ListWebPluginTemplates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).ListWebPluginTemplates(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_DeleteWebPluginTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).DeleteWebPluginTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/DeleteWebPluginTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).DeleteWebPluginTemplate(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_ReportWebPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportWebPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).ReportWebPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/ReportWebPlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).ReportWebPlugin(ctx, req.(*ReportWebPluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_SearchImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).SearchImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/SearchImages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).SearchImages(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_ListNotifProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).ListNotifProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/ListNotifProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).ListNotifProfiles(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_ListNotifBackgrounds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).ListNotifBackgrounds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/ListNotifBackgrounds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).ListNotifBackgrounds(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _WidgetService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.WidgetService",
	HandlerType: (*WidgetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Read",
			Handler:    _WidgetService_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _WidgetService_Update_Handler,
		},
		{
			MethodName: "ReadUserSetting",
			Handler:    _WidgetService_ReadUserSetting_Handler,
		},
		{
			MethodName: "ReadAccountSetting",
			Handler:    _WidgetService_ReadAccountSetting_Handler,
		},
		{
			MethodName: "SubmitImpression",
			Handler:    _WidgetService_SubmitImpression_Handler,
		},
		{
			MethodName: "SubmitConversion",
			Handler:    _WidgetService_SubmitConversion_Handler,
		},
		{
			MethodName: "SubmitUserCampaignStatus",
			Handler:    _WidgetService_SubmitUserCampaignStatus_Handler,
		},
		{
			MethodName: "ReportCampaign",
			Handler:    _WidgetService_ReportCampaign_Handler,
		},
		{
			MethodName: "ListConversions",
			Handler:    _WidgetService_ListConversions_Handler,
		},
		{
			MethodName: "ExportConversions",
			Handler:    _WidgetService_ExportConversions_Handler,
		},
		{
			MethodName: "UploadImage",
			Handler:    _WidgetService_UploadImage_Handler,
		},
		{
			MethodName: "ListUploadedImage",
			Handler:    _WidgetService_ListUploadedImage_Handler,
		},
		{
			MethodName: "DeleteUploadedImage",
			Handler:    _WidgetService_DeleteUploadedImage_Handler,
		},
		{
			MethodName: "ListWebPlugins",
			Handler:    _WidgetService_ListWebPlugins_Handler,
		},
		{
			MethodName: "UpdateWebPlugin",
			Handler:    _WidgetService_UpdateWebPlugin_Handler,
		},
		{
			MethodName: "UpdateWebPluginEnabled",
			Handler:    _WidgetService_UpdateWebPluginEnabled_Handler,
		},
		{
			MethodName: "CreateWebPlugin",
			Handler:    _WidgetService_CreateWebPlugin_Handler,
		},
		{
			MethodName: "DeleteWebPlugin",
			Handler:    _WidgetService_DeleteWebPlugin_Handler,
		},
		{
			MethodName: "UpdateWebPluginTemplate",
			Handler:    _WidgetService_UpdateWebPluginTemplate_Handler,
		},
		{
			MethodName: "ListWebPluginTemplates",
			Handler:    _WidgetService_ListWebPluginTemplates_Handler,
		},
		{
			MethodName: "DeleteWebPluginTemplate",
			Handler:    _WidgetService_DeleteWebPluginTemplate_Handler,
		},
		{
			MethodName: "ReportWebPlugin",
			Handler:    _WidgetService_ReportWebPlugin_Handler,
		},
		{
			MethodName: "SearchImages",
			Handler:    _WidgetService_SearchImages_Handler,
		},
		{
			MethodName: "ListNotifProfiles",
			Handler:    _WidgetService_ListNotifProfiles_Handler,
		},
		{
			MethodName: "ListNotifBackgrounds",
			Handler:    _WidgetService_ListNotifBackgrounds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// BizbotClient is the client API for Bizbot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BizbotClient interface {
	ListBots(ctx context.Context, in *BotsRequest, opts ...grpc.CallOption) (*Bots, error)
	GetBot(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Bot, error)
	UpdateBotRunState(ctx context.Context, in *Bot, opts ...grpc.CallOption) (*Bot, error)
	CreateBot(ctx context.Context, in *Bot, opts ...grpc.CallOption) (*Bot, error)
	UpdateBot(ctx context.Context, in *Bot, opts ...grpc.CallOption) (*Bot, error)
	DeleteBot(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	OnEvent(ctx context.Context, in *BotRunRequest, opts ...grpc.CallOption) (*Empty, error)
	StartBot(ctx context.Context, in *BotRunRequest, opts ...grpc.CallOption) (*Empty, error)
	StopBot(ctx context.Context, in *BotRunRequest, opts ...grpc.CallOption) (*Empty, error)
	TryAction(ctx context.Context, in *BotRunRequest, opts ...grpc.CallOption) (*Empty, error)
	ReportBot2(ctx context.Context, in *BotrunMetricsRequest, opts ...grpc.CallOption) (*BotrunMetrics, error)
	ReportAction(ctx context.Context, in *ActionrunMetricsRequest, opts ...grpc.CallOption) (*ActionrunMetrics, error)
	ListObjects(ctx context.Context, in *ListObjectsRequest, opts ...grpc.CallOption) (*ListObjectsResponse, error)
	ReportBot(ctx context.Context, in *ReportBotRequest, opts ...grpc.CallOption) (*ReportBotResponse, error)
}

type bizbotClient struct {
	cc grpc.ClientConnInterface
}

func NewBizbotClient(cc grpc.ClientConnInterface) BizbotClient {
	return &bizbotClient{cc}
}

func (c *bizbotClient) ListBots(ctx context.Context, in *BotsRequest, opts ...grpc.CallOption) (*Bots, error) {
	out := new(Bots)
	err := c.cc.Invoke(ctx, "/header.Bizbot/ListBots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizbotClient) GetBot(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Bot, error) {
	out := new(Bot)
	err := c.cc.Invoke(ctx, "/header.Bizbot/GetBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizbotClient) UpdateBotRunState(ctx context.Context, in *Bot, opts ...grpc.CallOption) (*Bot, error) {
	out := new(Bot)
	err := c.cc.Invoke(ctx, "/header.Bizbot/UpdateBotRunState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizbotClient) CreateBot(ctx context.Context, in *Bot, opts ...grpc.CallOption) (*Bot, error) {
	out := new(Bot)
	err := c.cc.Invoke(ctx, "/header.Bizbot/CreateBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizbotClient) UpdateBot(ctx context.Context, in *Bot, opts ...grpc.CallOption) (*Bot, error) {
	out := new(Bot)
	err := c.cc.Invoke(ctx, "/header.Bizbot/UpdateBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizbotClient) DeleteBot(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Bizbot/DeleteBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizbotClient) OnEvent(ctx context.Context, in *BotRunRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Bizbot/OnEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizbotClient) StartBot(ctx context.Context, in *BotRunRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Bizbot/StartBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizbotClient) StopBot(ctx context.Context, in *BotRunRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Bizbot/StopBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizbotClient) TryAction(ctx context.Context, in *BotRunRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Bizbot/TryAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizbotClient) ReportBot2(ctx context.Context, in *BotrunMetricsRequest, opts ...grpc.CallOption) (*BotrunMetrics, error) {
	out := new(BotrunMetrics)
	err := c.cc.Invoke(ctx, "/header.Bizbot/ReportBot2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizbotClient) ReportAction(ctx context.Context, in *ActionrunMetricsRequest, opts ...grpc.CallOption) (*ActionrunMetrics, error) {
	out := new(ActionrunMetrics)
	err := c.cc.Invoke(ctx, "/header.Bizbot/ReportAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizbotClient) ListObjects(ctx context.Context, in *ListObjectsRequest, opts ...grpc.CallOption) (*ListObjectsResponse, error) {
	out := new(ListObjectsResponse)
	err := c.cc.Invoke(ctx, "/header.Bizbot/ListObjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizbotClient) ReportBot(ctx context.Context, in *ReportBotRequest, opts ...grpc.CallOption) (*ReportBotResponse, error) {
	out := new(ReportBotResponse)
	err := c.cc.Invoke(ctx, "/header.Bizbot/ReportBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BizbotServer is the server API for Bizbot service.
type BizbotServer interface {
	ListBots(context.Context, *BotsRequest) (*Bots, error)
	GetBot(context.Context, *Id) (*Bot, error)
	UpdateBotRunState(context.Context, *Bot) (*Bot, error)
	CreateBot(context.Context, *Bot) (*Bot, error)
	UpdateBot(context.Context, *Bot) (*Bot, error)
	DeleteBot(context.Context, *Id) (*Empty, error)
	OnEvent(context.Context, *BotRunRequest) (*Empty, error)
	StartBot(context.Context, *BotRunRequest) (*Empty, error)
	StopBot(context.Context, *BotRunRequest) (*Empty, error)
	TryAction(context.Context, *BotRunRequest) (*Empty, error)
	ReportBot2(context.Context, *BotrunMetricsRequest) (*BotrunMetrics, error)
	ReportAction(context.Context, *ActionrunMetricsRequest) (*ActionrunMetrics, error)
	ListObjects(context.Context, *ListObjectsRequest) (*ListObjectsResponse, error)
	ReportBot(context.Context, *ReportBotRequest) (*ReportBotResponse, error)
}

// UnimplementedBizbotServer can be embedded to have forward compatible implementations.
type UnimplementedBizbotServer struct {
}

func (*UnimplementedBizbotServer) ListBots(context.Context, *BotsRequest) (*Bots, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBots not implemented")
}
func (*UnimplementedBizbotServer) GetBot(context.Context, *Id) (*Bot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBot not implemented")
}
func (*UnimplementedBizbotServer) UpdateBotRunState(context.Context, *Bot) (*Bot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBotRunState not implemented")
}
func (*UnimplementedBizbotServer) CreateBot(context.Context, *Bot) (*Bot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBot not implemented")
}
func (*UnimplementedBizbotServer) UpdateBot(context.Context, *Bot) (*Bot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBot not implemented")
}
func (*UnimplementedBizbotServer) DeleteBot(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBot not implemented")
}
func (*UnimplementedBizbotServer) OnEvent(context.Context, *BotRunRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnEvent not implemented")
}
func (*UnimplementedBizbotServer) StartBot(context.Context, *BotRunRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartBot not implemented")
}
func (*UnimplementedBizbotServer) StopBot(context.Context, *BotRunRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopBot not implemented")
}
func (*UnimplementedBizbotServer) TryAction(context.Context, *BotRunRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TryAction not implemented")
}
func (*UnimplementedBizbotServer) ReportBot2(context.Context, *BotrunMetricsRequest) (*BotrunMetrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportBot2 not implemented")
}
func (*UnimplementedBizbotServer) ReportAction(context.Context, *ActionrunMetricsRequest) (*ActionrunMetrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportAction not implemented")
}
func (*UnimplementedBizbotServer) ListObjects(context.Context, *ListObjectsRequest) (*ListObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListObjects not implemented")
}
func (*UnimplementedBizbotServer) ReportBot(context.Context, *ReportBotRequest) (*ReportBotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportBot not implemented")
}

func RegisterBizbotServer(s *grpc.Server, srv BizbotServer) {
	s.RegisterService(&_Bizbot_serviceDesc, srv)
}

func _Bizbot_ListBots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizbotServer).ListBots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Bizbot/ListBots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizbotServer).ListBots(ctx, req.(*BotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bizbot_GetBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizbotServer).GetBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Bizbot/GetBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizbotServer).GetBot(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bizbot_UpdateBotRunState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizbotServer).UpdateBotRunState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Bizbot/UpdateBotRunState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizbotServer).UpdateBotRunState(ctx, req.(*Bot))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bizbot_CreateBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizbotServer).CreateBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Bizbot/CreateBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizbotServer).CreateBot(ctx, req.(*Bot))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bizbot_UpdateBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizbotServer).UpdateBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Bizbot/UpdateBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizbotServer).UpdateBot(ctx, req.(*Bot))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bizbot_DeleteBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizbotServer).DeleteBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Bizbot/DeleteBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizbotServer).DeleteBot(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bizbot_OnEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizbotServer).OnEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Bizbot/OnEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizbotServer).OnEvent(ctx, req.(*BotRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bizbot_StartBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizbotServer).StartBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Bizbot/StartBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizbotServer).StartBot(ctx, req.(*BotRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bizbot_StopBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizbotServer).StopBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Bizbot/StopBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizbotServer).StopBot(ctx, req.(*BotRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bizbot_TryAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizbotServer).TryAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Bizbot/TryAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizbotServer).TryAction(ctx, req.(*BotRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bizbot_ReportBot2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotrunMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizbotServer).ReportBot2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Bizbot/ReportBot2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizbotServer).ReportBot2(ctx, req.(*BotrunMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bizbot_ReportAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionrunMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizbotServer).ReportAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Bizbot/ReportAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizbotServer).ReportAction(ctx, req.(*ActionrunMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bizbot_ListObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizbotServer).ListObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Bizbot/ListObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizbotServer).ListObjects(ctx, req.(*ListObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bizbot_ReportBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportBotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizbotServer).ReportBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Bizbot/ReportBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizbotServer).ReportBot(ctx, req.(*ReportBotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Bizbot_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.Bizbot",
	HandlerType: (*BizbotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBots",
			Handler:    _Bizbot_ListBots_Handler,
		},
		{
			MethodName: "GetBot",
			Handler:    _Bizbot_GetBot_Handler,
		},
		{
			MethodName: "UpdateBotRunState",
			Handler:    _Bizbot_UpdateBotRunState_Handler,
		},
		{
			MethodName: "CreateBot",
			Handler:    _Bizbot_CreateBot_Handler,
		},
		{
			MethodName: "UpdateBot",
			Handler:    _Bizbot_UpdateBot_Handler,
		},
		{
			MethodName: "DeleteBot",
			Handler:    _Bizbot_DeleteBot_Handler,
		},
		{
			MethodName: "OnEvent",
			Handler:    _Bizbot_OnEvent_Handler,
		},
		{
			MethodName: "StartBot",
			Handler:    _Bizbot_StartBot_Handler,
		},
		{
			MethodName: "StopBot",
			Handler:    _Bizbot_StopBot_Handler,
		},
		{
			MethodName: "TryAction",
			Handler:    _Bizbot_TryAction_Handler,
		},
		{
			MethodName: "ReportBot2",
			Handler:    _Bizbot_ReportBot2_Handler,
		},
		{
			MethodName: "ReportAction",
			Handler:    _Bizbot_ReportAction_Handler,
		},
		{
			MethodName: "ListObjects",
			Handler:    _Bizbot_ListObjects_Handler,
		},
		{
			MethodName: "ReportBot",
			Handler:    _Bizbot_ReportBot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// SendbackClient is the client API for Sendback service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SendbackClient interface {
	CreateWebhook(ctx context.Context, in *Webhook, opts ...grpc.CallOption) (*Webhook, error)
	PingWebhook(ctx context.Context, in *Id, opts ...grpc.CallOption) (*WebhookTestResult, error)
	DeleteWebhook(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	ListWebhooks(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Webhooks, error)
	ReadWebhook(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Webhook, error)
	UpdateWebhook(ctx context.Context, in *Webhook, opts ...grpc.CallOption) (*Webhook, error)
	UpdateWebhookSecret(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Webhook, error)
	ListRecentIndexDeliveries(ctx context.Context, in *RecentIndexDeliveryRequest, opts ...grpc.CallOption) (*WebhookDeliveries, error)
	GetDelivery(ctx context.Context, in *DeliveryRequest, opts ...grpc.CallOption) (*WebhookDelivery, error)
	SendWebhookEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Empty, error)
}

type sendbackClient struct {
	cc grpc.ClientConnInterface
}

func NewSendbackClient(cc grpc.ClientConnInterface) SendbackClient {
	return &sendbackClient{cc}
}

func (c *sendbackClient) CreateWebhook(ctx context.Context, in *Webhook, opts ...grpc.CallOption) (*Webhook, error) {
	out := new(Webhook)
	err := c.cc.Invoke(ctx, "/header.Sendback/CreateWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendbackClient) PingWebhook(ctx context.Context, in *Id, opts ...grpc.CallOption) (*WebhookTestResult, error) {
	out := new(WebhookTestResult)
	err := c.cc.Invoke(ctx, "/header.Sendback/PingWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendbackClient) DeleteWebhook(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Sendback/DeleteWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendbackClient) ListWebhooks(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Webhooks, error) {
	out := new(Webhooks)
	err := c.cc.Invoke(ctx, "/header.Sendback/ListWebhooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendbackClient) ReadWebhook(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Webhook, error) {
	out := new(Webhook)
	err := c.cc.Invoke(ctx, "/header.Sendback/ReadWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendbackClient) UpdateWebhook(ctx context.Context, in *Webhook, opts ...grpc.CallOption) (*Webhook, error) {
	out := new(Webhook)
	err := c.cc.Invoke(ctx, "/header.Sendback/UpdateWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendbackClient) UpdateWebhookSecret(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Webhook, error) {
	out := new(Webhook)
	err := c.cc.Invoke(ctx, "/header.Sendback/UpdateWebhookSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendbackClient) ListRecentIndexDeliveries(ctx context.Context, in *RecentIndexDeliveryRequest, opts ...grpc.CallOption) (*WebhookDeliveries, error) {
	out := new(WebhookDeliveries)
	err := c.cc.Invoke(ctx, "/header.Sendback/ListRecentIndexDeliveries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendbackClient) GetDelivery(ctx context.Context, in *DeliveryRequest, opts ...grpc.CallOption) (*WebhookDelivery, error) {
	out := new(WebhookDelivery)
	err := c.cc.Invoke(ctx, "/header.Sendback/GetDelivery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendbackClient) SendWebhookEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Sendback/SendWebhookEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SendbackServer is the server API for Sendback service.
type SendbackServer interface {
	CreateWebhook(context.Context, *Webhook) (*Webhook, error)
	PingWebhook(context.Context, *Id) (*WebhookTestResult, error)
	DeleteWebhook(context.Context, *Id) (*Empty, error)
	ListWebhooks(context.Context, *Id) (*Webhooks, error)
	ReadWebhook(context.Context, *Id) (*Webhook, error)
	UpdateWebhook(context.Context, *Webhook) (*Webhook, error)
	UpdateWebhookSecret(context.Context, *Id) (*Webhook, error)
	ListRecentIndexDeliveries(context.Context, *RecentIndexDeliveryRequest) (*WebhookDeliveries, error)
	GetDelivery(context.Context, *DeliveryRequest) (*WebhookDelivery, error)
	SendWebhookEvent(context.Context, *Event) (*Empty, error)
}

// UnimplementedSendbackServer can be embedded to have forward compatible implementations.
type UnimplementedSendbackServer struct {
}

func (*UnimplementedSendbackServer) CreateWebhook(context.Context, *Webhook) (*Webhook, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWebhook not implemented")
}
func (*UnimplementedSendbackServer) PingWebhook(context.Context, *Id) (*WebhookTestResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingWebhook not implemented")
}
func (*UnimplementedSendbackServer) DeleteWebhook(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWebhook not implemented")
}
func (*UnimplementedSendbackServer) ListWebhooks(context.Context, *Id) (*Webhooks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWebhooks not implemented")
}
func (*UnimplementedSendbackServer) ReadWebhook(context.Context, *Id) (*Webhook, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadWebhook not implemented")
}
func (*UnimplementedSendbackServer) UpdateWebhook(context.Context, *Webhook) (*Webhook, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWebhook not implemented")
}
func (*UnimplementedSendbackServer) UpdateWebhookSecret(context.Context, *Id) (*Webhook, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWebhookSecret not implemented")
}
func (*UnimplementedSendbackServer) ListRecentIndexDeliveries(context.Context, *RecentIndexDeliveryRequest) (*WebhookDeliveries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecentIndexDeliveries not implemented")
}
func (*UnimplementedSendbackServer) GetDelivery(context.Context, *DeliveryRequest) (*WebhookDelivery, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelivery not implemented")
}
func (*UnimplementedSendbackServer) SendWebhookEvent(context.Context, *Event) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendWebhookEvent not implemented")
}

func RegisterSendbackServer(s *grpc.Server, srv SendbackServer) {
	s.RegisterService(&_Sendback_serviceDesc, srv)
}

func _Sendback_CreateWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Webhook)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendbackServer).CreateWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Sendback/CreateWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendbackServer).CreateWebhook(ctx, req.(*Webhook))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sendback_PingWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendbackServer).PingWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Sendback/PingWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendbackServer).PingWebhook(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sendback_DeleteWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendbackServer).DeleteWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Sendback/DeleteWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendbackServer).DeleteWebhook(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sendback_ListWebhooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendbackServer).ListWebhooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Sendback/ListWebhooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendbackServer).ListWebhooks(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sendback_ReadWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendbackServer).ReadWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Sendback/ReadWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendbackServer).ReadWebhook(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sendback_UpdateWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Webhook)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendbackServer).UpdateWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Sendback/UpdateWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendbackServer).UpdateWebhook(ctx, req.(*Webhook))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sendback_UpdateWebhookSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendbackServer).UpdateWebhookSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Sendback/UpdateWebhookSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendbackServer).UpdateWebhookSecret(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sendback_ListRecentIndexDeliveries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecentIndexDeliveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendbackServer).ListRecentIndexDeliveries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Sendback/ListRecentIndexDeliveries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendbackServer).ListRecentIndexDeliveries(ctx, req.(*RecentIndexDeliveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sendback_GetDelivery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendbackServer).GetDelivery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Sendback/GetDelivery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendbackServer).GetDelivery(ctx, req.(*DeliveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sendback_SendWebhookEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendbackServer).SendWebhookEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Sendback/SendWebhookEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendbackServer).SendWebhookEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

var _Sendback_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.Sendback",
	HandlerType: (*SendbackServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWebhook",
			Handler:    _Sendback_CreateWebhook_Handler,
		},
		{
			MethodName: "PingWebhook",
			Handler:    _Sendback_PingWebhook_Handler,
		},
		{
			MethodName: "DeleteWebhook",
			Handler:    _Sendback_DeleteWebhook_Handler,
		},
		{
			MethodName: "ListWebhooks",
			Handler:    _Sendback_ListWebhooks_Handler,
		},
		{
			MethodName: "ReadWebhook",
			Handler:    _Sendback_ReadWebhook_Handler,
		},
		{
			MethodName: "UpdateWebhook",
			Handler:    _Sendback_UpdateWebhook_Handler,
		},
		{
			MethodName: "UpdateWebhookSecret",
			Handler:    _Sendback_UpdateWebhookSecret_Handler,
		},
		{
			MethodName: "ListRecentIndexDeliveries",
			Handler:    _Sendback_ListRecentIndexDeliveries_Handler,
		},
		{
			MethodName: "GetDelivery",
			Handler:    _Sendback_GetDelivery_Handler,
		},
		{
			MethodName: "SendWebhookEvent",
			Handler:    _Sendback_SendWebhookEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// NotiboxClient is the client API for Notibox service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NotiboxClient interface {
	SendNoti(ctx context.Context, in *Notification, opts ...grpc.CallOption) (*Empty, error)
	ListNoties(ctx context.Context, in *ListNotiRequest, opts ...grpc.CallOption) (*Notifications, error)
	MarkReadNoti(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	MarkReadNotiTopic(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
}

type notiboxClient struct {
	cc grpc.ClientConnInterface
}

func NewNotiboxClient(cc grpc.ClientConnInterface) NotiboxClient {
	return &notiboxClient{cc}
}

func (c *notiboxClient) SendNoti(ctx context.Context, in *Notification, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Notibox/SendNoti", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notiboxClient) ListNoties(ctx context.Context, in *ListNotiRequest, opts ...grpc.CallOption) (*Notifications, error) {
	out := new(Notifications)
	err := c.cc.Invoke(ctx, "/header.Notibox/ListNoties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notiboxClient) MarkReadNoti(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Notibox/MarkReadNoti", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notiboxClient) MarkReadNotiTopic(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Notibox/MarkReadNotiTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotiboxServer is the server API for Notibox service.
type NotiboxServer interface {
	SendNoti(context.Context, *Notification) (*Empty, error)
	ListNoties(context.Context, *ListNotiRequest) (*Notifications, error)
	MarkReadNoti(context.Context, *Id) (*Empty, error)
	MarkReadNotiTopic(context.Context, *Id) (*Empty, error)
}

// UnimplementedNotiboxServer can be embedded to have forward compatible implementations.
type UnimplementedNotiboxServer struct {
}

func (*UnimplementedNotiboxServer) SendNoti(context.Context, *Notification) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNoti not implemented")
}
func (*UnimplementedNotiboxServer) ListNoties(context.Context, *ListNotiRequest) (*Notifications, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNoties not implemented")
}
func (*UnimplementedNotiboxServer) MarkReadNoti(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkReadNoti not implemented")
}
func (*UnimplementedNotiboxServer) MarkReadNotiTopic(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkReadNotiTopic not implemented")
}

func RegisterNotiboxServer(s *grpc.Server, srv NotiboxServer) {
	s.RegisterService(&_Notibox_serviceDesc, srv)
}

func _Notibox_SendNoti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotiboxServer).SendNoti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Notibox/SendNoti",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotiboxServer).SendNoti(ctx, req.(*Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notibox_ListNoties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNotiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotiboxServer).ListNoties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Notibox/ListNoties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotiboxServer).ListNoties(ctx, req.(*ListNotiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notibox_MarkReadNoti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotiboxServer).MarkReadNoti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Notibox/MarkReadNoti",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotiboxServer).MarkReadNoti(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notibox_MarkReadNotiTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotiboxServer).MarkReadNotiTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Notibox/MarkReadNotiTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotiboxServer).MarkReadNotiTopic(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _Notibox_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.Notibox",
	HandlerType: (*NotiboxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendNoti",
			Handler:    _Notibox_SendNoti_Handler,
		},
		{
			MethodName: "ListNoties",
			Handler:    _Notibox_ListNoties_Handler,
		},
		{
			MethodName: "MarkReadNoti",
			Handler:    _Notibox_MarkReadNoti_Handler,
		},
		{
			MethodName: "MarkReadNotiTopic",
			Handler:    _Notibox_MarkReadNotiTopic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// ProderClient is the client API for Proder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProderClient interface {
	ReadProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Product, error)
	CreateProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Product, error)
	UpdateProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Product, error)
	DeleteProduct(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	ListProducts2(ctx context.Context, in *ProductsRequest, opts ...grpc.CallOption) (*Products, error)
	ImportProduct(ctx context.Context, in *ImportProductRequest, opts ...grpc.CallOption) (*ImportProductResponse, error)
	ListProductCollections(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*ProductCollections, error)
	CreateProductCollection(ctx context.Context, in *ProductCollection, opts ...grpc.CallOption) (*ProductCollection, error)
	UpdateProductCollection(ctx context.Context, in *ProductCollection, opts ...grpc.CallOption) (*ProductCollection, error)
	DeleteProductCollection(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	ListProductFeeds(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ProductFeeds, error)
	CreateProductFeed(ctx context.Context, in *ProductFeed, opts ...grpc.CallOption) (*ProductFeed, error)
	UpdateProductFeed(ctx context.Context, in *ProductFeed, opts ...grpc.CallOption) (*ProductFeed, error)
	DeleteProductFeed(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	ListProductCategories(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*ProductCategories, error)
	ReadOrder(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Order, error)
	CreateOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error)
	UpdateOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error)
	DeleteOrder(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	ListOrders(ctx context.Context, in *OrdersRequest, opts ...grpc.CallOption) (*Orders, error)
	CountOrders2(ctx context.Context, in *CountOrdersRequest, opts ...grpc.CallOption) (*CountOrdersResponse, error)
	ImportOrders(ctx context.Context, in *Orders, opts ...grpc.CallOption) (*Orders, error)
	// fire order_updated, order_event_updated
	MakeOrderPayment(ctx context.Context, in *Bill, opts ...grpc.CallOption) (*Event, error)
	UpdatePurchase(ctx context.Context, in *Bill, opts ...grpc.CallOption) (*Event, error)
	CancelPurchase(ctx context.Context, in *Bill, opts ...grpc.CallOption) (*Event, error)
	AddOrderComment(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error)
	EditOrderComment(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error)
	DeleteOrderComment(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Event, error)
	ListOrderEvents(ctx context.Context, in *Id, opts ...grpc.CallOption) (*OrderHistoryEntries, error)
	ListOrderBills(ctx context.Context, in *BillsRequest, opts ...grpc.CallOption) (*Bills, error)
	DownloadOrder(ctx context.Context, in *DownloadOrderRequest, opts ...grpc.CallOption) (*File, error)
	GetShopeeAuthUrl(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Id, error)
	AuthorizeShopeeShop(ctx context.Context, in *AuthorizeShopeeRequest, opts ...grpc.CallOption) (*ShopeeShop, error)
	DeauthorizeShopeeShop(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	SyncShopeeProducts(ctx context.Context, in *ShopeeSyncProductRequest, opts ...grpc.CallOption) (*ShopeeSyncProductResponse, error)
	GHTKShippingStatus(ctx context.Context, in *GHTKOrder, opts ...grpc.CallOption) (*Empty, error)
	GHNShippingStatus(ctx context.Context, in *GHNOrder2, opts ...grpc.CallOption) (*Empty, error)
	ShippingFee(ctx context.Context, in *ShippingInfo, opts ...grpc.CallOption) (*ShippingInfo, error)
	ShipOrder(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Order, error)
	UpdateShippingCode(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error)
	CancelShippingOrder(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Order, error)
	PrintShippingOrders(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*File, error)
	SeenOrder(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	FollowOrder(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	UnfollowOrder(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	TagOrder(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*Empty, error)
	UntagOrder(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*Empty, error)
	ReadPipeline(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Pipeline, error)
	CreatePipeline(ctx context.Context, in *Pipeline, opts ...grpc.CallOption) (*Pipeline, error)
	UpdatePipeline(ctx context.Context, in *Pipeline, opts ...grpc.CallOption) (*Pipeline, error)
	DeletePipeline(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	ListPipelines(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Pipelines, error)
	DeletePipelineStage(ctx context.Context, in *PipelineStage, opts ...grpc.CallOption) (*Empty, error)
	PreselectPipeline(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Pipeline, error)
	ReportOrder(ctx context.Context, in *OrderMetricsRequest, opts ...grpc.CallOption) (*Orders, error)
	MoveOrderToPrimary(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error)
}

type proderClient struct {
	cc grpc.ClientConnInterface
}

func NewProderClient(cc grpc.ClientConnInterface) ProderClient {
	return &proderClient{cc}
}

func (c *proderClient) ReadProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, "/header.Proder/ReadProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) CreateProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, "/header.Proder/CreateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) UpdateProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, "/header.Proder/UpdateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) DeleteProduct(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Proder/DeleteProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) ListProducts2(ctx context.Context, in *ProductsRequest, opts ...grpc.CallOption) (*Products, error) {
	out := new(Products)
	err := c.cc.Invoke(ctx, "/header.Proder/ListProducts2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) ImportProduct(ctx context.Context, in *ImportProductRequest, opts ...grpc.CallOption) (*ImportProductResponse, error) {
	out := new(ImportProductResponse)
	err := c.cc.Invoke(ctx, "/header.Proder/ImportProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) ListProductCollections(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*ProductCollections, error) {
	out := new(ProductCollections)
	err := c.cc.Invoke(ctx, "/header.Proder/ListProductCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) CreateProductCollection(ctx context.Context, in *ProductCollection, opts ...grpc.CallOption) (*ProductCollection, error) {
	out := new(ProductCollection)
	err := c.cc.Invoke(ctx, "/header.Proder/CreateProductCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) UpdateProductCollection(ctx context.Context, in *ProductCollection, opts ...grpc.CallOption) (*ProductCollection, error) {
	out := new(ProductCollection)
	err := c.cc.Invoke(ctx, "/header.Proder/UpdateProductCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) DeleteProductCollection(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Proder/DeleteProductCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) ListProductFeeds(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ProductFeeds, error) {
	out := new(ProductFeeds)
	err := c.cc.Invoke(ctx, "/header.Proder/ListProductFeeds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) CreateProductFeed(ctx context.Context, in *ProductFeed, opts ...grpc.CallOption) (*ProductFeed, error) {
	out := new(ProductFeed)
	err := c.cc.Invoke(ctx, "/header.Proder/CreateProductFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) UpdateProductFeed(ctx context.Context, in *ProductFeed, opts ...grpc.CallOption) (*ProductFeed, error) {
	out := new(ProductFeed)
	err := c.cc.Invoke(ctx, "/header.Proder/UpdateProductFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) DeleteProductFeed(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Proder/DeleteProductFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) ListProductCategories(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*ProductCategories, error) {
	out := new(ProductCategories)
	err := c.cc.Invoke(ctx, "/header.Proder/ListProductCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) ReadOrder(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/header.Proder/ReadOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) CreateOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/header.Proder/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) UpdateOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/header.Proder/UpdateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) DeleteOrder(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Proder/DeleteOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) ListOrders(ctx context.Context, in *OrdersRequest, opts ...grpc.CallOption) (*Orders, error) {
	out := new(Orders)
	err := c.cc.Invoke(ctx, "/header.Proder/ListOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) CountOrders2(ctx context.Context, in *CountOrdersRequest, opts ...grpc.CallOption) (*CountOrdersResponse, error) {
	out := new(CountOrdersResponse)
	err := c.cc.Invoke(ctx, "/header.Proder/CountOrders2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) ImportOrders(ctx context.Context, in *Orders, opts ...grpc.CallOption) (*Orders, error) {
	out := new(Orders)
	err := c.cc.Invoke(ctx, "/header.Proder/ImportOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) MakeOrderPayment(ctx context.Context, in *Bill, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/header.Proder/MakeOrderPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) UpdatePurchase(ctx context.Context, in *Bill, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/header.Proder/UpdatePurchase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) CancelPurchase(ctx context.Context, in *Bill, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/header.Proder/CancelPurchase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) AddOrderComment(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/header.Proder/AddOrderComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) EditOrderComment(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/header.Proder/EditOrderComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) DeleteOrderComment(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/header.Proder/DeleteOrderComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) ListOrderEvents(ctx context.Context, in *Id, opts ...grpc.CallOption) (*OrderHistoryEntries, error) {
	out := new(OrderHistoryEntries)
	err := c.cc.Invoke(ctx, "/header.Proder/ListOrderEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) ListOrderBills(ctx context.Context, in *BillsRequest, opts ...grpc.CallOption) (*Bills, error) {
	out := new(Bills)
	err := c.cc.Invoke(ctx, "/header.Proder/ListOrderBills", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) DownloadOrder(ctx context.Context, in *DownloadOrderRequest, opts ...grpc.CallOption) (*File, error) {
	out := new(File)
	err := c.cc.Invoke(ctx, "/header.Proder/DownloadOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) GetShopeeAuthUrl(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/header.Proder/GetShopeeAuthUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) AuthorizeShopeeShop(ctx context.Context, in *AuthorizeShopeeRequest, opts ...grpc.CallOption) (*ShopeeShop, error) {
	out := new(ShopeeShop)
	err := c.cc.Invoke(ctx, "/header.Proder/AuthorizeShopeeShop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) DeauthorizeShopeeShop(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Proder/DeauthorizeShopeeShop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) SyncShopeeProducts(ctx context.Context, in *ShopeeSyncProductRequest, opts ...grpc.CallOption) (*ShopeeSyncProductResponse, error) {
	out := new(ShopeeSyncProductResponse)
	err := c.cc.Invoke(ctx, "/header.Proder/SyncShopeeProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) GHTKShippingStatus(ctx context.Context, in *GHTKOrder, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Proder/GHTKShippingStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) GHNShippingStatus(ctx context.Context, in *GHNOrder2, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Proder/GHNShippingStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) ShippingFee(ctx context.Context, in *ShippingInfo, opts ...grpc.CallOption) (*ShippingInfo, error) {
	out := new(ShippingInfo)
	err := c.cc.Invoke(ctx, "/header.Proder/ShippingFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) ShipOrder(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/header.Proder/ShipOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) UpdateShippingCode(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/header.Proder/UpdateShippingCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) CancelShippingOrder(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/header.Proder/CancelShippingOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) PrintShippingOrders(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*File, error) {
	out := new(File)
	err := c.cc.Invoke(ctx, "/header.Proder/PrintShippingOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) SeenOrder(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Proder/SeenOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) FollowOrder(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Proder/FollowOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) UnfollowOrder(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Proder/UnfollowOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) TagOrder(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Proder/TagOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) UntagOrder(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Proder/UntagOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) ReadPipeline(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Pipeline, error) {
	out := new(Pipeline)
	err := c.cc.Invoke(ctx, "/header.Proder/ReadPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) CreatePipeline(ctx context.Context, in *Pipeline, opts ...grpc.CallOption) (*Pipeline, error) {
	out := new(Pipeline)
	err := c.cc.Invoke(ctx, "/header.Proder/CreatePipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) UpdatePipeline(ctx context.Context, in *Pipeline, opts ...grpc.CallOption) (*Pipeline, error) {
	out := new(Pipeline)
	err := c.cc.Invoke(ctx, "/header.Proder/UpdatePipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) DeletePipeline(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Proder/DeletePipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) ListPipelines(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Pipelines, error) {
	out := new(Pipelines)
	err := c.cc.Invoke(ctx, "/header.Proder/ListPipelines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) DeletePipelineStage(ctx context.Context, in *PipelineStage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Proder/DeletePipelineStage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) PreselectPipeline(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Pipeline, error) {
	out := new(Pipeline)
	err := c.cc.Invoke(ctx, "/header.Proder/PreselectPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) ReportOrder(ctx context.Context, in *OrderMetricsRequest, opts ...grpc.CallOption) (*Orders, error) {
	out := new(Orders)
	err := c.cc.Invoke(ctx, "/header.Proder/ReportOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proderClient) MoveOrderToPrimary(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Proder/MoveOrderToPrimary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProderServer is the server API for Proder service.
type ProderServer interface {
	ReadProduct(context.Context, *Product) (*Product, error)
	CreateProduct(context.Context, *Product) (*Product, error)
	UpdateProduct(context.Context, *Product) (*Product, error)
	DeleteProduct(context.Context, *Id) (*Empty, error)
	ListProducts2(context.Context, *ProductsRequest) (*Products, error)
	ImportProduct(context.Context, *ImportProductRequest) (*ImportProductResponse, error)
	ListProductCollections(context.Context, *Ids) (*ProductCollections, error)
	CreateProductCollection(context.Context, *ProductCollection) (*ProductCollection, error)
	UpdateProductCollection(context.Context, *ProductCollection) (*ProductCollection, error)
	DeleteProductCollection(context.Context, *Id) (*Empty, error)
	ListProductFeeds(context.Context, *Id) (*ProductFeeds, error)
	CreateProductFeed(context.Context, *ProductFeed) (*ProductFeed, error)
	UpdateProductFeed(context.Context, *ProductFeed) (*ProductFeed, error)
	DeleteProductFeed(context.Context, *Id) (*Empty, error)
	ListProductCategories(context.Context, *Ids) (*ProductCategories, error)
	ReadOrder(context.Context, *Id) (*Order, error)
	CreateOrder(context.Context, *Order) (*Order, error)
	UpdateOrder(context.Context, *Order) (*Order, error)
	DeleteOrder(context.Context, *Id) (*Empty, error)
	ListOrders(context.Context, *OrdersRequest) (*Orders, error)
	CountOrders2(context.Context, *CountOrdersRequest) (*CountOrdersResponse, error)
	ImportOrders(context.Context, *Orders) (*Orders, error)
	// fire order_updated, order_event_updated
	MakeOrderPayment(context.Context, *Bill) (*Event, error)
	UpdatePurchase(context.Context, *Bill) (*Event, error)
	CancelPurchase(context.Context, *Bill) (*Event, error)
	AddOrderComment(context.Context, *Event) (*Event, error)
	EditOrderComment(context.Context, *Event) (*Event, error)
	DeleteOrderComment(context.Context, *Key) (*Event, error)
	ListOrderEvents(context.Context, *Id) (*OrderHistoryEntries, error)
	ListOrderBills(context.Context, *BillsRequest) (*Bills, error)
	DownloadOrder(context.Context, *DownloadOrderRequest) (*File, error)
	GetShopeeAuthUrl(context.Context, *Id) (*Id, error)
	AuthorizeShopeeShop(context.Context, *AuthorizeShopeeRequest) (*ShopeeShop, error)
	DeauthorizeShopeeShop(context.Context, *Id) (*Empty, error)
	SyncShopeeProducts(context.Context, *ShopeeSyncProductRequest) (*ShopeeSyncProductResponse, error)
	GHTKShippingStatus(context.Context, *GHTKOrder) (*Empty, error)
	GHNShippingStatus(context.Context, *GHNOrder2) (*Empty, error)
	ShippingFee(context.Context, *ShippingInfo) (*ShippingInfo, error)
	ShipOrder(context.Context, *Id) (*Order, error)
	UpdateShippingCode(context.Context, *Order) (*Order, error)
	CancelShippingOrder(context.Context, *Id) (*Order, error)
	PrintShippingOrders(context.Context, *Ids) (*File, error)
	SeenOrder(context.Context, *Id) (*Empty, error)
	FollowOrder(context.Context, *Id) (*Empty, error)
	UnfollowOrder(context.Context, *Id) (*Empty, error)
	TagOrder(context.Context, *TagRequest) (*Empty, error)
	UntagOrder(context.Context, *TagRequest) (*Empty, error)
	ReadPipeline(context.Context, *Id) (*Pipeline, error)
	CreatePipeline(context.Context, *Pipeline) (*Pipeline, error)
	UpdatePipeline(context.Context, *Pipeline) (*Pipeline, error)
	DeletePipeline(context.Context, *Id) (*Empty, error)
	ListPipelines(context.Context, *Ids) (*Pipelines, error)
	DeletePipelineStage(context.Context, *PipelineStage) (*Empty, error)
	PreselectPipeline(context.Context, *Id) (*Pipeline, error)
	ReportOrder(context.Context, *OrderMetricsRequest) (*Orders, error)
	MoveOrderToPrimary(context.Context, *Ids) (*Empty, error)
}

// UnimplementedProderServer can be embedded to have forward compatible implementations.
type UnimplementedProderServer struct {
}

func (*UnimplementedProderServer) ReadProduct(context.Context, *Product) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadProduct not implemented")
}
func (*UnimplementedProderServer) CreateProduct(context.Context, *Product) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (*UnimplementedProderServer) UpdateProduct(context.Context, *Product) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (*UnimplementedProderServer) DeleteProduct(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (*UnimplementedProderServer) ListProducts2(context.Context, *ProductsRequest) (*Products, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProducts2 not implemented")
}
func (*UnimplementedProderServer) ImportProduct(context.Context, *ImportProductRequest) (*ImportProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportProduct not implemented")
}
func (*UnimplementedProderServer) ListProductCollections(context.Context, *Ids) (*ProductCollections, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProductCollections not implemented")
}
func (*UnimplementedProderServer) CreateProductCollection(context.Context, *ProductCollection) (*ProductCollection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProductCollection not implemented")
}
func (*UnimplementedProderServer) UpdateProductCollection(context.Context, *ProductCollection) (*ProductCollection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductCollection not implemented")
}
func (*UnimplementedProderServer) DeleteProductCollection(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductCollection not implemented")
}
func (*UnimplementedProderServer) ListProductFeeds(context.Context, *Id) (*ProductFeeds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProductFeeds not implemented")
}
func (*UnimplementedProderServer) CreateProductFeed(context.Context, *ProductFeed) (*ProductFeed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProductFeed not implemented")
}
func (*UnimplementedProderServer) UpdateProductFeed(context.Context, *ProductFeed) (*ProductFeed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductFeed not implemented")
}
func (*UnimplementedProderServer) DeleteProductFeed(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductFeed not implemented")
}
func (*UnimplementedProderServer) ListProductCategories(context.Context, *Ids) (*ProductCategories, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProductCategories not implemented")
}
func (*UnimplementedProderServer) ReadOrder(context.Context, *Id) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadOrder not implemented")
}
func (*UnimplementedProderServer) CreateOrder(context.Context, *Order) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (*UnimplementedProderServer) UpdateOrder(context.Context, *Order) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrder not implemented")
}
func (*UnimplementedProderServer) DeleteOrder(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrder not implemented")
}
func (*UnimplementedProderServer) ListOrders(context.Context, *OrdersRequest) (*Orders, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrders not implemented")
}
func (*UnimplementedProderServer) CountOrders2(context.Context, *CountOrdersRequest) (*CountOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountOrders2 not implemented")
}
func (*UnimplementedProderServer) ImportOrders(context.Context, *Orders) (*Orders, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportOrders not implemented")
}
func (*UnimplementedProderServer) MakeOrderPayment(context.Context, *Bill) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeOrderPayment not implemented")
}
func (*UnimplementedProderServer) UpdatePurchase(context.Context, *Bill) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePurchase not implemented")
}
func (*UnimplementedProderServer) CancelPurchase(context.Context, *Bill) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelPurchase not implemented")
}
func (*UnimplementedProderServer) AddOrderComment(context.Context, *Event) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrderComment not implemented")
}
func (*UnimplementedProderServer) EditOrderComment(context.Context, *Event) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditOrderComment not implemented")
}
func (*UnimplementedProderServer) DeleteOrderComment(context.Context, *Key) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrderComment not implemented")
}
func (*UnimplementedProderServer) ListOrderEvents(context.Context, *Id) (*OrderHistoryEntries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrderEvents not implemented")
}
func (*UnimplementedProderServer) ListOrderBills(context.Context, *BillsRequest) (*Bills, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrderBills not implemented")
}
func (*UnimplementedProderServer) DownloadOrder(context.Context, *DownloadOrderRequest) (*File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadOrder not implemented")
}
func (*UnimplementedProderServer) GetShopeeAuthUrl(context.Context, *Id) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShopeeAuthUrl not implemented")
}
func (*UnimplementedProderServer) AuthorizeShopeeShop(context.Context, *AuthorizeShopeeRequest) (*ShopeeShop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizeShopeeShop not implemented")
}
func (*UnimplementedProderServer) DeauthorizeShopeeShop(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeauthorizeShopeeShop not implemented")
}
func (*UnimplementedProderServer) SyncShopeeProducts(context.Context, *ShopeeSyncProductRequest) (*ShopeeSyncProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncShopeeProducts not implemented")
}
func (*UnimplementedProderServer) GHTKShippingStatus(context.Context, *GHTKOrder) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GHTKShippingStatus not implemented")
}
func (*UnimplementedProderServer) GHNShippingStatus(context.Context, *GHNOrder2) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GHNShippingStatus not implemented")
}
func (*UnimplementedProderServer) ShippingFee(context.Context, *ShippingInfo) (*ShippingInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShippingFee not implemented")
}
func (*UnimplementedProderServer) ShipOrder(context.Context, *Id) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShipOrder not implemented")
}
func (*UnimplementedProderServer) UpdateShippingCode(context.Context, *Order) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShippingCode not implemented")
}
func (*UnimplementedProderServer) CancelShippingOrder(context.Context, *Id) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelShippingOrder not implemented")
}
func (*UnimplementedProderServer) PrintShippingOrders(context.Context, *Ids) (*File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrintShippingOrders not implemented")
}
func (*UnimplementedProderServer) SeenOrder(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SeenOrder not implemented")
}
func (*UnimplementedProderServer) FollowOrder(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowOrder not implemented")
}
func (*UnimplementedProderServer) UnfollowOrder(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnfollowOrder not implemented")
}
func (*UnimplementedProderServer) TagOrder(context.Context, *TagRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagOrder not implemented")
}
func (*UnimplementedProderServer) UntagOrder(context.Context, *TagRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UntagOrder not implemented")
}
func (*UnimplementedProderServer) ReadPipeline(context.Context, *Id) (*Pipeline, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPipeline not implemented")
}
func (*UnimplementedProderServer) CreatePipeline(context.Context, *Pipeline) (*Pipeline, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePipeline not implemented")
}
func (*UnimplementedProderServer) UpdatePipeline(context.Context, *Pipeline) (*Pipeline, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePipeline not implemented")
}
func (*UnimplementedProderServer) DeletePipeline(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePipeline not implemented")
}
func (*UnimplementedProderServer) ListPipelines(context.Context, *Ids) (*Pipelines, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPipelines not implemented")
}
func (*UnimplementedProderServer) DeletePipelineStage(context.Context, *PipelineStage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePipelineStage not implemented")
}
func (*UnimplementedProderServer) PreselectPipeline(context.Context, *Id) (*Pipeline, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreselectPipeline not implemented")
}
func (*UnimplementedProderServer) ReportOrder(context.Context, *OrderMetricsRequest) (*Orders, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportOrder not implemented")
}
func (*UnimplementedProderServer) MoveOrderToPrimary(context.Context, *Ids) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveOrderToPrimary not implemented")
}

func RegisterProderServer(s *grpc.Server, srv ProderServer) {
	s.RegisterService(&_Proder_serviceDesc, srv)
}

func _Proder_ReadProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).ReadProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/ReadProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).ReadProduct(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/CreateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).CreateProduct(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/UpdateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).UpdateProduct(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/DeleteProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).DeleteProduct(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_ListProducts2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).ListProducts2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/ListProducts2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).ListProducts2(ctx, req.(*ProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_ImportProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).ImportProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/ImportProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).ImportProduct(ctx, req.(*ImportProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_ListProductCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).ListProductCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/ListProductCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).ListProductCollections(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_CreateProductCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCollection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).CreateProductCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/CreateProductCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).CreateProductCollection(ctx, req.(*ProductCollection))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_UpdateProductCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCollection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).UpdateProductCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/UpdateProductCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).UpdateProductCollection(ctx, req.(*ProductCollection))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_DeleteProductCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).DeleteProductCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/DeleteProductCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).DeleteProductCollection(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_ListProductFeeds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).ListProductFeeds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/ListProductFeeds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).ListProductFeeds(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_CreateProductFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductFeed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).CreateProductFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/CreateProductFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).CreateProductFeed(ctx, req.(*ProductFeed))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_UpdateProductFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductFeed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).UpdateProductFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/UpdateProductFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).UpdateProductFeed(ctx, req.(*ProductFeed))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_DeleteProductFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).DeleteProductFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/DeleteProductFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).DeleteProductFeed(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_ListProductCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).ListProductCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/ListProductCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).ListProductCategories(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_ReadOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).ReadOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/ReadOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).ReadOrder(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).CreateOrder(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_UpdateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).UpdateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/UpdateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).UpdateOrder(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_DeleteOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).DeleteOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/DeleteOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).DeleteOrder(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_ListOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).ListOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/ListOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).ListOrders(ctx, req.(*OrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_CountOrders2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).CountOrders2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/CountOrders2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).CountOrders2(ctx, req.(*CountOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_ImportOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Orders)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).ImportOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/ImportOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).ImportOrders(ctx, req.(*Orders))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_MakeOrderPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bill)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).MakeOrderPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/MakeOrderPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).MakeOrderPayment(ctx, req.(*Bill))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_UpdatePurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bill)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).UpdatePurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/UpdatePurchase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).UpdatePurchase(ctx, req.(*Bill))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_CancelPurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bill)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).CancelPurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/CancelPurchase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).CancelPurchase(ctx, req.(*Bill))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_AddOrderComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).AddOrderComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/AddOrderComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).AddOrderComment(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_EditOrderComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).EditOrderComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/EditOrderComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).EditOrderComment(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_DeleteOrderComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).DeleteOrderComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/DeleteOrderComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).DeleteOrderComment(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_ListOrderEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).ListOrderEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/ListOrderEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).ListOrderEvents(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_ListOrderBills_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BillsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).ListOrderBills(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/ListOrderBills",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).ListOrderBills(ctx, req.(*BillsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_DownloadOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).DownloadOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/DownloadOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).DownloadOrder(ctx, req.(*DownloadOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_GetShopeeAuthUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).GetShopeeAuthUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/GetShopeeAuthUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).GetShopeeAuthUrl(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_AuthorizeShopeeShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeShopeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).AuthorizeShopeeShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/AuthorizeShopeeShop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).AuthorizeShopeeShop(ctx, req.(*AuthorizeShopeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_DeauthorizeShopeeShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).DeauthorizeShopeeShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/DeauthorizeShopeeShop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).DeauthorizeShopeeShop(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_SyncShopeeProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShopeeSyncProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).SyncShopeeProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/SyncShopeeProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).SyncShopeeProducts(ctx, req.(*ShopeeSyncProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_GHTKShippingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GHTKOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).GHTKShippingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/GHTKShippingStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).GHTKShippingStatus(ctx, req.(*GHTKOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_GHNShippingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GHNOrder2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).GHNShippingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/GHNShippingStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).GHNShippingStatus(ctx, req.(*GHNOrder2))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_ShippingFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShippingInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).ShippingFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/ShippingFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).ShippingFee(ctx, req.(*ShippingInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_ShipOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).ShipOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/ShipOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).ShipOrder(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_UpdateShippingCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).UpdateShippingCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/UpdateShippingCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).UpdateShippingCode(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_CancelShippingOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).CancelShippingOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/CancelShippingOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).CancelShippingOrder(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_PrintShippingOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).PrintShippingOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/PrintShippingOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).PrintShippingOrders(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_SeenOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).SeenOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/SeenOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).SeenOrder(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_FollowOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).FollowOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/FollowOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).FollowOrder(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_UnfollowOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).UnfollowOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/UnfollowOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).UnfollowOrder(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_TagOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).TagOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/TagOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).TagOrder(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_UntagOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).UntagOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/UntagOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).UntagOrder(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_ReadPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).ReadPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/ReadPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).ReadPipeline(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_CreatePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pipeline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).CreatePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/CreatePipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).CreatePipeline(ctx, req.(*Pipeline))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_UpdatePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pipeline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).UpdatePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/UpdatePipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).UpdatePipeline(ctx, req.(*Pipeline))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_DeletePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).DeletePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/DeletePipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).DeletePipeline(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_ListPipelines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).ListPipelines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/ListPipelines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).ListPipelines(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_DeletePipelineStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PipelineStage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).DeletePipelineStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/DeletePipelineStage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).DeletePipelineStage(ctx, req.(*PipelineStage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_PreselectPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).PreselectPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/PreselectPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).PreselectPipeline(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_ReportOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).ReportOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/ReportOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).ReportOrder(ctx, req.(*OrderMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proder_MoveOrderToPrimary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProderServer).MoveOrderToPrimary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Proder/MoveOrderToPrimary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProderServer).MoveOrderToPrimary(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

var _Proder_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.Proder",
	HandlerType: (*ProderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadProduct",
			Handler:    _Proder_ReadProduct_Handler,
		},
		{
			MethodName: "CreateProduct",
			Handler:    _Proder_CreateProduct_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _Proder_UpdateProduct_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _Proder_DeleteProduct_Handler,
		},
		{
			MethodName: "ListProducts2",
			Handler:    _Proder_ListProducts2_Handler,
		},
		{
			MethodName: "ImportProduct",
			Handler:    _Proder_ImportProduct_Handler,
		},
		{
			MethodName: "ListProductCollections",
			Handler:    _Proder_ListProductCollections_Handler,
		},
		{
			MethodName: "CreateProductCollection",
			Handler:    _Proder_CreateProductCollection_Handler,
		},
		{
			MethodName: "UpdateProductCollection",
			Handler:    _Proder_UpdateProductCollection_Handler,
		},
		{
			MethodName: "DeleteProductCollection",
			Handler:    _Proder_DeleteProductCollection_Handler,
		},
		{
			MethodName: "ListProductFeeds",
			Handler:    _Proder_ListProductFeeds_Handler,
		},
		{
			MethodName: "CreateProductFeed",
			Handler:    _Proder_CreateProductFeed_Handler,
		},
		{
			MethodName: "UpdateProductFeed",
			Handler:    _Proder_UpdateProductFeed_Handler,
		},
		{
			MethodName: "DeleteProductFeed",
			Handler:    _Proder_DeleteProductFeed_Handler,
		},
		{
			MethodName: "ListProductCategories",
			Handler:    _Proder_ListProductCategories_Handler,
		},
		{
			MethodName: "ReadOrder",
			Handler:    _Proder_ReadOrder_Handler,
		},
		{
			MethodName: "CreateOrder",
			Handler:    _Proder_CreateOrder_Handler,
		},
		{
			MethodName: "UpdateOrder",
			Handler:    _Proder_UpdateOrder_Handler,
		},
		{
			MethodName: "DeleteOrder",
			Handler:    _Proder_DeleteOrder_Handler,
		},
		{
			MethodName: "ListOrders",
			Handler:    _Proder_ListOrders_Handler,
		},
		{
			MethodName: "CountOrders2",
			Handler:    _Proder_CountOrders2_Handler,
		},
		{
			MethodName: "ImportOrders",
			Handler:    _Proder_ImportOrders_Handler,
		},
		{
			MethodName: "MakeOrderPayment",
			Handler:    _Proder_MakeOrderPayment_Handler,
		},
		{
			MethodName: "UpdatePurchase",
			Handler:    _Proder_UpdatePurchase_Handler,
		},
		{
			MethodName: "CancelPurchase",
			Handler:    _Proder_CancelPurchase_Handler,
		},
		{
			MethodName: "AddOrderComment",
			Handler:    _Proder_AddOrderComment_Handler,
		},
		{
			MethodName: "EditOrderComment",
			Handler:    _Proder_EditOrderComment_Handler,
		},
		{
			MethodName: "DeleteOrderComment",
			Handler:    _Proder_DeleteOrderComment_Handler,
		},
		{
			MethodName: "ListOrderEvents",
			Handler:    _Proder_ListOrderEvents_Handler,
		},
		{
			MethodName: "ListOrderBills",
			Handler:    _Proder_ListOrderBills_Handler,
		},
		{
			MethodName: "DownloadOrder",
			Handler:    _Proder_DownloadOrder_Handler,
		},
		{
			MethodName: "GetShopeeAuthUrl",
			Handler:    _Proder_GetShopeeAuthUrl_Handler,
		},
		{
			MethodName: "AuthorizeShopeeShop",
			Handler:    _Proder_AuthorizeShopeeShop_Handler,
		},
		{
			MethodName: "DeauthorizeShopeeShop",
			Handler:    _Proder_DeauthorizeShopeeShop_Handler,
		},
		{
			MethodName: "SyncShopeeProducts",
			Handler:    _Proder_SyncShopeeProducts_Handler,
		},
		{
			MethodName: "GHTKShippingStatus",
			Handler:    _Proder_GHTKShippingStatus_Handler,
		},
		{
			MethodName: "GHNShippingStatus",
			Handler:    _Proder_GHNShippingStatus_Handler,
		},
		{
			MethodName: "ShippingFee",
			Handler:    _Proder_ShippingFee_Handler,
		},
		{
			MethodName: "ShipOrder",
			Handler:    _Proder_ShipOrder_Handler,
		},
		{
			MethodName: "UpdateShippingCode",
			Handler:    _Proder_UpdateShippingCode_Handler,
		},
		{
			MethodName: "CancelShippingOrder",
			Handler:    _Proder_CancelShippingOrder_Handler,
		},
		{
			MethodName: "PrintShippingOrders",
			Handler:    _Proder_PrintShippingOrders_Handler,
		},
		{
			MethodName: "SeenOrder",
			Handler:    _Proder_SeenOrder_Handler,
		},
		{
			MethodName: "FollowOrder",
			Handler:    _Proder_FollowOrder_Handler,
		},
		{
			MethodName: "UnfollowOrder",
			Handler:    _Proder_UnfollowOrder_Handler,
		},
		{
			MethodName: "TagOrder",
			Handler:    _Proder_TagOrder_Handler,
		},
		{
			MethodName: "UntagOrder",
			Handler:    _Proder_UntagOrder_Handler,
		},
		{
			MethodName: "ReadPipeline",
			Handler:    _Proder_ReadPipeline_Handler,
		},
		{
			MethodName: "CreatePipeline",
			Handler:    _Proder_CreatePipeline_Handler,
		},
		{
			MethodName: "UpdatePipeline",
			Handler:    _Proder_UpdatePipeline_Handler,
		},
		{
			MethodName: "DeletePipeline",
			Handler:    _Proder_DeletePipeline_Handler,
		},
		{
			MethodName: "ListPipelines",
			Handler:    _Proder_ListPipelines_Handler,
		},
		{
			MethodName: "DeletePipelineStage",
			Handler:    _Proder_DeletePipelineStage_Handler,
		},
		{
			MethodName: "PreselectPipeline",
			Handler:    _Proder_PreselectPipeline_Handler,
		},
		{
			MethodName: "ReportOrder",
			Handler:    _Proder_ReportOrder_Handler,
		},
		{
			MethodName: "MoveOrderToPrimary",
			Handler:    _Proder_MoveOrderToPrimary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// TaskMgrClient is the client API for TaskMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TaskMgrClient interface {
	ReadTask(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Task, error)
	CreateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error)
	UpdateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error)
	DeleteTask(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	ListTasks(ctx context.Context, in *TasksRequest, opts ...grpc.CallOption) (*Tasks, error)
	SeenTask(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	CloseTaskReminder(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	MuteTask(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	UnmuteTask(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	AddTaskComment(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error)
	EditTaskComment(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error)
	DeleteTaskComment(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Event, error)
	ListTaskComments(ctx context.Context, in *Id, opts ...grpc.CallOption) (*TaskHistoryEntries, error)
}

type taskMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskMgrClient(cc grpc.ClientConnInterface) TaskMgrClient {
	return &taskMgrClient{cc}
}

func (c *taskMgrClient) ReadTask(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/header.TaskMgr/ReadTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskMgrClient) CreateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/header.TaskMgr/CreateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskMgrClient) UpdateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/header.TaskMgr/UpdateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskMgrClient) DeleteTask(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.TaskMgr/DeleteTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskMgrClient) ListTasks(ctx context.Context, in *TasksRequest, opts ...grpc.CallOption) (*Tasks, error) {
	out := new(Tasks)
	err := c.cc.Invoke(ctx, "/header.TaskMgr/ListTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskMgrClient) SeenTask(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.TaskMgr/SeenTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskMgrClient) CloseTaskReminder(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.TaskMgr/CloseTaskReminder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskMgrClient) MuteTask(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.TaskMgr/MuteTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskMgrClient) UnmuteTask(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.TaskMgr/UnmuteTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskMgrClient) AddTaskComment(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/header.TaskMgr/AddTaskComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskMgrClient) EditTaskComment(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/header.TaskMgr/EditTaskComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskMgrClient) DeleteTaskComment(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/header.TaskMgr/DeleteTaskComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskMgrClient) ListTaskComments(ctx context.Context, in *Id, opts ...grpc.CallOption) (*TaskHistoryEntries, error) {
	out := new(TaskHistoryEntries)
	err := c.cc.Invoke(ctx, "/header.TaskMgr/ListTaskComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskMgrServer is the server API for TaskMgr service.
type TaskMgrServer interface {
	ReadTask(context.Context, *Id) (*Task, error)
	CreateTask(context.Context, *Task) (*Task, error)
	UpdateTask(context.Context, *Task) (*Task, error)
	DeleteTask(context.Context, *Id) (*Empty, error)
	ListTasks(context.Context, *TasksRequest) (*Tasks, error)
	SeenTask(context.Context, *Id) (*Empty, error)
	CloseTaskReminder(context.Context, *Id) (*Empty, error)
	MuteTask(context.Context, *Id) (*Empty, error)
	UnmuteTask(context.Context, *Id) (*Empty, error)
	AddTaskComment(context.Context, *Event) (*Event, error)
	EditTaskComment(context.Context, *Event) (*Event, error)
	DeleteTaskComment(context.Context, *Key) (*Event, error)
	ListTaskComments(context.Context, *Id) (*TaskHistoryEntries, error)
}

// UnimplementedTaskMgrServer can be embedded to have forward compatible implementations.
type UnimplementedTaskMgrServer struct {
}

func (*UnimplementedTaskMgrServer) ReadTask(context.Context, *Id) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadTask not implemented")
}
func (*UnimplementedTaskMgrServer) CreateTask(context.Context, *Task) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (*UnimplementedTaskMgrServer) UpdateTask(context.Context, *Task) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (*UnimplementedTaskMgrServer) DeleteTask(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (*UnimplementedTaskMgrServer) ListTasks(context.Context, *TasksRequest) (*Tasks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTasks not implemented")
}
func (*UnimplementedTaskMgrServer) SeenTask(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SeenTask not implemented")
}
func (*UnimplementedTaskMgrServer) CloseTaskReminder(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseTaskReminder not implemented")
}
func (*UnimplementedTaskMgrServer) MuteTask(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MuteTask not implemented")
}
func (*UnimplementedTaskMgrServer) UnmuteTask(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnmuteTask not implemented")
}
func (*UnimplementedTaskMgrServer) AddTaskComment(context.Context, *Event) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTaskComment not implemented")
}
func (*UnimplementedTaskMgrServer) EditTaskComment(context.Context, *Event) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditTaskComment not implemented")
}
func (*UnimplementedTaskMgrServer) DeleteTaskComment(context.Context, *Key) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTaskComment not implemented")
}
func (*UnimplementedTaskMgrServer) ListTaskComments(context.Context, *Id) (*TaskHistoryEntries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTaskComments not implemented")
}

func RegisterTaskMgrServer(s *grpc.Server, srv TaskMgrServer) {
	s.RegisterService(&_TaskMgr_serviceDesc, srv)
}

func _TaskMgr_ReadTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskMgrServer).ReadTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TaskMgr/ReadTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskMgrServer).ReadTask(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskMgr_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskMgrServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TaskMgr/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskMgrServer).CreateTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskMgr_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskMgrServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TaskMgr/UpdateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskMgrServer).UpdateTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskMgr_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskMgrServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TaskMgr/DeleteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskMgrServer).DeleteTask(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskMgr_ListTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskMgrServer).ListTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TaskMgr/ListTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskMgrServer).ListTasks(ctx, req.(*TasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskMgr_SeenTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskMgrServer).SeenTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TaskMgr/SeenTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskMgrServer).SeenTask(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskMgr_CloseTaskReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskMgrServer).CloseTaskReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TaskMgr/CloseTaskReminder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskMgrServer).CloseTaskReminder(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskMgr_MuteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskMgrServer).MuteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TaskMgr/MuteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskMgrServer).MuteTask(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskMgr_UnmuteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskMgrServer).UnmuteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TaskMgr/UnmuteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskMgrServer).UnmuteTask(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskMgr_AddTaskComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskMgrServer).AddTaskComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TaskMgr/AddTaskComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskMgrServer).AddTaskComment(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskMgr_EditTaskComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskMgrServer).EditTaskComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TaskMgr/EditTaskComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskMgrServer).EditTaskComment(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskMgr_DeleteTaskComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskMgrServer).DeleteTaskComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TaskMgr/DeleteTaskComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskMgrServer).DeleteTaskComment(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskMgr_ListTaskComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskMgrServer).ListTaskComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TaskMgr/ListTaskComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskMgrServer).ListTaskComments(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaskMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.TaskMgr",
	HandlerType: (*TaskMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadTask",
			Handler:    _TaskMgr_ReadTask_Handler,
		},
		{
			MethodName: "CreateTask",
			Handler:    _TaskMgr_CreateTask_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _TaskMgr_UpdateTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _TaskMgr_DeleteTask_Handler,
		},
		{
			MethodName: "ListTasks",
			Handler:    _TaskMgr_ListTasks_Handler,
		},
		{
			MethodName: "SeenTask",
			Handler:    _TaskMgr_SeenTask_Handler,
		},
		{
			MethodName: "CloseTaskReminder",
			Handler:    _TaskMgr_CloseTaskReminder_Handler,
		},
		{
			MethodName: "MuteTask",
			Handler:    _TaskMgr_MuteTask_Handler,
		},
		{
			MethodName: "UnmuteTask",
			Handler:    _TaskMgr_UnmuteTask_Handler,
		},
		{
			MethodName: "AddTaskComment",
			Handler:    _TaskMgr_AddTaskComment_Handler,
		},
		{
			MethodName: "EditTaskComment",
			Handler:    _TaskMgr_EditTaskComment_Handler,
		},
		{
			MethodName: "DeleteTaskComment",
			Handler:    _TaskMgr_DeleteTaskComment_Handler,
		},
		{
			MethodName: "ListTaskComments",
			Handler:    _TaskMgr_ListTaskComments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// SpeexClient is the client API for Speex service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SpeexClient interface {
	TextToSpeech(ctx context.Context, in *TTSVoiceSelection, opts ...grpc.CallOption) (*TTSVoiceSelection, error)
}

type speexClient struct {
	cc grpc.ClientConnInterface
}

func NewSpeexClient(cc grpc.ClientConnInterface) SpeexClient {
	return &speexClient{cc}
}

func (c *speexClient) TextToSpeech(ctx context.Context, in *TTSVoiceSelection, opts ...grpc.CallOption) (*TTSVoiceSelection, error) {
	out := new(TTSVoiceSelection)
	err := c.cc.Invoke(ctx, "/header.Speex/TextToSpeech", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpeexServer is the server API for Speex service.
type SpeexServer interface {
	TextToSpeech(context.Context, *TTSVoiceSelection) (*TTSVoiceSelection, error)
}

// UnimplementedSpeexServer can be embedded to have forward compatible implementations.
type UnimplementedSpeexServer struct {
}

func (*UnimplementedSpeexServer) TextToSpeech(context.Context, *TTSVoiceSelection) (*TTSVoiceSelection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TextToSpeech not implemented")
}

func RegisterSpeexServer(s *grpc.Server, srv SpeexServer) {
	s.RegisterService(&_Speex_serviceDesc, srv)
}

func _Speex_TextToSpeech_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TTSVoiceSelection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeexServer).TextToSpeech(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Speex/TextToSpeech",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeexServer).TextToSpeech(ctx, req.(*TTSVoiceSelection))
	}
	return interceptor(ctx, in, info, handler)
}

var _Speex_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.Speex",
	HandlerType: (*SpeexServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TextToSpeech",
			Handler:    _Speex_TextToSpeech_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// CampaignMgrClient is the client API for CampaignMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CampaignMgrClient interface {
	ListCampaigns(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Campaigns, error)
	ReadCampaign(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Campaign, error)
	CreateCampaign(ctx context.Context, in *Campaign, opts ...grpc.CallOption) (*Campaign, error)
	UpdateCampaign(ctx context.Context, in *Campaign, opts ...grpc.CallOption) (*Campaign, error)
	DeleteCampaign(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	OnEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Empty, error)
	ListCampaignSendLog(ctx context.Context, in *CampaignSendLogRequest, opts ...grpc.CallOption) (*CampaignSendLog, error)
	ReportBroadcastCampaign(ctx context.Context, in *Id, opts ...grpc.CallOption) (*BroadcastCampaignMetrics, error)
	ListOutboundCallEntries(ctx context.Context, in *ListOutboundCallRequest, opts ...grpc.CallOption) (*OutboundCallEntries, error)
	UpdateOutboundCall(ctx context.Context, in *OutboundCallEntry, opts ...grpc.CallOption) (*OutboundCallEntry, error)
	ImportOutboundCall(ctx context.Context, in *ImportOutboundCallEntryRequest, opts ...grpc.CallOption) (*ImportOutboundCallEntryResponse, error)
	GetOutboundCall(ctx context.Context, in *OutboundCallEntry, opts ...grpc.CallOption) (*OutboundCallEntry, error)
	RemoveOutboudCall(ctx context.Context, in *OutboundCallEntry, opts ...grpc.CallOption) (*Empty, error)
	ReportOutboundCalls(ctx context.Context, in *OutboundCallReportRequest, opts ...grpc.CallOption) (*OutboundCallReportResponse, error)
	ReassignOutboundCall(ctx context.Context, in *ListOutboundCallRequest, opts ...grpc.CallOption) (*Empty, error)
}

type campaignMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewCampaignMgrClient(cc grpc.ClientConnInterface) CampaignMgrClient {
	return &campaignMgrClient{cc}
}

func (c *campaignMgrClient) ListCampaigns(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Campaigns, error) {
	out := new(Campaigns)
	err := c.cc.Invoke(ctx, "/header.CampaignMgr/ListCampaigns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignMgrClient) ReadCampaign(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Campaign, error) {
	out := new(Campaign)
	err := c.cc.Invoke(ctx, "/header.CampaignMgr/ReadCampaign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignMgrClient) CreateCampaign(ctx context.Context, in *Campaign, opts ...grpc.CallOption) (*Campaign, error) {
	out := new(Campaign)
	err := c.cc.Invoke(ctx, "/header.CampaignMgr/CreateCampaign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignMgrClient) UpdateCampaign(ctx context.Context, in *Campaign, opts ...grpc.CallOption) (*Campaign, error) {
	out := new(Campaign)
	err := c.cc.Invoke(ctx, "/header.CampaignMgr/UpdateCampaign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignMgrClient) DeleteCampaign(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.CampaignMgr/DeleteCampaign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignMgrClient) OnEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.CampaignMgr/OnEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignMgrClient) ListCampaignSendLog(ctx context.Context, in *CampaignSendLogRequest, opts ...grpc.CallOption) (*CampaignSendLog, error) {
	out := new(CampaignSendLog)
	err := c.cc.Invoke(ctx, "/header.CampaignMgr/ListCampaignSendLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignMgrClient) ReportBroadcastCampaign(ctx context.Context, in *Id, opts ...grpc.CallOption) (*BroadcastCampaignMetrics, error) {
	out := new(BroadcastCampaignMetrics)
	err := c.cc.Invoke(ctx, "/header.CampaignMgr/ReportBroadcastCampaign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignMgrClient) ListOutboundCallEntries(ctx context.Context, in *ListOutboundCallRequest, opts ...grpc.CallOption) (*OutboundCallEntries, error) {
	out := new(OutboundCallEntries)
	err := c.cc.Invoke(ctx, "/header.CampaignMgr/ListOutboundCallEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignMgrClient) UpdateOutboundCall(ctx context.Context, in *OutboundCallEntry, opts ...grpc.CallOption) (*OutboundCallEntry, error) {
	out := new(OutboundCallEntry)
	err := c.cc.Invoke(ctx, "/header.CampaignMgr/UpdateOutboundCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignMgrClient) ImportOutboundCall(ctx context.Context, in *ImportOutboundCallEntryRequest, opts ...grpc.CallOption) (*ImportOutboundCallEntryResponse, error) {
	out := new(ImportOutboundCallEntryResponse)
	err := c.cc.Invoke(ctx, "/header.CampaignMgr/ImportOutboundCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignMgrClient) GetOutboundCall(ctx context.Context, in *OutboundCallEntry, opts ...grpc.CallOption) (*OutboundCallEntry, error) {
	out := new(OutboundCallEntry)
	err := c.cc.Invoke(ctx, "/header.CampaignMgr/GetOutboundCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignMgrClient) RemoveOutboudCall(ctx context.Context, in *OutboundCallEntry, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.CampaignMgr/RemoveOutboudCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignMgrClient) ReportOutboundCalls(ctx context.Context, in *OutboundCallReportRequest, opts ...grpc.CallOption) (*OutboundCallReportResponse, error) {
	out := new(OutboundCallReportResponse)
	err := c.cc.Invoke(ctx, "/header.CampaignMgr/ReportOutboundCalls", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignMgrClient) ReassignOutboundCall(ctx context.Context, in *ListOutboundCallRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.CampaignMgr/ReassignOutboundCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CampaignMgrServer is the server API for CampaignMgr service.
type CampaignMgrServer interface {
	ListCampaigns(context.Context, *Ids) (*Campaigns, error)
	ReadCampaign(context.Context, *Id) (*Campaign, error)
	CreateCampaign(context.Context, *Campaign) (*Campaign, error)
	UpdateCampaign(context.Context, *Campaign) (*Campaign, error)
	DeleteCampaign(context.Context, *Id) (*Empty, error)
	OnEvent(context.Context, *Event) (*Empty, error)
	ListCampaignSendLog(context.Context, *CampaignSendLogRequest) (*CampaignSendLog, error)
	ReportBroadcastCampaign(context.Context, *Id) (*BroadcastCampaignMetrics, error)
	ListOutboundCallEntries(context.Context, *ListOutboundCallRequest) (*OutboundCallEntries, error)
	UpdateOutboundCall(context.Context, *OutboundCallEntry) (*OutboundCallEntry, error)
	ImportOutboundCall(context.Context, *ImportOutboundCallEntryRequest) (*ImportOutboundCallEntryResponse, error)
	GetOutboundCall(context.Context, *OutboundCallEntry) (*OutboundCallEntry, error)
	RemoveOutboudCall(context.Context, *OutboundCallEntry) (*Empty, error)
	ReportOutboundCalls(context.Context, *OutboundCallReportRequest) (*OutboundCallReportResponse, error)
	ReassignOutboundCall(context.Context, *ListOutboundCallRequest) (*Empty, error)
}

// UnimplementedCampaignMgrServer can be embedded to have forward compatible implementations.
type UnimplementedCampaignMgrServer struct {
}

func (*UnimplementedCampaignMgrServer) ListCampaigns(context.Context, *Ids) (*Campaigns, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCampaigns not implemented")
}
func (*UnimplementedCampaignMgrServer) ReadCampaign(context.Context, *Id) (*Campaign, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadCampaign not implemented")
}
func (*UnimplementedCampaignMgrServer) CreateCampaign(context.Context, *Campaign) (*Campaign, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCampaign not implemented")
}
func (*UnimplementedCampaignMgrServer) UpdateCampaign(context.Context, *Campaign) (*Campaign, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCampaign not implemented")
}
func (*UnimplementedCampaignMgrServer) DeleteCampaign(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCampaign not implemented")
}
func (*UnimplementedCampaignMgrServer) OnEvent(context.Context, *Event) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnEvent not implemented")
}
func (*UnimplementedCampaignMgrServer) ListCampaignSendLog(context.Context, *CampaignSendLogRequest) (*CampaignSendLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCampaignSendLog not implemented")
}
func (*UnimplementedCampaignMgrServer) ReportBroadcastCampaign(context.Context, *Id) (*BroadcastCampaignMetrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportBroadcastCampaign not implemented")
}
func (*UnimplementedCampaignMgrServer) ListOutboundCallEntries(context.Context, *ListOutboundCallRequest) (*OutboundCallEntries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOutboundCallEntries not implemented")
}
func (*UnimplementedCampaignMgrServer) UpdateOutboundCall(context.Context, *OutboundCallEntry) (*OutboundCallEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOutboundCall not implemented")
}
func (*UnimplementedCampaignMgrServer) ImportOutboundCall(context.Context, *ImportOutboundCallEntryRequest) (*ImportOutboundCallEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportOutboundCall not implemented")
}
func (*UnimplementedCampaignMgrServer) GetOutboundCall(context.Context, *OutboundCallEntry) (*OutboundCallEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOutboundCall not implemented")
}
func (*UnimplementedCampaignMgrServer) RemoveOutboudCall(context.Context, *OutboundCallEntry) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOutboudCall not implemented")
}
func (*UnimplementedCampaignMgrServer) ReportOutboundCalls(context.Context, *OutboundCallReportRequest) (*OutboundCallReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportOutboundCalls not implemented")
}
func (*UnimplementedCampaignMgrServer) ReassignOutboundCall(context.Context, *ListOutboundCallRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReassignOutboundCall not implemented")
}

func RegisterCampaignMgrServer(s *grpc.Server, srv CampaignMgrServer) {
	s.RegisterService(&_CampaignMgr_serviceDesc, srv)
}

func _CampaignMgr_ListCampaigns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignMgrServer).ListCampaigns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.CampaignMgr/ListCampaigns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignMgrServer).ListCampaigns(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignMgr_ReadCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignMgrServer).ReadCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.CampaignMgr/ReadCampaign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignMgrServer).ReadCampaign(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignMgr_CreateCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Campaign)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignMgrServer).CreateCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.CampaignMgr/CreateCampaign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignMgrServer).CreateCampaign(ctx, req.(*Campaign))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignMgr_UpdateCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Campaign)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignMgrServer).UpdateCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.CampaignMgr/UpdateCampaign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignMgrServer).UpdateCampaign(ctx, req.(*Campaign))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignMgr_DeleteCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignMgrServer).DeleteCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.CampaignMgr/DeleteCampaign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignMgrServer).DeleteCampaign(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignMgr_OnEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignMgrServer).OnEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.CampaignMgr/OnEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignMgrServer).OnEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignMgr_ListCampaignSendLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CampaignSendLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignMgrServer).ListCampaignSendLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.CampaignMgr/ListCampaignSendLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignMgrServer).ListCampaignSendLog(ctx, req.(*CampaignSendLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignMgr_ReportBroadcastCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignMgrServer).ReportBroadcastCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.CampaignMgr/ReportBroadcastCampaign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignMgrServer).ReportBroadcastCampaign(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignMgr_ListOutboundCallEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOutboundCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignMgrServer).ListOutboundCallEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.CampaignMgr/ListOutboundCallEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignMgrServer).ListOutboundCallEntries(ctx, req.(*ListOutboundCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignMgr_UpdateOutboundCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OutboundCallEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignMgrServer).UpdateOutboundCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.CampaignMgr/UpdateOutboundCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignMgrServer).UpdateOutboundCall(ctx, req.(*OutboundCallEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignMgr_ImportOutboundCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportOutboundCallEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignMgrServer).ImportOutboundCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.CampaignMgr/ImportOutboundCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignMgrServer).ImportOutboundCall(ctx, req.(*ImportOutboundCallEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignMgr_GetOutboundCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OutboundCallEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignMgrServer).GetOutboundCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.CampaignMgr/GetOutboundCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignMgrServer).GetOutboundCall(ctx, req.(*OutboundCallEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignMgr_RemoveOutboudCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OutboundCallEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignMgrServer).RemoveOutboudCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.CampaignMgr/RemoveOutboudCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignMgrServer).RemoveOutboudCall(ctx, req.(*OutboundCallEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignMgr_ReportOutboundCalls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OutboundCallReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignMgrServer).ReportOutboundCalls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.CampaignMgr/ReportOutboundCalls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignMgrServer).ReportOutboundCalls(ctx, req.(*OutboundCallReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignMgr_ReassignOutboundCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOutboundCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignMgrServer).ReassignOutboundCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.CampaignMgr/ReassignOutboundCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignMgrServer).ReassignOutboundCall(ctx, req.(*ListOutboundCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CampaignMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.CampaignMgr",
	HandlerType: (*CampaignMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCampaigns",
			Handler:    _CampaignMgr_ListCampaigns_Handler,
		},
		{
			MethodName: "ReadCampaign",
			Handler:    _CampaignMgr_ReadCampaign_Handler,
		},
		{
			MethodName: "CreateCampaign",
			Handler:    _CampaignMgr_CreateCampaign_Handler,
		},
		{
			MethodName: "UpdateCampaign",
			Handler:    _CampaignMgr_UpdateCampaign_Handler,
		},
		{
			MethodName: "DeleteCampaign",
			Handler:    _CampaignMgr_DeleteCampaign_Handler,
		},
		{
			MethodName: "OnEvent",
			Handler:    _CampaignMgr_OnEvent_Handler,
		},
		{
			MethodName: "ListCampaignSendLog",
			Handler:    _CampaignMgr_ListCampaignSendLog_Handler,
		},
		{
			MethodName: "ReportBroadcastCampaign",
			Handler:    _CampaignMgr_ReportBroadcastCampaign_Handler,
		},
		{
			MethodName: "ListOutboundCallEntries",
			Handler:    _CampaignMgr_ListOutboundCallEntries_Handler,
		},
		{
			MethodName: "UpdateOutboundCall",
			Handler:    _CampaignMgr_UpdateOutboundCall_Handler,
		},
		{
			MethodName: "ImportOutboundCall",
			Handler:    _CampaignMgr_ImportOutboundCall_Handler,
		},
		{
			MethodName: "GetOutboundCall",
			Handler:    _CampaignMgr_GetOutboundCall_Handler,
		},
		{
			MethodName: "RemoveOutboudCall",
			Handler:    _CampaignMgr_RemoveOutboudCall_Handler,
		},
		{
			MethodName: "ReportOutboundCalls",
			Handler:    _CampaignMgr_ReportOutboundCalls_Handler,
		},
		{
			MethodName: "ReassignOutboundCall",
			Handler:    _CampaignMgr_ReassignOutboundCall_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// CreditMgrClient is the client API for CreditMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CreditMgrClient interface {
	TrySpendCredit(ctx context.Context, in *CreditSpendEntry, opts ...grpc.CallOption) (*TrySpendCreditResponse, error)
	ReportCreditSpend(ctx context.Context, in *CreditSpendReportRequest, opts ...grpc.CallOption) (*CreditSpendReportResponse, error)
	ListCreditSpendLog(ctx context.Context, in *CreditSpendLogRequest, opts ...grpc.CallOption) (*CreditSpendEntries, error)
	ListCredits(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error)
	AddCredit(ctx context.Context, in *Credit, opts ...grpc.CallOption) (*Response, error)
	DeleteCredit(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error)
	UpdateCredit(ctx context.Context, in *Credit, opts ...grpc.CallOption) (*Response, error)
}

type creditMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewCreditMgrClient(cc grpc.ClientConnInterface) CreditMgrClient {
	return &creditMgrClient{cc}
}

func (c *creditMgrClient) TrySpendCredit(ctx context.Context, in *CreditSpendEntry, opts ...grpc.CallOption) (*TrySpendCreditResponse, error) {
	out := new(TrySpendCreditResponse)
	err := c.cc.Invoke(ctx, "/header.CreditMgr/TrySpendCredit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditMgrClient) ReportCreditSpend(ctx context.Context, in *CreditSpendReportRequest, opts ...grpc.CallOption) (*CreditSpendReportResponse, error) {
	out := new(CreditSpendReportResponse)
	err := c.cc.Invoke(ctx, "/header.CreditMgr/ReportCreditSpend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditMgrClient) ListCreditSpendLog(ctx context.Context, in *CreditSpendLogRequest, opts ...grpc.CallOption) (*CreditSpendEntries, error) {
	out := new(CreditSpendEntries)
	err := c.cc.Invoke(ctx, "/header.CreditMgr/ListCreditSpendLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditMgrClient) ListCredits(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/header.CreditMgr/ListCredits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditMgrClient) AddCredit(ctx context.Context, in *Credit, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/header.CreditMgr/AddCredit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditMgrClient) DeleteCredit(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/header.CreditMgr/DeleteCredit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditMgrClient) UpdateCredit(ctx context.Context, in *Credit, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/header.CreditMgr/UpdateCredit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CreditMgrServer is the server API for CreditMgr service.
type CreditMgrServer interface {
	TrySpendCredit(context.Context, *CreditSpendEntry) (*TrySpendCreditResponse, error)
	ReportCreditSpend(context.Context, *CreditSpendReportRequest) (*CreditSpendReportResponse, error)
	ListCreditSpendLog(context.Context, *CreditSpendLogRequest) (*CreditSpendEntries, error)
	ListCredits(context.Context, *Id) (*Response, error)
	AddCredit(context.Context, *Credit) (*Response, error)
	DeleteCredit(context.Context, *Id) (*Response, error)
	UpdateCredit(context.Context, *Credit) (*Response, error)
}

// UnimplementedCreditMgrServer can be embedded to have forward compatible implementations.
type UnimplementedCreditMgrServer struct {
}

func (*UnimplementedCreditMgrServer) TrySpendCredit(context.Context, *CreditSpendEntry) (*TrySpendCreditResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrySpendCredit not implemented")
}
func (*UnimplementedCreditMgrServer) ReportCreditSpend(context.Context, *CreditSpendReportRequest) (*CreditSpendReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportCreditSpend not implemented")
}
func (*UnimplementedCreditMgrServer) ListCreditSpendLog(context.Context, *CreditSpendLogRequest) (*CreditSpendEntries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCreditSpendLog not implemented")
}
func (*UnimplementedCreditMgrServer) ListCredits(context.Context, *Id) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCredits not implemented")
}
func (*UnimplementedCreditMgrServer) AddCredit(context.Context, *Credit) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCredit not implemented")
}
func (*UnimplementedCreditMgrServer) DeleteCredit(context.Context, *Id) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCredit not implemented")
}
func (*UnimplementedCreditMgrServer) UpdateCredit(context.Context, *Credit) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCredit not implemented")
}

func RegisterCreditMgrServer(s *grpc.Server, srv CreditMgrServer) {
	s.RegisterService(&_CreditMgr_serviceDesc, srv)
}

func _CreditMgr_TrySpendCredit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreditSpendEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditMgrServer).TrySpendCredit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.CreditMgr/TrySpendCredit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditMgrServer).TrySpendCredit(ctx, req.(*CreditSpendEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditMgr_ReportCreditSpend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreditSpendReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditMgrServer).ReportCreditSpend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.CreditMgr/ReportCreditSpend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditMgrServer).ReportCreditSpend(ctx, req.(*CreditSpendReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditMgr_ListCreditSpendLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreditSpendLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditMgrServer).ListCreditSpendLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.CreditMgr/ListCreditSpendLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditMgrServer).ListCreditSpendLog(ctx, req.(*CreditSpendLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditMgr_ListCredits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditMgrServer).ListCredits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.CreditMgr/ListCredits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditMgrServer).ListCredits(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditMgr_AddCredit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditMgrServer).AddCredit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.CreditMgr/AddCredit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditMgrServer).AddCredit(ctx, req.(*Credit))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditMgr_DeleteCredit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditMgrServer).DeleteCredit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.CreditMgr/DeleteCredit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditMgrServer).DeleteCredit(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditMgr_UpdateCredit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditMgrServer).UpdateCredit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.CreditMgr/UpdateCredit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditMgrServer).UpdateCredit(ctx, req.(*Credit))
	}
	return interceptor(ctx, in, info, handler)
}

var _CreditMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.CreditMgr",
	HandlerType: (*CreditMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TrySpendCredit",
			Handler:    _CreditMgr_TrySpendCredit_Handler,
		},
		{
			MethodName: "ReportCreditSpend",
			Handler:    _CreditMgr_ReportCreditSpend_Handler,
		},
		{
			MethodName: "ListCreditSpendLog",
			Handler:    _CreditMgr_ListCreditSpendLog_Handler,
		},
		{
			MethodName: "ListCredits",
			Handler:    _CreditMgr_ListCredits_Handler,
		},
		{
			MethodName: "AddCredit",
			Handler:    _CreditMgr_AddCredit_Handler,
		},
		{
			MethodName: "DeleteCredit",
			Handler:    _CreditMgr_DeleteCredit_Handler,
		},
		{
			MethodName: "UpdateCredit",
			Handler:    _CreditMgr_UpdateCredit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// FormMgrClient is the client API for FormMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FormMgrClient interface {
	ListForms(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Forms, error)
	CreateForm(ctx context.Context, in *Form, opts ...grpc.CallOption) (*Form, error)
	UpdateForm(ctx context.Context, in *Form, opts ...grpc.CallOption) (*Form, error)
	DeleteForm(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	ReportForm(ctx context.Context, in *FormReportRequest, opts ...grpc.CallOption) (*FormReportResponse, error)
	ListFormSubmissions(ctx context.Context, in *ListFormSubmissionRequest, opts ...grpc.CallOption) (*FormSubmissions, error)
}

type formMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewFormMgrClient(cc grpc.ClientConnInterface) FormMgrClient {
	return &formMgrClient{cc}
}

func (c *formMgrClient) ListForms(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Forms, error) {
	out := new(Forms)
	err := c.cc.Invoke(ctx, "/header.FormMgr/ListForms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formMgrClient) CreateForm(ctx context.Context, in *Form, opts ...grpc.CallOption) (*Form, error) {
	out := new(Form)
	err := c.cc.Invoke(ctx, "/header.FormMgr/CreateForm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formMgrClient) UpdateForm(ctx context.Context, in *Form, opts ...grpc.CallOption) (*Form, error) {
	out := new(Form)
	err := c.cc.Invoke(ctx, "/header.FormMgr/UpdateForm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formMgrClient) DeleteForm(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.FormMgr/DeleteForm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formMgrClient) ReportForm(ctx context.Context, in *FormReportRequest, opts ...grpc.CallOption) (*FormReportResponse, error) {
	out := new(FormReportResponse)
	err := c.cc.Invoke(ctx, "/header.FormMgr/ReportForm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formMgrClient) ListFormSubmissions(ctx context.Context, in *ListFormSubmissionRequest, opts ...grpc.CallOption) (*FormSubmissions, error) {
	out := new(FormSubmissions)
	err := c.cc.Invoke(ctx, "/header.FormMgr/ListFormSubmissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FormMgrServer is the server API for FormMgr service.
type FormMgrServer interface {
	ListForms(context.Context, *Id) (*Forms, error)
	CreateForm(context.Context, *Form) (*Form, error)
	UpdateForm(context.Context, *Form) (*Form, error)
	DeleteForm(context.Context, *Id) (*Empty, error)
	ReportForm(context.Context, *FormReportRequest) (*FormReportResponse, error)
	ListFormSubmissions(context.Context, *ListFormSubmissionRequest) (*FormSubmissions, error)
}

// UnimplementedFormMgrServer can be embedded to have forward compatible implementations.
type UnimplementedFormMgrServer struct {
}

func (*UnimplementedFormMgrServer) ListForms(context.Context, *Id) (*Forms, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListForms not implemented")
}
func (*UnimplementedFormMgrServer) CreateForm(context.Context, *Form) (*Form, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateForm not implemented")
}
func (*UnimplementedFormMgrServer) UpdateForm(context.Context, *Form) (*Form, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateForm not implemented")
}
func (*UnimplementedFormMgrServer) DeleteForm(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteForm not implemented")
}
func (*UnimplementedFormMgrServer) ReportForm(context.Context, *FormReportRequest) (*FormReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportForm not implemented")
}
func (*UnimplementedFormMgrServer) ListFormSubmissions(context.Context, *ListFormSubmissionRequest) (*FormSubmissions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFormSubmissions not implemented")
}

func RegisterFormMgrServer(s *grpc.Server, srv FormMgrServer) {
	s.RegisterService(&_FormMgr_serviceDesc, srv)
}

func _FormMgr_ListForms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormMgrServer).ListForms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.FormMgr/ListForms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormMgrServer).ListForms(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _FormMgr_CreateForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Form)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormMgrServer).CreateForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.FormMgr/CreateForm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormMgrServer).CreateForm(ctx, req.(*Form))
	}
	return interceptor(ctx, in, info, handler)
}

func _FormMgr_UpdateForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Form)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormMgrServer).UpdateForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.FormMgr/UpdateForm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormMgrServer).UpdateForm(ctx, req.(*Form))
	}
	return interceptor(ctx, in, info, handler)
}

func _FormMgr_DeleteForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormMgrServer).DeleteForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.FormMgr/DeleteForm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormMgrServer).DeleteForm(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _FormMgr_ReportForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FormReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormMgrServer).ReportForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.FormMgr/ReportForm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormMgrServer).ReportForm(ctx, req.(*FormReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FormMgr_ListFormSubmissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFormSubmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormMgrServer).ListFormSubmissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.FormMgr/ListFormSubmissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormMgrServer).ListFormSubmissions(ctx, req.(*ListFormSubmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FormMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.FormMgr",
	HandlerType: (*FormMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListForms",
			Handler:    _FormMgr_ListForms_Handler,
		},
		{
			MethodName: "CreateForm",
			Handler:    _FormMgr_CreateForm_Handler,
		},
		{
			MethodName: "UpdateForm",
			Handler:    _FormMgr_UpdateForm_Handler,
		},
		{
			MethodName: "DeleteForm",
			Handler:    _FormMgr_DeleteForm_Handler,
		},
		{
			MethodName: "ReportForm",
			Handler:    _FormMgr_ReportForm_Handler,
		},
		{
			MethodName: "ListFormSubmissions",
			Handler:    _FormMgr_ListFormSubmissions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// SchedulerClient is the client API for Scheduler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SchedulerClient interface {
	RegisterTask(ctx context.Context, in *SchedulerTask, opts ...grpc.CallOption) (*SchedulerTask, error)
	UnregisterTask(ctx context.Context, in *SchedulerTask, opts ...grpc.CallOption) (*Response, error)
}

type schedulerClient struct {
	cc grpc.ClientConnInterface
}

func NewSchedulerClient(cc grpc.ClientConnInterface) SchedulerClient {
	return &schedulerClient{cc}
}

func (c *schedulerClient) RegisterTask(ctx context.Context, in *SchedulerTask, opts ...grpc.CallOption) (*SchedulerTask, error) {
	out := new(SchedulerTask)
	err := c.cc.Invoke(ctx, "/header.Scheduler/RegisterTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) UnregisterTask(ctx context.Context, in *SchedulerTask, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/header.Scheduler/UnregisterTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchedulerServer is the server API for Scheduler service.
type SchedulerServer interface {
	RegisterTask(context.Context, *SchedulerTask) (*SchedulerTask, error)
	UnregisterTask(context.Context, *SchedulerTask) (*Response, error)
}

// UnimplementedSchedulerServer can be embedded to have forward compatible implementations.
type UnimplementedSchedulerServer struct {
}

func (*UnimplementedSchedulerServer) RegisterTask(context.Context, *SchedulerTask) (*SchedulerTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTask not implemented")
}
func (*UnimplementedSchedulerServer) UnregisterTask(context.Context, *SchedulerTask) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterTask not implemented")
}

func RegisterSchedulerServer(s *grpc.Server, srv SchedulerServer) {
	s.RegisterService(&_Scheduler_serviceDesc, srv)
}

func _Scheduler_RegisterTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchedulerTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).RegisterTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Scheduler/RegisterTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).RegisterTask(ctx, req.(*SchedulerTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_UnregisterTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchedulerTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).UnregisterTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Scheduler/UnregisterTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).UnregisterTask(ctx, req.(*SchedulerTask))
	}
	return interceptor(ctx, in, info, handler)
}

var _Scheduler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.Scheduler",
	HandlerType: (*SchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterTask",
			Handler:    _Scheduler_RegisterTask_Handler,
		},
		{
			MethodName: "UnregisterTask",
			Handler:    _Scheduler_UnregisterTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// KBClient is the client API for KB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KBClient interface {
	CreateKnowledgeBase(ctx context.Context, in *KnowledgeBase, opts ...grpc.CallOption) (*KnowledgeBase, error)
	UpdateKnowledgeBase(ctx context.Context, in *KnowledgeBase, opts ...grpc.CallOption) (*KnowledgeBase, error)
	DeleteKnowledgeBase(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	GetKnowledgeBase(ctx context.Context, in *Id, opts ...grpc.CallOption) (*KnowledgeBase, error)
	ListKnowledgeBases(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error)
	CreateArticle(ctx context.Context, in *Article, opts ...grpc.CallOption) (*Article, error)
	UpdateArticle(ctx context.Context, in *Article, opts ...grpc.CallOption) (*Article, error)
	DeleteArticle(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	GetArticle(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Article, error)
	ListArticles(ctx context.Context, in *ListArticleRequest, opts ...grpc.CallOption) (*Response, error)
	CreateArticleCategory(ctx context.Context, in *ArticleCategory, opts ...grpc.CallOption) (*ArticleCategory, error)
	UpdateArticleCategory(ctx context.Context, in *ArticleCategory, opts ...grpc.CallOption) (*ArticleCategory, error)
	DeleteArticleCategory(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	GetArticleCategory(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ArticleCategory, error)
	ListArticleCategories(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error)
}

type kBClient struct {
	cc grpc.ClientConnInterface
}

func NewKBClient(cc grpc.ClientConnInterface) KBClient {
	return &kBClient{cc}
}

func (c *kBClient) CreateKnowledgeBase(ctx context.Context, in *KnowledgeBase, opts ...grpc.CallOption) (*KnowledgeBase, error) {
	out := new(KnowledgeBase)
	err := c.cc.Invoke(ctx, "/header.KB/CreateKnowledgeBase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kBClient) UpdateKnowledgeBase(ctx context.Context, in *KnowledgeBase, opts ...grpc.CallOption) (*KnowledgeBase, error) {
	out := new(KnowledgeBase)
	err := c.cc.Invoke(ctx, "/header.KB/UpdateKnowledgeBase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kBClient) DeleteKnowledgeBase(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.KB/DeleteKnowledgeBase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kBClient) GetKnowledgeBase(ctx context.Context, in *Id, opts ...grpc.CallOption) (*KnowledgeBase, error) {
	out := new(KnowledgeBase)
	err := c.cc.Invoke(ctx, "/header.KB/GetKnowledgeBase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kBClient) ListKnowledgeBases(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/header.KB/ListKnowledgeBases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kBClient) CreateArticle(ctx context.Context, in *Article, opts ...grpc.CallOption) (*Article, error) {
	out := new(Article)
	err := c.cc.Invoke(ctx, "/header.KB/CreateArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kBClient) UpdateArticle(ctx context.Context, in *Article, opts ...grpc.CallOption) (*Article, error) {
	out := new(Article)
	err := c.cc.Invoke(ctx, "/header.KB/UpdateArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kBClient) DeleteArticle(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.KB/DeleteArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kBClient) GetArticle(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Article, error) {
	out := new(Article)
	err := c.cc.Invoke(ctx, "/header.KB/GetArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kBClient) ListArticles(ctx context.Context, in *ListArticleRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/header.KB/ListArticles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kBClient) CreateArticleCategory(ctx context.Context, in *ArticleCategory, opts ...grpc.CallOption) (*ArticleCategory, error) {
	out := new(ArticleCategory)
	err := c.cc.Invoke(ctx, "/header.KB/CreateArticleCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kBClient) UpdateArticleCategory(ctx context.Context, in *ArticleCategory, opts ...grpc.CallOption) (*ArticleCategory, error) {
	out := new(ArticleCategory)
	err := c.cc.Invoke(ctx, "/header.KB/UpdateArticleCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kBClient) DeleteArticleCategory(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.KB/DeleteArticleCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kBClient) GetArticleCategory(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ArticleCategory, error) {
	out := new(ArticleCategory)
	err := c.cc.Invoke(ctx, "/header.KB/GetArticleCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kBClient) ListArticleCategories(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/header.KB/ListArticleCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KBServer is the server API for KB service.
type KBServer interface {
	CreateKnowledgeBase(context.Context, *KnowledgeBase) (*KnowledgeBase, error)
	UpdateKnowledgeBase(context.Context, *KnowledgeBase) (*KnowledgeBase, error)
	DeleteKnowledgeBase(context.Context, *Id) (*Empty, error)
	GetKnowledgeBase(context.Context, *Id) (*KnowledgeBase, error)
	ListKnowledgeBases(context.Context, *Id) (*Response, error)
	CreateArticle(context.Context, *Article) (*Article, error)
	UpdateArticle(context.Context, *Article) (*Article, error)
	DeleteArticle(context.Context, *Id) (*Empty, error)
	GetArticle(context.Context, *Id) (*Article, error)
	ListArticles(context.Context, *ListArticleRequest) (*Response, error)
	CreateArticleCategory(context.Context, *ArticleCategory) (*ArticleCategory, error)
	UpdateArticleCategory(context.Context, *ArticleCategory) (*ArticleCategory, error)
	DeleteArticleCategory(context.Context, *Id) (*Empty, error)
	GetArticleCategory(context.Context, *Id) (*ArticleCategory, error)
	ListArticleCategories(context.Context, *Id) (*Response, error)
}

// UnimplementedKBServer can be embedded to have forward compatible implementations.
type UnimplementedKBServer struct {
}

func (*UnimplementedKBServer) CreateKnowledgeBase(context.Context, *KnowledgeBase) (*KnowledgeBase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKnowledgeBase not implemented")
}
func (*UnimplementedKBServer) UpdateKnowledgeBase(context.Context, *KnowledgeBase) (*KnowledgeBase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKnowledgeBase not implemented")
}
func (*UnimplementedKBServer) DeleteKnowledgeBase(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKnowledgeBase not implemented")
}
func (*UnimplementedKBServer) GetKnowledgeBase(context.Context, *Id) (*KnowledgeBase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKnowledgeBase not implemented")
}
func (*UnimplementedKBServer) ListKnowledgeBases(context.Context, *Id) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKnowledgeBases not implemented")
}
func (*UnimplementedKBServer) CreateArticle(context.Context, *Article) (*Article, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArticle not implemented")
}
func (*UnimplementedKBServer) UpdateArticle(context.Context, *Article) (*Article, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArticle not implemented")
}
func (*UnimplementedKBServer) DeleteArticle(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArticle not implemented")
}
func (*UnimplementedKBServer) GetArticle(context.Context, *Id) (*Article, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticle not implemented")
}
func (*UnimplementedKBServer) ListArticles(context.Context, *ListArticleRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArticles not implemented")
}
func (*UnimplementedKBServer) CreateArticleCategory(context.Context, *ArticleCategory) (*ArticleCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArticleCategory not implemented")
}
func (*UnimplementedKBServer) UpdateArticleCategory(context.Context, *ArticleCategory) (*ArticleCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArticleCategory not implemented")
}
func (*UnimplementedKBServer) DeleteArticleCategory(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArticleCategory not implemented")
}
func (*UnimplementedKBServer) GetArticleCategory(context.Context, *Id) (*ArticleCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleCategory not implemented")
}
func (*UnimplementedKBServer) ListArticleCategories(context.Context, *Id) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArticleCategories not implemented")
}

func RegisterKBServer(s *grpc.Server, srv KBServer) {
	s.RegisterService(&_KB_serviceDesc, srv)
}

func _KB_CreateKnowledgeBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KnowledgeBase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KBServer).CreateKnowledgeBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.KB/CreateKnowledgeBase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KBServer).CreateKnowledgeBase(ctx, req.(*KnowledgeBase))
	}
	return interceptor(ctx, in, info, handler)
}

func _KB_UpdateKnowledgeBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KnowledgeBase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KBServer).UpdateKnowledgeBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.KB/UpdateKnowledgeBase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KBServer).UpdateKnowledgeBase(ctx, req.(*KnowledgeBase))
	}
	return interceptor(ctx, in, info, handler)
}

func _KB_DeleteKnowledgeBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KBServer).DeleteKnowledgeBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.KB/DeleteKnowledgeBase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KBServer).DeleteKnowledgeBase(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _KB_GetKnowledgeBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KBServer).GetKnowledgeBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.KB/GetKnowledgeBase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KBServer).GetKnowledgeBase(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _KB_ListKnowledgeBases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KBServer).ListKnowledgeBases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.KB/ListKnowledgeBases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KBServer).ListKnowledgeBases(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _KB_CreateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Article)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KBServer).CreateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.KB/CreateArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KBServer).CreateArticle(ctx, req.(*Article))
	}
	return interceptor(ctx, in, info, handler)
}

func _KB_UpdateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Article)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KBServer).UpdateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.KB/UpdateArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KBServer).UpdateArticle(ctx, req.(*Article))
	}
	return interceptor(ctx, in, info, handler)
}

func _KB_DeleteArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KBServer).DeleteArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.KB/DeleteArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KBServer).DeleteArticle(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _KB_GetArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KBServer).GetArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.KB/GetArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KBServer).GetArticle(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _KB_ListArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KBServer).ListArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.KB/ListArticles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KBServer).ListArticles(ctx, req.(*ListArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KB_CreateArticleCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleCategory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KBServer).CreateArticleCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.KB/CreateArticleCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KBServer).CreateArticleCategory(ctx, req.(*ArticleCategory))
	}
	return interceptor(ctx, in, info, handler)
}

func _KB_UpdateArticleCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleCategory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KBServer).UpdateArticleCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.KB/UpdateArticleCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KBServer).UpdateArticleCategory(ctx, req.(*ArticleCategory))
	}
	return interceptor(ctx, in, info, handler)
}

func _KB_DeleteArticleCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KBServer).DeleteArticleCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.KB/DeleteArticleCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KBServer).DeleteArticleCategory(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _KB_GetArticleCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KBServer).GetArticleCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.KB/GetArticleCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KBServer).GetArticleCategory(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _KB_ListArticleCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KBServer).ListArticleCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.KB/ListArticleCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KBServer).ListArticleCategories(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _KB_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.KB",
	HandlerType: (*KBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateKnowledgeBase",
			Handler:    _KB_CreateKnowledgeBase_Handler,
		},
		{
			MethodName: "UpdateKnowledgeBase",
			Handler:    _KB_UpdateKnowledgeBase_Handler,
		},
		{
			MethodName: "DeleteKnowledgeBase",
			Handler:    _KB_DeleteKnowledgeBase_Handler,
		},
		{
			MethodName: "GetKnowledgeBase",
			Handler:    _KB_GetKnowledgeBase_Handler,
		},
		{
			MethodName: "ListKnowledgeBases",
			Handler:    _KB_ListKnowledgeBases_Handler,
		},
		{
			MethodName: "CreateArticle",
			Handler:    _KB_CreateArticle_Handler,
		},
		{
			MethodName: "UpdateArticle",
			Handler:    _KB_UpdateArticle_Handler,
		},
		{
			MethodName: "DeleteArticle",
			Handler:    _KB_DeleteArticle_Handler,
		},
		{
			MethodName: "GetArticle",
			Handler:    _KB_GetArticle_Handler,
		},
		{
			MethodName: "ListArticles",
			Handler:    _KB_ListArticles_Handler,
		},
		{
			MethodName: "CreateArticleCategory",
			Handler:    _KB_CreateArticleCategory_Handler,
		},
		{
			MethodName: "UpdateArticleCategory",
			Handler:    _KB_UpdateArticleCategory_Handler,
		},
		{
			MethodName: "DeleteArticleCategory",
			Handler:    _KB_DeleteArticleCategory_Handler,
		},
		{
			MethodName: "GetArticleCategory",
			Handler:    _KB_GetArticleCategory_Handler,
		},
		{
			MethodName: "ListArticleCategories",
			Handler:    _KB_ListArticleCategories_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
