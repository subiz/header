// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1-devel
// 	protoc        v3.17.2
// source: service.proto

package header

import (
	context "context"
	account "github.com/subiz/header/account"
	noti5 "github.com/subiz/header/noti5"
	payment "github.com/subiz/header/payment"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_service_proto protoreflect.FileDescriptor

var file_service_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x1a, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x35, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x32, 0xcd, 0x0d, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x67, 0x72, 0x12,
	0x37, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x13,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x1a, 0x13, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x37, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x13, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x13, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x2b, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0a, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x13, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x44,
	0x0a, 0x14, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x4e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x0e, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x0b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x1a, 0x0e, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x0b, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x1a, 0x0d, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x12, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x0e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x1a, 0x0e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x12, 0x38, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x4e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x0e, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x0e, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x0b,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x1a, 0x0e, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x08, 0x47,
	0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x49, 0x64, 0x1a, 0x0e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49,
	0x64, 0x1a, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x0a, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0f, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64,
	0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x2e, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x0a, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x14, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0x36, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x14, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x14, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x0e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x1a, 0x0e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x12, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x73, 0x12, 0x22, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x48, 0x6f,
	0x6c, 0x69, 0x64, 0x61, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x49, 0x64, 0x1a, 0x0e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x14, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x49, 0x64, 0x1a, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x0d, 0x4c,
	0x6f, 0x67, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x27, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0c, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x0e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x13, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x12, 0x11, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x1a, 0x11, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x12,
	0x4f, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x6f, 0x67,
	0x73, 0x12, 0x1d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0xf6, 0x08, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x67, 0x72, 0x12, 0x33, 0x0a, 0x0b,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x15, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x12, 0x42, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x65, 0x61, 0x64, 0x73,
	0x12, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x40, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x61,
	0x64, 0x73, 0x12, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x65, 0x61, 0x64,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x11, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x1a, 0x11, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x26, 0x0a, 0x0a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x62, 0x7a, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x0a,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x08, 0x52, 0x65,
	0x61, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x49, 0x64, 0x1a, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x42, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12,
	0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a, 0x0a, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x12, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x73, 0x1a,
	0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x30,
	0x0a, 0x0a, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x56, 0x69, 0x65, 0x77, 0x12, 0x10, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x1a, 0x10,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77,
	0x12, 0x27, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x12, 0x0a,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x07, 0x47, 0x65, 0x74,
	0x56, 0x69, 0x65, 0x77, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64,
	0x1a, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69,
	0x65, 0x77, 0x12, 0x2a, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x73, 0x12,
	0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x11, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x73, 0x12, 0x3b,
	0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x56, 0x69, 0x65, 0x77,
	0x73, 0x12, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56,
	0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0d, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x0b, 0x55,
	0x70, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x0d, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x28, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0e, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x08,
	0x47, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x32, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x4c, 0x65, 0x61, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x13, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x32,
	0x0a, 0x0c, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x13,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x35, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0x71, 0x0a, 0x0b, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x12, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x56, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0d, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x32, 0xbe, 0x03, 0x0a,
	0x07, 0x4c, 0x69, 0x76, 0x65, 0x4d, 0x67, 0x72, 0x12, 0x3c, 0x0a, 0x0f, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x1a, 0x11, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x11, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x16, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x12, 0x30, 0x0a, 0x09, 0x54, 0x6f, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x1a, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x0c, 0x54, 0x6f, 0x70, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64,
	0x1a, 0x17, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x2b, 0x0a, 0x08, 0x54, 0x6f, 0x70,
	0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49,
	0x64, 0x1a, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x2f, 0x0a, 0x0a, 0x54, 0x6f, 0x70, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64,
	0x1a, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x32, 0x0a, 0x10, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x40, 0x0a, 0x09, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x18, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xc8, 0x01,
	0x0a, 0x07, 0x4e, 0x6f, 0x74, 0x65, 0x4d, 0x67, 0x72, 0x12, 0x34, 0x0a, 0x09, 0x4c, 0x69, 0x73,
	0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x18, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12,
	0x25, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x0c, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x1a, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4e, 0x6f, 0x74, 0x65, 0x12, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4e, 0x6f,
	0x74, 0x65, 0x1a, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x65,
	0x12, 0x36, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x19,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0x9c, 0x02, 0x0a, 0x0d, 0x41, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x67, 0x72, 0x12, 0x32, 0x0a, 0x0f, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0a, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a,
	0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x10, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0a,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x0e, 0x52, 0x65, 0x61,
	0x64, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x10, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0xcc, 0x02, 0x0a, 0x0c, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x67, 0x72, 0x12, 0x47, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x55, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1b, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x1b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x45, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x74, 0x74, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0x69, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x51,
	0x0a, 0x14, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0xd4, 0x01, 0x0a, 0x07, 0x52, 0x75, 0x6c, 0x65, 0x4d, 0x67, 0x72, 0x12, 0x28, 0x0a,
	0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0c, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x1a, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52,
	0x75, 0x6c, 0x65, 0x1a, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x27, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x08, 0x52, 0x65,
	0x61, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x49, 0x64, 0x1a, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x26, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x0a, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x32, 0xe0, 0x09, 0x0a, 0x0f, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x67, 0x72, 0x12, 0x38, 0x0a, 0x0a,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x15, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2b, 0x0a, 0x0b, 0x50, 0x6f, 0x6e, 0x67, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x0f, 0x45, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x49, 0x64, 0x1a, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c,
	0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x20, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x12,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x73, 0x1a,
	0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x0f, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x11,
	0x55, 0x6e, 0x74, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x10, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x10, 0x4c, 0x65, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x23, 0x0a, 0x06, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x0a, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a,
	0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x76, 0x6f, 0x73, 0x12, 0x15, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x16, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0d, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x13, 0x55, 0x6e,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x14, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x65,
	0x61, 0x64, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64,
	0x63, 0x68, 0x61, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x64, 0x63, 0x68, 0x61, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x1a, 0x16, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x64,
	0x63, 0x68, 0x61, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x37, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x45, 0x6e, 0x64, 0x63, 0x68, 0x61, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x16, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x64, 0x63, 0x68, 0x61, 0x74, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x0c, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x42, 0x6f, 0x74, 0x12, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x6f,
	0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x0e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x0a, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x11, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x32, 0xba, 0x02, 0x0a, 0x0b,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4d, 0x67, 0x72, 0x12, 0x34, 0x0a, 0x0e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x10, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x1a,
	0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x12, 0x34, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x1a, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a,
	0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x16, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x1a, 0x11, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x29, 0x0a,
	0x0c, 0x50, 0x69, 0x63, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0xc7, 0x01, 0x0a, 0x06, 0x54, 0x61, 0x67,
	0x4d, 0x67, 0x72, 0x12, 0x25, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67,
	0x12, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x67, 0x1a, 0x0b, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x67, 0x12, 0x25, 0x0a, 0x09, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x12, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x54, 0x61, 0x67, 0x1a, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x61,
	0x67, 0x12, 0x26, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x12, 0x0a,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x08, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x61, 0x67, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49,
	0x64, 0x1a, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x12,
	0x21, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54,
	0x61, 0x67, 0x32, 0xa7, 0x01, 0x0a, 0x0e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x67, 0x72, 0x12, 0x28, 0x0a, 0x0b, 0x44, 0x65, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64,
	0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x34, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a,
	0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x65, 0x12, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x7a, 0x0a, 0x08,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x67, 0x72, 0x12, 0x3d, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x11, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x32, 0xba, 0x01, 0x0a, 0x17, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x2d, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x43, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x25,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x99, 0x01, 0x0a, 0x07, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x67,
	0x72, 0x12, 0x34, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x12, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x1a, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x69, 0x67,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x52, 0x65, 0x61, 0x64, 0x12,
	0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x12, 0x13,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x32, 0xb0, 0x02, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x35, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x52, 0x65, 0x61, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x0a, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0e, 0x2e, 0x6e, 0x6f, 0x74, 0x69,
	0x35, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x19, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x35, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x0e, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x35, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x04, 0x4e, 0x6f, 0x74, 0x69, 0x12, 0x0f,
	0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x35, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x4e, 0x6f, 0x74, 0x69, 0x1a,
	0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x27,
	0x0a, 0x08, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0c, 0x2e, 0x6e, 0x6f, 0x74,
	0x69, 0x35, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x0b, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0c, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x35, 0x2e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x10, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x0c, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x35, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x32, 0x45, 0x0a, 0x17, 0x53, 0x75, 0x62, 0x69, 0x7a, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x67, 0x72, 0x12,
	0x2a, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x12, 0x0d, 0x2e,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x1a, 0x0d, 0x2e, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x32, 0x91, 0x11, 0x0a, 0x0a,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x67, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x53, 0x75, 0x62, 0x12, 0x19, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x75, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63,
	0x53, 0x75, 0x62, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x12, 0x15, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x10, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x12, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x15, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x15, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x15, 0x2e, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x16, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x1a,
	0x16, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x45, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x16,
	0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x1a, 0x16, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x30,
	0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49,
	0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x39, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x49, 0x64, 0x1a, 0x17, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x03, 0x50,
	0x61, 0x79, 0x12, 0x13, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x12, 0x33, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x10, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0x10, 0x2e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x0d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x10, 0x2e, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0x10,
	0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x12, 0x40, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x73, 0x12, 0x1b, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x11, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x73, 0x12, 0x37, 0x0a, 0x0c, 0x44, 0x72, 0x61, 0x66, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x12, 0x15, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x10, 0x2e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x11, 0x44,
	0x69, 0x66, 0x66, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x17, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x53,
	0x75, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x2e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x0a,
	0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x2e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x10, 0x2e, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2a,
	0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x0d, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0e, 0x2e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x0d, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x0a, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0f, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x39, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x48, 0x74, 0x6d, 0x6c,
	0x12, 0x10, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x1a, 0x0f, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x3d, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x1a, 0x14, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x33, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x12, 0x13, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x12, 0x33, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x4c,
	0x6f, 0x67, 0x73, 0x12, 0x18, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x45, 0x0a, 0x13,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x1a, 0x16, 0x2e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x16, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x40, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x4e, 0x0a, 0x15, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x2e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x4f, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x12, 0x1e, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x11, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x6f, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x12, 0x0d, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x12, 0x11, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x1a, 0x11, 0x2e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x12, 0x3f, 0x0a,
	0x13, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x64, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64,
	0x1a, 0x1c, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x6f, 0x67, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x73, 0x12, 0x4b,
	0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x12, 0x0a, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x22, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x4c, 0x6f, 0x67, 0x42, 0x69, 0x6c, 0x6c, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x73, 0x12, 0x49, 0x0a, 0x18, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x61, 0x69, 0x64, 0x46, 0x6f, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x49, 0x64, 0x1a, 0x21, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x6f,
	0x67, 0x50, 0x61, 0x69, 0x64, 0x46, 0x6f, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x72, 0x73, 0x12, 0x47, 0x0a, 0x14, 0x50, 0x61, 0x69, 0x64, 0x46, 0x6f,
	0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x12, 0x20,
	0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x6f, 0x67, 0x50, 0x61, 0x69, 0x64,
	0x46, 0x6f, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72,
	0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32,
	0x3a, 0x0a, 0x06, 0x50, 0x75, 0x62, 0x73, 0x75, 0x62, 0x12, 0x30, 0x0a, 0x07, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x12, 0x16, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0d, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0x3e, 0x0a, 0x08, 0x52,
	0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x53, 0x68, 0x61, 0x72, 0x64,
	0x53, 0x65, 0x6e, 0x64, 0x12, 0x16, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0d, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0x8e, 0x02, 0x0a, 0x0e,
	0x46, 0x61, 0x62, 0x69, 0x6b, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3c,
	0x0a, 0x14, 0x52, 0x65, 0x61, 0x64, 0x46, 0x62, 0x46, 0x61, 0x6e, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x49, 0x64, 0x1a, 0x18, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x62, 0x46, 0x61,
	0x6e, 0x70, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x4c, 0x0a, 0x16,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x62, 0x46, 0x61, 0x6e, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x46, 0x62, 0x46, 0x61, 0x6e, 0x70, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x1a, 0x18, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x62, 0x46, 0x61, 0x6e, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x15, 0x4c, 0x69,
	0x73, 0x74, 0x46, 0x62, 0x46, 0x61, 0x6e, 0x70, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a,
	0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x62, 0x46, 0x61, 0x6e, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x0b, 0x4c, 0x69,
	0x73, 0x74, 0x46, 0x62, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x46,
	0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x32, 0xf7, 0x0b, 0x0a,
	0x0d, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x29,
	0x0a, 0x04, 0x52, 0x65, 0x61, 0x64, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x49, 0x64, 0x1a, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x69, 0x64, 0x67,
	0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x06, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x69, 0x64,
	0x67, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x15, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x38, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64,
	0x1a, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x12, 0x52,
	0x65, 0x61, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x12, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x65,
	0x62, 0x12, 0x3a, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x49, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a,
	0x10, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x18, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x1a, 0x1a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4f, 0x0a,
	0x0e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12,
	0x1d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41,
	0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x4b, 0x0a, 0x11, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x3b,
	0x0a, 0x0b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x15, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x1a, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x11, 0x4c,
	0x69, 0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x16, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x15, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x30, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x62, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a,
	0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x11, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x57, 0x65, 0x62, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x1a, 0x11, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x3e, 0x0a, 0x16,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x11, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x57, 0x65, 0x62, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x1a, 0x11, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x37, 0x0a, 0x0f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12,
	0x11, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x1a, 0x11, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57,
	0x65, 0x62, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x3f, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x11,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x1a, 0x11, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x12, 0x38, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x62, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x0a,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x12, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x34,
	0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x62, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x52, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x65,
	0x62, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x1e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x65, 0x62, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x65, 0x62, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x49, 0x64, 0x1a, 0x16, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x11,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x15, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x0a, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x55, 0x72, 0x6c, 0x73, 0x32, 0xa4, 0x05, 0x0a, 0x06, 0x42, 0x69, 0x7a, 0x62, 0x6f,
	0x74, 0x12, 0x24, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6f, 0x74, 0x73, 0x12, 0x0a, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x42, 0x6f,
	0x74, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0b, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x74, 0x12, 0x2d, 0x0a, 0x11, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x74, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x74, 0x1a, 0x0b, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x6f, 0x74, 0x12, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x74, 0x1a, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x74,
	0x12, 0x25, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x74, 0x12, 0x0b, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x74, 0x1a, 0x0b, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x74, 0x12, 0x26, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x42, 0x6f, 0x74, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64,
	0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x2f, 0x0a, 0x07, 0x4f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x74, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x30, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x6f, 0x74, 0x12, 0x15, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x74, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x2f, 0x0a, 0x07, 0x53, 0x74, 0x6f, 0x70, 0x42, 0x6f, 0x74, 0x12, 0x15, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x74, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x31, 0x0a, 0x09, 0x54, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x74, 0x52, 0x75, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x42, 0x6f, 0x74, 0x12, 0x18, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x42, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x1a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2d, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x74, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x74, 0x1a, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x74, 0x12,
	0x2c, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6f, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a,
	0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x74, 0x73, 0x32, 0xaf, 0x04,
	0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x31, 0x0a, 0x0d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x0f, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x1a, 0x0f, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x34, 0x0a,
	0x0b, 0x50, 0x69, 0x6e, 0x67, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x0a, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64,
	0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x2c, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x12,
	0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x10, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x2a, 0x0a,
	0x0b, 0x52, 0x65, 0x61, 0x64, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x0a, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x31, 0x0a, 0x0d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x0f, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x1a, 0x0f, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x32, 0x0a, 0x13,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a,
	0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x12, 0x5a, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x22, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x17, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x30, 0x0a,
	0x10, 0x53, 0x65, 0x6e, 0x64, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32,
	0xfd, 0x01, 0x0a, 0x07, 0x4e, 0x6f, 0x74, 0x69, 0x62, 0x6f, 0x78, 0x12, 0x2b, 0x0a, 0x04, 0x53,
	0x65, 0x6e, 0x64, 0x12, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x08, 0x4d, 0x61, 0x72, 0x6b,
	0x52, 0x65, 0x61, 0x64, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64,
	0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x44, 0x0a, 0x15, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x12, 0x1c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x58, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x22, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x65, 0x73, 0x32,
	0xb3, 0x04, 0x0a, 0x09, 0x57, 0x61, 0x74, 0x63, 0x68, 0x68, 0x74, 0x74, 0x70, 0x12, 0x31, 0x0a,
	0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x12, 0x0f,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x1a,
	0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x2a, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x62, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x0c,
	0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x0a, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x57, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x0d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x12, 0x0f, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x1a, 0x0f, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a,
	0x0b, 0x52, 0x65, 0x61, 0x64, 0x57, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x12, 0x0a, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x1a, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x57, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x12, 0x53, 0x0a, 0x17, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x12, 0x21, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x57, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x45,
	0x0a, 0x10, 0x52, 0x65, 0x61, 0x64, 0x57, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x12, 0x1b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x70,
	0x61, 0x67, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x51, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x57,
	0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x1c, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x12, 0x4b, 0x0a, 0x14, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x57, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x12, 0x1c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x70, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x32, 0xc9, 0x05, 0x0a, 0x05, 0x48, 0x6f, 0x6c, 0x61, 0x70, 0x12,
	0x2f, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x74, 0x12, 0x0e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x2a, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x54, 0x61, 0x67, 0x53, 0x65, 0x74,
	0x12, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x67, 0x1a, 0x0d, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x0a,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0c, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x33, 0x0a, 0x13, 0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x0b, 0x46, 0x72, 0x65, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x1a, 0x0d, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x0a, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x55, 0x0a, 0x12, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x22, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x12, 0x36, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73,
	0x12, 0x1a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x73, 0x12, 0x50, 0x0a, 0x13, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73,
	0x12, 0x22, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x0b, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x32, 0x0a,
	0x16, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x75, 0x63,
	0x68, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x49, 0x64, 0x73, 0x1a, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64,
	0x73, 0x42, 0x19, 0x5a, 0x17, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x7a, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var file_service_proto_goTypes = []interface{}{
	(*account.AgentGroup)(nil),                // 0: account.AgentGroup
	(*Id)(nil),                                // 1: header.Id
	(*account.ResetPasswordRequest)(nil),      // 2: account.ResetPasswordRequest
	(*account.NewPassword)(nil),               // 3: account.NewPassword
	(*account.Agent)(nil),                     // 4: account.Agent
	(*account.Token)(nil),                     // 5: account.Token
	(*account.Account)(nil),                   // 6: account.Account
	(*account.CreateAccountRequest)(nil),      // 7: account.CreateAccountRequest
	(*account.GroupMember)(nil),               // 8: account.GroupMember
	(*account.SyncPublicHolidaysRequest)(nil), // 9: account.SyncPublicHolidaysRequest
	(*LoginSession)(nil),                      // 10: header.LoginSession
	(*LangMessage)(nil),                       // 11: header.LangMessage
	(*Changelog)(nil),                         // 12: header.Changelog
	(*ListChangelogsRequest)(nil),             // 13: header.ListChangelogsRequest
	(*SearchRequest)(nil),                     // 14: header.SearchRequest
	(*LeadSearchRequest)(nil),                 // 15: header.LeadSearchRequest
	(*UserAlias)(nil),                         // 16: header.UserAlias
	(*User)(nil),                              // 17: header.User
	(*UserReportRequest)(nil),                 // 18: header.UserReportRequest
	(*Ids)(nil),                               // 19: header.Ids
	(*UserView)(nil),                          // 20: header.UserView
	(*UserViewCondition)(nil),                 // 21: header.UserViewCondition
	(*Label)(nil),                             // 22: header.Label
	(*UserRequest)(nil),                       // 23: header.UserRequest
	(*LocationParams)(nil),                    // 24: header.LocationParams
	(*UserInfoParams)(nil),                    // 25: header.UserInfoParams
	(*EventParams)(nil),                       // 26: header.EventParams
	(*PresencesRequest)(nil),                  // 27: header.PresencesRequest
	(*ListNotesRequest)(nil),                  // 28: header.ListNotesRequest
	(*Note)(nil),                              // 29: header.Note
	(*DeleteNoteRequest)(nil),                 // 30: header.DeleteNoteRequest
	(*Automation)(nil),                        // 31: header.Automation
	(*Empty)(nil),                             // 32: header.Empty
	(*AttributeDefinition)(nil),               // 33: header.AttributeDefinition
	(*DeleteAttrRequest)(nil),                 // 34: header.DeleteAttrRequest
	(*AvailibilityReportRequest)(nil),         // 35: header.AvailibilityReportRequest
	(*Rule)(nil),                              // 36: header.Rule
	(*AssignRequest)(nil),                     // 37: header.AssignRequest
	(*Event)(nil),                             // 38: header.Event
	(*StartRequest)(nil),                      // 39: header.StartRequest
	(*ListConversationsRequest)(nil),          // 40: header.ListConversationsRequest
	(*TagRequest)(nil),                        // 41: header.TagRequest
	(*ConversationMember)(nil),                // 42: header.ConversationMember
	(*Conversation)(nil),                      // 43: header.Conversation
	(*EndchatSetting)(nil),                    // 44: header.EndchatSetting
	(*BotTerminated)(nil),                     // 45: header.BotTerminated
	(*Template)(nil),                          // 46: header.Template
	(*SearchTemplate)(nil),                    // 47: header.SearchTemplate
	(*Tag)(nil),                               // 48: header.Tag
	(*Integration)(nil),                       // 49: header.Integration
	(*ListUserEventsRequest)(nil),             // 50: header.ListUserEventsRequest
	(*UserEvent)(nil),                         // 51: header.UserEvent
	(*ListConversationEventsRequest)(nil),     // 52: header.ListConversationEventsRequest
	(*FileHeader)(nil),                        // 53: header.FileHeader
	(*FileRequest)(nil),                       // 54: header.FileRequest
	(*noti5.Setting)(nil),                     // 55: noti5.Setting
	(*noti5.PushNoti)(nil),                    // 56: noti5.PushNoti
	(*noti5.Token)(nil),                       // 57: noti5.Token
	(*payment.Bill)(nil),                      // 58: payment.Bill
	(*account.SearchSubRequest)(nil),          // 59: account.SearchSubRequest
	(*payment.Subscription)(nil),              // 60: payment.Subscription
	(*payment.PaymentMethod)(nil),             // 61: payment.PaymentMethod
	(*payment.PayRequest)(nil),                // 62: payment.PayRequest
	(*payment.Invoice)(nil),                   // 63: payment.Invoice
	(*payment.ListInvoiceRequest)(nil),        // 64: payment.ListInvoiceRequest
	(*payment.DiffSubRequest)(nil),            // 65: payment.DiffSubRequest
	(*payment.ListCommentsRequest)(nil),       // 66: payment.ListCommentsRequest
	(*payment.Comment)(nil),                   // 67: payment.Comment
	(*ExchangeRate)(nil),                      // 68: header.ExchangeRate
	(*payment.ListLogsRequest)(nil),           // 69: payment.ListLogsRequest
	(*payment.PromotionCode)(nil),             // 70: payment.PromotionCode
	(*payment.String)(nil),                    // 71: payment.String
	(*payment.PromotionCodeRequest)(nil),      // 72: payment.PromotionCodeRequest
	(*payment.ListPromotionCodeRequest)(nil),  // 73: payment.ListPromotionCodeRequest
	(*payment.SearchReferredRequest)(nil),     // 74: payment.SearchReferredRequest
	(*payment.Referral)(nil),                  // 75: payment.Referral
	(*payment.LogPaidForAgentReferrer)(nil),   // 76: payment.LogPaidForAgentReferrer
	(*PublishMessage)(nil),                    // 77: header.PublishMessage
	(*FbFanpageSetting)(nil),                  // 78: header.FbFanpageSetting
	(*WidgetSetting)(nil),                     // 79: header.WidgetSetting
	(*Impression)(nil),                        // 80: header.Impression
	(*Conversion)(nil),                        // 81: header.Conversion
	(*UserCampaignStatus)(nil),                // 82: header.UserCampaignStatus
	(*ReportCampaignRequest)(nil),             // 83: header.ReportCampaignRequest
	(*ConversionRequest)(nil),                 // 84: header.ConversionRequest
	(*UploadedImage)(nil),                     // 85: header.UploadedImage
	(*WebPlugin)(nil),                         // 86: header.WebPlugin
	(*ReportWebPluginRequest)(nil),            // 87: header.ReportWebPluginRequest
	(*Bot)(nil),                               // 88: header.Bot
	(*BotRunRequest)(nil),                     // 89: header.BotRunRequest
	(*ReportBotRequest)(nil),                  // 90: header.ReportBotRequest
	(*ListObjectsRequest)(nil),                // 91: header.ListObjectsRequest
	(*Webhook)(nil),                           // 92: header.Webhook
	(*RecentIndexDeliveryRequest)(nil),        // 93: header.RecentIndexDeliveryRequest
	(*DeliveryRequest)(nil),                   // 94: header.DeliveryRequest
	(*Notification)(nil),                      // 95: header.Notification
	(*CompactedNotiRequest)(nil),              // 96: header.CompactedNotiRequest
	(*RecentCompactedNotiRequest)(nil),        // 97: header.RecentCompactedNotiRequest
	(*Webpage)(nil),                           // 98: header.Webpage
	(*RecentWebpageCheckRequest)(nil),         // 99: header.RecentWebpageCheckRequest
	(*WebpageCheckRequest)(nil),               // 100: header.WebpageCheckRequest
	(*WebpageReportRequest)(nil),              // 101: header.WebpageReportRequest
	(*AccountImage)(nil),                      // 102: header.AccountImage
	(*UserMetricsRequest)(nil),                // 103: header.UserMetricsRequest
	(*ConversationMetricsRequest)(nil),        // 104: header.ConversationMetricsRequest
	(*AgentMetricsRequest)(nil),               // 105: header.AgentMetricsRequest
	(*account.Agents)(nil),                    // 106: account.Agents
	(*account.AgentGroups)(nil),               // 107: account.AgentGroups
	(*account.BusinessHours)(nil),             // 108: account.BusinessHours
	(*LoginSessions)(nil),                     // 109: header.LoginSessions
	(*Lang)(nil),                              // 110: header.Lang
	(*ListChangelogsResponse)(nil),            // 111: header.ListChangelogsResponse
	(*Users)(nil),                             // 112: header.Users
	(*LeadSearchResult)(nil),                  // 113: header.LeadSearchResult
	(*UserReportResult)(nil),                  // 114: header.UserReportResult
	(*UserViews)(nil),                         // 115: header.UserViews
	(*Labels)(nil),                            // 116: header.Labels
	(*Locations)(nil),                         // 117: header.Locations
	(*Events)(nil),                            // 118: header.Events
	(*LocationMetrics)(nil),                   // 119: header.LocationMetrics
	(*PageMetrics)(nil),                       // 120: header.PageMetrics
	(*SourceMetrics)(nil),                     // 121: header.SourceMetrics
	(*UserMetric)(nil),                        // 122: header.UserMetric
	(*PresencesResponse)(nil),                 // 123: header.PresencesResponse
	(*Notes)(nil),                             // 124: header.Notes
	(*Automations)(nil),                       // 125: header.Automations
	(*AttributeDefinitions)(nil),              // 126: header.AttributeDefinitions
	(*ReportResponse)(nil),                    // 127: header.ReportResponse
	(*Route)(nil),                             // 128: header.Route
	(*RouteResult)(nil),                       // 129: header.RouteResult
	(*Conversations)(nil),                     // 130: header.Conversations
	(*account.Presence)(nil),                  // 131: account.Presence
	(*Templates)(nil),                         // 132: header.Templates
	(*Tags)(nil),                              // 133: header.Tags
	(*Integrations)(nil),                      // 134: header.Integrations
	(*PresignResult)(nil),                     // 135: header.PresignResult
	(*File)(nil),                              // 136: header.File
	(*account.AccSubs)(nil),                   // 137: account.AccSubs
	(*payment.PaymentMethods)(nil),            // 138: payment.PaymentMethods
	(*payment.Invoices)(nil),                  // 139: payment.Invoices
	(*payment.Comments)(nil),                  // 140: payment.Comments
	(*payment.Plans)(nil),                     // 141: payment.Plans
	(*payment.Logs)(nil),                      // 142: payment.Logs
	(*payment.PromotionCodes)(nil),            // 143: payment.PromotionCodes
	(*payment.ReferralResponse)(nil),          // 144: payment.ReferralResponse
	(*payment.LogAccountReferreds)(nil),       // 145: payment.LogAccountReferreds
	(*payment.LogBillByAccountReferreds)(nil), // 146: payment.LogBillByAccountReferreds
	(*payment.LogPaidForAgentReferrers)(nil),  // 147: payment.LogPaidForAgentReferrers
	(*FbFanpageSettings)(nil),                 // 148: header.FbFanpageSettings
	(*FacebookPosts)(nil),                     // 149: header.FacebookPosts
	(*WidgetUserSetting)(nil),                 // 150: header.WidgetUserSetting
	(*AccountWeb)(nil),                        // 151: header.AccountWeb
	(*ReportCampaignResponse)(nil),            // 152: header.ReportCampaignResponse
	(*Conversions)(nil),                       // 153: header.Conversions
	(*ConversionsExported)(nil),               // 154: header.ConversionsExported
	(*UploadedImages)(nil),                    // 155: header.UploadedImages
	(*WebPlugins)(nil),                        // 156: header.WebPlugins
	(*ReportWebPluginResponse)(nil),           // 157: header.ReportWebPluginResponse
	(*NotifProfiles)(nil),                     // 158: header.NotifProfiles
	(*Urls)(nil),                              // 159: header.Urls
	(*Bots)(nil),                              // 160: header.Bots
	(*ReportBotResponse)(nil),                 // 161: header.ReportBotResponse
	(*ListObjectsResponse)(nil),               // 162: header.ListObjectsResponse
	(*WebhookTestResult)(nil),                 // 163: header.WebhookTestResult
	(*Webhooks)(nil),                          // 164: header.Webhooks
	(*WebhookDeliveries)(nil),                 // 165: header.WebhookDeliveries
	(*WebhookDelivery)(nil),                   // 166: header.WebhookDelivery
	(*CompactedNoties)(nil),                   // 167: header.CompactedNoties
	(*Webpages)(nil),                          // 168: header.Webpages
	(*WebpageChecks)(nil),                     // 169: header.WebpageChecks
	(*WebpageCheck)(nil),                      // 170: header.WebpageCheck
	(*WebpageReportDataSet)(nil),              // 171: header.WebpageReportDataSet
	(*UserMetrics)(nil),                       // 172: header.UserMetrics
	(*ConversationMetrics)(nil),               // 173: header.ConversationMetrics
	(*AgentMetrics)(nil),                      // 174: header.AgentMetrics
}
var file_service_proto_depIdxs = []int32{
	0,   // 0: header.AccountMgr.CreateGroup:input_type -> account.AgentGroup
	0,   // 1: header.AccountMgr.UpdateGroup:input_type -> account.AgentGroup
	1,   // 2: header.AccountMgr.GetGroup:input_type -> header.Id
	2,   // 3: header.AccountMgr.RequestResetPassword:input_type -> account.ResetPasswordRequest
	3,   // 4: header.AccountMgr.UpdatePassword:input_type -> account.NewPassword
	4,   // 5: header.AccountMgr.UpdateAgent:input_type -> account.Agent
	1,   // 6: header.AccountMgr.DeleteAgent:input_type -> header.Id
	4,   // 7: header.AccountMgr.RequestChangeEmail:input_type -> account.Agent
	5,   // 8: header.AccountMgr.ConfirmChangeEmail:input_type -> account.Token
	3,   // 9: header.AccountMgr.AcceptInvitation:input_type -> account.NewPassword
	5,   // 10: header.AccountMgr.GetInvitation:input_type -> account.Token
	4,   // 11: header.AccountMgr.InviteAgent:input_type -> account.Agent
	1,   // 12: header.AccountMgr.GetAgent:input_type -> header.Id
	5,   // 13: header.AccountMgr.ConfirmAccount:input_type -> account.Token
	1,   // 14: header.AccountMgr.GetAccount:input_type -> header.Id
	6,   // 15: header.AccountMgr.UpdateAccount:input_type -> account.Account
	7,   // 16: header.AccountMgr.CreateAccount:input_type -> account.CreateAccountRequest
	1,   // 17: header.AccountMgr.ListAgents:input_type -> header.Id
	1,   // 18: header.AccountMgr.DeleteGroup:input_type -> header.Id
	1,   // 19: header.AccountMgr.ListGroups:input_type -> header.Id
	8,   // 20: header.AccountMgr.AddAgentToGroup:input_type -> account.GroupMember
	8,   // 21: header.AccountMgr.RemoveAgentFromGroup:input_type -> account.GroupMember
	4,   // 22: header.AccountMgr.ChangeEmail:input_type -> account.Agent
	9,   // 23: header.AccountMgr.SyncPublicHolidays:input_type -> account.SyncPublicHolidaysRequest
	1,   // 24: header.AccountMgr.TransferOwner:input_type -> header.Id
	10,  // 25: header.AccountMgr.CheckLoginSession:input_type -> header.LoginSession
	1,   // 26: header.AccountMgr.ListLoginSessions:input_type -> header.Id
	10,  // 27: header.AccountMgr.LogoutSession:input_type -> header.LoginSession
	1,   // 28: header.AccountMgr.GetLanguage:input_type -> header.Id
	11,  // 29: header.AccountMgr.UpdateLanguage:input_type -> header.LangMessage
	12,  // 30: header.AccountMgr.CreateChangelog:input_type -> header.Changelog
	13,  // 31: header.AccountMgr.ListChangelogs:input_type -> header.ListChangelogsRequest
	14,  // 32: header.UserMgr.SearchUsers:input_type -> header.SearchRequest
	15,  // 33: header.UserMgr.SearchLeads:input_type -> header.LeadSearchRequest
	15,  // 34: header.UserMgr.ListLeads:input_type -> header.LeadSearchRequest
	16,  // 35: header.UserMgr.MergeUser:input_type -> header.UserAlias
	17,  // 36: header.UserMgr.CreateUser:input_type -> header.User
	1,   // 37: header.UserMgr.CreateSbzUserByAgent:input_type -> header.Id
	17,  // 38: header.UserMgr.UpdateUser:input_type -> header.User
	1,   // 39: header.UserMgr.ReadUser:input_type -> header.Id
	18,  // 40: header.UserMgr.ReportUsers:input_type -> header.UserReportRequest
	19,  // 41: header.UserMgr.MatchUsers:input_type -> header.Ids
	20,  // 42: header.UserMgr.UpsertView:input_type -> header.UserView
	1,   // 43: header.UserMgr.DeleteView:input_type -> header.Id
	1,   // 44: header.UserMgr.GetView:input_type -> header.Id
	1,   // 45: header.UserMgr.ListViews:input_type -> header.Id
	21,  // 46: header.UserMgr.ListUserInViews:input_type -> header.UserViewCondition
	22,  // 47: header.UserMgr.UpsertLabel:input_type -> header.Label
	1,   // 48: header.UserMgr.DeleteLabel:input_type -> header.Id
	1,   // 49: header.UserMgr.ListLabels:input_type -> header.Id
	1,   // 50: header.UserMgr.GetLabel:input_type -> header.Id
	23,  // 51: header.UserMgr.AddLeadOwner:input_type -> header.UserRequest
	23,  // 52: header.UserMgr.RemoveLeadOwner:input_type -> header.UserRequest
	23,  // 53: header.UserMgr.AddUserLabel:input_type -> header.UserRequest
	23,  // 54: header.UserMgr.RemoveUserLabel:input_type -> header.UserRequest
	17,  // 55: header.UserPersist.UpdateUser:input_type -> header.User
	21,  // 56: header.UserPersist.FilterUsers:input_type -> header.UserViewCondition
	24,  // 57: header.LiveMgr.SearchLocations:input_type -> header.LocationParams
	25,  // 58: header.LiveMgr.FilterActiveUsers:input_type -> header.UserInfoParams
	26,  // 59: header.LiveMgr.TopEvents:input_type -> header.EventParams
	1,   // 60: header.LiveMgr.TopLocations:input_type -> header.Id
	1,   // 61: header.LiveMgr.TopPages:input_type -> header.Id
	1,   // 62: header.LiveMgr.TopSources:input_type -> header.Id
	1,   // 63: header.LiveMgr.CountActiveUsers:input_type -> header.Id
	27,  // 64: header.LiveMgr.Presences:input_type -> header.PresencesRequest
	28,  // 65: header.NoteMgr.ListNotes:input_type -> header.ListNotesRequest
	29,  // 66: header.NoteMgr.AddNote:input_type -> header.Note
	29,  // 67: header.NoteMgr.UpdateNote:input_type -> header.Note
	30,  // 68: header.NoteMgr.DeleteNote:input_type -> header.DeleteNoteRequest
	1,   // 69: header.AutomationMgr.ListAutomations:input_type -> header.Id
	31,  // 70: header.AutomationMgr.UpdateAutomation:input_type -> header.Automation
	1,   // 71: header.AutomationMgr.DeleteAutomation:input_type -> header.Id
	1,   // 72: header.AutomationMgr.ReadAutomation:input_type -> header.Id
	31,  // 73: header.AutomationMgr.CreateAutomation:input_type -> header.Automation
	32,  // 74: header.AttributeMgr.ListAttributeDefinitions:input_type -> header.Empty
	33,  // 75: header.AttributeMgr.CreateAttributeDefinition:input_type -> header.AttributeDefinition
	33,  // 76: header.AttributeMgr.UpdateAttributeDefinition:input_type -> header.AttributeDefinition
	34,  // 77: header.AttributeMgr.DeleteAttributeDefinition:input_type -> header.DeleteAttrRequest
	35,  // 78: header.ConversationReporter.ReportAvailibilities:input_type -> header.AvailibilityReportRequest
	36,  // 79: header.RuleMgr.UpdateRule:input_type -> header.Rule
	36,  // 80: header.RuleMgr.CreateRule:input_type -> header.Rule
	1,   // 81: header.RuleMgr.DeleteRule:input_type -> header.Id
	1,   // 82: header.RuleMgr.ReadRule:input_type -> header.Id
	1,   // 83: header.RuleMgr.ListRules:input_type -> header.Id
	37,  // 84: header.ConversationMgr.AssignRule:input_type -> header.AssignRequest
	38,  // 85: header.ConversationMgr.PongMessage:input_type -> header.Event
	39,  // 86: header.ConversationMgr.StartConversation:input_type -> header.StartRequest
	1,   // 87: header.ConversationMgr.EndConversation:input_type -> header.Id
	1,   // 88: header.ConversationMgr.GetConversation:input_type -> header.Id
	40,  // 89: header.ConversationMgr.ListConversations:input_type -> header.ListConversationsRequest
	19,  // 90: header.ConversationMgr.MatchConversations:input_type -> header.Ids
	41,  // 91: header.ConversationMgr.TagConversation:input_type -> header.TagRequest
	41,  // 92: header.ConversationMgr.UntagConversation:input_type -> header.TagRequest
	42,  // 93: header.ConversationMgr.JoinConversation:input_type -> header.ConversationMember
	42,  // 94: header.ConversationMgr.LeftConversation:input_type -> header.ConversationMember
	1,   // 95: header.ConversationMgr.Typing:input_type -> header.Id
	43,  // 96: header.ConversationMgr.UpdateConversationInfo:input_type -> header.Conversation
	14,  // 97: header.ConversationMgr.SearchConvos:input_type -> header.SearchRequest
	43,  // 98: header.ConversationMgr.UpdateMuteConversation:input_type -> header.Conversation
	43,  // 99: header.ConversationMgr.UnwatchConversation:input_type -> header.Conversation
	43,  // 100: header.ConversationMgr.MarkReadConversation:input_type -> header.Conversation
	44,  // 101: header.ConversationMgr.UpdateEndchatSetting:input_type -> header.EndchatSetting
	1,   // 102: header.ConversationMgr.GetEndchatSetting:input_type -> header.Id
	45,  // 103: header.ConversationMgr.TerminateBot:input_type -> header.BotTerminated
	1,   // 104: header.ConversationMgr.UpdatePresence:input_type -> header.Id
	46,  // 105: header.TemplateMgr.CreateTemplate:input_type -> header.Template
	46,  // 106: header.TemplateMgr.UpdateTemplate:input_type -> header.Template
	1,   // 107: header.TemplateMgr.DeleteTemplate:input_type -> header.Id
	1,   // 108: header.TemplateMgr.GetTemplate:input_type -> header.Id
	47,  // 109: header.TemplateMgr.ListTemplates:input_type -> header.SearchTemplate
	1,   // 110: header.TemplateMgr.PickTemplate:input_type -> header.Id
	48,  // 111: header.TagMgr.CreateTag:input_type -> header.Tag
	48,  // 112: header.TagMgr.UpdateTag:input_type -> header.Tag
	1,   // 113: header.TagMgr.DeleteTag:input_type -> header.Id
	1,   // 114: header.TagMgr.ListTags:input_type -> header.Id
	1,   // 115: header.TagMgr.GetTag:input_type -> header.Id
	1,   // 116: header.IntegrationMgr.Deintegrate:input_type -> header.Id
	1,   // 117: header.IntegrationMgr.ListIntegrations:input_type -> header.Id
	49,  // 118: header.IntegrationMgr.Integrate:input_type -> header.Integration
	50,  // 119: header.EventMgr.SearchEvents:input_type -> header.ListUserEventsRequest
	51,  // 120: header.EventMgr.CreateEvent:input_type -> header.UserEvent
	38,  // 121: header.ConversationEventReader.SendMessage:input_type -> header.Event
	38,  // 122: header.ConversationEventReader.UpdateMessage:input_type -> header.Event
	52,  // 123: header.ConversationEventReader.ListEvents:input_type -> header.ListConversationEventsRequest
	53,  // 124: header.FileMgr.Presign:input_type -> header.FileHeader
	54,  // 125: header.FileMgr.Read:input_type -> header.FileRequest
	54,  // 126: header.FileMgr.Uploaded:input_type -> header.FileRequest
	1,   // 127: header.Noti5Service.ReadNotificationSetting:input_type -> header.Id
	55,  // 128: header.Noti5Service.UpdateNotificationSetting:input_type -> noti5.Setting
	56,  // 129: header.Noti5Service.Noti:input_type -> noti5.PushNoti
	57,  // 130: header.Noti5Service.AddToken:input_type -> noti5.Token
	57,  // 131: header.Noti5Service.RemoveToken:input_type -> noti5.Token
	57,  // 132: header.Noti5Service.CheckTokenExists:input_type -> noti5.Token
	58,  // 133: header.SubizInternalPaymentMgr.CreateBill:input_type -> payment.Bill
	59,  // 134: header.PaymentMgr.SearchSub:input_type -> account.SearchSubRequest
	60,  // 135: header.PaymentMgr.Purchase:input_type -> payment.Subscription
	60,  // 136: header.PaymentMgr.UpdateSubscription:input_type -> payment.Subscription
	1,   // 137: header.PaymentMgr.GetSubscription:input_type -> header.Id
	61,  // 138: header.PaymentMgr.AddPaymentMethod:input_type -> payment.PaymentMethod
	61,  // 139: header.PaymentMgr.UpdatePaymentMethod:input_type -> payment.PaymentMethod
	1,   // 140: header.PaymentMgr.DeletePaymentMethod:input_type -> header.Id
	1,   // 141: header.PaymentMgr.ListPaymentMethods:input_type -> header.Id
	62,  // 142: header.PaymentMgr.Pay:input_type -> payment.PayRequest
	63,  // 143: header.PaymentMgr.CreateInvoice:input_type -> payment.Invoice
	63,  // 144: header.PaymentMgr.UpdateInvoice:input_type -> payment.Invoice
	64,  // 145: header.PaymentMgr.FilterInvoices:input_type -> payment.ListInvoiceRequest
	60,  // 146: header.PaymentMgr.DraftInvoice:input_type -> payment.Subscription
	65,  // 147: header.PaymentMgr.DiffSubscriptions:input_type -> payment.DiffSubRequest
	66,  // 148: header.PaymentMgr.ListComments:input_type -> payment.ListCommentsRequest
	67,  // 149: header.PaymentMgr.AddComment:input_type -> payment.Comment
	32,  // 150: header.PaymentMgr.ListPlans:input_type -> header.Empty
	1,   // 151: header.PaymentMgr.ExportInvoice:input_type -> header.Id
	63,  // 152: header.PaymentMgr.ConvertInvoiceToHtml:input_type -> payment.Invoice
	68,  // 153: header.PaymentMgr.GetExchangeRate:input_type -> header.ExchangeRate
	62,  // 154: header.PaymentMgr.TransferMoney:input_type -> payment.PayRequest
	69,  // 155: header.PaymentMgr.ListLogs:input_type -> payment.ListLogsRequest
	70,  // 156: header.PaymentMgr.CreatePromotionCode:input_type -> payment.PromotionCode
	71,  // 157: header.PaymentMgr.GetPromotionCode:input_type -> payment.String
	72,  // 158: header.PaymentMgr.UsePromotionCode:input_type -> payment.PromotionCodeRequest
	72,  // 159: header.PaymentMgr.ValidatePromotionCode:input_type -> payment.PromotionCodeRequest
	73,  // 160: header.PaymentMgr.ListPromotionCode:input_type -> payment.ListPromotionCodeRequest
	1,   // 161: header.PaymentMgr.DeletePromotionCode:input_type -> header.Id
	74,  // 162: header.PaymentMgr.SearchReferral:input_type -> payment.SearchReferredRequest
	1,   // 163: header.PaymentMgr.GetReferral:input_type -> header.Id
	32,  // 164: header.PaymentMgr.ListTopReferral:input_type -> header.Empty
	75,  // 165: header.PaymentMgr.UpdateReferral:input_type -> payment.Referral
	1,   // 166: header.PaymentMgr.ListAccountReferred:input_type -> header.Id
	1,   // 167: header.PaymentMgr.ListBillByAccountReferred:input_type -> header.Id
	1,   // 168: header.PaymentMgr.ListPaidForAgentReferrer:input_type -> header.Id
	76,  // 169: header.PaymentMgr.PaidForAgentReferrer:input_type -> payment.LogPaidForAgentReferrer
	77,  // 170: header.Pubsub.Publish:input_type -> header.PublishMessage
	77,  // 171: header.Realtime.ShardSend:input_type -> header.PublishMessage
	1,   // 172: header.FabikonService.ReadFbFanpageSetting:input_type -> header.Id
	78,  // 173: header.FabikonService.UpdateFbFanpageSetting:input_type -> header.FbFanpageSetting
	1,   // 174: header.FabikonService.ListFbFanpageSettings:input_type -> header.Id
	1,   // 175: header.FabikonService.ListFbPosts:input_type -> header.Id
	1,   // 176: header.WidgetService.Read:input_type -> header.Id
	79,  // 177: header.WidgetService.Update:input_type -> header.WidgetSetting
	1,   // 178: header.WidgetService.ReadUserSetting:input_type -> header.Id
	1,   // 179: header.WidgetService.ReadAccountSetting:input_type -> header.Id
	80,  // 180: header.WidgetService.SubmitImpression:input_type -> header.Impression
	81,  // 181: header.WidgetService.SubmitConversion:input_type -> header.Conversion
	82,  // 182: header.WidgetService.SubmitUserCampaignStatus:input_type -> header.UserCampaignStatus
	83,  // 183: header.WidgetService.ReportCampaign:input_type -> header.ReportCampaignRequest
	84,  // 184: header.WidgetService.ListConversions:input_type -> header.ConversionRequest
	84,  // 185: header.WidgetService.ExportConversions:input_type -> header.ConversionRequest
	85,  // 186: header.WidgetService.UploadImage:input_type -> header.UploadedImage
	1,   // 187: header.WidgetService.ListUploadedImage:input_type -> header.Id
	85,  // 188: header.WidgetService.DeleteUploadedImage:input_type -> header.UploadedImage
	1,   // 189: header.WidgetService.ListWebPlugins:input_type -> header.Id
	86,  // 190: header.WidgetService.UpdateWebPlugin:input_type -> header.WebPlugin
	86,  // 191: header.WidgetService.UpdateWebPluginEnabled:input_type -> header.WebPlugin
	86,  // 192: header.WidgetService.CreateWebPlugin:input_type -> header.WebPlugin
	1,   // 193: header.WidgetService.DeleteWebPlugin:input_type -> header.Id
	86,  // 194: header.WidgetService.UpdateWebPluginTemplate:input_type -> header.WebPlugin
	1,   // 195: header.WidgetService.ListWebPluginTemplates:input_type -> header.Id
	1,   // 196: header.WidgetService.DeleteWebPluginTemplate:input_type -> header.Id
	87,  // 197: header.WidgetService.ReportWebPlugin:input_type -> header.ReportWebPluginRequest
	1,   // 198: header.WidgetService.SearchImages:input_type -> header.Id
	1,   // 199: header.WidgetService.ListNotifProfiles:input_type -> header.Id
	1,   // 200: header.WidgetService.ListNotifBackgrounds:input_type -> header.Id
	1,   // 201: header.Bizbot.ListBots:input_type -> header.Id
	1,   // 202: header.Bizbot.GetBot:input_type -> header.Id
	88,  // 203: header.Bizbot.UpdateBotRunState:input_type -> header.Bot
	88,  // 204: header.Bizbot.CreateBot:input_type -> header.Bot
	88,  // 205: header.Bizbot.UpdateBot:input_type -> header.Bot
	1,   // 206: header.Bizbot.DeleteBot:input_type -> header.Id
	89,  // 207: header.Bizbot.OnEvent:input_type -> header.BotRunRequest
	89,  // 208: header.Bizbot.StartBot:input_type -> header.BotRunRequest
	89,  // 209: header.Bizbot.StopBot:input_type -> header.BotRunRequest
	89,  // 210: header.Bizbot.TryAction:input_type -> header.BotRunRequest
	90,  // 211: header.Bizbot.ReportBot:input_type -> header.ReportBotRequest
	91,  // 212: header.Bizbot.ListObjects:input_type -> header.ListObjectsRequest
	88,  // 213: header.Bizbot.CreateBotRevision:input_type -> header.Bot
	1,   // 214: header.Bizbot.ListBotRevisions:input_type -> header.Id
	92,  // 215: header.Sendback.CreateWebhook:input_type -> header.Webhook
	1,   // 216: header.Sendback.PingWebhook:input_type -> header.Id
	1,   // 217: header.Sendback.DeleteWebhook:input_type -> header.Id
	1,   // 218: header.Sendback.ListWebhooks:input_type -> header.Id
	1,   // 219: header.Sendback.ReadWebhook:input_type -> header.Id
	92,  // 220: header.Sendback.UpdateWebhook:input_type -> header.Webhook
	1,   // 221: header.Sendback.UpdateWebhookSecret:input_type -> header.Id
	93,  // 222: header.Sendback.ListRecentIndexDeliveries:input_type -> header.RecentIndexDeliveryRequest
	94,  // 223: header.Sendback.GetDelivery:input_type -> header.DeliveryRequest
	38,  // 224: header.Sendback.SendWebhookEvent:input_type -> header.Event
	95,  // 225: header.Notibox.Send:input_type -> header.Notification
	1,   // 226: header.Notibox.MarkRead:input_type -> header.Id
	96,  // 227: header.Notibox.MarkReadCompactedNoti:input_type -> header.CompactedNotiRequest
	97,  // 228: header.Notibox.ListRecentCompactedNoties:input_type -> header.RecentCompactedNotiRequest
	98,  // 229: header.Watchhttp.CreateWebpage:input_type -> header.Webpage
	1,   // 230: header.Watchhttp.DeleteWebpage:input_type -> header.Id
	1,   // 231: header.Watchhttp.ListWebpages:input_type -> header.Id
	98,  // 232: header.Watchhttp.UpdateWebpage:input_type -> header.Webpage
	1,   // 233: header.Watchhttp.ReadWebpage:input_type -> header.Id
	99,  // 234: header.Watchhttp.ListRecentWebpageChecks:input_type -> header.RecentWebpageCheckRequest
	100, // 235: header.Watchhttp.ReadWebpageCheck:input_type -> header.WebpageCheckRequest
	101, // 236: header.Watchhttp.ReportWebpageChecks:input_type -> header.WebpageReportRequest
	101, // 237: header.Watchhttp.SummaryWebpageChecks:input_type -> header.WebpageReportRequest
	4,   // 238: header.Holap.AppendAgentSet:input_type -> account.Agent
	48,  // 239: header.Holap.AppendTagSet:input_type -> header.Tag
	17,  // 240: header.Holap.UpdateUser:input_type -> header.User
	43,  // 241: header.Holap.UpdateConversation:input_type -> header.Conversation
	38,  // 242: header.Holap.OnConversationEvent:input_type -> header.Event
	102, // 243: header.Holap.FreeAccount:input_type -> header.AccountImage
	103, // 244: header.Holap.ReportUser:input_type -> header.UserMetricsRequest
	104, // 245: header.Holap.ReportConversation:input_type -> header.ConversationMetricsRequest
	103, // 246: header.Holap.ListUserIds:input_type -> header.UserMetricsRequest
	104, // 247: header.Holap.ListConversationIds:input_type -> header.ConversationMetricsRequest
	105, // 248: header.Holap.ReportAgent:input_type -> header.AgentMetricsRequest
	19,  // 249: header.Holap.ListChannelTouchpoints:input_type -> header.Ids
	0,   // 250: header.AccountMgr.CreateGroup:output_type -> account.AgentGroup
	0,   // 251: header.AccountMgr.UpdateGroup:output_type -> account.AgentGroup
	0,   // 252: header.AccountMgr.GetGroup:output_type -> account.AgentGroup
	32,  // 253: header.AccountMgr.RequestResetPassword:output_type -> header.Empty
	4,   // 254: header.AccountMgr.UpdatePassword:output_type -> account.Agent
	4,   // 255: header.AccountMgr.UpdateAgent:output_type -> account.Agent
	4,   // 256: header.AccountMgr.DeleteAgent:output_type -> account.Agent
	32,  // 257: header.AccountMgr.RequestChangeEmail:output_type -> header.Empty
	4,   // 258: header.AccountMgr.ConfirmChangeEmail:output_type -> account.Agent
	4,   // 259: header.AccountMgr.AcceptInvitation:output_type -> account.Agent
	4,   // 260: header.AccountMgr.GetInvitation:output_type -> account.Agent
	4,   // 261: header.AccountMgr.InviteAgent:output_type -> account.Agent
	4,   // 262: header.AccountMgr.GetAgent:output_type -> account.Agent
	6,   // 263: header.AccountMgr.ConfirmAccount:output_type -> account.Account
	6,   // 264: header.AccountMgr.GetAccount:output_type -> account.Account
	6,   // 265: header.AccountMgr.UpdateAccount:output_type -> account.Account
	6,   // 266: header.AccountMgr.CreateAccount:output_type -> account.Account
	106, // 267: header.AccountMgr.ListAgents:output_type -> account.Agents
	32,  // 268: header.AccountMgr.DeleteGroup:output_type -> header.Empty
	107, // 269: header.AccountMgr.ListGroups:output_type -> account.AgentGroups
	32,  // 270: header.AccountMgr.AddAgentToGroup:output_type -> header.Empty
	32,  // 271: header.AccountMgr.RemoveAgentFromGroup:output_type -> header.Empty
	4,   // 272: header.AccountMgr.ChangeEmail:output_type -> account.Agent
	108, // 273: header.AccountMgr.SyncPublicHolidays:output_type -> account.BusinessHours
	4,   // 274: header.AccountMgr.TransferOwner:output_type -> account.Agent
	10,  // 275: header.AccountMgr.CheckLoginSession:output_type -> header.LoginSession
	109, // 276: header.AccountMgr.ListLoginSessions:output_type -> header.LoginSessions
	32,  // 277: header.AccountMgr.LogoutSession:output_type -> header.Empty
	110, // 278: header.AccountMgr.GetLanguage:output_type -> header.Lang
	11,  // 279: header.AccountMgr.UpdateLanguage:output_type -> header.LangMessage
	12,  // 280: header.AccountMgr.CreateChangelog:output_type -> header.Changelog
	111, // 281: header.AccountMgr.ListChangelogs:output_type -> header.ListChangelogsResponse
	112, // 282: header.UserMgr.SearchUsers:output_type -> header.Users
	113, // 283: header.UserMgr.SearchLeads:output_type -> header.LeadSearchResult
	113, // 284: header.UserMgr.ListLeads:output_type -> header.LeadSearchResult
	16,  // 285: header.UserMgr.MergeUser:output_type -> header.UserAlias
	1,   // 286: header.UserMgr.CreateUser:output_type -> header.Id
	1,   // 287: header.UserMgr.CreateSbzUserByAgent:output_type -> header.Id
	1,   // 288: header.UserMgr.UpdateUser:output_type -> header.Id
	17,  // 289: header.UserMgr.ReadUser:output_type -> header.User
	114, // 290: header.UserMgr.ReportUsers:output_type -> header.UserReportResult
	112, // 291: header.UserMgr.MatchUsers:output_type -> header.Users
	20,  // 292: header.UserMgr.UpsertView:output_type -> header.UserView
	32,  // 293: header.UserMgr.DeleteView:output_type -> header.Empty
	20,  // 294: header.UserMgr.GetView:output_type -> header.UserView
	115, // 295: header.UserMgr.ListViews:output_type -> header.UserViews
	112, // 296: header.UserMgr.ListUserInViews:output_type -> header.Users
	22,  // 297: header.UserMgr.UpsertLabel:output_type -> header.Label
	32,  // 298: header.UserMgr.DeleteLabel:output_type -> header.Empty
	116, // 299: header.UserMgr.ListLabels:output_type -> header.Labels
	22,  // 300: header.UserMgr.GetLabel:output_type -> header.Label
	32,  // 301: header.UserMgr.AddLeadOwner:output_type -> header.Empty
	32,  // 302: header.UserMgr.RemoveLeadOwner:output_type -> header.Empty
	32,  // 303: header.UserMgr.AddUserLabel:output_type -> header.Empty
	32,  // 304: header.UserMgr.RemoveUserLabel:output_type -> header.Empty
	32,  // 305: header.UserPersist.UpdateUser:output_type -> header.Empty
	112, // 306: header.UserPersist.FilterUsers:output_type -> header.Users
	117, // 307: header.LiveMgr.SearchLocations:output_type -> header.Locations
	112, // 308: header.LiveMgr.FilterActiveUsers:output_type -> header.Users
	118, // 309: header.LiveMgr.TopEvents:output_type -> header.Events
	119, // 310: header.LiveMgr.TopLocations:output_type -> header.LocationMetrics
	120, // 311: header.LiveMgr.TopPages:output_type -> header.PageMetrics
	121, // 312: header.LiveMgr.TopSources:output_type -> header.SourceMetrics
	122, // 313: header.LiveMgr.CountActiveUsers:output_type -> header.UserMetric
	123, // 314: header.LiveMgr.Presences:output_type -> header.PresencesResponse
	124, // 315: header.NoteMgr.ListNotes:output_type -> header.Notes
	29,  // 316: header.NoteMgr.AddNote:output_type -> header.Note
	29,  // 317: header.NoteMgr.UpdateNote:output_type -> header.Note
	32,  // 318: header.NoteMgr.DeleteNote:output_type -> header.Empty
	125, // 319: header.AutomationMgr.ListAutomations:output_type -> header.Automations
	31,  // 320: header.AutomationMgr.UpdateAutomation:output_type -> header.Automation
	32,  // 321: header.AutomationMgr.DeleteAutomation:output_type -> header.Empty
	31,  // 322: header.AutomationMgr.ReadAutomation:output_type -> header.Automation
	31,  // 323: header.AutomationMgr.CreateAutomation:output_type -> header.Automation
	126, // 324: header.AttributeMgr.ListAttributeDefinitions:output_type -> header.AttributeDefinitions
	33,  // 325: header.AttributeMgr.CreateAttributeDefinition:output_type -> header.AttributeDefinition
	33,  // 326: header.AttributeMgr.UpdateAttributeDefinition:output_type -> header.AttributeDefinition
	32,  // 327: header.AttributeMgr.DeleteAttributeDefinition:output_type -> header.Empty
	127, // 328: header.ConversationReporter.ReportAvailibilities:output_type -> header.ReportResponse
	36,  // 329: header.RuleMgr.UpdateRule:output_type -> header.Rule
	36,  // 330: header.RuleMgr.CreateRule:output_type -> header.Rule
	32,  // 331: header.RuleMgr.DeleteRule:output_type -> header.Empty
	36,  // 332: header.RuleMgr.ReadRule:output_type -> header.Rule
	128, // 333: header.RuleMgr.ListRules:output_type -> header.Route
	129, // 334: header.ConversationMgr.AssignRule:output_type -> header.RouteResult
	38,  // 335: header.ConversationMgr.PongMessage:output_type -> header.Event
	43,  // 336: header.ConversationMgr.StartConversation:output_type -> header.Conversation
	43,  // 337: header.ConversationMgr.EndConversation:output_type -> header.Conversation
	43,  // 338: header.ConversationMgr.GetConversation:output_type -> header.Conversation
	130, // 339: header.ConversationMgr.ListConversations:output_type -> header.Conversations
	130, // 340: header.ConversationMgr.MatchConversations:output_type -> header.Conversations
	32,  // 341: header.ConversationMgr.TagConversation:output_type -> header.Empty
	32,  // 342: header.ConversationMgr.UntagConversation:output_type -> header.Empty
	32,  // 343: header.ConversationMgr.JoinConversation:output_type -> header.Empty
	32,  // 344: header.ConversationMgr.LeftConversation:output_type -> header.Empty
	32,  // 345: header.ConversationMgr.Typing:output_type -> header.Empty
	43,  // 346: header.ConversationMgr.UpdateConversationInfo:output_type -> header.Conversation
	130, // 347: header.ConversationMgr.SearchConvos:output_type -> header.Conversations
	32,  // 348: header.ConversationMgr.UpdateMuteConversation:output_type -> header.Empty
	32,  // 349: header.ConversationMgr.UnwatchConversation:output_type -> header.Empty
	32,  // 350: header.ConversationMgr.MarkReadConversation:output_type -> header.Empty
	44,  // 351: header.ConversationMgr.UpdateEndchatSetting:output_type -> header.EndchatSetting
	44,  // 352: header.ConversationMgr.GetEndchatSetting:output_type -> header.EndchatSetting
	38,  // 353: header.ConversationMgr.TerminateBot:output_type -> header.Event
	131, // 354: header.ConversationMgr.UpdatePresence:output_type -> account.Presence
	46,  // 355: header.TemplateMgr.CreateTemplate:output_type -> header.Template
	46,  // 356: header.TemplateMgr.UpdateTemplate:output_type -> header.Template
	32,  // 357: header.TemplateMgr.DeleteTemplate:output_type -> header.Empty
	46,  // 358: header.TemplateMgr.GetTemplate:output_type -> header.Template
	132, // 359: header.TemplateMgr.ListTemplates:output_type -> header.Templates
	32,  // 360: header.TemplateMgr.PickTemplate:output_type -> header.Empty
	48,  // 361: header.TagMgr.CreateTag:output_type -> header.Tag
	48,  // 362: header.TagMgr.UpdateTag:output_type -> header.Tag
	32,  // 363: header.TagMgr.DeleteTag:output_type -> header.Empty
	133, // 364: header.TagMgr.ListTags:output_type -> header.Tags
	48,  // 365: header.TagMgr.GetTag:output_type -> header.Tag
	32,  // 366: header.IntegrationMgr.Deintegrate:output_type -> header.Empty
	134, // 367: header.IntegrationMgr.ListIntegrations:output_type -> header.Integrations
	49,  // 368: header.IntegrationMgr.Integrate:output_type -> header.Integration
	118, // 369: header.EventMgr.SearchEvents:output_type -> header.Events
	38,  // 370: header.EventMgr.CreateEvent:output_type -> header.Event
	38,  // 371: header.ConversationEventReader.SendMessage:output_type -> header.Event
	38,  // 372: header.ConversationEventReader.UpdateMessage:output_type -> header.Event
	118, // 373: header.ConversationEventReader.ListEvents:output_type -> header.Events
	135, // 374: header.FileMgr.Presign:output_type -> header.PresignResult
	136, // 375: header.FileMgr.Read:output_type -> header.File
	136, // 376: header.FileMgr.Uploaded:output_type -> header.File
	55,  // 377: header.Noti5Service.ReadNotificationSetting:output_type -> noti5.Setting
	55,  // 378: header.Noti5Service.UpdateNotificationSetting:output_type -> noti5.Setting
	32,  // 379: header.Noti5Service.Noti:output_type -> header.Empty
	32,  // 380: header.Noti5Service.AddToken:output_type -> header.Empty
	32,  // 381: header.Noti5Service.RemoveToken:output_type -> header.Empty
	32,  // 382: header.Noti5Service.CheckTokenExists:output_type -> header.Empty
	58,  // 383: header.SubizInternalPaymentMgr.CreateBill:output_type -> payment.Bill
	137, // 384: header.PaymentMgr.SearchSub:output_type -> account.AccSubs
	63,  // 385: header.PaymentMgr.Purchase:output_type -> payment.Invoice
	60,  // 386: header.PaymentMgr.UpdateSubscription:output_type -> payment.Subscription
	60,  // 387: header.PaymentMgr.GetSubscription:output_type -> payment.Subscription
	61,  // 388: header.PaymentMgr.AddPaymentMethod:output_type -> payment.PaymentMethod
	61,  // 389: header.PaymentMgr.UpdatePaymentMethod:output_type -> payment.PaymentMethod
	32,  // 390: header.PaymentMgr.DeletePaymentMethod:output_type -> header.Empty
	138, // 391: header.PaymentMgr.ListPaymentMethods:output_type -> payment.PaymentMethods
	58,  // 392: header.PaymentMgr.Pay:output_type -> payment.Bill
	63,  // 393: header.PaymentMgr.CreateInvoice:output_type -> payment.Invoice
	63,  // 394: header.PaymentMgr.UpdateInvoice:output_type -> payment.Invoice
	139, // 395: header.PaymentMgr.FilterInvoices:output_type -> payment.Invoices
	63,  // 396: header.PaymentMgr.DraftInvoice:output_type -> payment.Invoice
	63,  // 397: header.PaymentMgr.DiffSubscriptions:output_type -> payment.Invoice
	140, // 398: header.PaymentMgr.ListComments:output_type -> payment.Comments
	67,  // 399: header.PaymentMgr.AddComment:output_type -> payment.Comment
	141, // 400: header.PaymentMgr.ListPlans:output_type -> payment.Plans
	71,  // 401: header.PaymentMgr.ExportInvoice:output_type -> payment.String
	71,  // 402: header.PaymentMgr.ConvertInvoiceToHtml:output_type -> payment.String
	68,  // 403: header.PaymentMgr.GetExchangeRate:output_type -> header.ExchangeRate
	58,  // 404: header.PaymentMgr.TransferMoney:output_type -> payment.Bill
	142, // 405: header.PaymentMgr.ListLogs:output_type -> payment.Logs
	70,  // 406: header.PaymentMgr.CreatePromotionCode:output_type -> payment.PromotionCode
	70,  // 407: header.PaymentMgr.GetPromotionCode:output_type -> payment.PromotionCode
	32,  // 408: header.PaymentMgr.UsePromotionCode:output_type -> header.Empty
	70,  // 409: header.PaymentMgr.ValidatePromotionCode:output_type -> payment.PromotionCode
	143, // 410: header.PaymentMgr.ListPromotionCode:output_type -> payment.PromotionCodes
	32,  // 411: header.PaymentMgr.DeletePromotionCode:output_type -> header.Empty
	75,  // 412: header.PaymentMgr.SearchReferral:output_type -> payment.Referral
	75,  // 413: header.PaymentMgr.GetReferral:output_type -> payment.Referral
	144, // 414: header.PaymentMgr.ListTopReferral:output_type -> payment.ReferralResponse
	75,  // 415: header.PaymentMgr.UpdateReferral:output_type -> payment.Referral
	145, // 416: header.PaymentMgr.ListAccountReferred:output_type -> payment.LogAccountReferreds
	146, // 417: header.PaymentMgr.ListBillByAccountReferred:output_type -> payment.LogBillByAccountReferreds
	147, // 418: header.PaymentMgr.ListPaidForAgentReferrer:output_type -> payment.LogPaidForAgentReferrers
	32,  // 419: header.PaymentMgr.PaidForAgentReferrer:output_type -> header.Empty
	32,  // 420: header.Pubsub.Publish:output_type -> header.Empty
	32,  // 421: header.Realtime.ShardSend:output_type -> header.Empty
	78,  // 422: header.FabikonService.ReadFbFanpageSetting:output_type -> header.FbFanpageSetting
	78,  // 423: header.FabikonService.UpdateFbFanpageSetting:output_type -> header.FbFanpageSetting
	148, // 424: header.FabikonService.ListFbFanpageSettings:output_type -> header.FbFanpageSettings
	149, // 425: header.FabikonService.ListFbPosts:output_type -> header.FacebookPosts
	79,  // 426: header.WidgetService.Read:output_type -> header.WidgetSetting
	79,  // 427: header.WidgetService.Update:output_type -> header.WidgetSetting
	150, // 428: header.WidgetService.ReadUserSetting:output_type -> header.WidgetUserSetting
	151, // 429: header.WidgetService.ReadAccountSetting:output_type -> header.AccountWeb
	80,  // 430: header.WidgetService.SubmitImpression:output_type -> header.Impression
	81,  // 431: header.WidgetService.SubmitConversion:output_type -> header.Conversion
	82,  // 432: header.WidgetService.SubmitUserCampaignStatus:output_type -> header.UserCampaignStatus
	152, // 433: header.WidgetService.ReportCampaign:output_type -> header.ReportCampaignResponse
	153, // 434: header.WidgetService.ListConversions:output_type -> header.Conversions
	154, // 435: header.WidgetService.ExportConversions:output_type -> header.ConversionsExported
	85,  // 436: header.WidgetService.UploadImage:output_type -> header.UploadedImage
	155, // 437: header.WidgetService.ListUploadedImage:output_type -> header.UploadedImages
	32,  // 438: header.WidgetService.DeleteUploadedImage:output_type -> header.Empty
	156, // 439: header.WidgetService.ListWebPlugins:output_type -> header.WebPlugins
	86,  // 440: header.WidgetService.UpdateWebPlugin:output_type -> header.WebPlugin
	86,  // 441: header.WidgetService.UpdateWebPluginEnabled:output_type -> header.WebPlugin
	86,  // 442: header.WidgetService.CreateWebPlugin:output_type -> header.WebPlugin
	32,  // 443: header.WidgetService.DeleteWebPlugin:output_type -> header.Empty
	86,  // 444: header.WidgetService.UpdateWebPluginTemplate:output_type -> header.WebPlugin
	156, // 445: header.WidgetService.ListWebPluginTemplates:output_type -> header.WebPlugins
	32,  // 446: header.WidgetService.DeleteWebPluginTemplate:output_type -> header.Empty
	157, // 447: header.WidgetService.ReportWebPlugin:output_type -> header.ReportWebPluginResponse
	155, // 448: header.WidgetService.SearchImages:output_type -> header.UploadedImages
	158, // 449: header.WidgetService.ListNotifProfiles:output_type -> header.NotifProfiles
	159, // 450: header.WidgetService.ListNotifBackgrounds:output_type -> header.Urls
	160, // 451: header.Bizbot.ListBots:output_type -> header.Bots
	88,  // 452: header.Bizbot.GetBot:output_type -> header.Bot
	88,  // 453: header.Bizbot.UpdateBotRunState:output_type -> header.Bot
	88,  // 454: header.Bizbot.CreateBot:output_type -> header.Bot
	88,  // 455: header.Bizbot.UpdateBot:output_type -> header.Bot
	32,  // 456: header.Bizbot.DeleteBot:output_type -> header.Empty
	32,  // 457: header.Bizbot.OnEvent:output_type -> header.Empty
	32,  // 458: header.Bizbot.StartBot:output_type -> header.Empty
	32,  // 459: header.Bizbot.StopBot:output_type -> header.Empty
	32,  // 460: header.Bizbot.TryAction:output_type -> header.Empty
	161, // 461: header.Bizbot.ReportBot:output_type -> header.ReportBotResponse
	162, // 462: header.Bizbot.ListObjects:output_type -> header.ListObjectsResponse
	88,  // 463: header.Bizbot.CreateBotRevision:output_type -> header.Bot
	160, // 464: header.Bizbot.ListBotRevisions:output_type -> header.Bots
	92,  // 465: header.Sendback.CreateWebhook:output_type -> header.Webhook
	163, // 466: header.Sendback.PingWebhook:output_type -> header.WebhookTestResult
	32,  // 467: header.Sendback.DeleteWebhook:output_type -> header.Empty
	164, // 468: header.Sendback.ListWebhooks:output_type -> header.Webhooks
	92,  // 469: header.Sendback.ReadWebhook:output_type -> header.Webhook
	92,  // 470: header.Sendback.UpdateWebhook:output_type -> header.Webhook
	92,  // 471: header.Sendback.UpdateWebhookSecret:output_type -> header.Webhook
	165, // 472: header.Sendback.ListRecentIndexDeliveries:output_type -> header.WebhookDeliveries
	166, // 473: header.Sendback.GetDelivery:output_type -> header.WebhookDelivery
	32,  // 474: header.Sendback.SendWebhookEvent:output_type -> header.Empty
	32,  // 475: header.Notibox.Send:output_type -> header.Empty
	32,  // 476: header.Notibox.MarkRead:output_type -> header.Empty
	32,  // 477: header.Notibox.MarkReadCompactedNoti:output_type -> header.Empty
	167, // 478: header.Notibox.ListRecentCompactedNoties:output_type -> header.CompactedNoties
	98,  // 479: header.Watchhttp.CreateWebpage:output_type -> header.Webpage
	32,  // 480: header.Watchhttp.DeleteWebpage:output_type -> header.Empty
	168, // 481: header.Watchhttp.ListWebpages:output_type -> header.Webpages
	98,  // 482: header.Watchhttp.UpdateWebpage:output_type -> header.Webpage
	98,  // 483: header.Watchhttp.ReadWebpage:output_type -> header.Webpage
	169, // 484: header.Watchhttp.ListRecentWebpageChecks:output_type -> header.WebpageChecks
	170, // 485: header.Watchhttp.ReadWebpageCheck:output_type -> header.WebpageCheck
	171, // 486: header.Watchhttp.ReportWebpageChecks:output_type -> header.WebpageReportDataSet
	169, // 487: header.Watchhttp.SummaryWebpageChecks:output_type -> header.WebpageChecks
	32,  // 488: header.Holap.AppendAgentSet:output_type -> header.Empty
	32,  // 489: header.Holap.AppendTagSet:output_type -> header.Empty
	32,  // 490: header.Holap.UpdateUser:output_type -> header.Empty
	32,  // 491: header.Holap.UpdateConversation:output_type -> header.Empty
	32,  // 492: header.Holap.OnConversationEvent:output_type -> header.Empty
	32,  // 493: header.Holap.FreeAccount:output_type -> header.Empty
	172, // 494: header.Holap.ReportUser:output_type -> header.UserMetrics
	173, // 495: header.Holap.ReportConversation:output_type -> header.ConversationMetrics
	19,  // 496: header.Holap.ListUserIds:output_type -> header.Ids
	130, // 497: header.Holap.ListConversationIds:output_type -> header.Conversations
	174, // 498: header.Holap.ReportAgent:output_type -> header.AgentMetrics
	19,  // 499: header.Holap.ListChannelTouchpoints:output_type -> header.Ids
	250, // [250:500] is the sub-list for method output_type
	0,   // [0:250] is the sub-list for method input_type
	0,   // [0:0] is the sub-list for extension type_name
	0,   // [0:0] is the sub-list for extension extendee
	0,   // [0:0] is the sub-list for field type_name
}

func init() { file_service_proto_init() }
func file_service_proto_init() {
	if File_service_proto != nil {
		return
	}
	file_header_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   28,
		},
		GoTypes:           file_service_proto_goTypes,
		DependencyIndexes: file_service_proto_depIdxs,
	}.Build()
	File_service_proto = out.File
	file_service_proto_rawDesc = nil
	file_service_proto_goTypes = nil
	file_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AccountMgrClient is the client API for AccountMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AccountMgrClient interface {
	CreateGroup(ctx context.Context, in *account.AgentGroup, opts ...grpc.CallOption) (*account.AgentGroup, error)
	UpdateGroup(ctx context.Context, in *account.AgentGroup, opts ...grpc.CallOption) (*account.AgentGroup, error)
	GetGroup(ctx context.Context, in *Id, opts ...grpc.CallOption) (*account.AgentGroup, error)
	RequestResetPassword(ctx context.Context, in *account.ResetPasswordRequest, opts ...grpc.CallOption) (*Empty, error)
	UpdatePassword(ctx context.Context, in *account.NewPassword, opts ...grpc.CallOption) (*account.Agent, error)
	UpdateAgent(ctx context.Context, in *account.Agent, opts ...grpc.CallOption) (*account.Agent, error)
	DeleteAgent(ctx context.Context, in *Id, opts ...grpc.CallOption) (*account.Agent, error)
	RequestChangeEmail(ctx context.Context, in *account.Agent, opts ...grpc.CallOption) (*Empty, error)
	ConfirmChangeEmail(ctx context.Context, in *account.Token, opts ...grpc.CallOption) (*account.Agent, error)
	AcceptInvitation(ctx context.Context, in *account.NewPassword, opts ...grpc.CallOption) (*account.Agent, error)
	GetInvitation(ctx context.Context, in *account.Token, opts ...grpc.CallOption) (*account.Agent, error)
	InviteAgent(ctx context.Context, in *account.Agent, opts ...grpc.CallOption) (*account.Agent, error)
	GetAgent(ctx context.Context, in *Id, opts ...grpc.CallOption) (*account.Agent, error)
	ConfirmAccount(ctx context.Context, in *account.Token, opts ...grpc.CallOption) (*account.Account, error)
	GetAccount(ctx context.Context, in *Id, opts ...grpc.CallOption) (*account.Account, error)
	UpdateAccount(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error)
	CreateAccount(ctx context.Context, in *account.CreateAccountRequest, opts ...grpc.CallOption) (*account.Account, error)
	ListAgents(ctx context.Context, in *Id, opts ...grpc.CallOption) (*account.Agents, error)
	DeleteGroup(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	ListGroups(ctx context.Context, in *Id, opts ...grpc.CallOption) (*account.AgentGroups, error)
	AddAgentToGroup(ctx context.Context, in *account.GroupMember, opts ...grpc.CallOption) (*Empty, error)
	RemoveAgentFromGroup(ctx context.Context, in *account.GroupMember, opts ...grpc.CallOption) (*Empty, error)
	ChangeEmail(ctx context.Context, in *account.Agent, opts ...grpc.CallOption) (*account.Agent, error)
	SyncPublicHolidays(ctx context.Context, in *account.SyncPublicHolidaysRequest, opts ...grpc.CallOption) (*account.BusinessHours, error)
	TransferOwner(ctx context.Context, in *Id, opts ...grpc.CallOption) (*account.Agent, error)
	CheckLoginSession(ctx context.Context, in *LoginSession, opts ...grpc.CallOption) (*LoginSession, error)
	ListLoginSessions(ctx context.Context, in *Id, opts ...grpc.CallOption) (*LoginSessions, error)
	LogoutSession(ctx context.Context, in *LoginSession, opts ...grpc.CallOption) (*Empty, error)
	GetLanguage(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Lang, error)
	UpdateLanguage(ctx context.Context, in *LangMessage, opts ...grpc.CallOption) (*LangMessage, error)
	CreateChangelog(ctx context.Context, in *Changelog, opts ...grpc.CallOption) (*Changelog, error)
	ListChangelogs(ctx context.Context, in *ListChangelogsRequest, opts ...grpc.CallOption) (*ListChangelogsResponse, error)
}

type accountMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountMgrClient(cc grpc.ClientConnInterface) AccountMgrClient {
	return &accountMgrClient{cc}
}

func (c *accountMgrClient) CreateGroup(ctx context.Context, in *account.AgentGroup, opts ...grpc.CallOption) (*account.AgentGroup, error) {
	out := new(account.AgentGroup)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) UpdateGroup(ctx context.Context, in *account.AgentGroup, opts ...grpc.CallOption) (*account.AgentGroup, error) {
	out := new(account.AgentGroup)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/UpdateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) GetGroup(ctx context.Context, in *Id, opts ...grpc.CallOption) (*account.AgentGroup, error) {
	out := new(account.AgentGroup)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/GetGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) RequestResetPassword(ctx context.Context, in *account.ResetPasswordRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/RequestResetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) UpdatePassword(ctx context.Context, in *account.NewPassword, opts ...grpc.CallOption) (*account.Agent, error) {
	out := new(account.Agent)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/UpdatePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) UpdateAgent(ctx context.Context, in *account.Agent, opts ...grpc.CallOption) (*account.Agent, error) {
	out := new(account.Agent)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/UpdateAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) DeleteAgent(ctx context.Context, in *Id, opts ...grpc.CallOption) (*account.Agent, error) {
	out := new(account.Agent)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/DeleteAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) RequestChangeEmail(ctx context.Context, in *account.Agent, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/RequestChangeEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) ConfirmChangeEmail(ctx context.Context, in *account.Token, opts ...grpc.CallOption) (*account.Agent, error) {
	out := new(account.Agent)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/ConfirmChangeEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) AcceptInvitation(ctx context.Context, in *account.NewPassword, opts ...grpc.CallOption) (*account.Agent, error) {
	out := new(account.Agent)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/AcceptInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) GetInvitation(ctx context.Context, in *account.Token, opts ...grpc.CallOption) (*account.Agent, error) {
	out := new(account.Agent)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/GetInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) InviteAgent(ctx context.Context, in *account.Agent, opts ...grpc.CallOption) (*account.Agent, error) {
	out := new(account.Agent)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/InviteAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) GetAgent(ctx context.Context, in *Id, opts ...grpc.CallOption) (*account.Agent, error) {
	out := new(account.Agent)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/GetAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) ConfirmAccount(ctx context.Context, in *account.Token, opts ...grpc.CallOption) (*account.Account, error) {
	out := new(account.Account)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/ConfirmAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) GetAccount(ctx context.Context, in *Id, opts ...grpc.CallOption) (*account.Account, error) {
	out := new(account.Account)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) UpdateAccount(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error) {
	out := new(account.Account)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/UpdateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) CreateAccount(ctx context.Context, in *account.CreateAccountRequest, opts ...grpc.CallOption) (*account.Account, error) {
	out := new(account.Account)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) ListAgents(ctx context.Context, in *Id, opts ...grpc.CallOption) (*account.Agents, error) {
	out := new(account.Agents)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/ListAgents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) DeleteGroup(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/DeleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) ListGroups(ctx context.Context, in *Id, opts ...grpc.CallOption) (*account.AgentGroups, error) {
	out := new(account.AgentGroups)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/ListGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) AddAgentToGroup(ctx context.Context, in *account.GroupMember, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/AddAgentToGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) RemoveAgentFromGroup(ctx context.Context, in *account.GroupMember, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/RemoveAgentFromGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) ChangeEmail(ctx context.Context, in *account.Agent, opts ...grpc.CallOption) (*account.Agent, error) {
	out := new(account.Agent)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/ChangeEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) SyncPublicHolidays(ctx context.Context, in *account.SyncPublicHolidaysRequest, opts ...grpc.CallOption) (*account.BusinessHours, error) {
	out := new(account.BusinessHours)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/SyncPublicHolidays", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) TransferOwner(ctx context.Context, in *Id, opts ...grpc.CallOption) (*account.Agent, error) {
	out := new(account.Agent)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/TransferOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) CheckLoginSession(ctx context.Context, in *LoginSession, opts ...grpc.CallOption) (*LoginSession, error) {
	out := new(LoginSession)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/CheckLoginSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) ListLoginSessions(ctx context.Context, in *Id, opts ...grpc.CallOption) (*LoginSessions, error) {
	out := new(LoginSessions)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/ListLoginSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) LogoutSession(ctx context.Context, in *LoginSession, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/LogoutSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) GetLanguage(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Lang, error) {
	out := new(Lang)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/GetLanguage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) UpdateLanguage(ctx context.Context, in *LangMessage, opts ...grpc.CallOption) (*LangMessage, error) {
	out := new(LangMessage)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/UpdateLanguage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) CreateChangelog(ctx context.Context, in *Changelog, opts ...grpc.CallOption) (*Changelog, error) {
	out := new(Changelog)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/CreateChangelog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrClient) ListChangelogs(ctx context.Context, in *ListChangelogsRequest, opts ...grpc.CallOption) (*ListChangelogsResponse, error) {
	out := new(ListChangelogsResponse)
	err := c.cc.Invoke(ctx, "/header.AccountMgr/ListChangelogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountMgrServer is the server API for AccountMgr service.
type AccountMgrServer interface {
	CreateGroup(context.Context, *account.AgentGroup) (*account.AgentGroup, error)
	UpdateGroup(context.Context, *account.AgentGroup) (*account.AgentGroup, error)
	GetGroup(context.Context, *Id) (*account.AgentGroup, error)
	RequestResetPassword(context.Context, *account.ResetPasswordRequest) (*Empty, error)
	UpdatePassword(context.Context, *account.NewPassword) (*account.Agent, error)
	UpdateAgent(context.Context, *account.Agent) (*account.Agent, error)
	DeleteAgent(context.Context, *Id) (*account.Agent, error)
	RequestChangeEmail(context.Context, *account.Agent) (*Empty, error)
	ConfirmChangeEmail(context.Context, *account.Token) (*account.Agent, error)
	AcceptInvitation(context.Context, *account.NewPassword) (*account.Agent, error)
	GetInvitation(context.Context, *account.Token) (*account.Agent, error)
	InviteAgent(context.Context, *account.Agent) (*account.Agent, error)
	GetAgent(context.Context, *Id) (*account.Agent, error)
	ConfirmAccount(context.Context, *account.Token) (*account.Account, error)
	GetAccount(context.Context, *Id) (*account.Account, error)
	UpdateAccount(context.Context, *account.Account) (*account.Account, error)
	CreateAccount(context.Context, *account.CreateAccountRequest) (*account.Account, error)
	ListAgents(context.Context, *Id) (*account.Agents, error)
	DeleteGroup(context.Context, *Id) (*Empty, error)
	ListGroups(context.Context, *Id) (*account.AgentGroups, error)
	AddAgentToGroup(context.Context, *account.GroupMember) (*Empty, error)
	RemoveAgentFromGroup(context.Context, *account.GroupMember) (*Empty, error)
	ChangeEmail(context.Context, *account.Agent) (*account.Agent, error)
	SyncPublicHolidays(context.Context, *account.SyncPublicHolidaysRequest) (*account.BusinessHours, error)
	TransferOwner(context.Context, *Id) (*account.Agent, error)
	CheckLoginSession(context.Context, *LoginSession) (*LoginSession, error)
	ListLoginSessions(context.Context, *Id) (*LoginSessions, error)
	LogoutSession(context.Context, *LoginSession) (*Empty, error)
	GetLanguage(context.Context, *Id) (*Lang, error)
	UpdateLanguage(context.Context, *LangMessage) (*LangMessage, error)
	CreateChangelog(context.Context, *Changelog) (*Changelog, error)
	ListChangelogs(context.Context, *ListChangelogsRequest) (*ListChangelogsResponse, error)
}

// UnimplementedAccountMgrServer can be embedded to have forward compatible implementations.
type UnimplementedAccountMgrServer struct {
}

func (*UnimplementedAccountMgrServer) CreateGroup(context.Context, *account.AgentGroup) (*account.AgentGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (*UnimplementedAccountMgrServer) UpdateGroup(context.Context, *account.AgentGroup) (*account.AgentGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (*UnimplementedAccountMgrServer) GetGroup(context.Context, *Id) (*account.AgentGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (*UnimplementedAccountMgrServer) RequestResetPassword(context.Context, *account.ResetPasswordRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestResetPassword not implemented")
}
func (*UnimplementedAccountMgrServer) UpdatePassword(context.Context, *account.NewPassword) (*account.Agent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassword not implemented")
}
func (*UnimplementedAccountMgrServer) UpdateAgent(context.Context, *account.Agent) (*account.Agent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgent not implemented")
}
func (*UnimplementedAccountMgrServer) DeleteAgent(context.Context, *Id) (*account.Agent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAgent not implemented")
}
func (*UnimplementedAccountMgrServer) RequestChangeEmail(context.Context, *account.Agent) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestChangeEmail not implemented")
}
func (*UnimplementedAccountMgrServer) ConfirmChangeEmail(context.Context, *account.Token) (*account.Agent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmChangeEmail not implemented")
}
func (*UnimplementedAccountMgrServer) AcceptInvitation(context.Context, *account.NewPassword) (*account.Agent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptInvitation not implemented")
}
func (*UnimplementedAccountMgrServer) GetInvitation(context.Context, *account.Token) (*account.Agent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvitation not implemented")
}
func (*UnimplementedAccountMgrServer) InviteAgent(context.Context, *account.Agent) (*account.Agent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteAgent not implemented")
}
func (*UnimplementedAccountMgrServer) GetAgent(context.Context, *Id) (*account.Agent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgent not implemented")
}
func (*UnimplementedAccountMgrServer) ConfirmAccount(context.Context, *account.Token) (*account.Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmAccount not implemented")
}
func (*UnimplementedAccountMgrServer) GetAccount(context.Context, *Id) (*account.Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (*UnimplementedAccountMgrServer) UpdateAccount(context.Context, *account.Account) (*account.Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (*UnimplementedAccountMgrServer) CreateAccount(context.Context, *account.CreateAccountRequest) (*account.Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (*UnimplementedAccountMgrServer) ListAgents(context.Context, *Id) (*account.Agents, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgents not implemented")
}
func (*UnimplementedAccountMgrServer) DeleteGroup(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (*UnimplementedAccountMgrServer) ListGroups(context.Context, *Id) (*account.AgentGroups, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroups not implemented")
}
func (*UnimplementedAccountMgrServer) AddAgentToGroup(context.Context, *account.GroupMember) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAgentToGroup not implemented")
}
func (*UnimplementedAccountMgrServer) RemoveAgentFromGroup(context.Context, *account.GroupMember) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAgentFromGroup not implemented")
}
func (*UnimplementedAccountMgrServer) ChangeEmail(context.Context, *account.Agent) (*account.Agent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeEmail not implemented")
}
func (*UnimplementedAccountMgrServer) SyncPublicHolidays(context.Context, *account.SyncPublicHolidaysRequest) (*account.BusinessHours, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncPublicHolidays not implemented")
}
func (*UnimplementedAccountMgrServer) TransferOwner(context.Context, *Id) (*account.Agent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferOwner not implemented")
}
func (*UnimplementedAccountMgrServer) CheckLoginSession(context.Context, *LoginSession) (*LoginSession, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckLoginSession not implemented")
}
func (*UnimplementedAccountMgrServer) ListLoginSessions(context.Context, *Id) (*LoginSessions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLoginSessions not implemented")
}
func (*UnimplementedAccountMgrServer) LogoutSession(context.Context, *LoginSession) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogoutSession not implemented")
}
func (*UnimplementedAccountMgrServer) GetLanguage(context.Context, *Id) (*Lang, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLanguage not implemented")
}
func (*UnimplementedAccountMgrServer) UpdateLanguage(context.Context, *LangMessage) (*LangMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLanguage not implemented")
}
func (*UnimplementedAccountMgrServer) CreateChangelog(context.Context, *Changelog) (*Changelog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChangelog not implemented")
}
func (*UnimplementedAccountMgrServer) ListChangelogs(context.Context, *ListChangelogsRequest) (*ListChangelogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChangelogs not implemented")
}

func RegisterAccountMgrServer(s *grpc.Server, srv AccountMgrServer) {
	s.RegisterService(&_AccountMgr_serviceDesc, srv)
}

func _AccountMgr_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.AgentGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).CreateGroup(ctx, req.(*account.AgentGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.AgentGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/UpdateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).UpdateGroup(ctx, req.(*account.AgentGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/GetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).GetGroup(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_RequestResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).RequestResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/RequestResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).RequestResetPassword(ctx, req.(*account.ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.NewPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/UpdatePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).UpdatePassword(ctx, req.(*account.NewPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_UpdateAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Agent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).UpdateAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/UpdateAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).UpdateAgent(ctx, req.(*account.Agent))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_DeleteAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).DeleteAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/DeleteAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).DeleteAgent(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_RequestChangeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Agent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).RequestChangeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/RequestChangeEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).RequestChangeEmail(ctx, req.(*account.Agent))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_ConfirmChangeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).ConfirmChangeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/ConfirmChangeEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).ConfirmChangeEmail(ctx, req.(*account.Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_AcceptInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.NewPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).AcceptInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/AcceptInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).AcceptInvitation(ctx, req.(*account.NewPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_GetInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).GetInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/GetInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).GetInvitation(ctx, req.(*account.Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_InviteAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Agent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).InviteAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/InviteAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).InviteAgent(ctx, req.(*account.Agent))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_GetAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).GetAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/GetAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).GetAgent(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_ConfirmAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).ConfirmAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/ConfirmAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).ConfirmAccount(ctx, req.(*account.Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).GetAccount(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).UpdateAccount(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).CreateAccount(ctx, req.(*account.CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_ListAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).ListAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/ListAgents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).ListAgents(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).DeleteGroup(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_ListGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).ListGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/ListGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).ListGroups(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_AddAgentToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.GroupMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).AddAgentToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/AddAgentToGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).AddAgentToGroup(ctx, req.(*account.GroupMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_RemoveAgentFromGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.GroupMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).RemoveAgentFromGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/RemoveAgentFromGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).RemoveAgentFromGroup(ctx, req.(*account.GroupMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_ChangeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Agent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).ChangeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/ChangeEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).ChangeEmail(ctx, req.(*account.Agent))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_SyncPublicHolidays_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.SyncPublicHolidaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).SyncPublicHolidays(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/SyncPublicHolidays",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).SyncPublicHolidays(ctx, req.(*account.SyncPublicHolidaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_TransferOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).TransferOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/TransferOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).TransferOwner(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_CheckLoginSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).CheckLoginSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/CheckLoginSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).CheckLoginSession(ctx, req.(*LoginSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_ListLoginSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).ListLoginSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/ListLoginSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).ListLoginSessions(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_LogoutSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).LogoutSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/LogoutSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).LogoutSession(ctx, req.(*LoginSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_GetLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).GetLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/GetLanguage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).GetLanguage(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_UpdateLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LangMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).UpdateLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/UpdateLanguage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).UpdateLanguage(ctx, req.(*LangMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_CreateChangelog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Changelog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).CreateChangelog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/CreateChangelog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).CreateChangelog(ctx, req.(*Changelog))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountMgr_ListChangelogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChangelogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountMgrServer).ListChangelogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AccountMgr/ListChangelogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountMgrServer).ListChangelogs(ctx, req.(*ListChangelogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccountMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.AccountMgr",
	HandlerType: (*AccountMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGroup",
			Handler:    _AccountMgr_CreateGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _AccountMgr_UpdateGroup_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _AccountMgr_GetGroup_Handler,
		},
		{
			MethodName: "RequestResetPassword",
			Handler:    _AccountMgr_RequestResetPassword_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _AccountMgr_UpdatePassword_Handler,
		},
		{
			MethodName: "UpdateAgent",
			Handler:    _AccountMgr_UpdateAgent_Handler,
		},
		{
			MethodName: "DeleteAgent",
			Handler:    _AccountMgr_DeleteAgent_Handler,
		},
		{
			MethodName: "RequestChangeEmail",
			Handler:    _AccountMgr_RequestChangeEmail_Handler,
		},
		{
			MethodName: "ConfirmChangeEmail",
			Handler:    _AccountMgr_ConfirmChangeEmail_Handler,
		},
		{
			MethodName: "AcceptInvitation",
			Handler:    _AccountMgr_AcceptInvitation_Handler,
		},
		{
			MethodName: "GetInvitation",
			Handler:    _AccountMgr_GetInvitation_Handler,
		},
		{
			MethodName: "InviteAgent",
			Handler:    _AccountMgr_InviteAgent_Handler,
		},
		{
			MethodName: "GetAgent",
			Handler:    _AccountMgr_GetAgent_Handler,
		},
		{
			MethodName: "ConfirmAccount",
			Handler:    _AccountMgr_ConfirmAccount_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _AccountMgr_GetAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _AccountMgr_UpdateAccount_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _AccountMgr_CreateAccount_Handler,
		},
		{
			MethodName: "ListAgents",
			Handler:    _AccountMgr_ListAgents_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _AccountMgr_DeleteGroup_Handler,
		},
		{
			MethodName: "ListGroups",
			Handler:    _AccountMgr_ListGroups_Handler,
		},
		{
			MethodName: "AddAgentToGroup",
			Handler:    _AccountMgr_AddAgentToGroup_Handler,
		},
		{
			MethodName: "RemoveAgentFromGroup",
			Handler:    _AccountMgr_RemoveAgentFromGroup_Handler,
		},
		{
			MethodName: "ChangeEmail",
			Handler:    _AccountMgr_ChangeEmail_Handler,
		},
		{
			MethodName: "SyncPublicHolidays",
			Handler:    _AccountMgr_SyncPublicHolidays_Handler,
		},
		{
			MethodName: "TransferOwner",
			Handler:    _AccountMgr_TransferOwner_Handler,
		},
		{
			MethodName: "CheckLoginSession",
			Handler:    _AccountMgr_CheckLoginSession_Handler,
		},
		{
			MethodName: "ListLoginSessions",
			Handler:    _AccountMgr_ListLoginSessions_Handler,
		},
		{
			MethodName: "LogoutSession",
			Handler:    _AccountMgr_LogoutSession_Handler,
		},
		{
			MethodName: "GetLanguage",
			Handler:    _AccountMgr_GetLanguage_Handler,
		},
		{
			MethodName: "UpdateLanguage",
			Handler:    _AccountMgr_UpdateLanguage_Handler,
		},
		{
			MethodName: "CreateChangelog",
			Handler:    _AccountMgr_CreateChangelog_Handler,
		},
		{
			MethodName: "ListChangelogs",
			Handler:    _AccountMgr_ListChangelogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// UserMgrClient is the client API for UserMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserMgrClient interface {
	SearchUsers(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*Users, error)
	SearchLeads(ctx context.Context, in *LeadSearchRequest, opts ...grpc.CallOption) (*LeadSearchResult, error)
	ListLeads(ctx context.Context, in *LeadSearchRequest, opts ...grpc.CallOption) (*LeadSearchResult, error)
	MergeUser(ctx context.Context, in *UserAlias, opts ...grpc.CallOption) (*UserAlias, error)
	CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Id, error)
	CreateSbzUserByAgent(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Id, error)
	UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Id, error)
	ReadUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*User, error)
	ReportUsers(ctx context.Context, in *UserReportRequest, opts ...grpc.CallOption) (*UserReportResult, error)
	MatchUsers(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Users, error)
	UpsertView(ctx context.Context, in *UserView, opts ...grpc.CallOption) (*UserView, error)
	DeleteView(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	GetView(ctx context.Context, in *Id, opts ...grpc.CallOption) (*UserView, error)
	ListViews(ctx context.Context, in *Id, opts ...grpc.CallOption) (*UserViews, error)
	ListUserInViews(ctx context.Context, in *UserViewCondition, opts ...grpc.CallOption) (*Users, error)
	UpsertLabel(ctx context.Context, in *Label, opts ...grpc.CallOption) (*Label, error)
	DeleteLabel(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	ListLabels(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Labels, error)
	GetLabel(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Label, error)
	AddLeadOwner(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Empty, error)
	RemoveLeadOwner(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Empty, error)
	AddUserLabel(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Empty, error)
	RemoveUserLabel(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Empty, error)
}

type userMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewUserMgrClient(cc grpc.ClientConnInterface) UserMgrClient {
	return &userMgrClient{cc}
}

func (c *userMgrClient) SearchUsers(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/header.UserMgr/SearchUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) SearchLeads(ctx context.Context, in *LeadSearchRequest, opts ...grpc.CallOption) (*LeadSearchResult, error) {
	out := new(LeadSearchResult)
	err := c.cc.Invoke(ctx, "/header.UserMgr/SearchLeads", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) ListLeads(ctx context.Context, in *LeadSearchRequest, opts ...grpc.CallOption) (*LeadSearchResult, error) {
	out := new(LeadSearchResult)
	err := c.cc.Invoke(ctx, "/header.UserMgr/ListLeads", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) MergeUser(ctx context.Context, in *UserAlias, opts ...grpc.CallOption) (*UserAlias, error) {
	out := new(UserAlias)
	err := c.cc.Invoke(ctx, "/header.UserMgr/MergeUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/header.UserMgr/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) CreateSbzUserByAgent(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/header.UserMgr/CreateSbzUserByAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/header.UserMgr/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) ReadUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/header.UserMgr/ReadUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) ReportUsers(ctx context.Context, in *UserReportRequest, opts ...grpc.CallOption) (*UserReportResult, error) {
	out := new(UserReportResult)
	err := c.cc.Invoke(ctx, "/header.UserMgr/ReportUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) MatchUsers(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/header.UserMgr/MatchUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) UpsertView(ctx context.Context, in *UserView, opts ...grpc.CallOption) (*UserView, error) {
	out := new(UserView)
	err := c.cc.Invoke(ctx, "/header.UserMgr/UpsertView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) DeleteView(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.UserMgr/DeleteView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) GetView(ctx context.Context, in *Id, opts ...grpc.CallOption) (*UserView, error) {
	out := new(UserView)
	err := c.cc.Invoke(ctx, "/header.UserMgr/GetView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) ListViews(ctx context.Context, in *Id, opts ...grpc.CallOption) (*UserViews, error) {
	out := new(UserViews)
	err := c.cc.Invoke(ctx, "/header.UserMgr/ListViews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) ListUserInViews(ctx context.Context, in *UserViewCondition, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/header.UserMgr/ListUserInViews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) UpsertLabel(ctx context.Context, in *Label, opts ...grpc.CallOption) (*Label, error) {
	out := new(Label)
	err := c.cc.Invoke(ctx, "/header.UserMgr/UpsertLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) DeleteLabel(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.UserMgr/DeleteLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) ListLabels(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Labels, error) {
	out := new(Labels)
	err := c.cc.Invoke(ctx, "/header.UserMgr/ListLabels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) GetLabel(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Label, error) {
	out := new(Label)
	err := c.cc.Invoke(ctx, "/header.UserMgr/GetLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) AddLeadOwner(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.UserMgr/AddLeadOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) RemoveLeadOwner(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.UserMgr/RemoveLeadOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) AddUserLabel(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.UserMgr/AddUserLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMgrClient) RemoveUserLabel(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.UserMgr/RemoveUserLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserMgrServer is the server API for UserMgr service.
type UserMgrServer interface {
	SearchUsers(context.Context, *SearchRequest) (*Users, error)
	SearchLeads(context.Context, *LeadSearchRequest) (*LeadSearchResult, error)
	ListLeads(context.Context, *LeadSearchRequest) (*LeadSearchResult, error)
	MergeUser(context.Context, *UserAlias) (*UserAlias, error)
	CreateUser(context.Context, *User) (*Id, error)
	CreateSbzUserByAgent(context.Context, *Id) (*Id, error)
	UpdateUser(context.Context, *User) (*Id, error)
	ReadUser(context.Context, *Id) (*User, error)
	ReportUsers(context.Context, *UserReportRequest) (*UserReportResult, error)
	MatchUsers(context.Context, *Ids) (*Users, error)
	UpsertView(context.Context, *UserView) (*UserView, error)
	DeleteView(context.Context, *Id) (*Empty, error)
	GetView(context.Context, *Id) (*UserView, error)
	ListViews(context.Context, *Id) (*UserViews, error)
	ListUserInViews(context.Context, *UserViewCondition) (*Users, error)
	UpsertLabel(context.Context, *Label) (*Label, error)
	DeleteLabel(context.Context, *Id) (*Empty, error)
	ListLabels(context.Context, *Id) (*Labels, error)
	GetLabel(context.Context, *Id) (*Label, error)
	AddLeadOwner(context.Context, *UserRequest) (*Empty, error)
	RemoveLeadOwner(context.Context, *UserRequest) (*Empty, error)
	AddUserLabel(context.Context, *UserRequest) (*Empty, error)
	RemoveUserLabel(context.Context, *UserRequest) (*Empty, error)
}

// UnimplementedUserMgrServer can be embedded to have forward compatible implementations.
type UnimplementedUserMgrServer struct {
}

func (*UnimplementedUserMgrServer) SearchUsers(context.Context, *SearchRequest) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUsers not implemented")
}
func (*UnimplementedUserMgrServer) SearchLeads(context.Context, *LeadSearchRequest) (*LeadSearchResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchLeads not implemented")
}
func (*UnimplementedUserMgrServer) ListLeads(context.Context, *LeadSearchRequest) (*LeadSearchResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLeads not implemented")
}
func (*UnimplementedUserMgrServer) MergeUser(context.Context, *UserAlias) (*UserAlias, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeUser not implemented")
}
func (*UnimplementedUserMgrServer) CreateUser(context.Context, *User) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (*UnimplementedUserMgrServer) CreateSbzUserByAgent(context.Context, *Id) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSbzUserByAgent not implemented")
}
func (*UnimplementedUserMgrServer) UpdateUser(context.Context, *User) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (*UnimplementedUserMgrServer) ReadUser(context.Context, *Id) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadUser not implemented")
}
func (*UnimplementedUserMgrServer) ReportUsers(context.Context, *UserReportRequest) (*UserReportResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportUsers not implemented")
}
func (*UnimplementedUserMgrServer) MatchUsers(context.Context, *Ids) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatchUsers not implemented")
}
func (*UnimplementedUserMgrServer) UpsertView(context.Context, *UserView) (*UserView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertView not implemented")
}
func (*UnimplementedUserMgrServer) DeleteView(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteView not implemented")
}
func (*UnimplementedUserMgrServer) GetView(context.Context, *Id) (*UserView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetView not implemented")
}
func (*UnimplementedUserMgrServer) ListViews(context.Context, *Id) (*UserViews, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListViews not implemented")
}
func (*UnimplementedUserMgrServer) ListUserInViews(context.Context, *UserViewCondition) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserInViews not implemented")
}
func (*UnimplementedUserMgrServer) UpsertLabel(context.Context, *Label) (*Label, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertLabel not implemented")
}
func (*UnimplementedUserMgrServer) DeleteLabel(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLabel not implemented")
}
func (*UnimplementedUserMgrServer) ListLabels(context.Context, *Id) (*Labels, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLabels not implemented")
}
func (*UnimplementedUserMgrServer) GetLabel(context.Context, *Id) (*Label, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLabel not implemented")
}
func (*UnimplementedUserMgrServer) AddLeadOwner(context.Context, *UserRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLeadOwner not implemented")
}
func (*UnimplementedUserMgrServer) RemoveLeadOwner(context.Context, *UserRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLeadOwner not implemented")
}
func (*UnimplementedUserMgrServer) AddUserLabel(context.Context, *UserRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserLabel not implemented")
}
func (*UnimplementedUserMgrServer) RemoveUserLabel(context.Context, *UserRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserLabel not implemented")
}

func RegisterUserMgrServer(s *grpc.Server, srv UserMgrServer) {
	s.RegisterService(&_UserMgr_serviceDesc, srv)
}

func _UserMgr_SearchUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).SearchUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/SearchUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).SearchUsers(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_SearchLeads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeadSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).SearchLeads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/SearchLeads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).SearchLeads(ctx, req.(*LeadSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_ListLeads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeadSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).ListLeads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/ListLeads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).ListLeads(ctx, req.(*LeadSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_MergeUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAlias)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).MergeUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/MergeUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).MergeUser(ctx, req.(*UserAlias))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).CreateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_CreateSbzUserByAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).CreateSbzUserByAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/CreateSbzUserByAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).CreateSbzUserByAgent(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).UpdateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_ReadUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).ReadUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/ReadUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).ReadUser(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_ReportUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).ReportUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/ReportUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).ReportUsers(ctx, req.(*UserReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_MatchUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).MatchUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/MatchUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).MatchUsers(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_UpsertView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserView)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).UpsertView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/UpsertView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).UpsertView(ctx, req.(*UserView))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_DeleteView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).DeleteView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/DeleteView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).DeleteView(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_GetView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).GetView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/GetView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).GetView(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_ListViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).ListViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/ListViews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).ListViews(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_ListUserInViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserViewCondition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).ListUserInViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/ListUserInViews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).ListUserInViews(ctx, req.(*UserViewCondition))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_UpsertLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Label)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).UpsertLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/UpsertLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).UpsertLabel(ctx, req.(*Label))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_DeleteLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).DeleteLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/DeleteLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).DeleteLabel(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_ListLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).ListLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/ListLabels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).ListLabels(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_GetLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).GetLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/GetLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).GetLabel(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_AddLeadOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).AddLeadOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/AddLeadOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).AddLeadOwner(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_RemoveLeadOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).RemoveLeadOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/RemoveLeadOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).RemoveLeadOwner(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_AddUserLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).AddUserLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/AddUserLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).AddUserLabel(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMgr_RemoveUserLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMgrServer).RemoveUserLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserMgr/RemoveUserLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMgrServer).RemoveUserLabel(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.UserMgr",
	HandlerType: (*UserMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchUsers",
			Handler:    _UserMgr_SearchUsers_Handler,
		},
		{
			MethodName: "SearchLeads",
			Handler:    _UserMgr_SearchLeads_Handler,
		},
		{
			MethodName: "ListLeads",
			Handler:    _UserMgr_ListLeads_Handler,
		},
		{
			MethodName: "MergeUser",
			Handler:    _UserMgr_MergeUser_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _UserMgr_CreateUser_Handler,
		},
		{
			MethodName: "CreateSbzUserByAgent",
			Handler:    _UserMgr_CreateSbzUserByAgent_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserMgr_UpdateUser_Handler,
		},
		{
			MethodName: "ReadUser",
			Handler:    _UserMgr_ReadUser_Handler,
		},
		{
			MethodName: "ReportUsers",
			Handler:    _UserMgr_ReportUsers_Handler,
		},
		{
			MethodName: "MatchUsers",
			Handler:    _UserMgr_MatchUsers_Handler,
		},
		{
			MethodName: "UpsertView",
			Handler:    _UserMgr_UpsertView_Handler,
		},
		{
			MethodName: "DeleteView",
			Handler:    _UserMgr_DeleteView_Handler,
		},
		{
			MethodName: "GetView",
			Handler:    _UserMgr_GetView_Handler,
		},
		{
			MethodName: "ListViews",
			Handler:    _UserMgr_ListViews_Handler,
		},
		{
			MethodName: "ListUserInViews",
			Handler:    _UserMgr_ListUserInViews_Handler,
		},
		{
			MethodName: "UpsertLabel",
			Handler:    _UserMgr_UpsertLabel_Handler,
		},
		{
			MethodName: "DeleteLabel",
			Handler:    _UserMgr_DeleteLabel_Handler,
		},
		{
			MethodName: "ListLabels",
			Handler:    _UserMgr_ListLabels_Handler,
		},
		{
			MethodName: "GetLabel",
			Handler:    _UserMgr_GetLabel_Handler,
		},
		{
			MethodName: "AddLeadOwner",
			Handler:    _UserMgr_AddLeadOwner_Handler,
		},
		{
			MethodName: "RemoveLeadOwner",
			Handler:    _UserMgr_RemoveLeadOwner_Handler,
		},
		{
			MethodName: "AddUserLabel",
			Handler:    _UserMgr_AddUserLabel_Handler,
		},
		{
			MethodName: "RemoveUserLabel",
			Handler:    _UserMgr_RemoveUserLabel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// UserPersistClient is the client API for UserPersist service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserPersistClient interface {
	UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error)
	FilterUsers(ctx context.Context, in *UserViewCondition, opts ...grpc.CallOption) (*Users, error)
}

type userPersistClient struct {
	cc grpc.ClientConnInterface
}

func NewUserPersistClient(cc grpc.ClientConnInterface) UserPersistClient {
	return &userPersistClient{cc}
}

func (c *userPersistClient) UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.UserPersist/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPersistClient) FilterUsers(ctx context.Context, in *UserViewCondition, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/header.UserPersist/FilterUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserPersistServer is the server API for UserPersist service.
type UserPersistServer interface {
	UpdateUser(context.Context, *User) (*Empty, error)
	FilterUsers(context.Context, *UserViewCondition) (*Users, error)
}

// UnimplementedUserPersistServer can be embedded to have forward compatible implementations.
type UnimplementedUserPersistServer struct {
}

func (*UnimplementedUserPersistServer) UpdateUser(context.Context, *User) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (*UnimplementedUserPersistServer) FilterUsers(context.Context, *UserViewCondition) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterUsers not implemented")
}

func RegisterUserPersistServer(s *grpc.Server, srv UserPersistServer) {
	s.RegisterService(&_UserPersist_serviceDesc, srv)
}

func _UserPersist_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPersistServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserPersist/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPersistServer).UpdateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPersist_FilterUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserViewCondition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPersistServer).FilterUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.UserPersist/FilterUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPersistServer).FilterUsers(ctx, req.(*UserViewCondition))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserPersist_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.UserPersist",
	HandlerType: (*UserPersistServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateUser",
			Handler:    _UserPersist_UpdateUser_Handler,
		},
		{
			MethodName: "FilterUsers",
			Handler:    _UserPersist_FilterUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// LiveMgrClient is the client API for LiveMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LiveMgrClient interface {
	SearchLocations(ctx context.Context, in *LocationParams, opts ...grpc.CallOption) (*Locations, error)
	FilterActiveUsers(ctx context.Context, in *UserInfoParams, opts ...grpc.CallOption) (*Users, error)
	TopEvents(ctx context.Context, in *EventParams, opts ...grpc.CallOption) (*Events, error)
	TopLocations(ctx context.Context, in *Id, opts ...grpc.CallOption) (*LocationMetrics, error)
	TopPages(ctx context.Context, in *Id, opts ...grpc.CallOption) (*PageMetrics, error)
	TopSources(ctx context.Context, in *Id, opts ...grpc.CallOption) (*SourceMetrics, error)
	CountActiveUsers(ctx context.Context, in *Id, opts ...grpc.CallOption) (*UserMetric, error)
	Presences(ctx context.Context, in *PresencesRequest, opts ...grpc.CallOption) (*PresencesResponse, error)
}

type liveMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewLiveMgrClient(cc grpc.ClientConnInterface) LiveMgrClient {
	return &liveMgrClient{cc}
}

func (c *liveMgrClient) SearchLocations(ctx context.Context, in *LocationParams, opts ...grpc.CallOption) (*Locations, error) {
	out := new(Locations)
	err := c.cc.Invoke(ctx, "/header.LiveMgr/SearchLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveMgrClient) FilterActiveUsers(ctx context.Context, in *UserInfoParams, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/header.LiveMgr/FilterActiveUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveMgrClient) TopEvents(ctx context.Context, in *EventParams, opts ...grpc.CallOption) (*Events, error) {
	out := new(Events)
	err := c.cc.Invoke(ctx, "/header.LiveMgr/TopEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveMgrClient) TopLocations(ctx context.Context, in *Id, opts ...grpc.CallOption) (*LocationMetrics, error) {
	out := new(LocationMetrics)
	err := c.cc.Invoke(ctx, "/header.LiveMgr/TopLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveMgrClient) TopPages(ctx context.Context, in *Id, opts ...grpc.CallOption) (*PageMetrics, error) {
	out := new(PageMetrics)
	err := c.cc.Invoke(ctx, "/header.LiveMgr/TopPages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveMgrClient) TopSources(ctx context.Context, in *Id, opts ...grpc.CallOption) (*SourceMetrics, error) {
	out := new(SourceMetrics)
	err := c.cc.Invoke(ctx, "/header.LiveMgr/TopSources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveMgrClient) CountActiveUsers(ctx context.Context, in *Id, opts ...grpc.CallOption) (*UserMetric, error) {
	out := new(UserMetric)
	err := c.cc.Invoke(ctx, "/header.LiveMgr/CountActiveUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveMgrClient) Presences(ctx context.Context, in *PresencesRequest, opts ...grpc.CallOption) (*PresencesResponse, error) {
	out := new(PresencesResponse)
	err := c.cc.Invoke(ctx, "/header.LiveMgr/Presences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiveMgrServer is the server API for LiveMgr service.
type LiveMgrServer interface {
	SearchLocations(context.Context, *LocationParams) (*Locations, error)
	FilterActiveUsers(context.Context, *UserInfoParams) (*Users, error)
	TopEvents(context.Context, *EventParams) (*Events, error)
	TopLocations(context.Context, *Id) (*LocationMetrics, error)
	TopPages(context.Context, *Id) (*PageMetrics, error)
	TopSources(context.Context, *Id) (*SourceMetrics, error)
	CountActiveUsers(context.Context, *Id) (*UserMetric, error)
	Presences(context.Context, *PresencesRequest) (*PresencesResponse, error)
}

// UnimplementedLiveMgrServer can be embedded to have forward compatible implementations.
type UnimplementedLiveMgrServer struct {
}

func (*UnimplementedLiveMgrServer) SearchLocations(context.Context, *LocationParams) (*Locations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchLocations not implemented")
}
func (*UnimplementedLiveMgrServer) FilterActiveUsers(context.Context, *UserInfoParams) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterActiveUsers not implemented")
}
func (*UnimplementedLiveMgrServer) TopEvents(context.Context, *EventParams) (*Events, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopEvents not implemented")
}
func (*UnimplementedLiveMgrServer) TopLocations(context.Context, *Id) (*LocationMetrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopLocations not implemented")
}
func (*UnimplementedLiveMgrServer) TopPages(context.Context, *Id) (*PageMetrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopPages not implemented")
}
func (*UnimplementedLiveMgrServer) TopSources(context.Context, *Id) (*SourceMetrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopSources not implemented")
}
func (*UnimplementedLiveMgrServer) CountActiveUsers(context.Context, *Id) (*UserMetric, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountActiveUsers not implemented")
}
func (*UnimplementedLiveMgrServer) Presences(context.Context, *PresencesRequest) (*PresencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Presences not implemented")
}

func RegisterLiveMgrServer(s *grpc.Server, srv LiveMgrServer) {
	s.RegisterService(&_LiveMgr_serviceDesc, srv)
}

func _LiveMgr_SearchLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocationParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveMgrServer).SearchLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.LiveMgr/SearchLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveMgrServer).SearchLocations(ctx, req.(*LocationParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveMgr_FilterActiveUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveMgrServer).FilterActiveUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.LiveMgr/FilterActiveUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveMgrServer).FilterActiveUsers(ctx, req.(*UserInfoParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveMgr_TopEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveMgrServer).TopEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.LiveMgr/TopEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveMgrServer).TopEvents(ctx, req.(*EventParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveMgr_TopLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveMgrServer).TopLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.LiveMgr/TopLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveMgrServer).TopLocations(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveMgr_TopPages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveMgrServer).TopPages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.LiveMgr/TopPages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveMgrServer).TopPages(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveMgr_TopSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveMgrServer).TopSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.LiveMgr/TopSources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveMgrServer).TopSources(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveMgr_CountActiveUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveMgrServer).CountActiveUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.LiveMgr/CountActiveUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveMgrServer).CountActiveUsers(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveMgr_Presences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PresencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveMgrServer).Presences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.LiveMgr/Presences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveMgrServer).Presences(ctx, req.(*PresencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LiveMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.LiveMgr",
	HandlerType: (*LiveMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchLocations",
			Handler:    _LiveMgr_SearchLocations_Handler,
		},
		{
			MethodName: "FilterActiveUsers",
			Handler:    _LiveMgr_FilterActiveUsers_Handler,
		},
		{
			MethodName: "TopEvents",
			Handler:    _LiveMgr_TopEvents_Handler,
		},
		{
			MethodName: "TopLocations",
			Handler:    _LiveMgr_TopLocations_Handler,
		},
		{
			MethodName: "TopPages",
			Handler:    _LiveMgr_TopPages_Handler,
		},
		{
			MethodName: "TopSources",
			Handler:    _LiveMgr_TopSources_Handler,
		},
		{
			MethodName: "CountActiveUsers",
			Handler:    _LiveMgr_CountActiveUsers_Handler,
		},
		{
			MethodName: "Presences",
			Handler:    _LiveMgr_Presences_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// NoteMgrClient is the client API for NoteMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NoteMgrClient interface {
	ListNotes(ctx context.Context, in *ListNotesRequest, opts ...grpc.CallOption) (*Notes, error)
	AddNote(ctx context.Context, in *Note, opts ...grpc.CallOption) (*Note, error)
	UpdateNote(ctx context.Context, in *Note, opts ...grpc.CallOption) (*Note, error)
	DeleteNote(ctx context.Context, in *DeleteNoteRequest, opts ...grpc.CallOption) (*Empty, error)
}

type noteMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewNoteMgrClient(cc grpc.ClientConnInterface) NoteMgrClient {
	return &noteMgrClient{cc}
}

func (c *noteMgrClient) ListNotes(ctx context.Context, in *ListNotesRequest, opts ...grpc.CallOption) (*Notes, error) {
	out := new(Notes)
	err := c.cc.Invoke(ctx, "/header.NoteMgr/ListNotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteMgrClient) AddNote(ctx context.Context, in *Note, opts ...grpc.CallOption) (*Note, error) {
	out := new(Note)
	err := c.cc.Invoke(ctx, "/header.NoteMgr/AddNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteMgrClient) UpdateNote(ctx context.Context, in *Note, opts ...grpc.CallOption) (*Note, error) {
	out := new(Note)
	err := c.cc.Invoke(ctx, "/header.NoteMgr/UpdateNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteMgrClient) DeleteNote(ctx context.Context, in *DeleteNoteRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.NoteMgr/DeleteNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NoteMgrServer is the server API for NoteMgr service.
type NoteMgrServer interface {
	ListNotes(context.Context, *ListNotesRequest) (*Notes, error)
	AddNote(context.Context, *Note) (*Note, error)
	UpdateNote(context.Context, *Note) (*Note, error)
	DeleteNote(context.Context, *DeleteNoteRequest) (*Empty, error)
}

// UnimplementedNoteMgrServer can be embedded to have forward compatible implementations.
type UnimplementedNoteMgrServer struct {
}

func (*UnimplementedNoteMgrServer) ListNotes(context.Context, *ListNotesRequest) (*Notes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNotes not implemented")
}
func (*UnimplementedNoteMgrServer) AddNote(context.Context, *Note) (*Note, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNote not implemented")
}
func (*UnimplementedNoteMgrServer) UpdateNote(context.Context, *Note) (*Note, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNote not implemented")
}
func (*UnimplementedNoteMgrServer) DeleteNote(context.Context, *DeleteNoteRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNote not implemented")
}

func RegisterNoteMgrServer(s *grpc.Server, srv NoteMgrServer) {
	s.RegisterService(&_NoteMgr_serviceDesc, srv)
}

func _NoteMgr_ListNotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteMgrServer).ListNotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.NoteMgr/ListNotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteMgrServer).ListNotes(ctx, req.(*ListNotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteMgr_AddNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Note)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteMgrServer).AddNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.NoteMgr/AddNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteMgrServer).AddNote(ctx, req.(*Note))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteMgr_UpdateNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Note)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteMgrServer).UpdateNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.NoteMgr/UpdateNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteMgrServer).UpdateNote(ctx, req.(*Note))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteMgr_DeleteNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteMgrServer).DeleteNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.NoteMgr/DeleteNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteMgrServer).DeleteNote(ctx, req.(*DeleteNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NoteMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.NoteMgr",
	HandlerType: (*NoteMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListNotes",
			Handler:    _NoteMgr_ListNotes_Handler,
		},
		{
			MethodName: "AddNote",
			Handler:    _NoteMgr_AddNote_Handler,
		},
		{
			MethodName: "UpdateNote",
			Handler:    _NoteMgr_UpdateNote_Handler,
		},
		{
			MethodName: "DeleteNote",
			Handler:    _NoteMgr_DeleteNote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// AutomationMgrClient is the client API for AutomationMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AutomationMgrClient interface {
	ListAutomations(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Automations, error)
	UpdateAutomation(ctx context.Context, in *Automation, opts ...grpc.CallOption) (*Automation, error)
	DeleteAutomation(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	ReadAutomation(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Automation, error)
	CreateAutomation(ctx context.Context, in *Automation, opts ...grpc.CallOption) (*Automation, error)
}

type automationMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewAutomationMgrClient(cc grpc.ClientConnInterface) AutomationMgrClient {
	return &automationMgrClient{cc}
}

func (c *automationMgrClient) ListAutomations(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Automations, error) {
	out := new(Automations)
	err := c.cc.Invoke(ctx, "/header.AutomationMgr/ListAutomations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *automationMgrClient) UpdateAutomation(ctx context.Context, in *Automation, opts ...grpc.CallOption) (*Automation, error) {
	out := new(Automation)
	err := c.cc.Invoke(ctx, "/header.AutomationMgr/UpdateAutomation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *automationMgrClient) DeleteAutomation(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.AutomationMgr/DeleteAutomation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *automationMgrClient) ReadAutomation(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Automation, error) {
	out := new(Automation)
	err := c.cc.Invoke(ctx, "/header.AutomationMgr/ReadAutomation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *automationMgrClient) CreateAutomation(ctx context.Context, in *Automation, opts ...grpc.CallOption) (*Automation, error) {
	out := new(Automation)
	err := c.cc.Invoke(ctx, "/header.AutomationMgr/CreateAutomation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AutomationMgrServer is the server API for AutomationMgr service.
type AutomationMgrServer interface {
	ListAutomations(context.Context, *Id) (*Automations, error)
	UpdateAutomation(context.Context, *Automation) (*Automation, error)
	DeleteAutomation(context.Context, *Id) (*Empty, error)
	ReadAutomation(context.Context, *Id) (*Automation, error)
	CreateAutomation(context.Context, *Automation) (*Automation, error)
}

// UnimplementedAutomationMgrServer can be embedded to have forward compatible implementations.
type UnimplementedAutomationMgrServer struct {
}

func (*UnimplementedAutomationMgrServer) ListAutomations(context.Context, *Id) (*Automations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAutomations not implemented")
}
func (*UnimplementedAutomationMgrServer) UpdateAutomation(context.Context, *Automation) (*Automation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAutomation not implemented")
}
func (*UnimplementedAutomationMgrServer) DeleteAutomation(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAutomation not implemented")
}
func (*UnimplementedAutomationMgrServer) ReadAutomation(context.Context, *Id) (*Automation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAutomation not implemented")
}
func (*UnimplementedAutomationMgrServer) CreateAutomation(context.Context, *Automation) (*Automation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAutomation not implemented")
}

func RegisterAutomationMgrServer(s *grpc.Server, srv AutomationMgrServer) {
	s.RegisterService(&_AutomationMgr_serviceDesc, srv)
}

func _AutomationMgr_ListAutomations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomationMgrServer).ListAutomations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AutomationMgr/ListAutomations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomationMgrServer).ListAutomations(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutomationMgr_UpdateAutomation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Automation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomationMgrServer).UpdateAutomation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AutomationMgr/UpdateAutomation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomationMgrServer).UpdateAutomation(ctx, req.(*Automation))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutomationMgr_DeleteAutomation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomationMgrServer).DeleteAutomation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AutomationMgr/DeleteAutomation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomationMgrServer).DeleteAutomation(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutomationMgr_ReadAutomation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomationMgrServer).ReadAutomation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AutomationMgr/ReadAutomation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomationMgrServer).ReadAutomation(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutomationMgr_CreateAutomation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Automation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomationMgrServer).CreateAutomation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AutomationMgr/CreateAutomation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomationMgrServer).CreateAutomation(ctx, req.(*Automation))
	}
	return interceptor(ctx, in, info, handler)
}

var _AutomationMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.AutomationMgr",
	HandlerType: (*AutomationMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAutomations",
			Handler:    _AutomationMgr_ListAutomations_Handler,
		},
		{
			MethodName: "UpdateAutomation",
			Handler:    _AutomationMgr_UpdateAutomation_Handler,
		},
		{
			MethodName: "DeleteAutomation",
			Handler:    _AutomationMgr_DeleteAutomation_Handler,
		},
		{
			MethodName: "ReadAutomation",
			Handler:    _AutomationMgr_ReadAutomation_Handler,
		},
		{
			MethodName: "CreateAutomation",
			Handler:    _AutomationMgr_CreateAutomation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// AttributeMgrClient is the client API for AttributeMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AttributeMgrClient interface {
	ListAttributeDefinitions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AttributeDefinitions, error)
	CreateAttributeDefinition(ctx context.Context, in *AttributeDefinition, opts ...grpc.CallOption) (*AttributeDefinition, error)
	UpdateAttributeDefinition(ctx context.Context, in *AttributeDefinition, opts ...grpc.CallOption) (*AttributeDefinition, error)
	DeleteAttributeDefinition(ctx context.Context, in *DeleteAttrRequest, opts ...grpc.CallOption) (*Empty, error)
}

type attributeMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewAttributeMgrClient(cc grpc.ClientConnInterface) AttributeMgrClient {
	return &attributeMgrClient{cc}
}

func (c *attributeMgrClient) ListAttributeDefinitions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AttributeDefinitions, error) {
	out := new(AttributeDefinitions)
	err := c.cc.Invoke(ctx, "/header.AttributeMgr/ListAttributeDefinitions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attributeMgrClient) CreateAttributeDefinition(ctx context.Context, in *AttributeDefinition, opts ...grpc.CallOption) (*AttributeDefinition, error) {
	out := new(AttributeDefinition)
	err := c.cc.Invoke(ctx, "/header.AttributeMgr/CreateAttributeDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attributeMgrClient) UpdateAttributeDefinition(ctx context.Context, in *AttributeDefinition, opts ...grpc.CallOption) (*AttributeDefinition, error) {
	out := new(AttributeDefinition)
	err := c.cc.Invoke(ctx, "/header.AttributeMgr/UpdateAttributeDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attributeMgrClient) DeleteAttributeDefinition(ctx context.Context, in *DeleteAttrRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.AttributeMgr/DeleteAttributeDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttributeMgrServer is the server API for AttributeMgr service.
type AttributeMgrServer interface {
	ListAttributeDefinitions(context.Context, *Empty) (*AttributeDefinitions, error)
	CreateAttributeDefinition(context.Context, *AttributeDefinition) (*AttributeDefinition, error)
	UpdateAttributeDefinition(context.Context, *AttributeDefinition) (*AttributeDefinition, error)
	DeleteAttributeDefinition(context.Context, *DeleteAttrRequest) (*Empty, error)
}

// UnimplementedAttributeMgrServer can be embedded to have forward compatible implementations.
type UnimplementedAttributeMgrServer struct {
}

func (*UnimplementedAttributeMgrServer) ListAttributeDefinitions(context.Context, *Empty) (*AttributeDefinitions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAttributeDefinitions not implemented")
}
func (*UnimplementedAttributeMgrServer) CreateAttributeDefinition(context.Context, *AttributeDefinition) (*AttributeDefinition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAttributeDefinition not implemented")
}
func (*UnimplementedAttributeMgrServer) UpdateAttributeDefinition(context.Context, *AttributeDefinition) (*AttributeDefinition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAttributeDefinition not implemented")
}
func (*UnimplementedAttributeMgrServer) DeleteAttributeDefinition(context.Context, *DeleteAttrRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAttributeDefinition not implemented")
}

func RegisterAttributeMgrServer(s *grpc.Server, srv AttributeMgrServer) {
	s.RegisterService(&_AttributeMgr_serviceDesc, srv)
}

func _AttributeMgr_ListAttributeDefinitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttributeMgrServer).ListAttributeDefinitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AttributeMgr/ListAttributeDefinitions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttributeMgrServer).ListAttributeDefinitions(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttributeMgr_CreateAttributeDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttributeDefinition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttributeMgrServer).CreateAttributeDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AttributeMgr/CreateAttributeDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttributeMgrServer).CreateAttributeDefinition(ctx, req.(*AttributeDefinition))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttributeMgr_UpdateAttributeDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttributeDefinition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttributeMgrServer).UpdateAttributeDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AttributeMgr/UpdateAttributeDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttributeMgrServer).UpdateAttributeDefinition(ctx, req.(*AttributeDefinition))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttributeMgr_DeleteAttributeDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttributeMgrServer).DeleteAttributeDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.AttributeMgr/DeleteAttributeDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttributeMgrServer).DeleteAttributeDefinition(ctx, req.(*DeleteAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AttributeMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.AttributeMgr",
	HandlerType: (*AttributeMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAttributeDefinitions",
			Handler:    _AttributeMgr_ListAttributeDefinitions_Handler,
		},
		{
			MethodName: "CreateAttributeDefinition",
			Handler:    _AttributeMgr_CreateAttributeDefinition_Handler,
		},
		{
			MethodName: "UpdateAttributeDefinition",
			Handler:    _AttributeMgr_UpdateAttributeDefinition_Handler,
		},
		{
			MethodName: "DeleteAttributeDefinition",
			Handler:    _AttributeMgr_DeleteAttributeDefinition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// ConversationReporterClient is the client API for ConversationReporter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConversationReporterClient interface {
	ReportAvailibilities(ctx context.Context, in *AvailibilityReportRequest, opts ...grpc.CallOption) (*ReportResponse, error)
}

type conversationReporterClient struct {
	cc grpc.ClientConnInterface
}

func NewConversationReporterClient(cc grpc.ClientConnInterface) ConversationReporterClient {
	return &conversationReporterClient{cc}
}

func (c *conversationReporterClient) ReportAvailibilities(ctx context.Context, in *AvailibilityReportRequest, opts ...grpc.CallOption) (*ReportResponse, error) {
	out := new(ReportResponse)
	err := c.cc.Invoke(ctx, "/header.ConversationReporter/ReportAvailibilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConversationReporterServer is the server API for ConversationReporter service.
type ConversationReporterServer interface {
	ReportAvailibilities(context.Context, *AvailibilityReportRequest) (*ReportResponse, error)
}

// UnimplementedConversationReporterServer can be embedded to have forward compatible implementations.
type UnimplementedConversationReporterServer struct {
}

func (*UnimplementedConversationReporterServer) ReportAvailibilities(context.Context, *AvailibilityReportRequest) (*ReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportAvailibilities not implemented")
}

func RegisterConversationReporterServer(s *grpc.Server, srv ConversationReporterServer) {
	s.RegisterService(&_ConversationReporter_serviceDesc, srv)
}

func _ConversationReporter_ReportAvailibilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AvailibilityReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationReporterServer).ReportAvailibilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationReporter/ReportAvailibilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationReporterServer).ReportAvailibilities(ctx, req.(*AvailibilityReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConversationReporter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.ConversationReporter",
	HandlerType: (*ConversationReporterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportAvailibilities",
			Handler:    _ConversationReporter_ReportAvailibilities_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// RuleMgrClient is the client API for RuleMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RuleMgrClient interface {
	UpdateRule(ctx context.Context, in *Rule, opts ...grpc.CallOption) (*Rule, error)
	CreateRule(ctx context.Context, in *Rule, opts ...grpc.CallOption) (*Rule, error)
	DeleteRule(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	ReadRule(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Rule, error)
	ListRules(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Route, error)
}

type ruleMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewRuleMgrClient(cc grpc.ClientConnInterface) RuleMgrClient {
	return &ruleMgrClient{cc}
}

func (c *ruleMgrClient) UpdateRule(ctx context.Context, in *Rule, opts ...grpc.CallOption) (*Rule, error) {
	out := new(Rule)
	err := c.cc.Invoke(ctx, "/header.RuleMgr/UpdateRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleMgrClient) CreateRule(ctx context.Context, in *Rule, opts ...grpc.CallOption) (*Rule, error) {
	out := new(Rule)
	err := c.cc.Invoke(ctx, "/header.RuleMgr/CreateRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleMgrClient) DeleteRule(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.RuleMgr/DeleteRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleMgrClient) ReadRule(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Rule, error) {
	out := new(Rule)
	err := c.cc.Invoke(ctx, "/header.RuleMgr/ReadRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleMgrClient) ListRules(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Route, error) {
	out := new(Route)
	err := c.cc.Invoke(ctx, "/header.RuleMgr/ListRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuleMgrServer is the server API for RuleMgr service.
type RuleMgrServer interface {
	UpdateRule(context.Context, *Rule) (*Rule, error)
	CreateRule(context.Context, *Rule) (*Rule, error)
	DeleteRule(context.Context, *Id) (*Empty, error)
	ReadRule(context.Context, *Id) (*Rule, error)
	ListRules(context.Context, *Id) (*Route, error)
}

// UnimplementedRuleMgrServer can be embedded to have forward compatible implementations.
type UnimplementedRuleMgrServer struct {
}

func (*UnimplementedRuleMgrServer) UpdateRule(context.Context, *Rule) (*Rule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRule not implemented")
}
func (*UnimplementedRuleMgrServer) CreateRule(context.Context, *Rule) (*Rule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRule not implemented")
}
func (*UnimplementedRuleMgrServer) DeleteRule(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRule not implemented")
}
func (*UnimplementedRuleMgrServer) ReadRule(context.Context, *Id) (*Rule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadRule not implemented")
}
func (*UnimplementedRuleMgrServer) ListRules(context.Context, *Id) (*Route, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRules not implemented")
}

func RegisterRuleMgrServer(s *grpc.Server, srv RuleMgrServer) {
	s.RegisterService(&_RuleMgr_serviceDesc, srv)
}

func _RuleMgr_UpdateRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Rule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleMgrServer).UpdateRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.RuleMgr/UpdateRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleMgrServer).UpdateRule(ctx, req.(*Rule))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleMgr_CreateRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Rule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleMgrServer).CreateRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.RuleMgr/CreateRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleMgrServer).CreateRule(ctx, req.(*Rule))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleMgr_DeleteRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleMgrServer).DeleteRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.RuleMgr/DeleteRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleMgrServer).DeleteRule(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleMgr_ReadRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleMgrServer).ReadRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.RuleMgr/ReadRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleMgrServer).ReadRule(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleMgr_ListRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleMgrServer).ListRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.RuleMgr/ListRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleMgrServer).ListRules(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _RuleMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.RuleMgr",
	HandlerType: (*RuleMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateRule",
			Handler:    _RuleMgr_UpdateRule_Handler,
		},
		{
			MethodName: "CreateRule",
			Handler:    _RuleMgr_CreateRule_Handler,
		},
		{
			MethodName: "DeleteRule",
			Handler:    _RuleMgr_DeleteRule_Handler,
		},
		{
			MethodName: "ReadRule",
			Handler:    _RuleMgr_ReadRule_Handler,
		},
		{
			MethodName: "ListRules",
			Handler:    _RuleMgr_ListRules_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// ConversationMgrClient is the client API for ConversationMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConversationMgrClient interface {
	AssignRule(ctx context.Context, in *AssignRequest, opts ...grpc.CallOption) (*RouteResult, error)
	PongMessage(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error)
	// rpc UpdateConversationState(Conversation) returns (Conversation);
	StartConversation(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*Conversation, error)
	EndConversation(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Conversation, error)
	GetConversation(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Conversation, error)
	ListConversations(ctx context.Context, in *ListConversationsRequest, opts ...grpc.CallOption) (*Conversations, error)
	MatchConversations(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Conversations, error)
	TagConversation(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*Empty, error)
	UntagConversation(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*Empty, error)
	JoinConversation(ctx context.Context, in *ConversationMember, opts ...grpc.CallOption) (*Empty, error)
	LeftConversation(ctx context.Context, in *ConversationMember, opts ...grpc.CallOption) (*Empty, error)
	Typing(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	UpdateConversationInfo(ctx context.Context, in *Conversation, opts ...grpc.CallOption) (*Conversation, error)
	SearchConvos(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*Conversations, error)
	UpdateMuteConversation(ctx context.Context, in *Conversation, opts ...grpc.CallOption) (*Empty, error)
	UnwatchConversation(ctx context.Context, in *Conversation, opts ...grpc.CallOption) (*Empty, error)
	MarkReadConversation(ctx context.Context, in *Conversation, opts ...grpc.CallOption) (*Empty, error)
	UpdateEndchatSetting(ctx context.Context, in *EndchatSetting, opts ...grpc.CallOption) (*EndchatSetting, error)
	GetEndchatSetting(ctx context.Context, in *Id, opts ...grpc.CallOption) (*EndchatSetting, error)
	TerminateBot(ctx context.Context, in *BotTerminated, opts ...grpc.CallOption) (*Event, error)
	UpdatePresence(ctx context.Context, in *Id, opts ...grpc.CallOption) (*account.Presence, error)
}

type conversationMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewConversationMgrClient(cc grpc.ClientConnInterface) ConversationMgrClient {
	return &conversationMgrClient{cc}
}

func (c *conversationMgrClient) AssignRule(ctx context.Context, in *AssignRequest, opts ...grpc.CallOption) (*RouteResult, error) {
	out := new(RouteResult)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/AssignRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) PongMessage(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/PongMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) StartConversation(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*Conversation, error) {
	out := new(Conversation)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/StartConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) EndConversation(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Conversation, error) {
	out := new(Conversation)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/EndConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) GetConversation(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Conversation, error) {
	out := new(Conversation)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/GetConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) ListConversations(ctx context.Context, in *ListConversationsRequest, opts ...grpc.CallOption) (*Conversations, error) {
	out := new(Conversations)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/ListConversations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) MatchConversations(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Conversations, error) {
	out := new(Conversations)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/MatchConversations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) TagConversation(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/TagConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) UntagConversation(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/UntagConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) JoinConversation(ctx context.Context, in *ConversationMember, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/JoinConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) LeftConversation(ctx context.Context, in *ConversationMember, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/LeftConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) Typing(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/Typing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) UpdateConversationInfo(ctx context.Context, in *Conversation, opts ...grpc.CallOption) (*Conversation, error) {
	out := new(Conversation)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/UpdateConversationInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) SearchConvos(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*Conversations, error) {
	out := new(Conversations)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/SearchConvos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) UpdateMuteConversation(ctx context.Context, in *Conversation, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/UpdateMuteConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) UnwatchConversation(ctx context.Context, in *Conversation, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/UnwatchConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) MarkReadConversation(ctx context.Context, in *Conversation, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/MarkReadConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) UpdateEndchatSetting(ctx context.Context, in *EndchatSetting, opts ...grpc.CallOption) (*EndchatSetting, error) {
	out := new(EndchatSetting)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/UpdateEndchatSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) GetEndchatSetting(ctx context.Context, in *Id, opts ...grpc.CallOption) (*EndchatSetting, error) {
	out := new(EndchatSetting)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/GetEndchatSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) TerminateBot(ctx context.Context, in *BotTerminated, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/TerminateBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationMgrClient) UpdatePresence(ctx context.Context, in *Id, opts ...grpc.CallOption) (*account.Presence, error) {
	out := new(account.Presence)
	err := c.cc.Invoke(ctx, "/header.ConversationMgr/UpdatePresence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConversationMgrServer is the server API for ConversationMgr service.
type ConversationMgrServer interface {
	AssignRule(context.Context, *AssignRequest) (*RouteResult, error)
	PongMessage(context.Context, *Event) (*Event, error)
	// rpc UpdateConversationState(Conversation) returns (Conversation);
	StartConversation(context.Context, *StartRequest) (*Conversation, error)
	EndConversation(context.Context, *Id) (*Conversation, error)
	GetConversation(context.Context, *Id) (*Conversation, error)
	ListConversations(context.Context, *ListConversationsRequest) (*Conversations, error)
	MatchConversations(context.Context, *Ids) (*Conversations, error)
	TagConversation(context.Context, *TagRequest) (*Empty, error)
	UntagConversation(context.Context, *TagRequest) (*Empty, error)
	JoinConversation(context.Context, *ConversationMember) (*Empty, error)
	LeftConversation(context.Context, *ConversationMember) (*Empty, error)
	Typing(context.Context, *Id) (*Empty, error)
	UpdateConversationInfo(context.Context, *Conversation) (*Conversation, error)
	SearchConvos(context.Context, *SearchRequest) (*Conversations, error)
	UpdateMuteConversation(context.Context, *Conversation) (*Empty, error)
	UnwatchConversation(context.Context, *Conversation) (*Empty, error)
	MarkReadConversation(context.Context, *Conversation) (*Empty, error)
	UpdateEndchatSetting(context.Context, *EndchatSetting) (*EndchatSetting, error)
	GetEndchatSetting(context.Context, *Id) (*EndchatSetting, error)
	TerminateBot(context.Context, *BotTerminated) (*Event, error)
	UpdatePresence(context.Context, *Id) (*account.Presence, error)
}

// UnimplementedConversationMgrServer can be embedded to have forward compatible implementations.
type UnimplementedConversationMgrServer struct {
}

func (*UnimplementedConversationMgrServer) AssignRule(context.Context, *AssignRequest) (*RouteResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignRule not implemented")
}
func (*UnimplementedConversationMgrServer) PongMessage(context.Context, *Event) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PongMessage not implemented")
}
func (*UnimplementedConversationMgrServer) StartConversation(context.Context, *StartRequest) (*Conversation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartConversation not implemented")
}
func (*UnimplementedConversationMgrServer) EndConversation(context.Context, *Id) (*Conversation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndConversation not implemented")
}
func (*UnimplementedConversationMgrServer) GetConversation(context.Context, *Id) (*Conversation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversation not implemented")
}
func (*UnimplementedConversationMgrServer) ListConversations(context.Context, *ListConversationsRequest) (*Conversations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConversations not implemented")
}
func (*UnimplementedConversationMgrServer) MatchConversations(context.Context, *Ids) (*Conversations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatchConversations not implemented")
}
func (*UnimplementedConversationMgrServer) TagConversation(context.Context, *TagRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagConversation not implemented")
}
func (*UnimplementedConversationMgrServer) UntagConversation(context.Context, *TagRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UntagConversation not implemented")
}
func (*UnimplementedConversationMgrServer) JoinConversation(context.Context, *ConversationMember) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinConversation not implemented")
}
func (*UnimplementedConversationMgrServer) LeftConversation(context.Context, *ConversationMember) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeftConversation not implemented")
}
func (*UnimplementedConversationMgrServer) Typing(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Typing not implemented")
}
func (*UnimplementedConversationMgrServer) UpdateConversationInfo(context.Context, *Conversation) (*Conversation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConversationInfo not implemented")
}
func (*UnimplementedConversationMgrServer) SearchConvos(context.Context, *SearchRequest) (*Conversations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchConvos not implemented")
}
func (*UnimplementedConversationMgrServer) UpdateMuteConversation(context.Context, *Conversation) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMuteConversation not implemented")
}
func (*UnimplementedConversationMgrServer) UnwatchConversation(context.Context, *Conversation) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnwatchConversation not implemented")
}
func (*UnimplementedConversationMgrServer) MarkReadConversation(context.Context, *Conversation) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkReadConversation not implemented")
}
func (*UnimplementedConversationMgrServer) UpdateEndchatSetting(context.Context, *EndchatSetting) (*EndchatSetting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEndchatSetting not implemented")
}
func (*UnimplementedConversationMgrServer) GetEndchatSetting(context.Context, *Id) (*EndchatSetting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEndchatSetting not implemented")
}
func (*UnimplementedConversationMgrServer) TerminateBot(context.Context, *BotTerminated) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateBot not implemented")
}
func (*UnimplementedConversationMgrServer) UpdatePresence(context.Context, *Id) (*account.Presence, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePresence not implemented")
}

func RegisterConversationMgrServer(s *grpc.Server, srv ConversationMgrServer) {
	s.RegisterService(&_ConversationMgr_serviceDesc, srv)
}

func _ConversationMgr_AssignRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).AssignRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/AssignRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).AssignRule(ctx, req.(*AssignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_PongMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).PongMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/PongMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).PongMessage(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_StartConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).StartConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/StartConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).StartConversation(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_EndConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).EndConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/EndConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).EndConversation(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_GetConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).GetConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/GetConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).GetConversation(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_ListConversations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConversationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).ListConversations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/ListConversations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).ListConversations(ctx, req.(*ListConversationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_MatchConversations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).MatchConversations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/MatchConversations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).MatchConversations(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_TagConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).TagConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/TagConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).TagConversation(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_UntagConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).UntagConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/UntagConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).UntagConversation(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_JoinConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversationMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).JoinConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/JoinConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).JoinConversation(ctx, req.(*ConversationMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_LeftConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversationMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).LeftConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/LeftConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).LeftConversation(ctx, req.(*ConversationMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_Typing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).Typing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/Typing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).Typing(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_UpdateConversationInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Conversation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).UpdateConversationInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/UpdateConversationInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).UpdateConversationInfo(ctx, req.(*Conversation))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_SearchConvos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).SearchConvos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/SearchConvos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).SearchConvos(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_UpdateMuteConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Conversation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).UpdateMuteConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/UpdateMuteConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).UpdateMuteConversation(ctx, req.(*Conversation))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_UnwatchConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Conversation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).UnwatchConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/UnwatchConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).UnwatchConversation(ctx, req.(*Conversation))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_MarkReadConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Conversation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).MarkReadConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/MarkReadConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).MarkReadConversation(ctx, req.(*Conversation))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_UpdateEndchatSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndchatSetting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).UpdateEndchatSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/UpdateEndchatSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).UpdateEndchatSetting(ctx, req.(*EndchatSetting))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_GetEndchatSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).GetEndchatSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/GetEndchatSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).GetEndchatSetting(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_TerminateBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotTerminated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).TerminateBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/TerminateBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).TerminateBot(ctx, req.(*BotTerminated))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationMgr_UpdatePresence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMgrServer).UpdatePresence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationMgr/UpdatePresence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMgrServer).UpdatePresence(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConversationMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.ConversationMgr",
	HandlerType: (*ConversationMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssignRule",
			Handler:    _ConversationMgr_AssignRule_Handler,
		},
		{
			MethodName: "PongMessage",
			Handler:    _ConversationMgr_PongMessage_Handler,
		},
		{
			MethodName: "StartConversation",
			Handler:    _ConversationMgr_StartConversation_Handler,
		},
		{
			MethodName: "EndConversation",
			Handler:    _ConversationMgr_EndConversation_Handler,
		},
		{
			MethodName: "GetConversation",
			Handler:    _ConversationMgr_GetConversation_Handler,
		},
		{
			MethodName: "ListConversations",
			Handler:    _ConversationMgr_ListConversations_Handler,
		},
		{
			MethodName: "MatchConversations",
			Handler:    _ConversationMgr_MatchConversations_Handler,
		},
		{
			MethodName: "TagConversation",
			Handler:    _ConversationMgr_TagConversation_Handler,
		},
		{
			MethodName: "UntagConversation",
			Handler:    _ConversationMgr_UntagConversation_Handler,
		},
		{
			MethodName: "JoinConversation",
			Handler:    _ConversationMgr_JoinConversation_Handler,
		},
		{
			MethodName: "LeftConversation",
			Handler:    _ConversationMgr_LeftConversation_Handler,
		},
		{
			MethodName: "Typing",
			Handler:    _ConversationMgr_Typing_Handler,
		},
		{
			MethodName: "UpdateConversationInfo",
			Handler:    _ConversationMgr_UpdateConversationInfo_Handler,
		},
		{
			MethodName: "SearchConvos",
			Handler:    _ConversationMgr_SearchConvos_Handler,
		},
		{
			MethodName: "UpdateMuteConversation",
			Handler:    _ConversationMgr_UpdateMuteConversation_Handler,
		},
		{
			MethodName: "UnwatchConversation",
			Handler:    _ConversationMgr_UnwatchConversation_Handler,
		},
		{
			MethodName: "MarkReadConversation",
			Handler:    _ConversationMgr_MarkReadConversation_Handler,
		},
		{
			MethodName: "UpdateEndchatSetting",
			Handler:    _ConversationMgr_UpdateEndchatSetting_Handler,
		},
		{
			MethodName: "GetEndchatSetting",
			Handler:    _ConversationMgr_GetEndchatSetting_Handler,
		},
		{
			MethodName: "TerminateBot",
			Handler:    _ConversationMgr_TerminateBot_Handler,
		},
		{
			MethodName: "UpdatePresence",
			Handler:    _ConversationMgr_UpdatePresence_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// TemplateMgrClient is the client API for TemplateMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TemplateMgrClient interface {
	CreateTemplate(ctx context.Context, in *Template, opts ...grpc.CallOption) (*Template, error)
	UpdateTemplate(ctx context.Context, in *Template, opts ...grpc.CallOption) (*Template, error)
	DeleteTemplate(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	GetTemplate(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Template, error)
	ListTemplates(ctx context.Context, in *SearchTemplate, opts ...grpc.CallOption) (*Templates, error)
	PickTemplate(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
}

type templateMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewTemplateMgrClient(cc grpc.ClientConnInterface) TemplateMgrClient {
	return &templateMgrClient{cc}
}

func (c *templateMgrClient) CreateTemplate(ctx context.Context, in *Template, opts ...grpc.CallOption) (*Template, error) {
	out := new(Template)
	err := c.cc.Invoke(ctx, "/header.TemplateMgr/CreateTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateMgrClient) UpdateTemplate(ctx context.Context, in *Template, opts ...grpc.CallOption) (*Template, error) {
	out := new(Template)
	err := c.cc.Invoke(ctx, "/header.TemplateMgr/UpdateTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateMgrClient) DeleteTemplate(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.TemplateMgr/DeleteTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateMgrClient) GetTemplate(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Template, error) {
	out := new(Template)
	err := c.cc.Invoke(ctx, "/header.TemplateMgr/GetTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateMgrClient) ListTemplates(ctx context.Context, in *SearchTemplate, opts ...grpc.CallOption) (*Templates, error) {
	out := new(Templates)
	err := c.cc.Invoke(ctx, "/header.TemplateMgr/ListTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateMgrClient) PickTemplate(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.TemplateMgr/PickTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TemplateMgrServer is the server API for TemplateMgr service.
type TemplateMgrServer interface {
	CreateTemplate(context.Context, *Template) (*Template, error)
	UpdateTemplate(context.Context, *Template) (*Template, error)
	DeleteTemplate(context.Context, *Id) (*Empty, error)
	GetTemplate(context.Context, *Id) (*Template, error)
	ListTemplates(context.Context, *SearchTemplate) (*Templates, error)
	PickTemplate(context.Context, *Id) (*Empty, error)
}

// UnimplementedTemplateMgrServer can be embedded to have forward compatible implementations.
type UnimplementedTemplateMgrServer struct {
}

func (*UnimplementedTemplateMgrServer) CreateTemplate(context.Context, *Template) (*Template, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTemplate not implemented")
}
func (*UnimplementedTemplateMgrServer) UpdateTemplate(context.Context, *Template) (*Template, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTemplate not implemented")
}
func (*UnimplementedTemplateMgrServer) DeleteTemplate(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemplate not implemented")
}
func (*UnimplementedTemplateMgrServer) GetTemplate(context.Context, *Id) (*Template, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplate not implemented")
}
func (*UnimplementedTemplateMgrServer) ListTemplates(context.Context, *SearchTemplate) (*Templates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplates not implemented")
}
func (*UnimplementedTemplateMgrServer) PickTemplate(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PickTemplate not implemented")
}

func RegisterTemplateMgrServer(s *grpc.Server, srv TemplateMgrServer) {
	s.RegisterService(&_TemplateMgr_serviceDesc, srv)
}

func _TemplateMgr_CreateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Template)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateMgrServer).CreateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TemplateMgr/CreateTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateMgrServer).CreateTemplate(ctx, req.(*Template))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateMgr_UpdateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Template)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateMgrServer).UpdateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TemplateMgr/UpdateTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateMgrServer).UpdateTemplate(ctx, req.(*Template))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateMgr_DeleteTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateMgrServer).DeleteTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TemplateMgr/DeleteTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateMgrServer).DeleteTemplate(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateMgr_GetTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateMgrServer).GetTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TemplateMgr/GetTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateMgrServer).GetTemplate(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateMgr_ListTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchTemplate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateMgrServer).ListTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TemplateMgr/ListTemplates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateMgrServer).ListTemplates(ctx, req.(*SearchTemplate))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateMgr_PickTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateMgrServer).PickTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TemplateMgr/PickTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateMgrServer).PickTemplate(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _TemplateMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.TemplateMgr",
	HandlerType: (*TemplateMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTemplate",
			Handler:    _TemplateMgr_CreateTemplate_Handler,
		},
		{
			MethodName: "UpdateTemplate",
			Handler:    _TemplateMgr_UpdateTemplate_Handler,
		},
		{
			MethodName: "DeleteTemplate",
			Handler:    _TemplateMgr_DeleteTemplate_Handler,
		},
		{
			MethodName: "GetTemplate",
			Handler:    _TemplateMgr_GetTemplate_Handler,
		},
		{
			MethodName: "ListTemplates",
			Handler:    _TemplateMgr_ListTemplates_Handler,
		},
		{
			MethodName: "PickTemplate",
			Handler:    _TemplateMgr_PickTemplate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// TagMgrClient is the client API for TagMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TagMgrClient interface {
	CreateTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*Tag, error)
	UpdateTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*Tag, error)
	DeleteTag(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	ListTags(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Tags, error)
	GetTag(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Tag, error)
}

type tagMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewTagMgrClient(cc grpc.ClientConnInterface) TagMgrClient {
	return &tagMgrClient{cc}
}

func (c *tagMgrClient) CreateTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*Tag, error) {
	out := new(Tag)
	err := c.cc.Invoke(ctx, "/header.TagMgr/CreateTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagMgrClient) UpdateTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*Tag, error) {
	out := new(Tag)
	err := c.cc.Invoke(ctx, "/header.TagMgr/UpdateTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagMgrClient) DeleteTag(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.TagMgr/DeleteTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagMgrClient) ListTags(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Tags, error) {
	out := new(Tags)
	err := c.cc.Invoke(ctx, "/header.TagMgr/ListTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagMgrClient) GetTag(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Tag, error) {
	out := new(Tag)
	err := c.cc.Invoke(ctx, "/header.TagMgr/GetTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TagMgrServer is the server API for TagMgr service.
type TagMgrServer interface {
	CreateTag(context.Context, *Tag) (*Tag, error)
	UpdateTag(context.Context, *Tag) (*Tag, error)
	DeleteTag(context.Context, *Id) (*Empty, error)
	ListTags(context.Context, *Id) (*Tags, error)
	GetTag(context.Context, *Id) (*Tag, error)
}

// UnimplementedTagMgrServer can be embedded to have forward compatible implementations.
type UnimplementedTagMgrServer struct {
}

func (*UnimplementedTagMgrServer) CreateTag(context.Context, *Tag) (*Tag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTag not implemented")
}
func (*UnimplementedTagMgrServer) UpdateTag(context.Context, *Tag) (*Tag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTag not implemented")
}
func (*UnimplementedTagMgrServer) DeleteTag(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTag not implemented")
}
func (*UnimplementedTagMgrServer) ListTags(context.Context, *Id) (*Tags, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTags not implemented")
}
func (*UnimplementedTagMgrServer) GetTag(context.Context, *Id) (*Tag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTag not implemented")
}

func RegisterTagMgrServer(s *grpc.Server, srv TagMgrServer) {
	s.RegisterService(&_TagMgr_serviceDesc, srv)
}

func _TagMgr_CreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagMgrServer).CreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TagMgr/CreateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagMgrServer).CreateTag(ctx, req.(*Tag))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagMgr_UpdateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagMgrServer).UpdateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TagMgr/UpdateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagMgrServer).UpdateTag(ctx, req.(*Tag))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagMgr_DeleteTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagMgrServer).DeleteTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TagMgr/DeleteTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagMgrServer).DeleteTag(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagMgr_ListTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagMgrServer).ListTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TagMgr/ListTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagMgrServer).ListTags(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagMgr_GetTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagMgrServer).GetTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.TagMgr/GetTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagMgrServer).GetTag(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _TagMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.TagMgr",
	HandlerType: (*TagMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTag",
			Handler:    _TagMgr_CreateTag_Handler,
		},
		{
			MethodName: "UpdateTag",
			Handler:    _TagMgr_UpdateTag_Handler,
		},
		{
			MethodName: "DeleteTag",
			Handler:    _TagMgr_DeleteTag_Handler,
		},
		{
			MethodName: "ListTags",
			Handler:    _TagMgr_ListTags_Handler,
		},
		{
			MethodName: "GetTag",
			Handler:    _TagMgr_GetTag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// IntegrationMgrClient is the client API for IntegrationMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IntegrationMgrClient interface {
	Deintegrate(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	ListIntegrations(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Integrations, error)
	Integrate(ctx context.Context, in *Integration, opts ...grpc.CallOption) (*Integration, error)
}

type integrationMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewIntegrationMgrClient(cc grpc.ClientConnInterface) IntegrationMgrClient {
	return &integrationMgrClient{cc}
}

func (c *integrationMgrClient) Deintegrate(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.IntegrationMgr/Deintegrate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationMgrClient) ListIntegrations(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Integrations, error) {
	out := new(Integrations)
	err := c.cc.Invoke(ctx, "/header.IntegrationMgr/ListIntegrations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationMgrClient) Integrate(ctx context.Context, in *Integration, opts ...grpc.CallOption) (*Integration, error) {
	out := new(Integration)
	err := c.cc.Invoke(ctx, "/header.IntegrationMgr/Integrate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntegrationMgrServer is the server API for IntegrationMgr service.
type IntegrationMgrServer interface {
	Deintegrate(context.Context, *Id) (*Empty, error)
	ListIntegrations(context.Context, *Id) (*Integrations, error)
	Integrate(context.Context, *Integration) (*Integration, error)
}

// UnimplementedIntegrationMgrServer can be embedded to have forward compatible implementations.
type UnimplementedIntegrationMgrServer struct {
}

func (*UnimplementedIntegrationMgrServer) Deintegrate(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deintegrate not implemented")
}
func (*UnimplementedIntegrationMgrServer) ListIntegrations(context.Context, *Id) (*Integrations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIntegrations not implemented")
}
func (*UnimplementedIntegrationMgrServer) Integrate(context.Context, *Integration) (*Integration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Integrate not implemented")
}

func RegisterIntegrationMgrServer(s *grpc.Server, srv IntegrationMgrServer) {
	s.RegisterService(&_IntegrationMgr_serviceDesc, srv)
}

func _IntegrationMgr_Deintegrate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationMgrServer).Deintegrate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.IntegrationMgr/Deintegrate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationMgrServer).Deintegrate(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationMgr_ListIntegrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationMgrServer).ListIntegrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.IntegrationMgr/ListIntegrations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationMgrServer).ListIntegrations(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationMgr_Integrate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Integration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationMgrServer).Integrate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.IntegrationMgr/Integrate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationMgrServer).Integrate(ctx, req.(*Integration))
	}
	return interceptor(ctx, in, info, handler)
}

var _IntegrationMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.IntegrationMgr",
	HandlerType: (*IntegrationMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Deintegrate",
			Handler:    _IntegrationMgr_Deintegrate_Handler,
		},
		{
			MethodName: "ListIntegrations",
			Handler:    _IntegrationMgr_ListIntegrations_Handler,
		},
		{
			MethodName: "Integrate",
			Handler:    _IntegrationMgr_Integrate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// EventMgrClient is the client API for EventMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventMgrClient interface {
	SearchEvents(ctx context.Context, in *ListUserEventsRequest, opts ...grpc.CallOption) (*Events, error)
	CreateEvent(ctx context.Context, in *UserEvent, opts ...grpc.CallOption) (*Event, error)
}

type eventMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewEventMgrClient(cc grpc.ClientConnInterface) EventMgrClient {
	return &eventMgrClient{cc}
}

func (c *eventMgrClient) SearchEvents(ctx context.Context, in *ListUserEventsRequest, opts ...grpc.CallOption) (*Events, error) {
	out := new(Events)
	err := c.cc.Invoke(ctx, "/header.EventMgr/SearchEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventMgrClient) CreateEvent(ctx context.Context, in *UserEvent, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/header.EventMgr/CreateEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventMgrServer is the server API for EventMgr service.
type EventMgrServer interface {
	SearchEvents(context.Context, *ListUserEventsRequest) (*Events, error)
	CreateEvent(context.Context, *UserEvent) (*Event, error)
}

// UnimplementedEventMgrServer can be embedded to have forward compatible implementations.
type UnimplementedEventMgrServer struct {
}

func (*UnimplementedEventMgrServer) SearchEvents(context.Context, *ListUserEventsRequest) (*Events, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchEvents not implemented")
}
func (*UnimplementedEventMgrServer) CreateEvent(context.Context, *UserEvent) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEvent not implemented")
}

func RegisterEventMgrServer(s *grpc.Server, srv EventMgrServer) {
	s.RegisterService(&_EventMgr_serviceDesc, srv)
}

func _EventMgr_SearchEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventMgrServer).SearchEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.EventMgr/SearchEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventMgrServer).SearchEvents(ctx, req.(*ListUserEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventMgr_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventMgrServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.EventMgr/CreateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventMgrServer).CreateEvent(ctx, req.(*UserEvent))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.EventMgr",
	HandlerType: (*EventMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchEvents",
			Handler:    _EventMgr_SearchEvents_Handler,
		},
		{
			MethodName: "CreateEvent",
			Handler:    _EventMgr_CreateEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// ConversationEventReaderClient is the client API for ConversationEventReader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConversationEventReaderClient interface {
	SendMessage(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error)
	UpdateMessage(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error)
	ListEvents(ctx context.Context, in *ListConversationEventsRequest, opts ...grpc.CallOption) (*Events, error)
}

type conversationEventReaderClient struct {
	cc grpc.ClientConnInterface
}

func NewConversationEventReaderClient(cc grpc.ClientConnInterface) ConversationEventReaderClient {
	return &conversationEventReaderClient{cc}
}

func (c *conversationEventReaderClient) SendMessage(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/header.ConversationEventReader/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationEventReaderClient) UpdateMessage(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/header.ConversationEventReader/UpdateMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationEventReaderClient) ListEvents(ctx context.Context, in *ListConversationEventsRequest, opts ...grpc.CallOption) (*Events, error) {
	out := new(Events)
	err := c.cc.Invoke(ctx, "/header.ConversationEventReader/ListEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConversationEventReaderServer is the server API for ConversationEventReader service.
type ConversationEventReaderServer interface {
	SendMessage(context.Context, *Event) (*Event, error)
	UpdateMessage(context.Context, *Event) (*Event, error)
	ListEvents(context.Context, *ListConversationEventsRequest) (*Events, error)
}

// UnimplementedConversationEventReaderServer can be embedded to have forward compatible implementations.
type UnimplementedConversationEventReaderServer struct {
}

func (*UnimplementedConversationEventReaderServer) SendMessage(context.Context, *Event) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (*UnimplementedConversationEventReaderServer) UpdateMessage(context.Context, *Event) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMessage not implemented")
}
func (*UnimplementedConversationEventReaderServer) ListEvents(context.Context, *ListConversationEventsRequest) (*Events, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEvents not implemented")
}

func RegisterConversationEventReaderServer(s *grpc.Server, srv ConversationEventReaderServer) {
	s.RegisterService(&_ConversationEventReader_serviceDesc, srv)
}

func _ConversationEventReader_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationEventReaderServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationEventReader/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationEventReaderServer).SendMessage(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationEventReader_UpdateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationEventReaderServer).UpdateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationEventReader/UpdateMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationEventReaderServer).UpdateMessage(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationEventReader_ListEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConversationEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationEventReaderServer).ListEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.ConversationEventReader/ListEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationEventReaderServer).ListEvents(ctx, req.(*ListConversationEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConversationEventReader_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.ConversationEventReader",
	HandlerType: (*ConversationEventReaderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _ConversationEventReader_SendMessage_Handler,
		},
		{
			MethodName: "UpdateMessage",
			Handler:    _ConversationEventReader_UpdateMessage_Handler,
		},
		{
			MethodName: "ListEvents",
			Handler:    _ConversationEventReader_ListEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// FileMgrClient is the client API for FileMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FileMgrClient interface {
	Presign(ctx context.Context, in *FileHeader, opts ...grpc.CallOption) (*PresignResult, error)
	Read(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*File, error)
	Uploaded(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*File, error)
}

type fileMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewFileMgrClient(cc grpc.ClientConnInterface) FileMgrClient {
	return &fileMgrClient{cc}
}

func (c *fileMgrClient) Presign(ctx context.Context, in *FileHeader, opts ...grpc.CallOption) (*PresignResult, error) {
	out := new(PresignResult)
	err := c.cc.Invoke(ctx, "/header.FileMgr/Presign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileMgrClient) Read(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*File, error) {
	out := new(File)
	err := c.cc.Invoke(ctx, "/header.FileMgr/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileMgrClient) Uploaded(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*File, error) {
	out := new(File)
	err := c.cc.Invoke(ctx, "/header.FileMgr/Uploaded", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileMgrServer is the server API for FileMgr service.
type FileMgrServer interface {
	Presign(context.Context, *FileHeader) (*PresignResult, error)
	Read(context.Context, *FileRequest) (*File, error)
	Uploaded(context.Context, *FileRequest) (*File, error)
}

// UnimplementedFileMgrServer can be embedded to have forward compatible implementations.
type UnimplementedFileMgrServer struct {
}

func (*UnimplementedFileMgrServer) Presign(context.Context, *FileHeader) (*PresignResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Presign not implemented")
}
func (*UnimplementedFileMgrServer) Read(context.Context, *FileRequest) (*File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (*UnimplementedFileMgrServer) Uploaded(context.Context, *FileRequest) (*File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Uploaded not implemented")
}

func RegisterFileMgrServer(s *grpc.Server, srv FileMgrServer) {
	s.RegisterService(&_FileMgr_serviceDesc, srv)
}

func _FileMgr_Presign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileHeader)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileMgrServer).Presign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.FileMgr/Presign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileMgrServer).Presign(ctx, req.(*FileHeader))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileMgr_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileMgrServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.FileMgr/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileMgrServer).Read(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileMgr_Uploaded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileMgrServer).Uploaded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.FileMgr/Uploaded",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileMgrServer).Uploaded(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FileMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.FileMgr",
	HandlerType: (*FileMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Presign",
			Handler:    _FileMgr_Presign_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _FileMgr_Read_Handler,
		},
		{
			MethodName: "Uploaded",
			Handler:    _FileMgr_Uploaded_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// Noti5ServiceClient is the client API for Noti5Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Noti5ServiceClient interface {
	ReadNotificationSetting(ctx context.Context, in *Id, opts ...grpc.CallOption) (*noti5.Setting, error)
	UpdateNotificationSetting(ctx context.Context, in *noti5.Setting, opts ...grpc.CallOption) (*noti5.Setting, error)
	Noti(ctx context.Context, in *noti5.PushNoti, opts ...grpc.CallOption) (*Empty, error)
	AddToken(ctx context.Context, in *noti5.Token, opts ...grpc.CallOption) (*Empty, error)
	RemoveToken(ctx context.Context, in *noti5.Token, opts ...grpc.CallOption) (*Empty, error)
	CheckTokenExists(ctx context.Context, in *noti5.Token, opts ...grpc.CallOption) (*Empty, error)
}

type noti5ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNoti5ServiceClient(cc grpc.ClientConnInterface) Noti5ServiceClient {
	return &noti5ServiceClient{cc}
}

func (c *noti5ServiceClient) ReadNotificationSetting(ctx context.Context, in *Id, opts ...grpc.CallOption) (*noti5.Setting, error) {
	out := new(noti5.Setting)
	err := c.cc.Invoke(ctx, "/header.Noti5Service/ReadNotificationSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noti5ServiceClient) UpdateNotificationSetting(ctx context.Context, in *noti5.Setting, opts ...grpc.CallOption) (*noti5.Setting, error) {
	out := new(noti5.Setting)
	err := c.cc.Invoke(ctx, "/header.Noti5Service/UpdateNotificationSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noti5ServiceClient) Noti(ctx context.Context, in *noti5.PushNoti, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Noti5Service/Noti", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noti5ServiceClient) AddToken(ctx context.Context, in *noti5.Token, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Noti5Service/AddToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noti5ServiceClient) RemoveToken(ctx context.Context, in *noti5.Token, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Noti5Service/RemoveToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noti5ServiceClient) CheckTokenExists(ctx context.Context, in *noti5.Token, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Noti5Service/CheckTokenExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Noti5ServiceServer is the server API for Noti5Service service.
type Noti5ServiceServer interface {
	ReadNotificationSetting(context.Context, *Id) (*noti5.Setting, error)
	UpdateNotificationSetting(context.Context, *noti5.Setting) (*noti5.Setting, error)
	Noti(context.Context, *noti5.PushNoti) (*Empty, error)
	AddToken(context.Context, *noti5.Token) (*Empty, error)
	RemoveToken(context.Context, *noti5.Token) (*Empty, error)
	CheckTokenExists(context.Context, *noti5.Token) (*Empty, error)
}

// UnimplementedNoti5ServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNoti5ServiceServer struct {
}

func (*UnimplementedNoti5ServiceServer) ReadNotificationSetting(context.Context, *Id) (*noti5.Setting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadNotificationSetting not implemented")
}
func (*UnimplementedNoti5ServiceServer) UpdateNotificationSetting(context.Context, *noti5.Setting) (*noti5.Setting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotificationSetting not implemented")
}
func (*UnimplementedNoti5ServiceServer) Noti(context.Context, *noti5.PushNoti) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Noti not implemented")
}
func (*UnimplementedNoti5ServiceServer) AddToken(context.Context, *noti5.Token) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToken not implemented")
}
func (*UnimplementedNoti5ServiceServer) RemoveToken(context.Context, *noti5.Token) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveToken not implemented")
}
func (*UnimplementedNoti5ServiceServer) CheckTokenExists(context.Context, *noti5.Token) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTokenExists not implemented")
}

func RegisterNoti5ServiceServer(s *grpc.Server, srv Noti5ServiceServer) {
	s.RegisterService(&_Noti5Service_serviceDesc, srv)
}

func _Noti5Service_ReadNotificationSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Noti5ServiceServer).ReadNotificationSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Noti5Service/ReadNotificationSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Noti5ServiceServer).ReadNotificationSetting(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Noti5Service_UpdateNotificationSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(noti5.Setting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Noti5ServiceServer).UpdateNotificationSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Noti5Service/UpdateNotificationSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Noti5ServiceServer).UpdateNotificationSetting(ctx, req.(*noti5.Setting))
	}
	return interceptor(ctx, in, info, handler)
}

func _Noti5Service_Noti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(noti5.PushNoti)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Noti5ServiceServer).Noti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Noti5Service/Noti",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Noti5ServiceServer).Noti(ctx, req.(*noti5.PushNoti))
	}
	return interceptor(ctx, in, info, handler)
}

func _Noti5Service_AddToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(noti5.Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Noti5ServiceServer).AddToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Noti5Service/AddToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Noti5ServiceServer).AddToken(ctx, req.(*noti5.Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _Noti5Service_RemoveToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(noti5.Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Noti5ServiceServer).RemoveToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Noti5Service/RemoveToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Noti5ServiceServer).RemoveToken(ctx, req.(*noti5.Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _Noti5Service_CheckTokenExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(noti5.Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Noti5ServiceServer).CheckTokenExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Noti5Service/CheckTokenExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Noti5ServiceServer).CheckTokenExists(ctx, req.(*noti5.Token))
	}
	return interceptor(ctx, in, info, handler)
}

var _Noti5Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.Noti5Service",
	HandlerType: (*Noti5ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadNotificationSetting",
			Handler:    _Noti5Service_ReadNotificationSetting_Handler,
		},
		{
			MethodName: "UpdateNotificationSetting",
			Handler:    _Noti5Service_UpdateNotificationSetting_Handler,
		},
		{
			MethodName: "Noti",
			Handler:    _Noti5Service_Noti_Handler,
		},
		{
			MethodName: "AddToken",
			Handler:    _Noti5Service_AddToken_Handler,
		},
		{
			MethodName: "RemoveToken",
			Handler:    _Noti5Service_RemoveToken_Handler,
		},
		{
			MethodName: "CheckTokenExists",
			Handler:    _Noti5Service_CheckTokenExists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// SubizInternalPaymentMgrClient is the client API for SubizInternalPaymentMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SubizInternalPaymentMgrClient interface {
	CreateBill(ctx context.Context, in *payment.Bill, opts ...grpc.CallOption) (*payment.Bill, error)
}

type subizInternalPaymentMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewSubizInternalPaymentMgrClient(cc grpc.ClientConnInterface) SubizInternalPaymentMgrClient {
	return &subizInternalPaymentMgrClient{cc}
}

func (c *subizInternalPaymentMgrClient) CreateBill(ctx context.Context, in *payment.Bill, opts ...grpc.CallOption) (*payment.Bill, error) {
	out := new(payment.Bill)
	err := c.cc.Invoke(ctx, "/header.SubizInternalPaymentMgr/CreateBill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubizInternalPaymentMgrServer is the server API for SubizInternalPaymentMgr service.
type SubizInternalPaymentMgrServer interface {
	CreateBill(context.Context, *payment.Bill) (*payment.Bill, error)
}

// UnimplementedSubizInternalPaymentMgrServer can be embedded to have forward compatible implementations.
type UnimplementedSubizInternalPaymentMgrServer struct {
}

func (*UnimplementedSubizInternalPaymentMgrServer) CreateBill(context.Context, *payment.Bill) (*payment.Bill, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBill not implemented")
}

func RegisterSubizInternalPaymentMgrServer(s *grpc.Server, srv SubizInternalPaymentMgrServer) {
	s.RegisterService(&_SubizInternalPaymentMgr_serviceDesc, srv)
}

func _SubizInternalPaymentMgr_CreateBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.Bill)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubizInternalPaymentMgrServer).CreateBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.SubizInternalPaymentMgr/CreateBill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubizInternalPaymentMgrServer).CreateBill(ctx, req.(*payment.Bill))
	}
	return interceptor(ctx, in, info, handler)
}

var _SubizInternalPaymentMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.SubizInternalPaymentMgr",
	HandlerType: (*SubizInternalPaymentMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBill",
			Handler:    _SubizInternalPaymentMgr_CreateBill_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// PaymentMgrClient is the client API for PaymentMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PaymentMgrClient interface {
	SearchSub(ctx context.Context, in *account.SearchSubRequest, opts ...grpc.CallOption) (*account.AccSubs, error)
	Purchase(ctx context.Context, in *payment.Subscription, opts ...grpc.CallOption) (*payment.Invoice, error)
	UpdateSubscription(ctx context.Context, in *payment.Subscription, opts ...grpc.CallOption) (*payment.Subscription, error)
	GetSubscription(ctx context.Context, in *Id, opts ...grpc.CallOption) (*payment.Subscription, error)
	AddPaymentMethod(ctx context.Context, in *payment.PaymentMethod, opts ...grpc.CallOption) (*payment.PaymentMethod, error)
	UpdatePaymentMethod(ctx context.Context, in *payment.PaymentMethod, opts ...grpc.CallOption) (*payment.PaymentMethod, error)
	DeletePaymentMethod(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	ListPaymentMethods(ctx context.Context, in *Id, opts ...grpc.CallOption) (*payment.PaymentMethods, error)
	Pay(ctx context.Context, in *payment.PayRequest, opts ...grpc.CallOption) (*payment.Bill, error)
	CreateInvoice(ctx context.Context, in *payment.Invoice, opts ...grpc.CallOption) (*payment.Invoice, error)
	UpdateInvoice(ctx context.Context, in *payment.Invoice, opts ...grpc.CallOption) (*payment.Invoice, error)
	FilterInvoices(ctx context.Context, in *payment.ListInvoiceRequest, opts ...grpc.CallOption) (*payment.Invoices, error)
	DraftInvoice(ctx context.Context, in *payment.Subscription, opts ...grpc.CallOption) (*payment.Invoice, error)
	DiffSubscriptions(ctx context.Context, in *payment.DiffSubRequest, opts ...grpc.CallOption) (*payment.Invoice, error)
	ListComments(ctx context.Context, in *payment.ListCommentsRequest, opts ...grpc.CallOption) (*payment.Comments, error)
	AddComment(ctx context.Context, in *payment.Comment, opts ...grpc.CallOption) (*payment.Comment, error)
	ListPlans(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*payment.Plans, error)
	ExportInvoice(ctx context.Context, in *Id, opts ...grpc.CallOption) (*payment.String, error)
	ConvertInvoiceToHtml(ctx context.Context, in *payment.Invoice, opts ...grpc.CallOption) (*payment.String, error)
	GetExchangeRate(ctx context.Context, in *ExchangeRate, opts ...grpc.CallOption) (*ExchangeRate, error)
	TransferMoney(ctx context.Context, in *payment.PayRequest, opts ...grpc.CallOption) (*payment.Bill, error)
	ListLogs(ctx context.Context, in *payment.ListLogsRequest, opts ...grpc.CallOption) (*payment.Logs, error)
	CreatePromotionCode(ctx context.Context, in *payment.PromotionCode, opts ...grpc.CallOption) (*payment.PromotionCode, error)
	GetPromotionCode(ctx context.Context, in *payment.String, opts ...grpc.CallOption) (*payment.PromotionCode, error)
	UsePromotionCode(ctx context.Context, in *payment.PromotionCodeRequest, opts ...grpc.CallOption) (*Empty, error)
	ValidatePromotionCode(ctx context.Context, in *payment.PromotionCodeRequest, opts ...grpc.CallOption) (*payment.PromotionCode, error)
	ListPromotionCode(ctx context.Context, in *payment.ListPromotionCodeRequest, opts ...grpc.CallOption) (*payment.PromotionCodes, error)
	DeletePromotionCode(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	SearchReferral(ctx context.Context, in *payment.SearchReferredRequest, opts ...grpc.CallOption) (*payment.Referral, error)
	GetReferral(ctx context.Context, in *Id, opts ...grpc.CallOption) (*payment.Referral, error)
	ListTopReferral(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*payment.ReferralResponse, error)
	UpdateReferral(ctx context.Context, in *payment.Referral, opts ...grpc.CallOption) (*payment.Referral, error)
	ListAccountReferred(ctx context.Context, in *Id, opts ...grpc.CallOption) (*payment.LogAccountReferreds, error)
	ListBillByAccountReferred(ctx context.Context, in *Id, opts ...grpc.CallOption) (*payment.LogBillByAccountReferreds, error)
	ListPaidForAgentReferrer(ctx context.Context, in *Id, opts ...grpc.CallOption) (*payment.LogPaidForAgentReferrers, error)
	PaidForAgentReferrer(ctx context.Context, in *payment.LogPaidForAgentReferrer, opts ...grpc.CallOption) (*Empty, error)
}

type paymentMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentMgrClient(cc grpc.ClientConnInterface) PaymentMgrClient {
	return &paymentMgrClient{cc}
}

func (c *paymentMgrClient) SearchSub(ctx context.Context, in *account.SearchSubRequest, opts ...grpc.CallOption) (*account.AccSubs, error) {
	out := new(account.AccSubs)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/SearchSub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) Purchase(ctx context.Context, in *payment.Subscription, opts ...grpc.CallOption) (*payment.Invoice, error) {
	out := new(payment.Invoice)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/Purchase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) UpdateSubscription(ctx context.Context, in *payment.Subscription, opts ...grpc.CallOption) (*payment.Subscription, error) {
	out := new(payment.Subscription)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/UpdateSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) GetSubscription(ctx context.Context, in *Id, opts ...grpc.CallOption) (*payment.Subscription, error) {
	out := new(payment.Subscription)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/GetSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) AddPaymentMethod(ctx context.Context, in *payment.PaymentMethod, opts ...grpc.CallOption) (*payment.PaymentMethod, error) {
	out := new(payment.PaymentMethod)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/AddPaymentMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) UpdatePaymentMethod(ctx context.Context, in *payment.PaymentMethod, opts ...grpc.CallOption) (*payment.PaymentMethod, error) {
	out := new(payment.PaymentMethod)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/UpdatePaymentMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) DeletePaymentMethod(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/DeletePaymentMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) ListPaymentMethods(ctx context.Context, in *Id, opts ...grpc.CallOption) (*payment.PaymentMethods, error) {
	out := new(payment.PaymentMethods)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/ListPaymentMethods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) Pay(ctx context.Context, in *payment.PayRequest, opts ...grpc.CallOption) (*payment.Bill, error) {
	out := new(payment.Bill)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/Pay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) CreateInvoice(ctx context.Context, in *payment.Invoice, opts ...grpc.CallOption) (*payment.Invoice, error) {
	out := new(payment.Invoice)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/CreateInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) UpdateInvoice(ctx context.Context, in *payment.Invoice, opts ...grpc.CallOption) (*payment.Invoice, error) {
	out := new(payment.Invoice)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/UpdateInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) FilterInvoices(ctx context.Context, in *payment.ListInvoiceRequest, opts ...grpc.CallOption) (*payment.Invoices, error) {
	out := new(payment.Invoices)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/FilterInvoices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) DraftInvoice(ctx context.Context, in *payment.Subscription, opts ...grpc.CallOption) (*payment.Invoice, error) {
	out := new(payment.Invoice)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/DraftInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) DiffSubscriptions(ctx context.Context, in *payment.DiffSubRequest, opts ...grpc.CallOption) (*payment.Invoice, error) {
	out := new(payment.Invoice)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/DiffSubscriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) ListComments(ctx context.Context, in *payment.ListCommentsRequest, opts ...grpc.CallOption) (*payment.Comments, error) {
	out := new(payment.Comments)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/ListComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) AddComment(ctx context.Context, in *payment.Comment, opts ...grpc.CallOption) (*payment.Comment, error) {
	out := new(payment.Comment)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/AddComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) ListPlans(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*payment.Plans, error) {
	out := new(payment.Plans)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/ListPlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) ExportInvoice(ctx context.Context, in *Id, opts ...grpc.CallOption) (*payment.String, error) {
	out := new(payment.String)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/ExportInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) ConvertInvoiceToHtml(ctx context.Context, in *payment.Invoice, opts ...grpc.CallOption) (*payment.String, error) {
	out := new(payment.String)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/ConvertInvoiceToHtml", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) GetExchangeRate(ctx context.Context, in *ExchangeRate, opts ...grpc.CallOption) (*ExchangeRate, error) {
	out := new(ExchangeRate)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/GetExchangeRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) TransferMoney(ctx context.Context, in *payment.PayRequest, opts ...grpc.CallOption) (*payment.Bill, error) {
	out := new(payment.Bill)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/TransferMoney", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) ListLogs(ctx context.Context, in *payment.ListLogsRequest, opts ...grpc.CallOption) (*payment.Logs, error) {
	out := new(payment.Logs)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/ListLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) CreatePromotionCode(ctx context.Context, in *payment.PromotionCode, opts ...grpc.CallOption) (*payment.PromotionCode, error) {
	out := new(payment.PromotionCode)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/CreatePromotionCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) GetPromotionCode(ctx context.Context, in *payment.String, opts ...grpc.CallOption) (*payment.PromotionCode, error) {
	out := new(payment.PromotionCode)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/GetPromotionCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) UsePromotionCode(ctx context.Context, in *payment.PromotionCodeRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/UsePromotionCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) ValidatePromotionCode(ctx context.Context, in *payment.PromotionCodeRequest, opts ...grpc.CallOption) (*payment.PromotionCode, error) {
	out := new(payment.PromotionCode)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/ValidatePromotionCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) ListPromotionCode(ctx context.Context, in *payment.ListPromotionCodeRequest, opts ...grpc.CallOption) (*payment.PromotionCodes, error) {
	out := new(payment.PromotionCodes)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/ListPromotionCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) DeletePromotionCode(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/DeletePromotionCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) SearchReferral(ctx context.Context, in *payment.SearchReferredRequest, opts ...grpc.CallOption) (*payment.Referral, error) {
	out := new(payment.Referral)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/SearchReferral", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) GetReferral(ctx context.Context, in *Id, opts ...grpc.CallOption) (*payment.Referral, error) {
	out := new(payment.Referral)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/GetReferral", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) ListTopReferral(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*payment.ReferralResponse, error) {
	out := new(payment.ReferralResponse)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/ListTopReferral", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) UpdateReferral(ctx context.Context, in *payment.Referral, opts ...grpc.CallOption) (*payment.Referral, error) {
	out := new(payment.Referral)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/UpdateReferral", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) ListAccountReferred(ctx context.Context, in *Id, opts ...grpc.CallOption) (*payment.LogAccountReferreds, error) {
	out := new(payment.LogAccountReferreds)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/ListAccountReferred", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) ListBillByAccountReferred(ctx context.Context, in *Id, opts ...grpc.CallOption) (*payment.LogBillByAccountReferreds, error) {
	out := new(payment.LogBillByAccountReferreds)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/ListBillByAccountReferred", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) ListPaidForAgentReferrer(ctx context.Context, in *Id, opts ...grpc.CallOption) (*payment.LogPaidForAgentReferrers, error) {
	out := new(payment.LogPaidForAgentReferrers)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/ListPaidForAgentReferrer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMgrClient) PaidForAgentReferrer(ctx context.Context, in *payment.LogPaidForAgentReferrer, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.PaymentMgr/PaidForAgentReferrer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentMgrServer is the server API for PaymentMgr service.
type PaymentMgrServer interface {
	SearchSub(context.Context, *account.SearchSubRequest) (*account.AccSubs, error)
	Purchase(context.Context, *payment.Subscription) (*payment.Invoice, error)
	UpdateSubscription(context.Context, *payment.Subscription) (*payment.Subscription, error)
	GetSubscription(context.Context, *Id) (*payment.Subscription, error)
	AddPaymentMethod(context.Context, *payment.PaymentMethod) (*payment.PaymentMethod, error)
	UpdatePaymentMethod(context.Context, *payment.PaymentMethod) (*payment.PaymentMethod, error)
	DeletePaymentMethod(context.Context, *Id) (*Empty, error)
	ListPaymentMethods(context.Context, *Id) (*payment.PaymentMethods, error)
	Pay(context.Context, *payment.PayRequest) (*payment.Bill, error)
	CreateInvoice(context.Context, *payment.Invoice) (*payment.Invoice, error)
	UpdateInvoice(context.Context, *payment.Invoice) (*payment.Invoice, error)
	FilterInvoices(context.Context, *payment.ListInvoiceRequest) (*payment.Invoices, error)
	DraftInvoice(context.Context, *payment.Subscription) (*payment.Invoice, error)
	DiffSubscriptions(context.Context, *payment.DiffSubRequest) (*payment.Invoice, error)
	ListComments(context.Context, *payment.ListCommentsRequest) (*payment.Comments, error)
	AddComment(context.Context, *payment.Comment) (*payment.Comment, error)
	ListPlans(context.Context, *Empty) (*payment.Plans, error)
	ExportInvoice(context.Context, *Id) (*payment.String, error)
	ConvertInvoiceToHtml(context.Context, *payment.Invoice) (*payment.String, error)
	GetExchangeRate(context.Context, *ExchangeRate) (*ExchangeRate, error)
	TransferMoney(context.Context, *payment.PayRequest) (*payment.Bill, error)
	ListLogs(context.Context, *payment.ListLogsRequest) (*payment.Logs, error)
	CreatePromotionCode(context.Context, *payment.PromotionCode) (*payment.PromotionCode, error)
	GetPromotionCode(context.Context, *payment.String) (*payment.PromotionCode, error)
	UsePromotionCode(context.Context, *payment.PromotionCodeRequest) (*Empty, error)
	ValidatePromotionCode(context.Context, *payment.PromotionCodeRequest) (*payment.PromotionCode, error)
	ListPromotionCode(context.Context, *payment.ListPromotionCodeRequest) (*payment.PromotionCodes, error)
	DeletePromotionCode(context.Context, *Id) (*Empty, error)
	SearchReferral(context.Context, *payment.SearchReferredRequest) (*payment.Referral, error)
	GetReferral(context.Context, *Id) (*payment.Referral, error)
	ListTopReferral(context.Context, *Empty) (*payment.ReferralResponse, error)
	UpdateReferral(context.Context, *payment.Referral) (*payment.Referral, error)
	ListAccountReferred(context.Context, *Id) (*payment.LogAccountReferreds, error)
	ListBillByAccountReferred(context.Context, *Id) (*payment.LogBillByAccountReferreds, error)
	ListPaidForAgentReferrer(context.Context, *Id) (*payment.LogPaidForAgentReferrers, error)
	PaidForAgentReferrer(context.Context, *payment.LogPaidForAgentReferrer) (*Empty, error)
}

// UnimplementedPaymentMgrServer can be embedded to have forward compatible implementations.
type UnimplementedPaymentMgrServer struct {
}

func (*UnimplementedPaymentMgrServer) SearchSub(context.Context, *account.SearchSubRequest) (*account.AccSubs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchSub not implemented")
}
func (*UnimplementedPaymentMgrServer) Purchase(context.Context, *payment.Subscription) (*payment.Invoice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Purchase not implemented")
}
func (*UnimplementedPaymentMgrServer) UpdateSubscription(context.Context, *payment.Subscription) (*payment.Subscription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubscription not implemented")
}
func (*UnimplementedPaymentMgrServer) GetSubscription(context.Context, *Id) (*payment.Subscription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscription not implemented")
}
func (*UnimplementedPaymentMgrServer) AddPaymentMethod(context.Context, *payment.PaymentMethod) (*payment.PaymentMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPaymentMethod not implemented")
}
func (*UnimplementedPaymentMgrServer) UpdatePaymentMethod(context.Context, *payment.PaymentMethod) (*payment.PaymentMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePaymentMethod not implemented")
}
func (*UnimplementedPaymentMgrServer) DeletePaymentMethod(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePaymentMethod not implemented")
}
func (*UnimplementedPaymentMgrServer) ListPaymentMethods(context.Context, *Id) (*payment.PaymentMethods, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPaymentMethods not implemented")
}
func (*UnimplementedPaymentMgrServer) Pay(context.Context, *payment.PayRequest) (*payment.Bill, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pay not implemented")
}
func (*UnimplementedPaymentMgrServer) CreateInvoice(context.Context, *payment.Invoice) (*payment.Invoice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvoice not implemented")
}
func (*UnimplementedPaymentMgrServer) UpdateInvoice(context.Context, *payment.Invoice) (*payment.Invoice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInvoice not implemented")
}
func (*UnimplementedPaymentMgrServer) FilterInvoices(context.Context, *payment.ListInvoiceRequest) (*payment.Invoices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterInvoices not implemented")
}
func (*UnimplementedPaymentMgrServer) DraftInvoice(context.Context, *payment.Subscription) (*payment.Invoice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DraftInvoice not implemented")
}
func (*UnimplementedPaymentMgrServer) DiffSubscriptions(context.Context, *payment.DiffSubRequest) (*payment.Invoice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiffSubscriptions not implemented")
}
func (*UnimplementedPaymentMgrServer) ListComments(context.Context, *payment.ListCommentsRequest) (*payment.Comments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComments not implemented")
}
func (*UnimplementedPaymentMgrServer) AddComment(context.Context, *payment.Comment) (*payment.Comment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddComment not implemented")
}
func (*UnimplementedPaymentMgrServer) ListPlans(context.Context, *Empty) (*payment.Plans, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlans not implemented")
}
func (*UnimplementedPaymentMgrServer) ExportInvoice(context.Context, *Id) (*payment.String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportInvoice not implemented")
}
func (*UnimplementedPaymentMgrServer) ConvertInvoiceToHtml(context.Context, *payment.Invoice) (*payment.String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertInvoiceToHtml not implemented")
}
func (*UnimplementedPaymentMgrServer) GetExchangeRate(context.Context, *ExchangeRate) (*ExchangeRate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExchangeRate not implemented")
}
func (*UnimplementedPaymentMgrServer) TransferMoney(context.Context, *payment.PayRequest) (*payment.Bill, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferMoney not implemented")
}
func (*UnimplementedPaymentMgrServer) ListLogs(context.Context, *payment.ListLogsRequest) (*payment.Logs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLogs not implemented")
}
func (*UnimplementedPaymentMgrServer) CreatePromotionCode(context.Context, *payment.PromotionCode) (*payment.PromotionCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePromotionCode not implemented")
}
func (*UnimplementedPaymentMgrServer) GetPromotionCode(context.Context, *payment.String) (*payment.PromotionCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPromotionCode not implemented")
}
func (*UnimplementedPaymentMgrServer) UsePromotionCode(context.Context, *payment.PromotionCodeRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsePromotionCode not implemented")
}
func (*UnimplementedPaymentMgrServer) ValidatePromotionCode(context.Context, *payment.PromotionCodeRequest) (*payment.PromotionCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatePromotionCode not implemented")
}
func (*UnimplementedPaymentMgrServer) ListPromotionCode(context.Context, *payment.ListPromotionCodeRequest) (*payment.PromotionCodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPromotionCode not implemented")
}
func (*UnimplementedPaymentMgrServer) DeletePromotionCode(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePromotionCode not implemented")
}
func (*UnimplementedPaymentMgrServer) SearchReferral(context.Context, *payment.SearchReferredRequest) (*payment.Referral, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchReferral not implemented")
}
func (*UnimplementedPaymentMgrServer) GetReferral(context.Context, *Id) (*payment.Referral, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReferral not implemented")
}
func (*UnimplementedPaymentMgrServer) ListTopReferral(context.Context, *Empty) (*payment.ReferralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTopReferral not implemented")
}
func (*UnimplementedPaymentMgrServer) UpdateReferral(context.Context, *payment.Referral) (*payment.Referral, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReferral not implemented")
}
func (*UnimplementedPaymentMgrServer) ListAccountReferred(context.Context, *Id) (*payment.LogAccountReferreds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccountReferred not implemented")
}
func (*UnimplementedPaymentMgrServer) ListBillByAccountReferred(context.Context, *Id) (*payment.LogBillByAccountReferreds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBillByAccountReferred not implemented")
}
func (*UnimplementedPaymentMgrServer) ListPaidForAgentReferrer(context.Context, *Id) (*payment.LogPaidForAgentReferrers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPaidForAgentReferrer not implemented")
}
func (*UnimplementedPaymentMgrServer) PaidForAgentReferrer(context.Context, *payment.LogPaidForAgentReferrer) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaidForAgentReferrer not implemented")
}

func RegisterPaymentMgrServer(s *grpc.Server, srv PaymentMgrServer) {
	s.RegisterService(&_PaymentMgr_serviceDesc, srv)
}

func _PaymentMgr_SearchSub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.SearchSubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).SearchSub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/SearchSub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).SearchSub(ctx, req.(*account.SearchSubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_Purchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.Subscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).Purchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/Purchase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).Purchase(ctx, req.(*payment.Subscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_UpdateSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.Subscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).UpdateSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/UpdateSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).UpdateSubscription(ctx, req.(*payment.Subscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_GetSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).GetSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/GetSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).GetSubscription(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_AddPaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.PaymentMethod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).AddPaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/AddPaymentMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).AddPaymentMethod(ctx, req.(*payment.PaymentMethod))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_UpdatePaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.PaymentMethod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).UpdatePaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/UpdatePaymentMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).UpdatePaymentMethod(ctx, req.(*payment.PaymentMethod))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_DeletePaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).DeletePaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/DeletePaymentMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).DeletePaymentMethod(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_ListPaymentMethods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).ListPaymentMethods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/ListPaymentMethods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).ListPaymentMethods(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_Pay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.PayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).Pay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/Pay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).Pay(ctx, req.(*payment.PayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_CreateInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.Invoice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).CreateInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/CreateInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).CreateInvoice(ctx, req.(*payment.Invoice))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_UpdateInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.Invoice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).UpdateInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/UpdateInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).UpdateInvoice(ctx, req.(*payment.Invoice))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_FilterInvoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.ListInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).FilterInvoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/FilterInvoices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).FilterInvoices(ctx, req.(*payment.ListInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_DraftInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.Subscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).DraftInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/DraftInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).DraftInvoice(ctx, req.(*payment.Subscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_DiffSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.DiffSubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).DiffSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/DiffSubscriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).DiffSubscriptions(ctx, req.(*payment.DiffSubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_ListComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.ListCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).ListComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/ListComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).ListComments(ctx, req.(*payment.ListCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_AddComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.Comment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).AddComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/AddComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).AddComment(ctx, req.(*payment.Comment))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_ListPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).ListPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/ListPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).ListPlans(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_ExportInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).ExportInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/ExportInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).ExportInvoice(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_ConvertInvoiceToHtml_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.Invoice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).ConvertInvoiceToHtml(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/ConvertInvoiceToHtml",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).ConvertInvoiceToHtml(ctx, req.(*payment.Invoice))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_GetExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeRate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).GetExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/GetExchangeRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).GetExchangeRate(ctx, req.(*ExchangeRate))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_TransferMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.PayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).TransferMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/TransferMoney",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).TransferMoney(ctx, req.(*payment.PayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_ListLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.ListLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).ListLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/ListLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).ListLogs(ctx, req.(*payment.ListLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_CreatePromotionCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.PromotionCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).CreatePromotionCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/CreatePromotionCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).CreatePromotionCode(ctx, req.(*payment.PromotionCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_GetPromotionCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).GetPromotionCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/GetPromotionCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).GetPromotionCode(ctx, req.(*payment.String))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_UsePromotionCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.PromotionCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).UsePromotionCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/UsePromotionCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).UsePromotionCode(ctx, req.(*payment.PromotionCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_ValidatePromotionCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.PromotionCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).ValidatePromotionCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/ValidatePromotionCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).ValidatePromotionCode(ctx, req.(*payment.PromotionCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_ListPromotionCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.ListPromotionCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).ListPromotionCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/ListPromotionCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).ListPromotionCode(ctx, req.(*payment.ListPromotionCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_DeletePromotionCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).DeletePromotionCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/DeletePromotionCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).DeletePromotionCode(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_SearchReferral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.SearchReferredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).SearchReferral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/SearchReferral",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).SearchReferral(ctx, req.(*payment.SearchReferredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_GetReferral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).GetReferral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/GetReferral",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).GetReferral(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_ListTopReferral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).ListTopReferral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/ListTopReferral",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).ListTopReferral(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_UpdateReferral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.Referral)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).UpdateReferral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/UpdateReferral",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).UpdateReferral(ctx, req.(*payment.Referral))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_ListAccountReferred_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).ListAccountReferred(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/ListAccountReferred",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).ListAccountReferred(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_ListBillByAccountReferred_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).ListBillByAccountReferred(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/ListBillByAccountReferred",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).ListBillByAccountReferred(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_ListPaidForAgentReferrer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).ListPaidForAgentReferrer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/ListPaidForAgentReferrer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).ListPaidForAgentReferrer(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMgr_PaidForAgentReferrer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payment.LogPaidForAgentReferrer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMgrServer).PaidForAgentReferrer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.PaymentMgr/PaidForAgentReferrer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMgrServer).PaidForAgentReferrer(ctx, req.(*payment.LogPaidForAgentReferrer))
	}
	return interceptor(ctx, in, info, handler)
}

var _PaymentMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.PaymentMgr",
	HandlerType: (*PaymentMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchSub",
			Handler:    _PaymentMgr_SearchSub_Handler,
		},
		{
			MethodName: "Purchase",
			Handler:    _PaymentMgr_Purchase_Handler,
		},
		{
			MethodName: "UpdateSubscription",
			Handler:    _PaymentMgr_UpdateSubscription_Handler,
		},
		{
			MethodName: "GetSubscription",
			Handler:    _PaymentMgr_GetSubscription_Handler,
		},
		{
			MethodName: "AddPaymentMethod",
			Handler:    _PaymentMgr_AddPaymentMethod_Handler,
		},
		{
			MethodName: "UpdatePaymentMethod",
			Handler:    _PaymentMgr_UpdatePaymentMethod_Handler,
		},
		{
			MethodName: "DeletePaymentMethod",
			Handler:    _PaymentMgr_DeletePaymentMethod_Handler,
		},
		{
			MethodName: "ListPaymentMethods",
			Handler:    _PaymentMgr_ListPaymentMethods_Handler,
		},
		{
			MethodName: "Pay",
			Handler:    _PaymentMgr_Pay_Handler,
		},
		{
			MethodName: "CreateInvoice",
			Handler:    _PaymentMgr_CreateInvoice_Handler,
		},
		{
			MethodName: "UpdateInvoice",
			Handler:    _PaymentMgr_UpdateInvoice_Handler,
		},
		{
			MethodName: "FilterInvoices",
			Handler:    _PaymentMgr_FilterInvoices_Handler,
		},
		{
			MethodName: "DraftInvoice",
			Handler:    _PaymentMgr_DraftInvoice_Handler,
		},
		{
			MethodName: "DiffSubscriptions",
			Handler:    _PaymentMgr_DiffSubscriptions_Handler,
		},
		{
			MethodName: "ListComments",
			Handler:    _PaymentMgr_ListComments_Handler,
		},
		{
			MethodName: "AddComment",
			Handler:    _PaymentMgr_AddComment_Handler,
		},
		{
			MethodName: "ListPlans",
			Handler:    _PaymentMgr_ListPlans_Handler,
		},
		{
			MethodName: "ExportInvoice",
			Handler:    _PaymentMgr_ExportInvoice_Handler,
		},
		{
			MethodName: "ConvertInvoiceToHtml",
			Handler:    _PaymentMgr_ConvertInvoiceToHtml_Handler,
		},
		{
			MethodName: "GetExchangeRate",
			Handler:    _PaymentMgr_GetExchangeRate_Handler,
		},
		{
			MethodName: "TransferMoney",
			Handler:    _PaymentMgr_TransferMoney_Handler,
		},
		{
			MethodName: "ListLogs",
			Handler:    _PaymentMgr_ListLogs_Handler,
		},
		{
			MethodName: "CreatePromotionCode",
			Handler:    _PaymentMgr_CreatePromotionCode_Handler,
		},
		{
			MethodName: "GetPromotionCode",
			Handler:    _PaymentMgr_GetPromotionCode_Handler,
		},
		{
			MethodName: "UsePromotionCode",
			Handler:    _PaymentMgr_UsePromotionCode_Handler,
		},
		{
			MethodName: "ValidatePromotionCode",
			Handler:    _PaymentMgr_ValidatePromotionCode_Handler,
		},
		{
			MethodName: "ListPromotionCode",
			Handler:    _PaymentMgr_ListPromotionCode_Handler,
		},
		{
			MethodName: "DeletePromotionCode",
			Handler:    _PaymentMgr_DeletePromotionCode_Handler,
		},
		{
			MethodName: "SearchReferral",
			Handler:    _PaymentMgr_SearchReferral_Handler,
		},
		{
			MethodName: "GetReferral",
			Handler:    _PaymentMgr_GetReferral_Handler,
		},
		{
			MethodName: "ListTopReferral",
			Handler:    _PaymentMgr_ListTopReferral_Handler,
		},
		{
			MethodName: "UpdateReferral",
			Handler:    _PaymentMgr_UpdateReferral_Handler,
		},
		{
			MethodName: "ListAccountReferred",
			Handler:    _PaymentMgr_ListAccountReferred_Handler,
		},
		{
			MethodName: "ListBillByAccountReferred",
			Handler:    _PaymentMgr_ListBillByAccountReferred_Handler,
		},
		{
			MethodName: "ListPaidForAgentReferrer",
			Handler:    _PaymentMgr_ListPaidForAgentReferrer_Handler,
		},
		{
			MethodName: "PaidForAgentReferrer",
			Handler:    _PaymentMgr_PaidForAgentReferrer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// PubsubClient is the client API for Pubsub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PubsubClient interface {
	Publish(ctx context.Context, in *PublishMessage, opts ...grpc.CallOption) (*Empty, error)
}

type pubsubClient struct {
	cc grpc.ClientConnInterface
}

func NewPubsubClient(cc grpc.ClientConnInterface) PubsubClient {
	return &pubsubClient{cc}
}

func (c *pubsubClient) Publish(ctx context.Context, in *PublishMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Pubsub/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PubsubServer is the server API for Pubsub service.
type PubsubServer interface {
	Publish(context.Context, *PublishMessage) (*Empty, error)
}

// UnimplementedPubsubServer can be embedded to have forward compatible implementations.
type UnimplementedPubsubServer struct {
}

func (*UnimplementedPubsubServer) Publish(context.Context, *PublishMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}

func RegisterPubsubServer(s *grpc.Server, srv PubsubServer) {
	s.RegisterService(&_Pubsub_serviceDesc, srv)
}

func _Pubsub_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubsubServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Pubsub/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubsubServer).Publish(ctx, req.(*PublishMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pubsub_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.Pubsub",
	HandlerType: (*PubsubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _Pubsub_Publish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// RealtimeClient is the client API for Realtime service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RealtimeClient interface {
	ShardSend(ctx context.Context, in *PublishMessage, opts ...grpc.CallOption) (*Empty, error)
}

type realtimeClient struct {
	cc grpc.ClientConnInterface
}

func NewRealtimeClient(cc grpc.ClientConnInterface) RealtimeClient {
	return &realtimeClient{cc}
}

func (c *realtimeClient) ShardSend(ctx context.Context, in *PublishMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Realtime/ShardSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RealtimeServer is the server API for Realtime service.
type RealtimeServer interface {
	ShardSend(context.Context, *PublishMessage) (*Empty, error)
}

// UnimplementedRealtimeServer can be embedded to have forward compatible implementations.
type UnimplementedRealtimeServer struct {
}

func (*UnimplementedRealtimeServer) ShardSend(context.Context, *PublishMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShardSend not implemented")
}

func RegisterRealtimeServer(s *grpc.Server, srv RealtimeServer) {
	s.RegisterService(&_Realtime_serviceDesc, srv)
}

func _Realtime_ShardSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealtimeServer).ShardSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Realtime/ShardSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealtimeServer).ShardSend(ctx, req.(*PublishMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Realtime_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.Realtime",
	HandlerType: (*RealtimeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShardSend",
			Handler:    _Realtime_ShardSend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// FabikonServiceClient is the client API for FabikonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FabikonServiceClient interface {
	ReadFbFanpageSetting(ctx context.Context, in *Id, opts ...grpc.CallOption) (*FbFanpageSetting, error)
	UpdateFbFanpageSetting(ctx context.Context, in *FbFanpageSetting, opts ...grpc.CallOption) (*FbFanpageSetting, error)
	ListFbFanpageSettings(ctx context.Context, in *Id, opts ...grpc.CallOption) (*FbFanpageSettings, error)
	ListFbPosts(ctx context.Context, in *Id, opts ...grpc.CallOption) (*FacebookPosts, error)
}

type fabikonServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFabikonServiceClient(cc grpc.ClientConnInterface) FabikonServiceClient {
	return &fabikonServiceClient{cc}
}

func (c *fabikonServiceClient) ReadFbFanpageSetting(ctx context.Context, in *Id, opts ...grpc.CallOption) (*FbFanpageSetting, error) {
	out := new(FbFanpageSetting)
	err := c.cc.Invoke(ctx, "/header.FabikonService/ReadFbFanpageSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fabikonServiceClient) UpdateFbFanpageSetting(ctx context.Context, in *FbFanpageSetting, opts ...grpc.CallOption) (*FbFanpageSetting, error) {
	out := new(FbFanpageSetting)
	err := c.cc.Invoke(ctx, "/header.FabikonService/UpdateFbFanpageSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fabikonServiceClient) ListFbFanpageSettings(ctx context.Context, in *Id, opts ...grpc.CallOption) (*FbFanpageSettings, error) {
	out := new(FbFanpageSettings)
	err := c.cc.Invoke(ctx, "/header.FabikonService/ListFbFanpageSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fabikonServiceClient) ListFbPosts(ctx context.Context, in *Id, opts ...grpc.CallOption) (*FacebookPosts, error) {
	out := new(FacebookPosts)
	err := c.cc.Invoke(ctx, "/header.FabikonService/ListFbPosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FabikonServiceServer is the server API for FabikonService service.
type FabikonServiceServer interface {
	ReadFbFanpageSetting(context.Context, *Id) (*FbFanpageSetting, error)
	UpdateFbFanpageSetting(context.Context, *FbFanpageSetting) (*FbFanpageSetting, error)
	ListFbFanpageSettings(context.Context, *Id) (*FbFanpageSettings, error)
	ListFbPosts(context.Context, *Id) (*FacebookPosts, error)
}

// UnimplementedFabikonServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFabikonServiceServer struct {
}

func (*UnimplementedFabikonServiceServer) ReadFbFanpageSetting(context.Context, *Id) (*FbFanpageSetting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadFbFanpageSetting not implemented")
}
func (*UnimplementedFabikonServiceServer) UpdateFbFanpageSetting(context.Context, *FbFanpageSetting) (*FbFanpageSetting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFbFanpageSetting not implemented")
}
func (*UnimplementedFabikonServiceServer) ListFbFanpageSettings(context.Context, *Id) (*FbFanpageSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFbFanpageSettings not implemented")
}
func (*UnimplementedFabikonServiceServer) ListFbPosts(context.Context, *Id) (*FacebookPosts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFbPosts not implemented")
}

func RegisterFabikonServiceServer(s *grpc.Server, srv FabikonServiceServer) {
	s.RegisterService(&_FabikonService_serviceDesc, srv)
}

func _FabikonService_ReadFbFanpageSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FabikonServiceServer).ReadFbFanpageSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.FabikonService/ReadFbFanpageSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FabikonServiceServer).ReadFbFanpageSetting(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _FabikonService_UpdateFbFanpageSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FbFanpageSetting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FabikonServiceServer).UpdateFbFanpageSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.FabikonService/UpdateFbFanpageSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FabikonServiceServer).UpdateFbFanpageSetting(ctx, req.(*FbFanpageSetting))
	}
	return interceptor(ctx, in, info, handler)
}

func _FabikonService_ListFbFanpageSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FabikonServiceServer).ListFbFanpageSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.FabikonService/ListFbFanpageSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FabikonServiceServer).ListFbFanpageSettings(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _FabikonService_ListFbPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FabikonServiceServer).ListFbPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.FabikonService/ListFbPosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FabikonServiceServer).ListFbPosts(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _FabikonService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.FabikonService",
	HandlerType: (*FabikonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadFbFanpageSetting",
			Handler:    _FabikonService_ReadFbFanpageSetting_Handler,
		},
		{
			MethodName: "UpdateFbFanpageSetting",
			Handler:    _FabikonService_UpdateFbFanpageSetting_Handler,
		},
		{
			MethodName: "ListFbFanpageSettings",
			Handler:    _FabikonService_ListFbFanpageSettings_Handler,
		},
		{
			MethodName: "ListFbPosts",
			Handler:    _FabikonService_ListFbPosts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// WidgetServiceClient is the client API for WidgetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WidgetServiceClient interface {
	Read(ctx context.Context, in *Id, opts ...grpc.CallOption) (*WidgetSetting, error)
	Update(ctx context.Context, in *WidgetSetting, opts ...grpc.CallOption) (*WidgetSetting, error)
	ReadUserSetting(ctx context.Context, in *Id, opts ...grpc.CallOption) (*WidgetUserSetting, error)
	ReadAccountSetting(ctx context.Context, in *Id, opts ...grpc.CallOption) (*AccountWeb, error)
	SubmitImpression(ctx context.Context, in *Impression, opts ...grpc.CallOption) (*Impression, error)
	SubmitConversion(ctx context.Context, in *Conversion, opts ...grpc.CallOption) (*Conversion, error)
	SubmitUserCampaignStatus(ctx context.Context, in *UserCampaignStatus, opts ...grpc.CallOption) (*UserCampaignStatus, error)
	ReportCampaign(ctx context.Context, in *ReportCampaignRequest, opts ...grpc.CallOption) (*ReportCampaignResponse, error)
	ListConversions(ctx context.Context, in *ConversionRequest, opts ...grpc.CallOption) (*Conversions, error)
	ExportConversions(ctx context.Context, in *ConversionRequest, opts ...grpc.CallOption) (*ConversionsExported, error)
	UploadImage(ctx context.Context, in *UploadedImage, opts ...grpc.CallOption) (*UploadedImage, error)
	ListUploadedImage(ctx context.Context, in *Id, opts ...grpc.CallOption) (*UploadedImages, error)
	DeleteUploadedImage(ctx context.Context, in *UploadedImage, opts ...grpc.CallOption) (*Empty, error)
	ListWebPlugins(ctx context.Context, in *Id, opts ...grpc.CallOption) (*WebPlugins, error)
	UpdateWebPlugin(ctx context.Context, in *WebPlugin, opts ...grpc.CallOption) (*WebPlugin, error)
	UpdateWebPluginEnabled(ctx context.Context, in *WebPlugin, opts ...grpc.CallOption) (*WebPlugin, error)
	CreateWebPlugin(ctx context.Context, in *WebPlugin, opts ...grpc.CallOption) (*WebPlugin, error)
	DeleteWebPlugin(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	UpdateWebPluginTemplate(ctx context.Context, in *WebPlugin, opts ...grpc.CallOption) (*WebPlugin, error)
	ListWebPluginTemplates(ctx context.Context, in *Id, opts ...grpc.CallOption) (*WebPlugins, error)
	DeleteWebPluginTemplate(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	ReportWebPlugin(ctx context.Context, in *ReportWebPluginRequest, opts ...grpc.CallOption) (*ReportWebPluginResponse, error)
	SearchImages(ctx context.Context, in *Id, opts ...grpc.CallOption) (*UploadedImages, error)
	ListNotifProfiles(ctx context.Context, in *Id, opts ...grpc.CallOption) (*NotifProfiles, error)
	ListNotifBackgrounds(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Urls, error)
}

type widgetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWidgetServiceClient(cc grpc.ClientConnInterface) WidgetServiceClient {
	return &widgetServiceClient{cc}
}

func (c *widgetServiceClient) Read(ctx context.Context, in *Id, opts ...grpc.CallOption) (*WidgetSetting, error) {
	out := new(WidgetSetting)
	err := c.cc.Invoke(ctx, "/header.WidgetService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) Update(ctx context.Context, in *WidgetSetting, opts ...grpc.CallOption) (*WidgetSetting, error) {
	out := new(WidgetSetting)
	err := c.cc.Invoke(ctx, "/header.WidgetService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) ReadUserSetting(ctx context.Context, in *Id, opts ...grpc.CallOption) (*WidgetUserSetting, error) {
	out := new(WidgetUserSetting)
	err := c.cc.Invoke(ctx, "/header.WidgetService/ReadUserSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) ReadAccountSetting(ctx context.Context, in *Id, opts ...grpc.CallOption) (*AccountWeb, error) {
	out := new(AccountWeb)
	err := c.cc.Invoke(ctx, "/header.WidgetService/ReadAccountSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) SubmitImpression(ctx context.Context, in *Impression, opts ...grpc.CallOption) (*Impression, error) {
	out := new(Impression)
	err := c.cc.Invoke(ctx, "/header.WidgetService/SubmitImpression", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) SubmitConversion(ctx context.Context, in *Conversion, opts ...grpc.CallOption) (*Conversion, error) {
	out := new(Conversion)
	err := c.cc.Invoke(ctx, "/header.WidgetService/SubmitConversion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) SubmitUserCampaignStatus(ctx context.Context, in *UserCampaignStatus, opts ...grpc.CallOption) (*UserCampaignStatus, error) {
	out := new(UserCampaignStatus)
	err := c.cc.Invoke(ctx, "/header.WidgetService/SubmitUserCampaignStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) ReportCampaign(ctx context.Context, in *ReportCampaignRequest, opts ...grpc.CallOption) (*ReportCampaignResponse, error) {
	out := new(ReportCampaignResponse)
	err := c.cc.Invoke(ctx, "/header.WidgetService/ReportCampaign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) ListConversions(ctx context.Context, in *ConversionRequest, opts ...grpc.CallOption) (*Conversions, error) {
	out := new(Conversions)
	err := c.cc.Invoke(ctx, "/header.WidgetService/ListConversions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) ExportConversions(ctx context.Context, in *ConversionRequest, opts ...grpc.CallOption) (*ConversionsExported, error) {
	out := new(ConversionsExported)
	err := c.cc.Invoke(ctx, "/header.WidgetService/ExportConversions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) UploadImage(ctx context.Context, in *UploadedImage, opts ...grpc.CallOption) (*UploadedImage, error) {
	out := new(UploadedImage)
	err := c.cc.Invoke(ctx, "/header.WidgetService/UploadImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) ListUploadedImage(ctx context.Context, in *Id, opts ...grpc.CallOption) (*UploadedImages, error) {
	out := new(UploadedImages)
	err := c.cc.Invoke(ctx, "/header.WidgetService/ListUploadedImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) DeleteUploadedImage(ctx context.Context, in *UploadedImage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.WidgetService/DeleteUploadedImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) ListWebPlugins(ctx context.Context, in *Id, opts ...grpc.CallOption) (*WebPlugins, error) {
	out := new(WebPlugins)
	err := c.cc.Invoke(ctx, "/header.WidgetService/ListWebPlugins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) UpdateWebPlugin(ctx context.Context, in *WebPlugin, opts ...grpc.CallOption) (*WebPlugin, error) {
	out := new(WebPlugin)
	err := c.cc.Invoke(ctx, "/header.WidgetService/UpdateWebPlugin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) UpdateWebPluginEnabled(ctx context.Context, in *WebPlugin, opts ...grpc.CallOption) (*WebPlugin, error) {
	out := new(WebPlugin)
	err := c.cc.Invoke(ctx, "/header.WidgetService/UpdateWebPluginEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) CreateWebPlugin(ctx context.Context, in *WebPlugin, opts ...grpc.CallOption) (*WebPlugin, error) {
	out := new(WebPlugin)
	err := c.cc.Invoke(ctx, "/header.WidgetService/CreateWebPlugin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) DeleteWebPlugin(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.WidgetService/DeleteWebPlugin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) UpdateWebPluginTemplate(ctx context.Context, in *WebPlugin, opts ...grpc.CallOption) (*WebPlugin, error) {
	out := new(WebPlugin)
	err := c.cc.Invoke(ctx, "/header.WidgetService/UpdateWebPluginTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) ListWebPluginTemplates(ctx context.Context, in *Id, opts ...grpc.CallOption) (*WebPlugins, error) {
	out := new(WebPlugins)
	err := c.cc.Invoke(ctx, "/header.WidgetService/ListWebPluginTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) DeleteWebPluginTemplate(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.WidgetService/DeleteWebPluginTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) ReportWebPlugin(ctx context.Context, in *ReportWebPluginRequest, opts ...grpc.CallOption) (*ReportWebPluginResponse, error) {
	out := new(ReportWebPluginResponse)
	err := c.cc.Invoke(ctx, "/header.WidgetService/ReportWebPlugin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) SearchImages(ctx context.Context, in *Id, opts ...grpc.CallOption) (*UploadedImages, error) {
	out := new(UploadedImages)
	err := c.cc.Invoke(ctx, "/header.WidgetService/SearchImages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) ListNotifProfiles(ctx context.Context, in *Id, opts ...grpc.CallOption) (*NotifProfiles, error) {
	out := new(NotifProfiles)
	err := c.cc.Invoke(ctx, "/header.WidgetService/ListNotifProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *widgetServiceClient) ListNotifBackgrounds(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Urls, error) {
	out := new(Urls)
	err := c.cc.Invoke(ctx, "/header.WidgetService/ListNotifBackgrounds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WidgetServiceServer is the server API for WidgetService service.
type WidgetServiceServer interface {
	Read(context.Context, *Id) (*WidgetSetting, error)
	Update(context.Context, *WidgetSetting) (*WidgetSetting, error)
	ReadUserSetting(context.Context, *Id) (*WidgetUserSetting, error)
	ReadAccountSetting(context.Context, *Id) (*AccountWeb, error)
	SubmitImpression(context.Context, *Impression) (*Impression, error)
	SubmitConversion(context.Context, *Conversion) (*Conversion, error)
	SubmitUserCampaignStatus(context.Context, *UserCampaignStatus) (*UserCampaignStatus, error)
	ReportCampaign(context.Context, *ReportCampaignRequest) (*ReportCampaignResponse, error)
	ListConversions(context.Context, *ConversionRequest) (*Conversions, error)
	ExportConversions(context.Context, *ConversionRequest) (*ConversionsExported, error)
	UploadImage(context.Context, *UploadedImage) (*UploadedImage, error)
	ListUploadedImage(context.Context, *Id) (*UploadedImages, error)
	DeleteUploadedImage(context.Context, *UploadedImage) (*Empty, error)
	ListWebPlugins(context.Context, *Id) (*WebPlugins, error)
	UpdateWebPlugin(context.Context, *WebPlugin) (*WebPlugin, error)
	UpdateWebPluginEnabled(context.Context, *WebPlugin) (*WebPlugin, error)
	CreateWebPlugin(context.Context, *WebPlugin) (*WebPlugin, error)
	DeleteWebPlugin(context.Context, *Id) (*Empty, error)
	UpdateWebPluginTemplate(context.Context, *WebPlugin) (*WebPlugin, error)
	ListWebPluginTemplates(context.Context, *Id) (*WebPlugins, error)
	DeleteWebPluginTemplate(context.Context, *Id) (*Empty, error)
	ReportWebPlugin(context.Context, *ReportWebPluginRequest) (*ReportWebPluginResponse, error)
	SearchImages(context.Context, *Id) (*UploadedImages, error)
	ListNotifProfiles(context.Context, *Id) (*NotifProfiles, error)
	ListNotifBackgrounds(context.Context, *Id) (*Urls, error)
}

// UnimplementedWidgetServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWidgetServiceServer struct {
}

func (*UnimplementedWidgetServiceServer) Read(context.Context, *Id) (*WidgetSetting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (*UnimplementedWidgetServiceServer) Update(context.Context, *WidgetSetting) (*WidgetSetting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedWidgetServiceServer) ReadUserSetting(context.Context, *Id) (*WidgetUserSetting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadUserSetting not implemented")
}
func (*UnimplementedWidgetServiceServer) ReadAccountSetting(context.Context, *Id) (*AccountWeb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAccountSetting not implemented")
}
func (*UnimplementedWidgetServiceServer) SubmitImpression(context.Context, *Impression) (*Impression, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitImpression not implemented")
}
func (*UnimplementedWidgetServiceServer) SubmitConversion(context.Context, *Conversion) (*Conversion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitConversion not implemented")
}
func (*UnimplementedWidgetServiceServer) SubmitUserCampaignStatus(context.Context, *UserCampaignStatus) (*UserCampaignStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitUserCampaignStatus not implemented")
}
func (*UnimplementedWidgetServiceServer) ReportCampaign(context.Context, *ReportCampaignRequest) (*ReportCampaignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportCampaign not implemented")
}
func (*UnimplementedWidgetServiceServer) ListConversions(context.Context, *ConversionRequest) (*Conversions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConversions not implemented")
}
func (*UnimplementedWidgetServiceServer) ExportConversions(context.Context, *ConversionRequest) (*ConversionsExported, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportConversions not implemented")
}
func (*UnimplementedWidgetServiceServer) UploadImage(context.Context, *UploadedImage) (*UploadedImage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}
func (*UnimplementedWidgetServiceServer) ListUploadedImage(context.Context, *Id) (*UploadedImages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUploadedImage not implemented")
}
func (*UnimplementedWidgetServiceServer) DeleteUploadedImage(context.Context, *UploadedImage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUploadedImage not implemented")
}
func (*UnimplementedWidgetServiceServer) ListWebPlugins(context.Context, *Id) (*WebPlugins, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWebPlugins not implemented")
}
func (*UnimplementedWidgetServiceServer) UpdateWebPlugin(context.Context, *WebPlugin) (*WebPlugin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWebPlugin not implemented")
}
func (*UnimplementedWidgetServiceServer) UpdateWebPluginEnabled(context.Context, *WebPlugin) (*WebPlugin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWebPluginEnabled not implemented")
}
func (*UnimplementedWidgetServiceServer) CreateWebPlugin(context.Context, *WebPlugin) (*WebPlugin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWebPlugin not implemented")
}
func (*UnimplementedWidgetServiceServer) DeleteWebPlugin(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWebPlugin not implemented")
}
func (*UnimplementedWidgetServiceServer) UpdateWebPluginTemplate(context.Context, *WebPlugin) (*WebPlugin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWebPluginTemplate not implemented")
}
func (*UnimplementedWidgetServiceServer) ListWebPluginTemplates(context.Context, *Id) (*WebPlugins, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWebPluginTemplates not implemented")
}
func (*UnimplementedWidgetServiceServer) DeleteWebPluginTemplate(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWebPluginTemplate not implemented")
}
func (*UnimplementedWidgetServiceServer) ReportWebPlugin(context.Context, *ReportWebPluginRequest) (*ReportWebPluginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportWebPlugin not implemented")
}
func (*UnimplementedWidgetServiceServer) SearchImages(context.Context, *Id) (*UploadedImages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchImages not implemented")
}
func (*UnimplementedWidgetServiceServer) ListNotifProfiles(context.Context, *Id) (*NotifProfiles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNotifProfiles not implemented")
}
func (*UnimplementedWidgetServiceServer) ListNotifBackgrounds(context.Context, *Id) (*Urls, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNotifBackgrounds not implemented")
}

func RegisterWidgetServiceServer(s *grpc.Server, srv WidgetServiceServer) {
	s.RegisterService(&_WidgetService_serviceDesc, srv)
}

func _WidgetService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).Read(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WidgetSetting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).Update(ctx, req.(*WidgetSetting))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_ReadUserSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).ReadUserSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/ReadUserSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).ReadUserSetting(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_ReadAccountSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).ReadAccountSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/ReadAccountSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).ReadAccountSetting(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_SubmitImpression_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Impression)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).SubmitImpression(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/SubmitImpression",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).SubmitImpression(ctx, req.(*Impression))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_SubmitConversion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Conversion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).SubmitConversion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/SubmitConversion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).SubmitConversion(ctx, req.(*Conversion))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_SubmitUserCampaignStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCampaignStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).SubmitUserCampaignStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/SubmitUserCampaignStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).SubmitUserCampaignStatus(ctx, req.(*UserCampaignStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_ReportCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportCampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).ReportCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/ReportCampaign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).ReportCampaign(ctx, req.(*ReportCampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_ListConversions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).ListConversions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/ListConversions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).ListConversions(ctx, req.(*ConversionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_ExportConversions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).ExportConversions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/ExportConversions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).ExportConversions(ctx, req.(*ConversionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_UploadImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadedImage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).UploadImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/UploadImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).UploadImage(ctx, req.(*UploadedImage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_ListUploadedImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).ListUploadedImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/ListUploadedImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).ListUploadedImage(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_DeleteUploadedImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadedImage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).DeleteUploadedImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/DeleteUploadedImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).DeleteUploadedImage(ctx, req.(*UploadedImage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_ListWebPlugins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).ListWebPlugins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/ListWebPlugins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).ListWebPlugins(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_UpdateWebPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebPlugin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).UpdateWebPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/UpdateWebPlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).UpdateWebPlugin(ctx, req.(*WebPlugin))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_UpdateWebPluginEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebPlugin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).UpdateWebPluginEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/UpdateWebPluginEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).UpdateWebPluginEnabled(ctx, req.(*WebPlugin))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_CreateWebPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebPlugin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).CreateWebPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/CreateWebPlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).CreateWebPlugin(ctx, req.(*WebPlugin))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_DeleteWebPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).DeleteWebPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/DeleteWebPlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).DeleteWebPlugin(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_UpdateWebPluginTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebPlugin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).UpdateWebPluginTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/UpdateWebPluginTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).UpdateWebPluginTemplate(ctx, req.(*WebPlugin))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_ListWebPluginTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).ListWebPluginTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/ListWebPluginTemplates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).ListWebPluginTemplates(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_DeleteWebPluginTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).DeleteWebPluginTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/DeleteWebPluginTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).DeleteWebPluginTemplate(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_ReportWebPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportWebPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).ReportWebPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/ReportWebPlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).ReportWebPlugin(ctx, req.(*ReportWebPluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_SearchImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).SearchImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/SearchImages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).SearchImages(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_ListNotifProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).ListNotifProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/ListNotifProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).ListNotifProfiles(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _WidgetService_ListNotifBackgrounds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WidgetServiceServer).ListNotifBackgrounds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.WidgetService/ListNotifBackgrounds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WidgetServiceServer).ListNotifBackgrounds(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _WidgetService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.WidgetService",
	HandlerType: (*WidgetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Read",
			Handler:    _WidgetService_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _WidgetService_Update_Handler,
		},
		{
			MethodName: "ReadUserSetting",
			Handler:    _WidgetService_ReadUserSetting_Handler,
		},
		{
			MethodName: "ReadAccountSetting",
			Handler:    _WidgetService_ReadAccountSetting_Handler,
		},
		{
			MethodName: "SubmitImpression",
			Handler:    _WidgetService_SubmitImpression_Handler,
		},
		{
			MethodName: "SubmitConversion",
			Handler:    _WidgetService_SubmitConversion_Handler,
		},
		{
			MethodName: "SubmitUserCampaignStatus",
			Handler:    _WidgetService_SubmitUserCampaignStatus_Handler,
		},
		{
			MethodName: "ReportCampaign",
			Handler:    _WidgetService_ReportCampaign_Handler,
		},
		{
			MethodName: "ListConversions",
			Handler:    _WidgetService_ListConversions_Handler,
		},
		{
			MethodName: "ExportConversions",
			Handler:    _WidgetService_ExportConversions_Handler,
		},
		{
			MethodName: "UploadImage",
			Handler:    _WidgetService_UploadImage_Handler,
		},
		{
			MethodName: "ListUploadedImage",
			Handler:    _WidgetService_ListUploadedImage_Handler,
		},
		{
			MethodName: "DeleteUploadedImage",
			Handler:    _WidgetService_DeleteUploadedImage_Handler,
		},
		{
			MethodName: "ListWebPlugins",
			Handler:    _WidgetService_ListWebPlugins_Handler,
		},
		{
			MethodName: "UpdateWebPlugin",
			Handler:    _WidgetService_UpdateWebPlugin_Handler,
		},
		{
			MethodName: "UpdateWebPluginEnabled",
			Handler:    _WidgetService_UpdateWebPluginEnabled_Handler,
		},
		{
			MethodName: "CreateWebPlugin",
			Handler:    _WidgetService_CreateWebPlugin_Handler,
		},
		{
			MethodName: "DeleteWebPlugin",
			Handler:    _WidgetService_DeleteWebPlugin_Handler,
		},
		{
			MethodName: "UpdateWebPluginTemplate",
			Handler:    _WidgetService_UpdateWebPluginTemplate_Handler,
		},
		{
			MethodName: "ListWebPluginTemplates",
			Handler:    _WidgetService_ListWebPluginTemplates_Handler,
		},
		{
			MethodName: "DeleteWebPluginTemplate",
			Handler:    _WidgetService_DeleteWebPluginTemplate_Handler,
		},
		{
			MethodName: "ReportWebPlugin",
			Handler:    _WidgetService_ReportWebPlugin_Handler,
		},
		{
			MethodName: "SearchImages",
			Handler:    _WidgetService_SearchImages_Handler,
		},
		{
			MethodName: "ListNotifProfiles",
			Handler:    _WidgetService_ListNotifProfiles_Handler,
		},
		{
			MethodName: "ListNotifBackgrounds",
			Handler:    _WidgetService_ListNotifBackgrounds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// BizbotClient is the client API for Bizbot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BizbotClient interface {
	ListBots(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Bots, error)
	GetBot(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Bot, error)
	UpdateBotRunState(ctx context.Context, in *Bot, opts ...grpc.CallOption) (*Bot, error)
	CreateBot(ctx context.Context, in *Bot, opts ...grpc.CallOption) (*Bot, error)
	UpdateBot(ctx context.Context, in *Bot, opts ...grpc.CallOption) (*Bot, error)
	DeleteBot(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	OnEvent(ctx context.Context, in *BotRunRequest, opts ...grpc.CallOption) (*Empty, error)
	StartBot(ctx context.Context, in *BotRunRequest, opts ...grpc.CallOption) (*Empty, error)
	StopBot(ctx context.Context, in *BotRunRequest, opts ...grpc.CallOption) (*Empty, error)
	TryAction(ctx context.Context, in *BotRunRequest, opts ...grpc.CallOption) (*Empty, error)
	ReportBot(ctx context.Context, in *ReportBotRequest, opts ...grpc.CallOption) (*ReportBotResponse, error)
	ListObjects(ctx context.Context, in *ListObjectsRequest, opts ...grpc.CallOption) (*ListObjectsResponse, error)
	CreateBotRevision(ctx context.Context, in *Bot, opts ...grpc.CallOption) (*Bot, error)
	ListBotRevisions(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Bots, error)
}

type bizbotClient struct {
	cc grpc.ClientConnInterface
}

func NewBizbotClient(cc grpc.ClientConnInterface) BizbotClient {
	return &bizbotClient{cc}
}

func (c *bizbotClient) ListBots(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Bots, error) {
	out := new(Bots)
	err := c.cc.Invoke(ctx, "/header.Bizbot/ListBots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizbotClient) GetBot(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Bot, error) {
	out := new(Bot)
	err := c.cc.Invoke(ctx, "/header.Bizbot/GetBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizbotClient) UpdateBotRunState(ctx context.Context, in *Bot, opts ...grpc.CallOption) (*Bot, error) {
	out := new(Bot)
	err := c.cc.Invoke(ctx, "/header.Bizbot/UpdateBotRunState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizbotClient) CreateBot(ctx context.Context, in *Bot, opts ...grpc.CallOption) (*Bot, error) {
	out := new(Bot)
	err := c.cc.Invoke(ctx, "/header.Bizbot/CreateBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizbotClient) UpdateBot(ctx context.Context, in *Bot, opts ...grpc.CallOption) (*Bot, error) {
	out := new(Bot)
	err := c.cc.Invoke(ctx, "/header.Bizbot/UpdateBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizbotClient) DeleteBot(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Bizbot/DeleteBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizbotClient) OnEvent(ctx context.Context, in *BotRunRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Bizbot/OnEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizbotClient) StartBot(ctx context.Context, in *BotRunRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Bizbot/StartBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizbotClient) StopBot(ctx context.Context, in *BotRunRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Bizbot/StopBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizbotClient) TryAction(ctx context.Context, in *BotRunRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Bizbot/TryAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizbotClient) ReportBot(ctx context.Context, in *ReportBotRequest, opts ...grpc.CallOption) (*ReportBotResponse, error) {
	out := new(ReportBotResponse)
	err := c.cc.Invoke(ctx, "/header.Bizbot/ReportBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizbotClient) ListObjects(ctx context.Context, in *ListObjectsRequest, opts ...grpc.CallOption) (*ListObjectsResponse, error) {
	out := new(ListObjectsResponse)
	err := c.cc.Invoke(ctx, "/header.Bizbot/ListObjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizbotClient) CreateBotRevision(ctx context.Context, in *Bot, opts ...grpc.CallOption) (*Bot, error) {
	out := new(Bot)
	err := c.cc.Invoke(ctx, "/header.Bizbot/CreateBotRevision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizbotClient) ListBotRevisions(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Bots, error) {
	out := new(Bots)
	err := c.cc.Invoke(ctx, "/header.Bizbot/ListBotRevisions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BizbotServer is the server API for Bizbot service.
type BizbotServer interface {
	ListBots(context.Context, *Id) (*Bots, error)
	GetBot(context.Context, *Id) (*Bot, error)
	UpdateBotRunState(context.Context, *Bot) (*Bot, error)
	CreateBot(context.Context, *Bot) (*Bot, error)
	UpdateBot(context.Context, *Bot) (*Bot, error)
	DeleteBot(context.Context, *Id) (*Empty, error)
	OnEvent(context.Context, *BotRunRequest) (*Empty, error)
	StartBot(context.Context, *BotRunRequest) (*Empty, error)
	StopBot(context.Context, *BotRunRequest) (*Empty, error)
	TryAction(context.Context, *BotRunRequest) (*Empty, error)
	ReportBot(context.Context, *ReportBotRequest) (*ReportBotResponse, error)
	ListObjects(context.Context, *ListObjectsRequest) (*ListObjectsResponse, error)
	CreateBotRevision(context.Context, *Bot) (*Bot, error)
	ListBotRevisions(context.Context, *Id) (*Bots, error)
}

// UnimplementedBizbotServer can be embedded to have forward compatible implementations.
type UnimplementedBizbotServer struct {
}

func (*UnimplementedBizbotServer) ListBots(context.Context, *Id) (*Bots, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBots not implemented")
}
func (*UnimplementedBizbotServer) GetBot(context.Context, *Id) (*Bot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBot not implemented")
}
func (*UnimplementedBizbotServer) UpdateBotRunState(context.Context, *Bot) (*Bot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBotRunState not implemented")
}
func (*UnimplementedBizbotServer) CreateBot(context.Context, *Bot) (*Bot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBot not implemented")
}
func (*UnimplementedBizbotServer) UpdateBot(context.Context, *Bot) (*Bot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBot not implemented")
}
func (*UnimplementedBizbotServer) DeleteBot(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBot not implemented")
}
func (*UnimplementedBizbotServer) OnEvent(context.Context, *BotRunRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnEvent not implemented")
}
func (*UnimplementedBizbotServer) StartBot(context.Context, *BotRunRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartBot not implemented")
}
func (*UnimplementedBizbotServer) StopBot(context.Context, *BotRunRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopBot not implemented")
}
func (*UnimplementedBizbotServer) TryAction(context.Context, *BotRunRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TryAction not implemented")
}
func (*UnimplementedBizbotServer) ReportBot(context.Context, *ReportBotRequest) (*ReportBotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportBot not implemented")
}
func (*UnimplementedBizbotServer) ListObjects(context.Context, *ListObjectsRequest) (*ListObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListObjects not implemented")
}
func (*UnimplementedBizbotServer) CreateBotRevision(context.Context, *Bot) (*Bot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBotRevision not implemented")
}
func (*UnimplementedBizbotServer) ListBotRevisions(context.Context, *Id) (*Bots, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBotRevisions not implemented")
}

func RegisterBizbotServer(s *grpc.Server, srv BizbotServer) {
	s.RegisterService(&_Bizbot_serviceDesc, srv)
}

func _Bizbot_ListBots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizbotServer).ListBots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Bizbot/ListBots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizbotServer).ListBots(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bizbot_GetBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizbotServer).GetBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Bizbot/GetBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizbotServer).GetBot(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bizbot_UpdateBotRunState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizbotServer).UpdateBotRunState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Bizbot/UpdateBotRunState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizbotServer).UpdateBotRunState(ctx, req.(*Bot))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bizbot_CreateBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizbotServer).CreateBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Bizbot/CreateBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizbotServer).CreateBot(ctx, req.(*Bot))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bizbot_UpdateBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizbotServer).UpdateBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Bizbot/UpdateBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizbotServer).UpdateBot(ctx, req.(*Bot))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bizbot_DeleteBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizbotServer).DeleteBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Bizbot/DeleteBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizbotServer).DeleteBot(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bizbot_OnEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizbotServer).OnEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Bizbot/OnEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizbotServer).OnEvent(ctx, req.(*BotRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bizbot_StartBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizbotServer).StartBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Bizbot/StartBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizbotServer).StartBot(ctx, req.(*BotRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bizbot_StopBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizbotServer).StopBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Bizbot/StopBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizbotServer).StopBot(ctx, req.(*BotRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bizbot_TryAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizbotServer).TryAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Bizbot/TryAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizbotServer).TryAction(ctx, req.(*BotRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bizbot_ReportBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportBotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizbotServer).ReportBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Bizbot/ReportBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizbotServer).ReportBot(ctx, req.(*ReportBotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bizbot_ListObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizbotServer).ListObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Bizbot/ListObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizbotServer).ListObjects(ctx, req.(*ListObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bizbot_CreateBotRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizbotServer).CreateBotRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Bizbot/CreateBotRevision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizbotServer).CreateBotRevision(ctx, req.(*Bot))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bizbot_ListBotRevisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizbotServer).ListBotRevisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Bizbot/ListBotRevisions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizbotServer).ListBotRevisions(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _Bizbot_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.Bizbot",
	HandlerType: (*BizbotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBots",
			Handler:    _Bizbot_ListBots_Handler,
		},
		{
			MethodName: "GetBot",
			Handler:    _Bizbot_GetBot_Handler,
		},
		{
			MethodName: "UpdateBotRunState",
			Handler:    _Bizbot_UpdateBotRunState_Handler,
		},
		{
			MethodName: "CreateBot",
			Handler:    _Bizbot_CreateBot_Handler,
		},
		{
			MethodName: "UpdateBot",
			Handler:    _Bizbot_UpdateBot_Handler,
		},
		{
			MethodName: "DeleteBot",
			Handler:    _Bizbot_DeleteBot_Handler,
		},
		{
			MethodName: "OnEvent",
			Handler:    _Bizbot_OnEvent_Handler,
		},
		{
			MethodName: "StartBot",
			Handler:    _Bizbot_StartBot_Handler,
		},
		{
			MethodName: "StopBot",
			Handler:    _Bizbot_StopBot_Handler,
		},
		{
			MethodName: "TryAction",
			Handler:    _Bizbot_TryAction_Handler,
		},
		{
			MethodName: "ReportBot",
			Handler:    _Bizbot_ReportBot_Handler,
		},
		{
			MethodName: "ListObjects",
			Handler:    _Bizbot_ListObjects_Handler,
		},
		{
			MethodName: "CreateBotRevision",
			Handler:    _Bizbot_CreateBotRevision_Handler,
		},
		{
			MethodName: "ListBotRevisions",
			Handler:    _Bizbot_ListBotRevisions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// SendbackClient is the client API for Sendback service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SendbackClient interface {
	CreateWebhook(ctx context.Context, in *Webhook, opts ...grpc.CallOption) (*Webhook, error)
	PingWebhook(ctx context.Context, in *Id, opts ...grpc.CallOption) (*WebhookTestResult, error)
	DeleteWebhook(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	ListWebhooks(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Webhooks, error)
	ReadWebhook(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Webhook, error)
	UpdateWebhook(ctx context.Context, in *Webhook, opts ...grpc.CallOption) (*Webhook, error)
	UpdateWebhookSecret(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Webhook, error)
	ListRecentIndexDeliveries(ctx context.Context, in *RecentIndexDeliveryRequest, opts ...grpc.CallOption) (*WebhookDeliveries, error)
	GetDelivery(ctx context.Context, in *DeliveryRequest, opts ...grpc.CallOption) (*WebhookDelivery, error)
	SendWebhookEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Empty, error)
}

type sendbackClient struct {
	cc grpc.ClientConnInterface
}

func NewSendbackClient(cc grpc.ClientConnInterface) SendbackClient {
	return &sendbackClient{cc}
}

func (c *sendbackClient) CreateWebhook(ctx context.Context, in *Webhook, opts ...grpc.CallOption) (*Webhook, error) {
	out := new(Webhook)
	err := c.cc.Invoke(ctx, "/header.Sendback/CreateWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendbackClient) PingWebhook(ctx context.Context, in *Id, opts ...grpc.CallOption) (*WebhookTestResult, error) {
	out := new(WebhookTestResult)
	err := c.cc.Invoke(ctx, "/header.Sendback/PingWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendbackClient) DeleteWebhook(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Sendback/DeleteWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendbackClient) ListWebhooks(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Webhooks, error) {
	out := new(Webhooks)
	err := c.cc.Invoke(ctx, "/header.Sendback/ListWebhooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendbackClient) ReadWebhook(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Webhook, error) {
	out := new(Webhook)
	err := c.cc.Invoke(ctx, "/header.Sendback/ReadWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendbackClient) UpdateWebhook(ctx context.Context, in *Webhook, opts ...grpc.CallOption) (*Webhook, error) {
	out := new(Webhook)
	err := c.cc.Invoke(ctx, "/header.Sendback/UpdateWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendbackClient) UpdateWebhookSecret(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Webhook, error) {
	out := new(Webhook)
	err := c.cc.Invoke(ctx, "/header.Sendback/UpdateWebhookSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendbackClient) ListRecentIndexDeliveries(ctx context.Context, in *RecentIndexDeliveryRequest, opts ...grpc.CallOption) (*WebhookDeliveries, error) {
	out := new(WebhookDeliveries)
	err := c.cc.Invoke(ctx, "/header.Sendback/ListRecentIndexDeliveries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendbackClient) GetDelivery(ctx context.Context, in *DeliveryRequest, opts ...grpc.CallOption) (*WebhookDelivery, error) {
	out := new(WebhookDelivery)
	err := c.cc.Invoke(ctx, "/header.Sendback/GetDelivery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendbackClient) SendWebhookEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Sendback/SendWebhookEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SendbackServer is the server API for Sendback service.
type SendbackServer interface {
	CreateWebhook(context.Context, *Webhook) (*Webhook, error)
	PingWebhook(context.Context, *Id) (*WebhookTestResult, error)
	DeleteWebhook(context.Context, *Id) (*Empty, error)
	ListWebhooks(context.Context, *Id) (*Webhooks, error)
	ReadWebhook(context.Context, *Id) (*Webhook, error)
	UpdateWebhook(context.Context, *Webhook) (*Webhook, error)
	UpdateWebhookSecret(context.Context, *Id) (*Webhook, error)
	ListRecentIndexDeliveries(context.Context, *RecentIndexDeliveryRequest) (*WebhookDeliveries, error)
	GetDelivery(context.Context, *DeliveryRequest) (*WebhookDelivery, error)
	SendWebhookEvent(context.Context, *Event) (*Empty, error)
}

// UnimplementedSendbackServer can be embedded to have forward compatible implementations.
type UnimplementedSendbackServer struct {
}

func (*UnimplementedSendbackServer) CreateWebhook(context.Context, *Webhook) (*Webhook, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWebhook not implemented")
}
func (*UnimplementedSendbackServer) PingWebhook(context.Context, *Id) (*WebhookTestResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingWebhook not implemented")
}
func (*UnimplementedSendbackServer) DeleteWebhook(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWebhook not implemented")
}
func (*UnimplementedSendbackServer) ListWebhooks(context.Context, *Id) (*Webhooks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWebhooks not implemented")
}
func (*UnimplementedSendbackServer) ReadWebhook(context.Context, *Id) (*Webhook, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadWebhook not implemented")
}
func (*UnimplementedSendbackServer) UpdateWebhook(context.Context, *Webhook) (*Webhook, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWebhook not implemented")
}
func (*UnimplementedSendbackServer) UpdateWebhookSecret(context.Context, *Id) (*Webhook, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWebhookSecret not implemented")
}
func (*UnimplementedSendbackServer) ListRecentIndexDeliveries(context.Context, *RecentIndexDeliveryRequest) (*WebhookDeliveries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecentIndexDeliveries not implemented")
}
func (*UnimplementedSendbackServer) GetDelivery(context.Context, *DeliveryRequest) (*WebhookDelivery, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelivery not implemented")
}
func (*UnimplementedSendbackServer) SendWebhookEvent(context.Context, *Event) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendWebhookEvent not implemented")
}

func RegisterSendbackServer(s *grpc.Server, srv SendbackServer) {
	s.RegisterService(&_Sendback_serviceDesc, srv)
}

func _Sendback_CreateWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Webhook)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendbackServer).CreateWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Sendback/CreateWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendbackServer).CreateWebhook(ctx, req.(*Webhook))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sendback_PingWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendbackServer).PingWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Sendback/PingWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendbackServer).PingWebhook(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sendback_DeleteWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendbackServer).DeleteWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Sendback/DeleteWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendbackServer).DeleteWebhook(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sendback_ListWebhooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendbackServer).ListWebhooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Sendback/ListWebhooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendbackServer).ListWebhooks(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sendback_ReadWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendbackServer).ReadWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Sendback/ReadWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendbackServer).ReadWebhook(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sendback_UpdateWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Webhook)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendbackServer).UpdateWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Sendback/UpdateWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendbackServer).UpdateWebhook(ctx, req.(*Webhook))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sendback_UpdateWebhookSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendbackServer).UpdateWebhookSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Sendback/UpdateWebhookSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendbackServer).UpdateWebhookSecret(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sendback_ListRecentIndexDeliveries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecentIndexDeliveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendbackServer).ListRecentIndexDeliveries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Sendback/ListRecentIndexDeliveries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendbackServer).ListRecentIndexDeliveries(ctx, req.(*RecentIndexDeliveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sendback_GetDelivery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendbackServer).GetDelivery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Sendback/GetDelivery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendbackServer).GetDelivery(ctx, req.(*DeliveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sendback_SendWebhookEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendbackServer).SendWebhookEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Sendback/SendWebhookEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendbackServer).SendWebhookEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

var _Sendback_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.Sendback",
	HandlerType: (*SendbackServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWebhook",
			Handler:    _Sendback_CreateWebhook_Handler,
		},
		{
			MethodName: "PingWebhook",
			Handler:    _Sendback_PingWebhook_Handler,
		},
		{
			MethodName: "DeleteWebhook",
			Handler:    _Sendback_DeleteWebhook_Handler,
		},
		{
			MethodName: "ListWebhooks",
			Handler:    _Sendback_ListWebhooks_Handler,
		},
		{
			MethodName: "ReadWebhook",
			Handler:    _Sendback_ReadWebhook_Handler,
		},
		{
			MethodName: "UpdateWebhook",
			Handler:    _Sendback_UpdateWebhook_Handler,
		},
		{
			MethodName: "UpdateWebhookSecret",
			Handler:    _Sendback_UpdateWebhookSecret_Handler,
		},
		{
			MethodName: "ListRecentIndexDeliveries",
			Handler:    _Sendback_ListRecentIndexDeliveries_Handler,
		},
		{
			MethodName: "GetDelivery",
			Handler:    _Sendback_GetDelivery_Handler,
		},
		{
			MethodName: "SendWebhookEvent",
			Handler:    _Sendback_SendWebhookEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// NotiboxClient is the client API for Notibox service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NotiboxClient interface {
	Send(ctx context.Context, in *Notification, opts ...grpc.CallOption) (*Empty, error)
	MarkRead(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	MarkReadCompactedNoti(ctx context.Context, in *CompactedNotiRequest, opts ...grpc.CallOption) (*Empty, error)
	ListRecentCompactedNoties(ctx context.Context, in *RecentCompactedNotiRequest, opts ...grpc.CallOption) (*CompactedNoties, error)
}

type notiboxClient struct {
	cc grpc.ClientConnInterface
}

func NewNotiboxClient(cc grpc.ClientConnInterface) NotiboxClient {
	return &notiboxClient{cc}
}

func (c *notiboxClient) Send(ctx context.Context, in *Notification, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Notibox/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notiboxClient) MarkRead(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Notibox/MarkRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notiboxClient) MarkReadCompactedNoti(ctx context.Context, in *CompactedNotiRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Notibox/MarkReadCompactedNoti", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notiboxClient) ListRecentCompactedNoties(ctx context.Context, in *RecentCompactedNotiRequest, opts ...grpc.CallOption) (*CompactedNoties, error) {
	out := new(CompactedNoties)
	err := c.cc.Invoke(ctx, "/header.Notibox/ListRecentCompactedNoties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotiboxServer is the server API for Notibox service.
type NotiboxServer interface {
	Send(context.Context, *Notification) (*Empty, error)
	MarkRead(context.Context, *Id) (*Empty, error)
	MarkReadCompactedNoti(context.Context, *CompactedNotiRequest) (*Empty, error)
	ListRecentCompactedNoties(context.Context, *RecentCompactedNotiRequest) (*CompactedNoties, error)
}

// UnimplementedNotiboxServer can be embedded to have forward compatible implementations.
type UnimplementedNotiboxServer struct {
}

func (*UnimplementedNotiboxServer) Send(context.Context, *Notification) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (*UnimplementedNotiboxServer) MarkRead(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkRead not implemented")
}
func (*UnimplementedNotiboxServer) MarkReadCompactedNoti(context.Context, *CompactedNotiRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkReadCompactedNoti not implemented")
}
func (*UnimplementedNotiboxServer) ListRecentCompactedNoties(context.Context, *RecentCompactedNotiRequest) (*CompactedNoties, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecentCompactedNoties not implemented")
}

func RegisterNotiboxServer(s *grpc.Server, srv NotiboxServer) {
	s.RegisterService(&_Notibox_serviceDesc, srv)
}

func _Notibox_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotiboxServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Notibox/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotiboxServer).Send(ctx, req.(*Notification))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notibox_MarkRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotiboxServer).MarkRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Notibox/MarkRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotiboxServer).MarkRead(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notibox_MarkReadCompactedNoti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompactedNotiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotiboxServer).MarkReadCompactedNoti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Notibox/MarkReadCompactedNoti",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotiboxServer).MarkReadCompactedNoti(ctx, req.(*CompactedNotiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notibox_ListRecentCompactedNoties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecentCompactedNotiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotiboxServer).ListRecentCompactedNoties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Notibox/ListRecentCompactedNoties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotiboxServer).ListRecentCompactedNoties(ctx, req.(*RecentCompactedNotiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Notibox_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.Notibox",
	HandlerType: (*NotiboxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _Notibox_Send_Handler,
		},
		{
			MethodName: "MarkRead",
			Handler:    _Notibox_MarkRead_Handler,
		},
		{
			MethodName: "MarkReadCompactedNoti",
			Handler:    _Notibox_MarkReadCompactedNoti_Handler,
		},
		{
			MethodName: "ListRecentCompactedNoties",
			Handler:    _Notibox_ListRecentCompactedNoties_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// WatchhttpClient is the client API for Watchhttp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WatchhttpClient interface {
	CreateWebpage(ctx context.Context, in *Webpage, opts ...grpc.CallOption) (*Webpage, error)
	DeleteWebpage(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	ListWebpages(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Webpages, error)
	UpdateWebpage(ctx context.Context, in *Webpage, opts ...grpc.CallOption) (*Webpage, error)
	ReadWebpage(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Webpage, error)
	ListRecentWebpageChecks(ctx context.Context, in *RecentWebpageCheckRequest, opts ...grpc.CallOption) (*WebpageChecks, error)
	ReadWebpageCheck(ctx context.Context, in *WebpageCheckRequest, opts ...grpc.CallOption) (*WebpageCheck, error)
	ReportWebpageChecks(ctx context.Context, in *WebpageReportRequest, opts ...grpc.CallOption) (*WebpageReportDataSet, error)
	SummaryWebpageChecks(ctx context.Context, in *WebpageReportRequest, opts ...grpc.CallOption) (*WebpageChecks, error)
}

type watchhttpClient struct {
	cc grpc.ClientConnInterface
}

func NewWatchhttpClient(cc grpc.ClientConnInterface) WatchhttpClient {
	return &watchhttpClient{cc}
}

func (c *watchhttpClient) CreateWebpage(ctx context.Context, in *Webpage, opts ...grpc.CallOption) (*Webpage, error) {
	out := new(Webpage)
	err := c.cc.Invoke(ctx, "/header.Watchhttp/CreateWebpage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchhttpClient) DeleteWebpage(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Watchhttp/DeleteWebpage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchhttpClient) ListWebpages(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Webpages, error) {
	out := new(Webpages)
	err := c.cc.Invoke(ctx, "/header.Watchhttp/ListWebpages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchhttpClient) UpdateWebpage(ctx context.Context, in *Webpage, opts ...grpc.CallOption) (*Webpage, error) {
	out := new(Webpage)
	err := c.cc.Invoke(ctx, "/header.Watchhttp/UpdateWebpage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchhttpClient) ReadWebpage(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Webpage, error) {
	out := new(Webpage)
	err := c.cc.Invoke(ctx, "/header.Watchhttp/ReadWebpage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchhttpClient) ListRecentWebpageChecks(ctx context.Context, in *RecentWebpageCheckRequest, opts ...grpc.CallOption) (*WebpageChecks, error) {
	out := new(WebpageChecks)
	err := c.cc.Invoke(ctx, "/header.Watchhttp/ListRecentWebpageChecks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchhttpClient) ReadWebpageCheck(ctx context.Context, in *WebpageCheckRequest, opts ...grpc.CallOption) (*WebpageCheck, error) {
	out := new(WebpageCheck)
	err := c.cc.Invoke(ctx, "/header.Watchhttp/ReadWebpageCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchhttpClient) ReportWebpageChecks(ctx context.Context, in *WebpageReportRequest, opts ...grpc.CallOption) (*WebpageReportDataSet, error) {
	out := new(WebpageReportDataSet)
	err := c.cc.Invoke(ctx, "/header.Watchhttp/ReportWebpageChecks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchhttpClient) SummaryWebpageChecks(ctx context.Context, in *WebpageReportRequest, opts ...grpc.CallOption) (*WebpageChecks, error) {
	out := new(WebpageChecks)
	err := c.cc.Invoke(ctx, "/header.Watchhttp/SummaryWebpageChecks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WatchhttpServer is the server API for Watchhttp service.
type WatchhttpServer interface {
	CreateWebpage(context.Context, *Webpage) (*Webpage, error)
	DeleteWebpage(context.Context, *Id) (*Empty, error)
	ListWebpages(context.Context, *Id) (*Webpages, error)
	UpdateWebpage(context.Context, *Webpage) (*Webpage, error)
	ReadWebpage(context.Context, *Id) (*Webpage, error)
	ListRecentWebpageChecks(context.Context, *RecentWebpageCheckRequest) (*WebpageChecks, error)
	ReadWebpageCheck(context.Context, *WebpageCheckRequest) (*WebpageCheck, error)
	ReportWebpageChecks(context.Context, *WebpageReportRequest) (*WebpageReportDataSet, error)
	SummaryWebpageChecks(context.Context, *WebpageReportRequest) (*WebpageChecks, error)
}

// UnimplementedWatchhttpServer can be embedded to have forward compatible implementations.
type UnimplementedWatchhttpServer struct {
}

func (*UnimplementedWatchhttpServer) CreateWebpage(context.Context, *Webpage) (*Webpage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWebpage not implemented")
}
func (*UnimplementedWatchhttpServer) DeleteWebpage(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWebpage not implemented")
}
func (*UnimplementedWatchhttpServer) ListWebpages(context.Context, *Id) (*Webpages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWebpages not implemented")
}
func (*UnimplementedWatchhttpServer) UpdateWebpage(context.Context, *Webpage) (*Webpage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWebpage not implemented")
}
func (*UnimplementedWatchhttpServer) ReadWebpage(context.Context, *Id) (*Webpage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadWebpage not implemented")
}
func (*UnimplementedWatchhttpServer) ListRecentWebpageChecks(context.Context, *RecentWebpageCheckRequest) (*WebpageChecks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecentWebpageChecks not implemented")
}
func (*UnimplementedWatchhttpServer) ReadWebpageCheck(context.Context, *WebpageCheckRequest) (*WebpageCheck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadWebpageCheck not implemented")
}
func (*UnimplementedWatchhttpServer) ReportWebpageChecks(context.Context, *WebpageReportRequest) (*WebpageReportDataSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportWebpageChecks not implemented")
}
func (*UnimplementedWatchhttpServer) SummaryWebpageChecks(context.Context, *WebpageReportRequest) (*WebpageChecks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SummaryWebpageChecks not implemented")
}

func RegisterWatchhttpServer(s *grpc.Server, srv WatchhttpServer) {
	s.RegisterService(&_Watchhttp_serviceDesc, srv)
}

func _Watchhttp_CreateWebpage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Webpage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchhttpServer).CreateWebpage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Watchhttp/CreateWebpage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchhttpServer).CreateWebpage(ctx, req.(*Webpage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Watchhttp_DeleteWebpage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchhttpServer).DeleteWebpage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Watchhttp/DeleteWebpage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchhttpServer).DeleteWebpage(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Watchhttp_ListWebpages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchhttpServer).ListWebpages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Watchhttp/ListWebpages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchhttpServer).ListWebpages(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Watchhttp_UpdateWebpage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Webpage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchhttpServer).UpdateWebpage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Watchhttp/UpdateWebpage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchhttpServer).UpdateWebpage(ctx, req.(*Webpage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Watchhttp_ReadWebpage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchhttpServer).ReadWebpage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Watchhttp/ReadWebpage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchhttpServer).ReadWebpage(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Watchhttp_ListRecentWebpageChecks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecentWebpageCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchhttpServer).ListRecentWebpageChecks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Watchhttp/ListRecentWebpageChecks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchhttpServer).ListRecentWebpageChecks(ctx, req.(*RecentWebpageCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Watchhttp_ReadWebpageCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebpageCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchhttpServer).ReadWebpageCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Watchhttp/ReadWebpageCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchhttpServer).ReadWebpageCheck(ctx, req.(*WebpageCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Watchhttp_ReportWebpageChecks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebpageReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchhttpServer).ReportWebpageChecks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Watchhttp/ReportWebpageChecks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchhttpServer).ReportWebpageChecks(ctx, req.(*WebpageReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Watchhttp_SummaryWebpageChecks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebpageReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchhttpServer).SummaryWebpageChecks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Watchhttp/SummaryWebpageChecks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchhttpServer).SummaryWebpageChecks(ctx, req.(*WebpageReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Watchhttp_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.Watchhttp",
	HandlerType: (*WatchhttpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWebpage",
			Handler:    _Watchhttp_CreateWebpage_Handler,
		},
		{
			MethodName: "DeleteWebpage",
			Handler:    _Watchhttp_DeleteWebpage_Handler,
		},
		{
			MethodName: "ListWebpages",
			Handler:    _Watchhttp_ListWebpages_Handler,
		},
		{
			MethodName: "UpdateWebpage",
			Handler:    _Watchhttp_UpdateWebpage_Handler,
		},
		{
			MethodName: "ReadWebpage",
			Handler:    _Watchhttp_ReadWebpage_Handler,
		},
		{
			MethodName: "ListRecentWebpageChecks",
			Handler:    _Watchhttp_ListRecentWebpageChecks_Handler,
		},
		{
			MethodName: "ReadWebpageCheck",
			Handler:    _Watchhttp_ReadWebpageCheck_Handler,
		},
		{
			MethodName: "ReportWebpageChecks",
			Handler:    _Watchhttp_ReportWebpageChecks_Handler,
		},
		{
			MethodName: "SummaryWebpageChecks",
			Handler:    _Watchhttp_SummaryWebpageChecks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// HolapClient is the client API for Holap service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HolapClient interface {
	AppendAgentSet(ctx context.Context, in *account.Agent, opts ...grpc.CallOption) (*Empty, error)
	AppendTagSet(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*Empty, error)
	UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error)
	UpdateConversation(ctx context.Context, in *Conversation, opts ...grpc.CallOption) (*Empty, error)
	OnConversationEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Empty, error)
	FreeAccount(ctx context.Context, in *AccountImage, opts ...grpc.CallOption) (*Empty, error)
	ReportUser(ctx context.Context, in *UserMetricsRequest, opts ...grpc.CallOption) (*UserMetrics, error)
	ReportConversation(ctx context.Context, in *ConversationMetricsRequest, opts ...grpc.CallOption) (*ConversationMetrics, error)
	ListUserIds(ctx context.Context, in *UserMetricsRequest, opts ...grpc.CallOption) (*Ids, error)
	ListConversationIds(ctx context.Context, in *ConversationMetricsRequest, opts ...grpc.CallOption) (*Conversations, error)
	ReportAgent(ctx context.Context, in *AgentMetricsRequest, opts ...grpc.CallOption) (*AgentMetrics, error)
	ListChannelTouchpoints(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Ids, error)
}

type holapClient struct {
	cc grpc.ClientConnInterface
}

func NewHolapClient(cc grpc.ClientConnInterface) HolapClient {
	return &holapClient{cc}
}

func (c *holapClient) AppendAgentSet(ctx context.Context, in *account.Agent, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Holap/AppendAgentSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holapClient) AppendTagSet(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Holap/AppendTagSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holapClient) UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Holap/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holapClient) UpdateConversation(ctx context.Context, in *Conversation, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Holap/UpdateConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holapClient) OnConversationEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Holap/OnConversationEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holapClient) FreeAccount(ctx context.Context, in *AccountImage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/header.Holap/FreeAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holapClient) ReportUser(ctx context.Context, in *UserMetricsRequest, opts ...grpc.CallOption) (*UserMetrics, error) {
	out := new(UserMetrics)
	err := c.cc.Invoke(ctx, "/header.Holap/ReportUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holapClient) ReportConversation(ctx context.Context, in *ConversationMetricsRequest, opts ...grpc.CallOption) (*ConversationMetrics, error) {
	out := new(ConversationMetrics)
	err := c.cc.Invoke(ctx, "/header.Holap/ReportConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holapClient) ListUserIds(ctx context.Context, in *UserMetricsRequest, opts ...grpc.CallOption) (*Ids, error) {
	out := new(Ids)
	err := c.cc.Invoke(ctx, "/header.Holap/ListUserIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holapClient) ListConversationIds(ctx context.Context, in *ConversationMetricsRequest, opts ...grpc.CallOption) (*Conversations, error) {
	out := new(Conversations)
	err := c.cc.Invoke(ctx, "/header.Holap/ListConversationIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holapClient) ReportAgent(ctx context.Context, in *AgentMetricsRequest, opts ...grpc.CallOption) (*AgentMetrics, error) {
	out := new(AgentMetrics)
	err := c.cc.Invoke(ctx, "/header.Holap/ReportAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holapClient) ListChannelTouchpoints(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Ids, error) {
	out := new(Ids)
	err := c.cc.Invoke(ctx, "/header.Holap/ListChannelTouchpoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HolapServer is the server API for Holap service.
type HolapServer interface {
	AppendAgentSet(context.Context, *account.Agent) (*Empty, error)
	AppendTagSet(context.Context, *Tag) (*Empty, error)
	UpdateUser(context.Context, *User) (*Empty, error)
	UpdateConversation(context.Context, *Conversation) (*Empty, error)
	OnConversationEvent(context.Context, *Event) (*Empty, error)
	FreeAccount(context.Context, *AccountImage) (*Empty, error)
	ReportUser(context.Context, *UserMetricsRequest) (*UserMetrics, error)
	ReportConversation(context.Context, *ConversationMetricsRequest) (*ConversationMetrics, error)
	ListUserIds(context.Context, *UserMetricsRequest) (*Ids, error)
	ListConversationIds(context.Context, *ConversationMetricsRequest) (*Conversations, error)
	ReportAgent(context.Context, *AgentMetricsRequest) (*AgentMetrics, error)
	ListChannelTouchpoints(context.Context, *Ids) (*Ids, error)
}

// UnimplementedHolapServer can be embedded to have forward compatible implementations.
type UnimplementedHolapServer struct {
}

func (*UnimplementedHolapServer) AppendAgentSet(context.Context, *account.Agent) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendAgentSet not implemented")
}
func (*UnimplementedHolapServer) AppendTagSet(context.Context, *Tag) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendTagSet not implemented")
}
func (*UnimplementedHolapServer) UpdateUser(context.Context, *User) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (*UnimplementedHolapServer) UpdateConversation(context.Context, *Conversation) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConversation not implemented")
}
func (*UnimplementedHolapServer) OnConversationEvent(context.Context, *Event) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnConversationEvent not implemented")
}
func (*UnimplementedHolapServer) FreeAccount(context.Context, *AccountImage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FreeAccount not implemented")
}
func (*UnimplementedHolapServer) ReportUser(context.Context, *UserMetricsRequest) (*UserMetrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportUser not implemented")
}
func (*UnimplementedHolapServer) ReportConversation(context.Context, *ConversationMetricsRequest) (*ConversationMetrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportConversation not implemented")
}
func (*UnimplementedHolapServer) ListUserIds(context.Context, *UserMetricsRequest) (*Ids, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserIds not implemented")
}
func (*UnimplementedHolapServer) ListConversationIds(context.Context, *ConversationMetricsRequest) (*Conversations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConversationIds not implemented")
}
func (*UnimplementedHolapServer) ReportAgent(context.Context, *AgentMetricsRequest) (*AgentMetrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportAgent not implemented")
}
func (*UnimplementedHolapServer) ListChannelTouchpoints(context.Context, *Ids) (*Ids, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChannelTouchpoints not implemented")
}

func RegisterHolapServer(s *grpc.Server, srv HolapServer) {
	s.RegisterService(&_Holap_serviceDesc, srv)
}

func _Holap_AppendAgentSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Agent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HolapServer).AppendAgentSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Holap/AppendAgentSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HolapServer).AppendAgentSet(ctx, req.(*account.Agent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Holap_AppendTagSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HolapServer).AppendTagSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Holap/AppendTagSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HolapServer).AppendTagSet(ctx, req.(*Tag))
	}
	return interceptor(ctx, in, info, handler)
}

func _Holap_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HolapServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Holap/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HolapServer).UpdateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Holap_UpdateConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Conversation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HolapServer).UpdateConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Holap/UpdateConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HolapServer).UpdateConversation(ctx, req.(*Conversation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Holap_OnConversationEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HolapServer).OnConversationEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Holap/OnConversationEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HolapServer).OnConversationEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _Holap_FreeAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountImage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HolapServer).FreeAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Holap/FreeAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HolapServer).FreeAccount(ctx, req.(*AccountImage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Holap_ReportUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HolapServer).ReportUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Holap/ReportUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HolapServer).ReportUser(ctx, req.(*UserMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Holap_ReportConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversationMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HolapServer).ReportConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Holap/ReportConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HolapServer).ReportConversation(ctx, req.(*ConversationMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Holap_ListUserIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HolapServer).ListUserIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Holap/ListUserIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HolapServer).ListUserIds(ctx, req.(*UserMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Holap_ListConversationIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversationMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HolapServer).ListConversationIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Holap/ListConversationIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HolapServer).ListConversationIds(ctx, req.(*ConversationMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Holap_ReportAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HolapServer).ReportAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Holap/ReportAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HolapServer).ReportAgent(ctx, req.(*AgentMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Holap_ListChannelTouchpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HolapServer).ListChannelTouchpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/header.Holap/ListChannelTouchpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HolapServer).ListChannelTouchpoints(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

var _Holap_serviceDesc = grpc.ServiceDesc{
	ServiceName: "header.Holap",
	HandlerType: (*HolapServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppendAgentSet",
			Handler:    _Holap_AppendAgentSet_Handler,
		},
		{
			MethodName: "AppendTagSet",
			Handler:    _Holap_AppendTagSet_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Holap_UpdateUser_Handler,
		},
		{
			MethodName: "UpdateConversation",
			Handler:    _Holap_UpdateConversation_Handler,
		},
		{
			MethodName: "OnConversationEvent",
			Handler:    _Holap_OnConversationEvent_Handler,
		},
		{
			MethodName: "FreeAccount",
			Handler:    _Holap_FreeAccount_Handler,
		},
		{
			MethodName: "ReportUser",
			Handler:    _Holap_ReportUser_Handler,
		},
		{
			MethodName: "ReportConversation",
			Handler:    _Holap_ReportConversation_Handler,
		},
		{
			MethodName: "ListUserIds",
			Handler:    _Holap_ListUserIds_Handler,
		},
		{
			MethodName: "ListConversationIds",
			Handler:    _Holap_ListConversationIds_Handler,
		},
		{
			MethodName: "ReportAgent",
			Handler:    _Holap_ReportAgent_Handler,
		},
		{
			MethodName: "ListChannelTouchpoints",
			Handler:    _Holap_ListChannelTouchpoints_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
