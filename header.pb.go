// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1-devel
// 	protoc        v3.17.2
// source: header.proto

package header

import (
	account "github.com/subiz/header/account"
	common "github.com/subiz/header/common"
	noti5 "github.com/subiz/header/noti5"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HaveBeen int32

const (
	HaveBeen_unknown   HaveBeen = 0
	HaveBeen_increase  HaveBeen = 1
	HaveBeen_decrease  HaveBeen = 2
	HaveBeen_immutable HaveBeen = 3
)

// Enum value maps for HaveBeen.
var (
	HaveBeen_name = map[int32]string{
		0: "unknown",
		1: "increase",
		2: "decrease",
		3: "immutable",
	}
	HaveBeen_value = map[string]int32{
		"unknown":   0,
		"increase":  1,
		"decrease":  2,
		"immutable": 3,
	}
)

func (x HaveBeen) Enum() *HaveBeen {
	p := new(HaveBeen)
	*p = x
	return p
}

func (x HaveBeen) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HaveBeen) Descriptor() protoreflect.EnumDescriptor {
	return file_header_proto_enumTypes[0].Descriptor()
}

func (HaveBeen) Type() protoreflect.EnumType {
	return &file_header_proto_enumTypes[0]
}

func (x HaveBeen) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HaveBeen.Descriptor instead.
func (HaveBeen) EnumDescriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{0}
}

type PK int32

const (
	PK_id               PK = 0
	PK_account_id       PK = 1
	PK_domain           PK = 2
	PK_facebook_page_id PK = 3
	PK_zalo_oa_id       PK = 4
)

// Enum value maps for PK.
var (
	PK_name = map[int32]string{
		0: "id",
		1: "account_id",
		2: "domain",
		3: "facebook_page_id",
		4: "zalo_oa_id",
	}
	PK_value = map[string]int32{
		"id":               0,
		"account_id":       1,
		"domain":           2,
		"facebook_page_id": 3,
		"zalo_oa_id":       4,
	}
)

func (x PK) Enum() *PK {
	p := new(PK)
	*p = x
	return p
}

func (x PK) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PK) Descriptor() protoreflect.EnumDescriptor {
	return file_header_proto_enumTypes[1].Descriptor()
}

func (PK) Type() protoreflect.EnumType {
	return &file_header_proto_enumTypes[1]
}

func (x PK) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PK.Descriptor instead.
func (PK) EnumDescriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{1}
}

type ConvoState int32

const (
	// none = 0; // convo
	ConvoState_unassigned ConvoState = 0  // convo
	ConvoState_active     ConvoState = 6  // convo
	ConvoState_ended      ConvoState = 8  // convo
	ConvoState_pending    ConvoState = 9  // ticket and convo
	ConvoState_all        ConvoState = 10 // ticket
	// open = 11;  ticket
	ConvoState_resolved          ConvoState = 13 // ticket
	ConvoState_waiting_for_reply ConvoState = 15 // waiting for reply
	ConvoState_dialing           ConvoState = 16
	ConvoState_congestion        ConvoState = 17
)

// Enum value maps for ConvoState.
var (
	ConvoState_name = map[int32]string{
		0:  "unassigned",
		6:  "active",
		8:  "ended",
		9:  "pending",
		10: "all",
		13: "resolved",
		15: "waiting_for_reply",
		16: "dialing",
		17: "congestion",
	}
	ConvoState_value = map[string]int32{
		"unassigned":        0,
		"active":            6,
		"ended":             8,
		"pending":           9,
		"all":               10,
		"resolved":          13,
		"waiting_for_reply": 15,
		"dialing":           16,
		"congestion":        17,
	}
)

func (x ConvoState) Enum() *ConvoState {
	p := new(ConvoState)
	*p = x
	return p
}

func (x ConvoState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConvoState) Descriptor() protoreflect.EnumDescriptor {
	return file_header_proto_enumTypes[2].Descriptor()
}

func (ConvoState) Type() protoreflect.EnumType {
	return &file_header_proto_enumTypes[2]
}

func (x ConvoState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConvoState.Descriptor instead.
func (ConvoState) EnumDescriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{2}
}

type AttachmentType int32

const (
	AttachmentType_nothing              AttachmentType = 0
	AttachmentType_file                 AttachmentType = 2
	AttachmentType_generic              AttachmentType = 3
	AttachmentType_preview              AttachmentType = 4
	AttachmentType_button               AttachmentType = 5
	AttachmentType_input                AttachmentType = 6
	AttachmentType_ask_info_form        AttachmentType = 7
	AttachmentType_ask_info_form_answer AttachmentType = 8
	AttachmentType_form                 AttachmentType = 9
	AttachmentType_form_submit          AttachmentType = 10
	AttachmentType_fallback             AttachmentType = 11
	// content_template = 12;
	AttachmentType_quick_replies   AttachmentType = 13
	AttachmentType_command         AttachmentType = 14 // request_user_info
	AttachmentType_link            AttachmentType = 15
	AttachmentType_postback        AttachmentType = 16
	AttachmentType_product_preview AttachmentType = 17
	AttachmentType_product         AttachmentType = 18
	AttachmentType_quick_reply     AttachmentType = 19
	AttachmentType_order           AttachmentType = 20
	AttachmentType_quote           AttachmentType = 22
)

// Enum value maps for AttachmentType.
var (
	AttachmentType_name = map[int32]string{
		0:  "nothing",
		2:  "file",
		3:  "generic",
		4:  "preview",
		5:  "button",
		6:  "input",
		7:  "ask_info_form",
		8:  "ask_info_form_answer",
		9:  "form",
		10: "form_submit",
		11: "fallback",
		13: "quick_replies",
		14: "command",
		15: "link",
		16: "postback",
		17: "product_preview",
		18: "product",
		19: "quick_reply",
		20: "order",
		22: "quote",
	}
	AttachmentType_value = map[string]int32{
		"nothing":              0,
		"file":                 2,
		"generic":              3,
		"preview":              4,
		"button":               5,
		"input":                6,
		"ask_info_form":        7,
		"ask_info_form_answer": 8,
		"form":                 9,
		"form_submit":          10,
		"fallback":             11,
		"quick_replies":        13,
		"command":              14,
		"link":                 15,
		"postback":             16,
		"product_preview":      17,
		"product":              18,
		"quick_reply":          19,
		"order":                20,
		"quote":                22,
	}
)

func (x AttachmentType) Enum() *AttachmentType {
	p := new(AttachmentType)
	*p = x
	return p
}

func (x AttachmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttachmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_header_proto_enumTypes[3].Descriptor()
}

func (AttachmentType) Type() protoreflect.EnumType {
	return &file_header_proto_enumTypes[3]
}

func (x AttachmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AttachmentType.Descriptor instead.
func (AttachmentType) EnumDescriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{3}
}

type BotCategory int32

const (
	BotCategory_users         BotCategory = 0
	BotCategory_systems       BotCategory = 1
	BotCategory_conversations BotCategory = 2
	BotCategory_orders        BotCategory = 3
)

// Enum value maps for BotCategory.
var (
	BotCategory_name = map[int32]string{
		0: "users",
		1: "systems",
		2: "conversations",
		3: "orders",
	}
	BotCategory_value = map[string]int32{
		"users":         0,
		"systems":       1,
		"conversations": 2,
		"orders":        3,
	}
)

func (x BotCategory) Enum() *BotCategory {
	p := new(BotCategory)
	*p = x
	return p
}

func (x BotCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BotCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_header_proto_enumTypes[4].Descriptor()
}

func (BotCategory) Type() protoreflect.EnumType {
	return &file_header_proto_enumTypes[4]
}

func (x BotCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BotCategory.Descriptor instead.
func (BotCategory) EnumDescriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{4}
}

type BotActionType int32

const (
	BotActionType_nil                 BotActionType = 0
	BotActionType_condition           BotActionType = 1
	BotActionType_sleep               BotActionType = 2
	BotActionType_send_message        BotActionType = 3
	BotActionType_jump                BotActionType = 4
	BotActionType_send_email          BotActionType = 5
	BotActionType_convert_to_ticket   BotActionType = 7
	BotActionType_send_webhook        BotActionType = 8
	BotActionType_update_conversation BotActionType = 11
	BotActionType_question            BotActionType = 12
	BotActionType_update_user         BotActionType = 13
	BotActionType_assign              BotActionType = 14
	BotActionType_send_http           BotActionType = 15
	BotActionType_switch_language     BotActionType = 16
	BotActionType_ask_question        BotActionType = 18
	BotActionType_end_bot             BotActionType = 19
	BotActionType_update_user_labels  BotActionType = 20
	BotActionType_cancel_order        BotActionType = 21
	BotActionType_view_order          BotActionType = 22
	BotActionType_confirm_order       BotActionType = 23
)

// Enum value maps for BotActionType.
var (
	BotActionType_name = map[int32]string{
		0:  "nil",
		1:  "condition",
		2:  "sleep",
		3:  "send_message",
		4:  "jump",
		5:  "send_email",
		7:  "convert_to_ticket",
		8:  "send_webhook",
		11: "update_conversation",
		12: "question",
		13: "update_user",
		14: "assign",
		15: "send_http",
		16: "switch_language",
		18: "ask_question",
		19: "end_bot",
		20: "update_user_labels",
		21: "cancel_order",
		22: "view_order",
		23: "confirm_order",
	}
	BotActionType_value = map[string]int32{
		"nil":                 0,
		"condition":           1,
		"sleep":               2,
		"send_message":        3,
		"jump":                4,
		"send_email":          5,
		"convert_to_ticket":   7,
		"send_webhook":        8,
		"update_conversation": 11,
		"question":            12,
		"update_user":         13,
		"assign":              14,
		"send_http":           15,
		"switch_language":     16,
		"ask_question":        18,
		"end_bot":             19,
		"update_user_labels":  20,
		"cancel_order":        21,
		"view_order":          22,
		"confirm_order":       23,
	}
)

func (x BotActionType) Enum() *BotActionType {
	p := new(BotActionType)
	*p = x
	return p
}

func (x BotActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BotActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_header_proto_enumTypes[5].Descriptor()
}

func (BotActionType) Type() protoreflect.EnumType {
	return &file_header_proto_enumTypes[5]
}

func (x BotActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BotActionType.Descriptor instead.
func (BotActionType) EnumDescriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{5}
}

type ChannelType int32

const (
	ChannelType_subiz             ChannelType = 0
	ChannelType_email             ChannelType = 1
	ChannelType_facebook          ChannelType = 2 // ott
	ChannelType_viber             ChannelType = 3
	ChannelType_facebook_comment  ChannelType = 4 // public, dont close conversation
	ChannelType_zalo              ChannelType = 5
	ChannelType_call              ChannelType = 6
	ChannelType_instagram         ChannelType = 7
	ChannelType_instagram_comment ChannelType = 8
)

// Enum value maps for ChannelType.
var (
	ChannelType_name = map[int32]string{
		0: "subiz",
		1: "email",
		2: "facebook",
		3: "viber",
		4: "facebook_comment",
		5: "zalo",
		6: "call",
		7: "instagram",
		8: "instagram_comment",
	}
	ChannelType_value = map[string]int32{
		"subiz":             0,
		"email":             1,
		"facebook":          2,
		"viber":             3,
		"facebook_comment":  4,
		"zalo":              5,
		"call":              6,
		"instagram":         7,
		"instagram_comment": 8,
	}
)

func (x ChannelType) Enum() *ChannelType {
	p := new(ChannelType)
	*p = x
	return p
}

func (x ChannelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChannelType) Descriptor() protoreflect.EnumDescriptor {
	return file_header_proto_enumTypes[6].Descriptor()
}

func (ChannelType) Type() protoreflect.EnumType {
	return &file_header_proto_enumTypes[6]
}

func (x ChannelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChannelType.Descriptor instead.
func (ChannelType) EnumDescriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{6}
}

type ShippingProvider int32

const (
	ShippingProvider_direct      ShippingProvider = 0
	ShippingProvider_private     ShippingProvider = 1
	ShippingProvider_ghtk        ShippingProvider = 2
	ShippingProvider_shipchung   ShippingProvider = 3
	ShippingProvider_ninjavan    ShippingProvider = 4
	ShippingProvider_grabexpress ShippingProvider = 5
	ShippingProvider_ahamove     ShippingProvider = 6
	ShippingProvider_hcmpost     ShippingProvider = 7
	ShippingProvider_vnpost      ShippingProvider = 8
	ShippingProvider_jntexpress  ShippingProvider = 9
	ShippingProvider_supership   ShippingProvider = 10
	ShippingProvider_heyu        ShippingProvider = 11
	ShippingProvider_viettelpost ShippingProvider = 12
	ShippingProvider_ghn         ShippingProvider = 13
	ShippingProvider_none        ShippingProvider = 20
)

// Enum value maps for ShippingProvider.
var (
	ShippingProvider_name = map[int32]string{
		0:  "direct",
		1:  "private",
		2:  "ghtk",
		3:  "shipchung",
		4:  "ninjavan",
		5:  "grabexpress",
		6:  "ahamove",
		7:  "hcmpost",
		8:  "vnpost",
		9:  "jntexpress",
		10: "supership",
		11: "heyu",
		12: "viettelpost",
		13: "ghn",
		20: "none",
	}
	ShippingProvider_value = map[string]int32{
		"direct":      0,
		"private":     1,
		"ghtk":        2,
		"shipchung":   3,
		"ninjavan":    4,
		"grabexpress": 5,
		"ahamove":     6,
		"hcmpost":     7,
		"vnpost":      8,
		"jntexpress":  9,
		"supership":   10,
		"heyu":        11,
		"viettelpost": 12,
		"ghn":         13,
		"none":        20,
	}
)

func (x ShippingProvider) Enum() *ShippingProvider {
	p := new(ShippingProvider)
	*p = x
	return p
}

func (x ShippingProvider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShippingProvider) Descriptor() protoreflect.EnumDescriptor {
	return file_header_proto_enumTypes[7].Descriptor()
}

func (ShippingProvider) Type() protoreflect.EnumType {
	return &file_header_proto_enumTypes[7]
}

func (x ShippingProvider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShippingProvider.Descriptor instead.
func (ShippingProvider) EnumDescriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{7}
}

type OrderStatusCode int32

const (
	OrderStatusCode_open              OrderStatusCode = 0 // Đơn mới
	OrderStatusCode_canceled          OrderStatusCode = 1 // Đơn hàng đã chốt thua
	OrderStatusCode_closed            OrderStatusCode = 2 // Đơn hàng đã chốt thắng
	OrderStatusCode_delivery_success  OrderStatusCode = 25
	OrderStatusCode_delivery_failure  OrderStatusCode = 26
	OrderStatusCode_delivery_received OrderStatusCode = 27
	OrderStatusCode_delivery_shipping OrderStatusCode = 28
	OrderStatusCode_buyer_pickup      OrderStatusCode = 29
	OrderStatusCode_not_required      OrderStatusCode = 30
)

// Enum value maps for OrderStatusCode.
var (
	OrderStatusCode_name = map[int32]string{
		0:  "open",
		1:  "canceled",
		2:  "closed",
		25: "delivery_success",
		26: "delivery_failure",
		27: "delivery_received",
		28: "delivery_shipping",
		29: "buyer_pickup",
		30: "not_required",
	}
	OrderStatusCode_value = map[string]int32{
		"open":              0,
		"canceled":          1,
		"closed":            2,
		"delivery_success":  25,
		"delivery_failure":  26,
		"delivery_received": 27,
		"delivery_shipping": 28,
		"buyer_pickup":      29,
		"not_required":      30,
	}
)

func (x OrderStatusCode) Enum() *OrderStatusCode {
	p := new(OrderStatusCode)
	*p = x
	return p
}

func (x OrderStatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderStatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_header_proto_enumTypes[8].Descriptor()
}

func (OrderStatusCode) Type() protoreflect.EnumType {
	return &file_header_proto_enumTypes[8]
}

func (x OrderStatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderStatusCode.Descriptor instead.
func (OrderStatusCode) EnumDescriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{8}
}

// to update
type Attribute_Ops int32

const (
	Attribute_upsert  Attribute_Ops = 0 // DEFAULT: update + insert, remove all other value
	Attribute_replace Attribute_Ops = 2 // only write if existed, remove all other value
	Attribute_insert  Attribute_Ops = 3 // only write if not existed, remove all other value
	Attribute_delete  Attribute_Ops = 4 // delete specific elemnt match the value
	Attribute_push    Attribute_Ops = 5 // add a new value (for array) // unique
)

// Enum value maps for Attribute_Ops.
var (
	Attribute_Ops_name = map[int32]string{
		0: "upsert",
		2: "replace",
		3: "insert",
		4: "delete",
		5: "push",
	}
	Attribute_Ops_value = map[string]int32{
		"upsert":  0,
		"replace": 2,
		"insert":  3,
		"delete":  4,
		"push":    5,
	}
)

func (x Attribute_Ops) Enum() *Attribute_Ops {
	p := new(Attribute_Ops)
	*p = x
	return p
}

func (x Attribute_Ops) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Attribute_Ops) Descriptor() protoreflect.EnumDescriptor {
	return file_header_proto_enumTypes[9].Descriptor()
}

func (Attribute_Ops) Type() protoreflect.EnumType {
	return &file_header_proto_enumTypes[9]
}

func (x Attribute_Ops) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Attribute_Ops.Descriptor instead.
func (Attribute_Ops) EnumDescriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{6, 0}
}

type AttributeDefinition_AttributeType int32

const (
	AttributeDefinition_text     AttributeDefinition_AttributeType = 0
	AttributeDefinition_number   AttributeDefinition_AttributeType = 1
	AttributeDefinition_boolean  AttributeDefinition_AttributeType = 2
	AttributeDefinition_datetime AttributeDefinition_AttributeType = 3
)

// Enum value maps for AttributeDefinition_AttributeType.
var (
	AttributeDefinition_AttributeType_name = map[int32]string{
		0: "text",
		1: "number",
		2: "boolean",
		3: "datetime",
	}
	AttributeDefinition_AttributeType_value = map[string]int32{
		"text":     0,
		"number":   1,
		"boolean":  2,
		"datetime": 3,
	}
)

func (x AttributeDefinition_AttributeType) Enum() *AttributeDefinition_AttributeType {
	p := new(AttributeDefinition_AttributeType)
	*p = x
	return p
}

func (x AttributeDefinition_AttributeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttributeDefinition_AttributeType) Descriptor() protoreflect.EnumDescriptor {
	return file_header_proto_enumTypes[10].Descriptor()
}

func (AttributeDefinition_AttributeType) Type() protoreflect.EnumType {
	return &file_header_proto_enumTypes[10]
}

func (x AttributeDefinition_AttributeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AttributeDefinition_AttributeType.Descriptor instead.
func (AttributeDefinition_AttributeType) EnumDescriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{23, 0}
}

type AttributeDefinition_AttributeKind int32

const (
	AttributeDefinition_system  AttributeDefinition_AttributeKind = 0 // only system read and write
	AttributeDefinition_default AttributeDefinition_AttributeKind = 1 // created but agent can write, but not remove
	AttributeDefinition_custom  AttributeDefinition_AttributeKind = 2
)

// Enum value maps for AttributeDefinition_AttributeKind.
var (
	AttributeDefinition_AttributeKind_name = map[int32]string{
		0: "system",
		1: "default",
		2: "custom",
	}
	AttributeDefinition_AttributeKind_value = map[string]int32{
		"system":  0,
		"default": 1,
		"custom":  2,
	}
)

func (x AttributeDefinition_AttributeKind) Enum() *AttributeDefinition_AttributeKind {
	p := new(AttributeDefinition_AttributeKind)
	*p = x
	return p
}

func (x AttributeDefinition_AttributeKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttributeDefinition_AttributeKind) Descriptor() protoreflect.EnumDescriptor {
	return file_header_proto_enumTypes[11].Descriptor()
}

func (AttributeDefinition_AttributeKind) Type() protoreflect.EnumType {
	return &file_header_proto_enumTypes[11]
}

func (x AttributeDefinition_AttributeKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AttributeDefinition_AttributeKind.Descriptor instead.
func (AttributeDefinition_AttributeKind) EnumDescriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{23, 1}
}

type UserSession_DeviceType int32

const (
	UserSession_unknown UserSession_DeviceType = 0
	UserSession_mobile  UserSession_DeviceType = 1
	UserSession_tablet  UserSession_DeviceType = 2
	UserSession_desktop UserSession_DeviceType = 3
)

// Enum value maps for UserSession_DeviceType.
var (
	UserSession_DeviceType_name = map[int32]string{
		0: "unknown",
		1: "mobile",
		2: "tablet",
		3: "desktop",
	}
	UserSession_DeviceType_value = map[string]int32{
		"unknown": 0,
		"mobile":  1,
		"tablet":  2,
		"desktop": 3,
	}
)

func (x UserSession_DeviceType) Enum() *UserSession_DeviceType {
	p := new(UserSession_DeviceType)
	*p = x
	return p
}

func (x UserSession_DeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserSession_DeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_header_proto_enumTypes[12].Descriptor()
}

func (UserSession_DeviceType) Type() protoreflect.EnumType {
	return &file_header_proto_enumTypes[12]
}

func (x UserSession_DeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserSession_DeviceType.Descriptor instead.
func (UserSession_DeviceType) EnumDescriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{70, 0}
}

type UserSession_AdsNetwork int32

const (
	UserSession_google_adwords UserSession_AdsNetwork = 0
)

// Enum value maps for UserSession_AdsNetwork.
var (
	UserSession_AdsNetwork_name = map[int32]string{
		0: "google_adwords",
	}
	UserSession_AdsNetwork_value = map[string]int32{
		"google_adwords": 0,
	}
)

func (x UserSession_AdsNetwork) Enum() *UserSession_AdsNetwork {
	p := new(UserSession_AdsNetwork)
	*p = x
	return p
}

func (x UserSession_AdsNetwork) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserSession_AdsNetwork) Descriptor() protoreflect.EnumDescriptor {
	return file_header_proto_enumTypes[13].Descriptor()
}

func (UserSession_AdsNetwork) Type() protoreflect.EnumType {
	return &file_header_proto_enumTypes[13]
}

func (x UserSession_AdsNetwork) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserSession_AdsNetwork.Descriptor instead.
func (UserSession_AdsNetwork) EnumDescriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{70, 1}
}

type UserSession_Source int32

const (
	UserSession_direct      UserSession_Source = 0
	UserSession_referring   UserSession_Source = 1
	UserSession_organic     UserSession_Source = 2
	UserSession_social      UserSession_Source = 3
	UserSession_advertising UserSession_Source = 4
)

// Enum value maps for UserSession_Source.
var (
	UserSession_Source_name = map[int32]string{
		0: "direct",
		1: "referring",
		2: "organic",
		3: "social",
		4: "advertising",
	}
	UserSession_Source_value = map[string]int32{
		"direct":      0,
		"referring":   1,
		"organic":     2,
		"social":      3,
		"advertising": 4,
	}
)

func (x UserSession_Source) Enum() *UserSession_Source {
	p := new(UserSession_Source)
	*p = x
	return p
}

func (x UserSession_Source) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserSession_Source) Descriptor() protoreflect.EnumDescriptor {
	return file_header_proto_enumTypes[14].Descriptor()
}

func (UserSession_Source) Type() protoreflect.EnumType {
	return &file_header_proto_enumTypes[14]
}

func (x UserSession_Source) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserSession_Source.Descriptor instead.
func (UserSession_Source) EnumDescriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{70, 2}
}

type Rule_AssignStrategy int32

const (
	Rule_all_agents              Rule_AssignStrategy = 0
	Rule_agentgroup              Rule_AssignStrategy = 2
	Rule_agents                  Rule_AssignStrategy = 3
	Rule_most_recent             Rule_AssignStrategy = 4
	Rule_roundrobin_all_agents   Rule_AssignStrategy = 5
	Rule_roundrobin_agents       Rule_AssignStrategy = 6
	Rule_first_reply             Rule_AssignStrategy = 7 // list of agent
	Rule_first_reply_of_all      Rule_AssignStrategy = 8 // all agent
	Rule_first_reply_of_group    Rule_AssignStrategy = 9 // group
	Rule_least_workload          Rule_AssignStrategy = 11
	Rule_least_workload_agents   Rule_AssignStrategy = 12
	Rule_least_workload_of_group Rule_AssignStrategy = 13
	Rule_least_open              Rule_AssignStrategy = 14
	Rule_least_open_agents       Rule_AssignStrategy = 15
	Rule_least_open_of_group     Rule_AssignStrategy = 16
	Rule_bot                     Rule_AssignStrategy = 10
)

// Enum value maps for Rule_AssignStrategy.
var (
	Rule_AssignStrategy_name = map[int32]string{
		0:  "all_agents",
		2:  "agentgroup",
		3:  "agents",
		4:  "most_recent",
		5:  "roundrobin_all_agents",
		6:  "roundrobin_agents",
		7:  "first_reply",
		8:  "first_reply_of_all",
		9:  "first_reply_of_group",
		11: "least_workload",
		12: "least_workload_agents",
		13: "least_workload_of_group",
		14: "least_open",
		15: "least_open_agents",
		16: "least_open_of_group",
		10: "bot",
	}
	Rule_AssignStrategy_value = map[string]int32{
		"all_agents":              0,
		"agentgroup":              2,
		"agents":                  3,
		"most_recent":             4,
		"roundrobin_all_agents":   5,
		"roundrobin_agents":       6,
		"first_reply":             7,
		"first_reply_of_all":      8,
		"first_reply_of_group":    9,
		"least_workload":          11,
		"least_workload_agents":   12,
		"least_workload_of_group": 13,
		"least_open":              14,
		"least_open_agents":       15,
		"least_open_of_group":     16,
		"bot":                     10,
	}
)

func (x Rule_AssignStrategy) Enum() *Rule_AssignStrategy {
	p := new(Rule_AssignStrategy)
	*p = x
	return p
}

func (x Rule_AssignStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Rule_AssignStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_header_proto_enumTypes[15].Descriptor()
}

func (Rule_AssignStrategy) Type() protoreflect.EnumType {
	return &file_header_proto_enumTypes[15]
}

func (x Rule_AssignStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Rule_AssignStrategy.Descriptor instead.
func (Rule_AssignStrategy) EnumDescriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{76, 0}
}

type ConversationMember_State int32

const (
	ConversationMember_active     ConversationMember_State = 0
	ConversationMember_left       ConversationMember_State = 1
	ConversationMember_observer   ConversationMember_State = 2 // assigned
	ConversationMember_terminated ConversationMember_State = 3 // bot only
)

// Enum value maps for ConversationMember_State.
var (
	ConversationMember_State_name = map[int32]string{
		0: "active",
		1: "left",
		2: "observer",
		3: "terminated",
	}
	ConversationMember_State_value = map[string]int32{
		"active":     0,
		"left":       1,
		"observer":   2,
		"terminated": 3,
	}
)

func (x ConversationMember_State) Enum() *ConversationMember_State {
	p := new(ConversationMember_State)
	*p = x
	return p
}

func (x ConversationMember_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConversationMember_State) Descriptor() protoreflect.EnumDescriptor {
	return file_header_proto_enumTypes[16].Descriptor()
}

func (ConversationMember_State) Type() protoreflect.EnumType {
	return &file_header_proto_enumTypes[16]
}

func (x ConversationMember_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConversationMember_State.Descriptor instead.
func (ConversationMember_State) EnumDescriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{82, 0}
}

type MessagePong_Type int32

const (
	MessagePong_n            MessagePong_Type = 0
	MessagePong_ack          MessagePong_Type = 1
	MessagePong_seen         MessagePong_Type = 2
	MessagePong_receive      MessagePong_Type = 3 // deliverd to client machine
	MessagePong_delete       MessagePong_Type = 4
	MessagePong_like         MessagePong_Type = 5
	MessagePong_love         MessagePong_Type = 6
	MessagePong_haha         MessagePong_Type = 7
	MessagePong_wow          MessagePong_Type = 8
	MessagePong_sad          MessagePong_Type = 9
	MessagePong_angry        MessagePong_Type = 10
	MessagePong_remove_like  MessagePong_Type = 11
	MessagePong_remove_love  MessagePong_Type = 12
	MessagePong_remove_wow   MessagePong_Type = 13
	MessagePong_remove_haha  MessagePong_Type = 14
	MessagePong_remove_sad   MessagePong_Type = 15
	MessagePong_remove_angry MessagePong_Type = 16
	MessagePong_hide         MessagePong_Type = 17
	MessagePong_remove_hide  MessagePong_Type = 18
	MessagePong_open         MessagePong_Type = 19 // email opened
	MessagePong_unseen       MessagePong_Type = 20
)

// Enum value maps for MessagePong_Type.
var (
	MessagePong_Type_name = map[int32]string{
		0:  "n",
		1:  "ack",
		2:  "seen",
		3:  "receive",
		4:  "delete",
		5:  "like",
		6:  "love",
		7:  "haha",
		8:  "wow",
		9:  "sad",
		10: "angry",
		11: "remove_like",
		12: "remove_love",
		13: "remove_wow",
		14: "remove_haha",
		15: "remove_sad",
		16: "remove_angry",
		17: "hide",
		18: "remove_hide",
		19: "open",
		20: "unseen",
	}
	MessagePong_Type_value = map[string]int32{
		"n":            0,
		"ack":          1,
		"seen":         2,
		"receive":      3,
		"delete":       4,
		"like":         5,
		"love":         6,
		"haha":         7,
		"wow":          8,
		"sad":          9,
		"angry":        10,
		"remove_like":  11,
		"remove_love":  12,
		"remove_wow":   13,
		"remove_haha":  14,
		"remove_sad":   15,
		"remove_angry": 16,
		"hide":         17,
		"remove_hide":  18,
		"open":         19,
		"unseen":       20,
	}
)

func (x MessagePong_Type) Enum() *MessagePong_Type {
	p := new(MessagePong_Type)
	*p = x
	return p
}

func (x MessagePong_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessagePong_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_header_proto_enumTypes[17].Descriptor()
}

func (MessagePong_Type) Type() protoreflect.EnumType {
	return &file_header_proto_enumTypes[17]
}

func (x MessagePong_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessagePong_Type.Descriptor instead.
func (MessagePong_Type) EnumDescriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{92, 0}
}

type MessageButton_ButtonType int32

const (
	MessageButton_unknown                          MessageButton_ButtonType = 0
	MessageButton_url_button                       MessageButton_ButtonType = 2
	MessageButton_postback_button                  MessageButton_ButtonType = 3
	MessageButton_call_button                      MessageButton_ButtonType = 5
	MessageButton_widget_ask_desktop_notify_button MessageButton_ButtonType = 6
	MessageButton_widget_ask_contact_info_button   MessageButton_ButtonType = 7
)

// Enum value maps for MessageButton_ButtonType.
var (
	MessageButton_ButtonType_name = map[int32]string{
		0: "unknown",
		2: "url_button",
		3: "postback_button",
		5: "call_button",
		6: "widget_ask_desktop_notify_button",
		7: "widget_ask_contact_info_button",
	}
	MessageButton_ButtonType_value = map[string]int32{
		"unknown":                          0,
		"url_button":                       2,
		"postback_button":                  3,
		"call_button":                      5,
		"widget_ask_desktop_notify_button": 6,
		"widget_ask_contact_info_button":   7,
	}
)

func (x MessageButton_ButtonType) Enum() *MessageButton_ButtonType {
	p := new(MessageButton_ButtonType)
	*p = x
	return p
}

func (x MessageButton_ButtonType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageButton_ButtonType) Descriptor() protoreflect.EnumDescriptor {
	return file_header_proto_enumTypes[18].Descriptor()
}

func (MessageButton_ButtonType) Type() protoreflect.EnumType {
	return &file_header_proto_enumTypes[18]
}

func (x MessageButton_ButtonType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageButton_ButtonType.Descriptor instead.
func (MessageButton_ButtonType) EnumDescriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{93, 0}
}

type AskInfomation_InputType int32

const (
	AskInfomation_phone    AskInfomation_InputType = 0
	AskInfomation_email    AskInfomation_InputType = 1
	AskInfomation_text     AskInfomation_InputType = 2
	AskInfomation_password AskInfomation_InputType = 3
	AskInfomation_number   AskInfomation_InputType = 4
	AskInfomation_date     AskInfomation_InputType = 5
	AskInfomation_color    AskInfomation_InputType = 6
	AskInfomation_location AskInfomation_InputType = 7
	AskInfomation_time     AskInfomation_InputType = 8
	AskInfomation_url      AskInfomation_InputType = 9
)

// Enum value maps for AskInfomation_InputType.
var (
	AskInfomation_InputType_name = map[int32]string{
		0: "phone",
		1: "email",
		2: "text",
		3: "password",
		4: "number",
		5: "date",
		6: "color",
		7: "location",
		8: "time",
		9: "url",
	}
	AskInfomation_InputType_value = map[string]int32{
		"phone":    0,
		"email":    1,
		"text":     2,
		"password": 3,
		"number":   4,
		"date":     5,
		"color":    6,
		"location": 7,
		"time":     8,
		"url":      9,
	}
)

func (x AskInfomation_InputType) Enum() *AskInfomation_InputType {
	p := new(AskInfomation_InputType)
	*p = x
	return p
}

func (x AskInfomation_InputType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AskInfomation_InputType) Descriptor() protoreflect.EnumDescriptor {
	return file_header_proto_enumTypes[19].Descriptor()
}

func (AskInfomation_InputType) Type() protoreflect.EnumType {
	return &file_header_proto_enumTypes[19]
}

func (x AskInfomation_InputType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AskInfomation_InputType.Descriptor instead.
func (AskInfomation_InputType) EnumDescriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{95, 0}
}

type MessageFormField_InputType int32

const (
	MessageFormField_text     MessageFormField_InputType = 0
	MessageFormField_datetime MessageFormField_InputType = 1
	MessageFormField_list     MessageFormField_InputType = 2
	MessageFormField_number   MessageFormField_InputType = 3
	MessageFormField_boolean  MessageFormField_InputType = 4
)

// Enum value maps for MessageFormField_InputType.
var (
	MessageFormField_InputType_name = map[int32]string{
		0: "text",
		1: "datetime",
		2: "list",
		3: "number",
		4: "boolean",
	}
	MessageFormField_InputType_value = map[string]int32{
		"text":     0,
		"datetime": 1,
		"list":     2,
		"number":   3,
		"boolean":  4,
	}
)

func (x MessageFormField_InputType) Enum() *MessageFormField_InputType {
	p := new(MessageFormField_InputType)
	*p = x
	return p
}

func (x MessageFormField_InputType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageFormField_InputType) Descriptor() protoreflect.EnumDescriptor {
	return file_header_proto_enumTypes[20].Descriptor()
}

func (MessageFormField_InputType) Type() protoreflect.EnumType {
	return &file_header_proto_enumTypes[20]
}

func (x MessageFormField_InputType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageFormField_InputType.Descriptor instead.
func (MessageFormField_InputType) EnumDescriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{101, 0}
}

type Integration_State int32

const (
	Integration_activated Integration_State = 0 // activeated and insync
	Integration_pending   Integration_State = 1
	Integration_failed    Integration_State = 2
	Integration_deleted   Integration_State = 3
)

// Enum value maps for Integration_State.
var (
	Integration_State_name = map[int32]string{
		0: "activated",
		1: "pending",
		2: "failed",
		3: "deleted",
	}
	Integration_State_value = map[string]int32{
		"activated": 0,
		"pending":   1,
		"failed":    2,
		"deleted":   3,
	}
)

func (x Integration_State) Enum() *Integration_State {
	p := new(Integration_State)
	*p = x
	return p
}

func (x Integration_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Integration_State) Descriptor() protoreflect.EnumDescriptor {
	return file_header_proto_enumTypes[21].Descriptor()
}

func (Integration_State) Type() protoreflect.EnumType {
	return &file_header_proto_enumTypes[21]
}

func (x Integration_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Integration_State.Descriptor instead.
func (Integration_State) EnumDescriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{111, 0}
}

type BotCondition_Source int32

const (
	BotCondition_direct     BotCondition_Source = 0
	BotCondition_google_ads BotCondition_Source = 1
	BotCondition_organic    BotCondition_Source = 2
)

// Enum value maps for BotCondition_Source.
var (
	BotCondition_Source_name = map[int32]string{
		0: "direct",
		1: "google_ads",
		2: "organic",
	}
	BotCondition_Source_value = map[string]int32{
		"direct":     0,
		"google_ads": 1,
		"organic":    2,
	}
)

func (x BotCondition_Source) Enum() *BotCondition_Source {
	p := new(BotCondition_Source)
	*p = x
	return p
}

func (x BotCondition_Source) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BotCondition_Source) Descriptor() protoreflect.EnumDescriptor {
	return file_header_proto_enumTypes[22].Descriptor()
}

func (BotCondition_Source) Type() protoreflect.EnumType {
	return &file_header_proto_enumTypes[22]
}

func (x BotCondition_Source) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BotCondition_Source.Descriptor instead.
func (BotCondition_Source) EnumDescriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{119, 0}
}

type BotCondition_DeviveType int32

const (
	BotCondition_desktop BotCondition_DeviveType = 0
	BotCondition_mobile  BotCondition_DeviveType = 1
	BotCondition_tablet  BotCondition_DeviveType = 2
)

// Enum value maps for BotCondition_DeviveType.
var (
	BotCondition_DeviveType_name = map[int32]string{
		0: "desktop",
		1: "mobile",
		2: "tablet",
	}
	BotCondition_DeviveType_value = map[string]int32{
		"desktop": 0,
		"mobile":  1,
		"tablet":  2,
	}
)

func (x BotCondition_DeviveType) Enum() *BotCondition_DeviveType {
	p := new(BotCondition_DeviveType)
	*p = x
	return p
}

func (x BotCondition_DeviveType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BotCondition_DeviveType) Descriptor() protoreflect.EnumDescriptor {
	return file_header_proto_enumTypes[23].Descriptor()
}

func (BotCondition_DeviveType) Type() protoreflect.EnumType {
	return &file_header_proto_enumTypes[23]
}

func (x BotCondition_DeviveType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BotCondition_DeviveType.Descriptor instead.
func (BotCondition_DeviveType) EnumDescriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{119, 1}
}

type BotCondition_Browser int32

const (
	BotCondition_all     BotCondition_Browser = 0
	BotCondition_chrome  BotCondition_Browser = 1
	BotCondition_firefox BotCondition_Browser = 2
	BotCondition_edge    BotCondition_Browser = 3
	BotCondition_ie      BotCondition_Browser = 4
	BotCondition_safari  BotCondition_Browser = 5
	BotCondition_other   BotCondition_Browser = 6
)

// Enum value maps for BotCondition_Browser.
var (
	BotCondition_Browser_name = map[int32]string{
		0: "all",
		1: "chrome",
		2: "firefox",
		3: "edge",
		4: "ie",
		5: "safari",
		6: "other",
	}
	BotCondition_Browser_value = map[string]int32{
		"all":     0,
		"chrome":  1,
		"firefox": 2,
		"edge":    3,
		"ie":      4,
		"safari":  5,
		"other":   6,
	}
)

func (x BotCondition_Browser) Enum() *BotCondition_Browser {
	p := new(BotCondition_Browser)
	*p = x
	return p
}

func (x BotCondition_Browser) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BotCondition_Browser) Descriptor() protoreflect.EnumDescriptor {
	return file_header_proto_enumTypes[24].Descriptor()
}

func (BotCondition_Browser) Type() protoreflect.EnumType {
	return &file_header_proto_enumTypes[24]
}

func (x BotCondition_Browser) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BotCondition_Browser.Descriptor instead.
func (BotCondition_Browser) EnumDescriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{119, 2}
}

type WidgetHeader_HeaderLayout int32

const (
	WidgetHeader_team   WidgetHeader_HeaderLayout = 0
	WidgetHeader_social WidgetHeader_HeaderLayout = 1
)

// Enum value maps for WidgetHeader_HeaderLayout.
var (
	WidgetHeader_HeaderLayout_name = map[int32]string{
		0: "team",
		1: "social",
	}
	WidgetHeader_HeaderLayout_value = map[string]int32{
		"team":   0,
		"social": 1,
	}
)

func (x WidgetHeader_HeaderLayout) Enum() *WidgetHeader_HeaderLayout {
	p := new(WidgetHeader_HeaderLayout)
	*p = x
	return p
}

func (x WidgetHeader_HeaderLayout) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WidgetHeader_HeaderLayout) Descriptor() protoreflect.EnumDescriptor {
	return file_header_proto_enumTypes[25].Descriptor()
}

func (WidgetHeader_HeaderLayout) Type() protoreflect.EnumType {
	return &file_header_proto_enumTypes[25]
}

func (x WidgetHeader_HeaderLayout) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WidgetHeader_HeaderLayout.Descriptor instead.
func (WidgetHeader_HeaderLayout) EnumDescriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{159, 0}
}

type WidgetSetting_WindowMode int32

const (
	WidgetSetting_mini WidgetSetting_WindowMode = 0
	WidgetSetting_full WidgetSetting_WindowMode = 1
)

// Enum value maps for WidgetSetting_WindowMode.
var (
	WidgetSetting_WindowMode_name = map[int32]string{
		0: "mini",
		1: "full",
	}
	WidgetSetting_WindowMode_value = map[string]int32{
		"mini": 0,
		"full": 1,
	}
)

func (x WidgetSetting_WindowMode) Enum() *WidgetSetting_WindowMode {
	p := new(WidgetSetting_WindowMode)
	*p = x
	return p
}

func (x WidgetSetting_WindowMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WidgetSetting_WindowMode) Descriptor() protoreflect.EnumDescriptor {
	return file_header_proto_enumTypes[26].Descriptor()
}

func (WidgetSetting_WindowMode) Type() protoreflect.EnumType {
	return &file_header_proto_enumTypes[26]
}

func (x WidgetSetting_WindowMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WidgetSetting_WindowMode.Descriptor instead.
func (WidgetSetting_WindowMode) EnumDescriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{160, 0}
}

type WidgetForm_When int32

const (
	WidgetForm_all_agents_offline    WidgetForm_When = 0
	WidgetForm_out_of_bussiness_hour WidgetForm_When = 1
)

// Enum value maps for WidgetForm_When.
var (
	WidgetForm_When_name = map[int32]string{
		0: "all_agents_offline",
		1: "out_of_bussiness_hour",
	}
	WidgetForm_When_value = map[string]int32{
		"all_agents_offline":    0,
		"out_of_bussiness_hour": 1,
	}
)

func (x WidgetForm_When) Enum() *WidgetForm_When {
	p := new(WidgetForm_When)
	*p = x
	return p
}

func (x WidgetForm_When) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WidgetForm_When) Descriptor() protoreflect.EnumDescriptor {
	return file_header_proto_enumTypes[27].Descriptor()
}

func (WidgetForm_When) Type() protoreflect.EnumType {
	return &file_header_proto_enumTypes[27]
}

func (x WidgetForm_When) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WidgetForm_When.Descriptor instead.
func (WidgetForm_When) EnumDescriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{163, 0}
}

type WidgetChatButton_ButtonPosition int32

const (
	WidgetChatButton_left  WidgetChatButton_ButtonPosition = 0
	WidgetChatButton_right WidgetChatButton_ButtonPosition = 1
)

// Enum value maps for WidgetChatButton_ButtonPosition.
var (
	WidgetChatButton_ButtonPosition_name = map[int32]string{
		0: "left",
		1: "right",
	}
	WidgetChatButton_ButtonPosition_value = map[string]int32{
		"left":  0,
		"right": 1,
	}
)

func (x WidgetChatButton_ButtonPosition) Enum() *WidgetChatButton_ButtonPosition {
	p := new(WidgetChatButton_ButtonPosition)
	*p = x
	return p
}

func (x WidgetChatButton_ButtonPosition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WidgetChatButton_ButtonPosition) Descriptor() protoreflect.EnumDescriptor {
	return file_header_proto_enumTypes[28].Descriptor()
}

func (WidgetChatButton_ButtonPosition) Type() protoreflect.EnumType {
	return &file_header_proto_enumTypes[28]
}

func (x WidgetChatButton_ButtonPosition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WidgetChatButton_ButtonPosition.Descriptor instead.
func (WidgetChatButton_ButtonPosition) EnumDescriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{164, 0}
}

type UserCampaignStatus_Status int32

const (
	UserCampaignStatus_goal_reached UserCampaignStatus_Status = 0
	UserCampaignStatus_failed       UserCampaignStatus_Status = 1
)

// Enum value maps for UserCampaignStatus_Status.
var (
	UserCampaignStatus_Status_name = map[int32]string{
		0: "goal_reached",
		1: "failed",
	}
	UserCampaignStatus_Status_value = map[string]int32{
		"goal_reached": 0,
		"failed":       1,
	}
)

func (x UserCampaignStatus_Status) Enum() *UserCampaignStatus_Status {
	p := new(UserCampaignStatus_Status)
	*p = x
	return p
}

func (x UserCampaignStatus_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserCampaignStatus_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_header_proto_enumTypes[29].Descriptor()
}

func (UserCampaignStatus_Status) Type() protoreflect.EnumType {
	return &file_header_proto_enumTypes[29]
}

func (x UserCampaignStatus_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserCampaignStatus_Status.Descriptor instead.
func (UserCampaignStatus_Status) EnumDescriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{196, 0}
}

type ReportCampaignRequest_Range int32

const (
	ReportCampaignRequest_hour ReportCampaignRequest_Range = 0 // default
	ReportCampaignRequest_day  ReportCampaignRequest_Range = 1
)

// Enum value maps for ReportCampaignRequest_Range.
var (
	ReportCampaignRequest_Range_name = map[int32]string{
		0: "hour",
		1: "day",
	}
	ReportCampaignRequest_Range_value = map[string]int32{
		"hour": 0,
		"day":  1,
	}
)

func (x ReportCampaignRequest_Range) Enum() *ReportCampaignRequest_Range {
	p := new(ReportCampaignRequest_Range)
	*p = x
	return p
}

func (x ReportCampaignRequest_Range) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReportCampaignRequest_Range) Descriptor() protoreflect.EnumDescriptor {
	return file_header_proto_enumTypes[30].Descriptor()
}

func (ReportCampaignRequest_Range) Type() protoreflect.EnumType {
	return &file_header_proto_enumTypes[30]
}

func (x ReportCampaignRequest_Range) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReportCampaignRequest_Range.Descriptor instead.
func (ReportCampaignRequest_Range) EnumDescriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{202, 0}
}

type ReportWebPluginRequest_Range int32

const (
	ReportWebPluginRequest_hour ReportWebPluginRequest_Range = 0 // default
	ReportWebPluginRequest_day  ReportWebPluginRequest_Range = 1
)

// Enum value maps for ReportWebPluginRequest_Range.
var (
	ReportWebPluginRequest_Range_name = map[int32]string{
		0: "hour",
		1: "day",
	}
	ReportWebPluginRequest_Range_value = map[string]int32{
		"hour": 0,
		"day":  1,
	}
)

func (x ReportWebPluginRequest_Range) Enum() *ReportWebPluginRequest_Range {
	p := new(ReportWebPluginRequest_Range)
	*p = x
	return p
}

func (x ReportWebPluginRequest_Range) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReportWebPluginRequest_Range) Descriptor() protoreflect.EnumDescriptor {
	return file_header_proto_enumTypes[31].Descriptor()
}

func (ReportWebPluginRequest_Range) Type() protoreflect.EnumType {
	return &file_header_proto_enumTypes[31]
}

func (x ReportWebPluginRequest_Range) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReportWebPluginRequest_Range.Descriptor instead.
func (ReportWebPluginRequest_Range) EnumDescriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{205, 0}
}

type Client_Type int32

const (
	Client_app       Client_Type = 0
	Client_connector Client_Type = 1
	Client_bot       Client_Type = 3
)

// Enum value maps for Client_Type.
var (
	Client_Type_name = map[int32]string{
		0: "app",
		1: "connector",
		3: "bot",
	}
	Client_Type_value = map[string]int32{
		"app":       0,
		"connector": 1,
		"bot":       3,
	}
)

func (x Client_Type) Enum() *Client_Type {
	p := new(Client_Type)
	*p = x
	return p
}

func (x Client_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Client_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_header_proto_enumTypes[32].Descriptor()
}

func (Client_Type) Type() protoreflect.EnumType {
	return &file_header_proto_enumTypes[32]
}

func (x Client_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Client_Type.Descriptor instead.
func (Client_Type) EnumDescriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{215, 0}
}

type Webhook_State int32

const (
	Webhook_active        Webhook_State = 0
	Webhook_backoff_sleep Webhook_State = 1
	Webhook_dead          Webhook_State = 2
)

// Enum value maps for Webhook_State.
var (
	Webhook_State_name = map[int32]string{
		0: "active",
		1: "backoff_sleep",
		2: "dead",
	}
	Webhook_State_value = map[string]int32{
		"active":        0,
		"backoff_sleep": 1,
		"dead":          2,
	}
)

func (x Webhook_State) Enum() *Webhook_State {
	p := new(Webhook_State)
	*p = x
	return p
}

func (x Webhook_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Webhook_State) Descriptor() protoreflect.EnumDescriptor {
	return file_header_proto_enumTypes[33].Descriptor()
}

func (Webhook_State) Type() protoreflect.EnumType {
	return &file_header_proto_enumTypes[33]
}

func (x Webhook_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Webhook_State.Descriptor instead.
func (Webhook_State) EnumDescriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{218, 0}
}

type BotTerminated_TerminatedCode int32

const (
	BotTerminated_complete BotTerminated_TerminatedCode = 0
	BotTerminated_start    BotTerminated_TerminatedCode = 1
	BotTerminated_error    BotTerminated_TerminatedCode = 3
	BotTerminated_force    BotTerminated_TerminatedCode = 4
	BotTerminated_expire   BotTerminated_TerminatedCode = 5
	BotTerminated_self     BotTerminated_TerminatedCode = 6
)

// Enum value maps for BotTerminated_TerminatedCode.
var (
	BotTerminated_TerminatedCode_name = map[int32]string{
		0: "complete",
		1: "start",
		3: "error",
		4: "force",
		5: "expire",
		6: "self",
	}
	BotTerminated_TerminatedCode_value = map[string]int32{
		"complete": 0,
		"start":    1,
		"error":    3,
		"force":    4,
		"expire":   5,
		"self":     6,
	}
)

func (x BotTerminated_TerminatedCode) Enum() *BotTerminated_TerminatedCode {
	p := new(BotTerminated_TerminatedCode)
	*p = x
	return p
}

func (x BotTerminated_TerminatedCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BotTerminated_TerminatedCode) Descriptor() protoreflect.EnumDescriptor {
	return file_header_proto_enumTypes[34].Descriptor()
}

func (BotTerminated_TerminatedCode) Type() protoreflect.EnumType {
	return &file_header_proto_enumTypes[34]
}

func (x BotTerminated_TerminatedCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BotTerminated_TerminatedCode.Descriptor instead.
func (BotTerminated_TerminatedCode) EnumDescriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{231, 0}
}

type FbCommentSetting_HideComment int32

const (
	FbCommentSetting_dont_hide                               FbCommentSetting_HideComment = 0
	FbCommentSetting_all_comments                            FbCommentSetting_HideComment = 1
	FbCommentSetting_comments_contain_phone_email_or_address FbCommentSetting_HideComment = 2
)

// Enum value maps for FbCommentSetting_HideComment.
var (
	FbCommentSetting_HideComment_name = map[int32]string{
		0: "dont_hide",
		1: "all_comments",
		2: "comments_contain_phone_email_or_address",
	}
	FbCommentSetting_HideComment_value = map[string]int32{
		"dont_hide":    0,
		"all_comments": 1,
		"comments_contain_phone_email_or_address": 2,
	}
)

func (x FbCommentSetting_HideComment) Enum() *FbCommentSetting_HideComment {
	p := new(FbCommentSetting_HideComment)
	*p = x
	return p
}

func (x FbCommentSetting_HideComment) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FbCommentSetting_HideComment) Descriptor() protoreflect.EnumDescriptor {
	return file_header_proto_enumTypes[35].Descriptor()
}

func (FbCommentSetting_HideComment) Type() protoreflect.EnumType {
	return &file_header_proto_enumTypes[35]
}

func (x FbCommentSetting_HideComment) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FbCommentSetting_HideComment.Descriptor instead.
func (FbCommentSetting_HideComment) EnumDescriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{242, 0}
}

type Webpage_State int32

const (
	Webpage_up      Webpage_State = 0
	Webpage_down    Webpage_State = 2
	Webpage_missing Webpage_State = 3
)

// Enum value maps for Webpage_State.
var (
	Webpage_State_name = map[int32]string{
		0: "up",
		2: "down",
		3: "missing",
	}
	Webpage_State_value = map[string]int32{
		"up":      0,
		"down":    2,
		"missing": 3,
	}
)

func (x Webpage_State) Enum() *Webpage_State {
	p := new(Webpage_State)
	*p = x
	return p
}

func (x Webpage_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Webpage_State) Descriptor() protoreflect.EnumDescriptor {
	return file_header_proto_enumTypes[36].Descriptor()
}

func (Webpage_State) Type() protoreflect.EnumType {
	return &file_header_proto_enumTypes[36]
}

func (x Webpage_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Webpage_State.Descriptor instead.
func (Webpage_State) EnumDescriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{256, 0}
}

type AvailibilityReportRequest_Range int32

const (
	AvailibilityReportRequest_hour  AvailibilityReportRequest_Range = 0
	AvailibilityReportRequest_day   AvailibilityReportRequest_Range = 1
	AvailibilityReportRequest_month AvailibilityReportRequest_Range = 2
)

// Enum value maps for AvailibilityReportRequest_Range.
var (
	AvailibilityReportRequest_Range_name = map[int32]string{
		0: "hour",
		1: "day",
		2: "month",
	}
	AvailibilityReportRequest_Range_value = map[string]int32{
		"hour":  0,
		"day":   1,
		"month": 2,
	}
)

func (x AvailibilityReportRequest_Range) Enum() *AvailibilityReportRequest_Range {
	p := new(AvailibilityReportRequest_Range)
	*p = x
	return p
}

func (x AvailibilityReportRequest_Range) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AvailibilityReportRequest_Range) Descriptor() protoreflect.EnumDescriptor {
	return file_header_proto_enumTypes[37].Descriptor()
}

func (AvailibilityReportRequest_Range) Type() protoreflect.EnumType {
	return &file_header_proto_enumTypes[37]
}

func (x AvailibilityReportRequest_Range) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AvailibilityReportRequest_Range.Descriptor instead.
func (AvailibilityReportRequest_Range) EnumDescriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{277, 0}
}

type PaymentMethod_State int32

const (
	PaymentMethod_active PaymentMethod_State = 0
	PaymentMethod_failed PaymentMethod_State = 1
)

// Enum value maps for PaymentMethod_State.
var (
	PaymentMethod_State_name = map[int32]string{
		0: "active",
		1: "failed",
	}
	PaymentMethod_State_value = map[string]int32{
		"active": 0,
		"failed": 1,
	}
)

func (x PaymentMethod_State) Enum() *PaymentMethod_State {
	p := new(PaymentMethod_State)
	*p = x
	return p
}

func (x PaymentMethod_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentMethod_State) Descriptor() protoreflect.EnumDescriptor {
	return file_header_proto_enumTypes[38].Descriptor()
}

func (PaymentMethod_State) Type() protoreflect.EnumType {
	return &file_header_proto_enumTypes[38]
}

func (x PaymentMethod_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaymentMethod_State.Descriptor instead.
func (PaymentMethod_State) EnumDescriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{304, 0}
}

type PipelineRule_AssignType int32

const (
	PipelineRule_all_agents PipelineRule_AssignType = 0 // round robin all agent in account
	PipelineRule_agentgroup PipelineRule_AssignType = 2 // round robin all agnet in group
	PipelineRule_agents     PipelineRule_AssignType = 3 // round robin list of agent
)

// Enum value maps for PipelineRule_AssignType.
var (
	PipelineRule_AssignType_name = map[int32]string{
		0: "all_agents",
		2: "agentgroup",
		3: "agents",
	}
	PipelineRule_AssignType_value = map[string]int32{
		"all_agents": 0,
		"agentgroup": 2,
		"agents":     3,
	}
)

func (x PipelineRule_AssignType) Enum() *PipelineRule_AssignType {
	p := new(PipelineRule_AssignType)
	*p = x
	return p
}

func (x PipelineRule_AssignType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PipelineRule_AssignType) Descriptor() protoreflect.EnumDescriptor {
	return file_header_proto_enumTypes[39].Descriptor()
}

func (PipelineRule_AssignType) Type() protoreflect.EnumType {
	return &file_header_proto_enumTypes[39]
}

func (x PipelineRule_AssignType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PipelineRule_AssignType.Descriptor instead.
func (PipelineRule_AssignType) EnumDescriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{354, 0}
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{0}
}

func (x *Empty) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

type Id struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx           *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId     string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Id            string          `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Query         string          `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"` // (bot category: orders)
	Channel       string          `protobuf:"bytes,5,opt,name=channel,proto3" json:"channel,omitempty"`
	ChannelSource string          `protobuf:"bytes,6,opt,name=channel_source,json=channelSource,proto3" json:"channel_source,omitempty"`
	ProfileId     string          `protobuf:"bytes,7,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
}

func (x *Id) Reset() {
	*x = Id{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Id) ProtoMessage() {}

func (x *Id) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Id.ProtoReflect.Descriptor instead.
func (*Id) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{1}
}

func (x *Id) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Id) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Id) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Id) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *Id) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *Id) GetChannelSource() string {
	if x != nil {
		return x.ChannelSource
	}
	return ""
}

func (x *Id) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

type Ids struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx           *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId     string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Ids           []string        `protobuf:"bytes,3,rep,name=ids,proto3" json:"ids,omitempty"`
	Signatures    []string        `protobuf:"bytes,4,rep,name=signatures,proto3" json:"signatures,omitempty"`                                    // crc32 IEEEE
	LastModifieds []int64         `protobuf:"varint,5,rep,packed,name=last_modifieds,json=lastModifieds,proto3" json:"last_modifieds,omitempty"` // ms
	Anchor        string          `protobuf:"bytes,6,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Limit         int32           `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *Ids) Reset() {
	*x = Ids{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ids) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ids) ProtoMessage() {}

func (x *Ids) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ids.ProtoReflect.Descriptor instead.
func (*Ids) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{2}
}

func (x *Ids) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Ids) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Ids) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *Ids) GetSignatures() []string {
	if x != nil {
		return x.Signatures
	}
	return nil
}

func (x *Ids) GetLastModifieds() []int64 {
	if x != nil {
		return x.LastModifieds
	}
	return nil
}

func (x *Ids) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *Ids) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type Notifications struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx           *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId     string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Notifications []*Notification `protobuf:"bytes,4,rep,name=notifications,proto3" json:"notifications,omitempty"`
	Severity      int64           `protobuf:"varint,5,opt,name=severity,proto3" json:"severity,omitempty"` // 0: not important, 1 important;
	NextAnchor    string          `protobuf:"bytes,6,opt,name=next_anchor,json=nextAnchor,proto3" json:"next_anchor,omitempty"`
	LastSeen      int64           `protobuf:"varint,7,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`
	Unread        int64           `protobuf:"varint,8,opt,name=unread,proto3" json:"unread,omitempty"`
}

func (x *Notifications) Reset() {
	*x = Notifications{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notifications) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notifications) ProtoMessage() {}

func (x *Notifications) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notifications.ProtoReflect.Descriptor instead.
func (*Notifications) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{3}
}

func (x *Notifications) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Notifications) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Notifications) GetNotifications() []*Notification {
	if x != nil {
		return x.Notifications
	}
	return nil
}

func (x *Notifications) GetSeverity() int64 {
	if x != nil {
		return x.Severity
	}
	return 0
}

func (x *Notifications) GetNextAnchor() string {
	if x != nil {
		return x.NextAnchor
	}
	return ""
}

func (x *Notifications) GetLastSeen() int64 {
	if x != nil {
		return x.LastSeen
	}
	return 0
}

func (x *Notifications) GetUnread() int64 {
	if x != nil {
		return x.Unread
	}
	return 0
}

type Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx        *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId  string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	AgentId    string          `protobuf:"bytes,3,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Topic      string          `protobuf:"bytes,10,opt,name=topic,proto3" json:"topic,omitempty"`
	Type       string          `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`        // type
	Data       string          `protobuf:"bytes,8,opt,name=data,proto3" json:"data,omitempty"`        //json
	Created    int64           `protobuf:"varint,6,opt,name=created,proto3" json:"created,omitempty"` // ms
	IsRead     bool            `protobuf:"varint,9,opt,name=is_read,json=isRead,proto3" json:"is_read,omitempty"`
	IsInstant  bool            `protobuf:"varint,12,opt,name=is_instant,json=isInstant,proto3" json:"is_instant,omitempty"` // just display and disappear, no persit
	Severity   int64           `protobuf:"varint,13,opt,name=severity,proto3" json:"severity,omitempty"`                    // 0: not important, 1 important;
	Category   string          `protobuf:"bytes,14,opt,name=category,proto3" json:"category,omitempty"`                     // user, order
	Checkpoint int64           `protobuf:"varint,15,opt,name=checkpoint,proto3" json:"checkpoint,omitempty"`
}

func (x *Notification) Reset() {
	*x = Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notification) ProtoMessage() {}

func (x *Notification) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notification.ProtoReflect.Descriptor instead.
func (*Notification) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{4}
}

func (x *Notification) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Notification) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Notification) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *Notification) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *Notification) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Notification) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *Notification) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Notification) GetIsRead() bool {
	if x != nil {
		return x.IsRead
	}
	return false
}

func (x *Notification) GetIsInstant() bool {
	if x != nil {
		return x.IsInstant
	}
	return false
}

func (x *Notification) GetSeverity() int64 {
	if x != nil {
		return x.Severity
	}
	return 0
}

func (x *Notification) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Notification) GetCheckpoint() int64 {
	if x != nil {
		return x.Checkpoint
	}
	return 0
}

type ListNotiRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	AgentId   string          `protobuf:"bytes,3,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Limit     int32           `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Anchor    string          `protobuf:"bytes,5,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Category  string          `protobuf:"bytes,6,opt,name=category,proto3" json:"category,omitempty"`
}

func (x *ListNotiRequest) Reset() {
	*x = ListNotiRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNotiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNotiRequest) ProtoMessage() {}

func (x *ListNotiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNotiRequest.ProtoReflect.Descriptor instead.
func (*ListNotiRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{5}
}

func (x *ListNotiRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ListNotiRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ListNotiRequest) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *ListNotiRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListNotiRequest) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *ListNotiRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

type Attribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         string       `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	Modified    int64        `protobuf:"varint,8,opt,name=modified,proto3" json:"modified,omitempty"`
	ModifiedBy  string       `protobuf:"bytes,5,opt,name=modified_by,json=modifiedBy,proto3" json:"modified_by,omitempty"`
	Value       string       `protobuf:"bytes,9,opt,name=value,proto3" json:"value,omitempty"` // json encode primary value
	Text        string       `protobuf:"bytes,10,opt,name=text,proto3" json:"text,omitempty"`
	Number      float64      `protobuf:"fixed64,11,opt,name=number,proto3" json:"number,omitempty"`
	Boolean     bool         `protobuf:"varint,12,opt,name=boolean,proto3" json:"boolean,omitempty"`
	Datetime    string       `protobuf:"bytes,13,opt,name=datetime,proto3" json:"datetime,omitempty"`
	List        []string     `protobuf:"bytes,14,rep,name=list,proto3" json:"list,omitempty"` // remove
	Revisions   []*Attribute `protobuf:"bytes,15,rep,name=revisions,proto3" json:"revisions,omitempty"`
	OtherValues []string     `protobuf:"bytes,20,rep,name=other_values,json=otherValues,proto3" json:"other_values,omitempty"`
	Type        string       `protobuf:"bytes,16,opt,name=type,proto3" json:"type,omitempty"`
	By          string       `protobuf:"bytes,17,opt,name=by,proto3" json:"by,omitempty"` // required
	Action      string       `protobuf:"bytes,18,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *Attribute) Reset() {
	*x = Attribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attribute) ProtoMessage() {}

func (x *Attribute) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attribute.ProtoReflect.Descriptor instead.
func (*Attribute) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{6}
}

func (x *Attribute) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Attribute) GetModified() int64 {
	if x != nil {
		return x.Modified
	}
	return 0
}

func (x *Attribute) GetModifiedBy() string {
	if x != nil {
		return x.ModifiedBy
	}
	return ""
}

func (x *Attribute) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Attribute) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Attribute) GetNumber() float64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *Attribute) GetBoolean() bool {
	if x != nil {
		return x.Boolean
	}
	return false
}

func (x *Attribute) GetDatetime() string {
	if x != nil {
		return x.Datetime
	}
	return ""
}

func (x *Attribute) GetList() []string {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *Attribute) GetRevisions() []*Attribute {
	if x != nil {
		return x.Revisions
	}
	return nil
}

func (x *Attribute) GetOtherValues() []string {
	if x != nil {
		return x.OtherValues
	}
	return nil
}

func (x *Attribute) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Attribute) GetBy() string {
	if x != nil {
		return x.By
	}
	return ""
}

func (x *Attribute) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// alias => user
// user => aliases
type UserAlias struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	UserId    string          `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Alias     string          `protobuf:"bytes,4,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (x *UserAlias) Reset() {
	*x = UserAlias{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAlias) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAlias) ProtoMessage() {}

func (x *UserAlias) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAlias.ProtoReflect.Descriptor instead.
func (*UserAlias) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{7}
}

func (x *UserAlias) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *UserAlias) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *UserAlias) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserAlias) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

type PhoneDevices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx          *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId    string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	PhoneDevices []*PhoneDevice  `protobuf:"bytes,3,rep,name=phone_devices,json=phoneDevices,proto3" json:"phone_devices,omitempty"`
}

func (x *PhoneDevices) Reset() {
	*x = PhoneDevices{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhoneDevices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhoneDevices) ProtoMessage() {}

func (x *PhoneDevices) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhoneDevices.ProtoReflect.Descriptor instead.
func (*PhoneDevices) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{8}
}

func (x *PhoneDevices) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *PhoneDevices) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *PhoneDevices) GetPhoneDevices() []*PhoneDevice {
	if x != nil {
		return x.PhoneDevices
	}
	return nil
}

type PhoneDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Id        string          `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`             // auto-generated, sip user name
	Password  string          `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"` // auto-generated
	Host      string          `protobuf:"bytes,5,opt,name=host,proto3" json:"host,omitempty"`         // host or ip of the phone, auto-fill
	Port      int64           `protobuf:"varint,6,opt,name=port,proto3" json:"port,omitempty"`
	// phone calls to (from) this device will be considered being dialed to owner and (by) those agents
	BindToAgents []string `protobuf:"bytes,10,rep,name=bind_to_agents,json=bindToAgents,proto3" json:"bind_to_agents,omitempty"`
	// device type, could be: hard_phone, soft_phone
	// Hard phones are physical devices, wirely connected to the LAN network
	// Soft phones are simulation devices (software), running like an web app or desktop app
	Type                  string `protobuf:"bytes,11,opt,name=type,proto3" json:"type,omitempty"`
	Name                  string `protobuf:"bytes,12,opt,name=name,proto3" json:"name,omitempty"`
	Description           string `protobuf:"bytes,13,opt,name=description,proto3" json:"description,omitempty"`
	Status                string `protobuf:"bytes,14,opt,name=status,proto3" json:"status,omitempty"` // unknown, not_inuse, inuse, busy, invalid, unavailable, ringing, ringinuse, onhold
	LastStatusUpdated     int64  `protobuf:"varint,15,opt,name=last_status_updated,json=lastStatusUpdated,proto3" json:"last_status_updated,omitempty"`
	Driver                string `protobuf:"bytes,16,opt,name=driver,proto3" json:"driver,omitempty"` // subiz stringee
	Disabled              int64  `protobuf:"varint,17,opt,name=disabled,proto3" json:"disabled,omitempty"`
	Extension             int64  `protobuf:"varint,18,opt,name=extension,proto3" json:"extension,omitempty"` // auto-increasement 5001, 5002, 5003
	Updated               int64  `protobuf:"varint,30,opt,name=updated,proto3" json:"updated,omitempty"`
	UpdatedBy             string `protobuf:"bytes,31,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	Created               int64  `protobuf:"varint,32,opt,name=created,proto3" json:"created,omitempty"`
	CreatedBy             string `protobuf:"bytes,33,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	DefaultOutboundNumber string `protobuf:"bytes,34,opt,name=default_outbound_number,json=defaultOutboundNumber,proto3" json:"default_outbound_number,omitempty"`
}

func (x *PhoneDevice) Reset() {
	*x = PhoneDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhoneDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhoneDevice) ProtoMessage() {}

func (x *PhoneDevice) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhoneDevice.ProtoReflect.Descriptor instead.
func (*PhoneDevice) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{9}
}

func (x *PhoneDevice) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *PhoneDevice) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *PhoneDevice) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PhoneDevice) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *PhoneDevice) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *PhoneDevice) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *PhoneDevice) GetBindToAgents() []string {
	if x != nil {
		return x.BindToAgents
	}
	return nil
}

func (x *PhoneDevice) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PhoneDevice) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PhoneDevice) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PhoneDevice) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PhoneDevice) GetLastStatusUpdated() int64 {
	if x != nil {
		return x.LastStatusUpdated
	}
	return 0
}

func (x *PhoneDevice) GetDriver() string {
	if x != nil {
		return x.Driver
	}
	return ""
}

func (x *PhoneDevice) GetDisabled() int64 {
	if x != nil {
		return x.Disabled
	}
	return 0
}

func (x *PhoneDevice) GetExtension() int64 {
	if x != nil {
		return x.Extension
	}
	return 0
}

func (x *PhoneDevice) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *PhoneDevice) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *PhoneDevice) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *PhoneDevice) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *PhoneDevice) GetDefaultOutboundNumber() string {
	if x != nil {
		return x.DefaultOutboundNumber
	}
	return ""
}

type CallSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx          *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId    string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	CallSettings []*CallSetting  `protobuf:"bytes,3,rep,name=call_settings,json=callSettings,proto3" json:"call_settings,omitempty"`
}

func (x *CallSettings) Reset() {
	*x = CallSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallSettings) ProtoMessage() {}

func (x *CallSettings) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallSettings.ProtoReflect.Descriptor instead.
func (*CallSettings) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{10}
}

func (x *CallSettings) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *CallSettings) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CallSettings) GetCallSettings() []*CallSetting {
	if x != nil {
		return x.CallSettings
	}
	return nil
}

// Decide how incomming calls should be handled.
// Each account can only have one global call-setting but can have
// many scoped call-settings. Each call-setting should responsible
// for one or more phone numbers
type CallSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// 84364824444, 84364825555, 84364826666, ...
	// this field should be ignored for global setting
	// if the number of the incomming call does not match this number, fallback
	// to global setting to handle the call
	Number          string         `protobuf:"bytes,3,opt,name=number,proto3" json:"number,omitempty"`
	GreetingMessage *GreetingAudio `protobuf:"bytes,4,opt,name=greeting_message,json=greetingMessage,proto3" json:"greeting_message,omitempty"`
	MissedMessage   *GreetingAudio `protobuf:"bytes,5,opt,name=missed_message,json=missedMessage,proto3" json:"missed_message,omitempty"`
	// only agent in group can make outgoing calls
	RestrictedOutgingCall bool `protobuf:"varint,6,opt,name=restricted_outging_call,json=restrictedOutgingCall,proto3" json:"restricted_outging_call,omitempty"`
	// forward call
	ForwardTo string `protobuf:"bytes,7,opt,name=forward_to,json=forwardTo,proto3" json:"forward_to,omitempty"`
	// SECTION 1: holiday and business hour setting
	// this section decides what to do with incomming call after business hour
	// or in holiday
	EnableBusinessHour  bool           `protobuf:"varint,9,opt,name=enable_business_hour,json=enableBusinessHour,proto3" json:"enable_business_hour,omitempty"`
	BusinessHourMessage *GreetingAudio `protobuf:"bytes,10,opt,name=business_hour_message,json=businessHourMessage,proto3" json:"business_hour_message,omitempty"` // do this when no option is selected
	// SECTION 2: Phone menu (IVR) setting
	// design an automate menu to handle incomming call
	// this is optional, account can choose to disabled it.
	EnableMenu           bool                 `protobuf:"varint,11,opt,name=enable_menu,json=enableMenu,proto3" json:"enable_menu,omitempty"`
	MenuMessage          *GreetingAudio       `protobuf:"bytes,12,opt,name=menu_message,json=menuMessage,proto3" json:"menu_message,omitempty"`             // the audio plays while waiting for user to press keys
	MenuTimeoutSec       int64                `protobuf:"varint,14,opt,name=menu_timeout_sec,json=menuTimeoutSec,proto3" json:"menu_timeout_sec,omitempty"` // sec
	Options              []*CallRoutingAction `protobuf:"bytes,13,rep,name=options,proto3" json:"options,omitempty"`
	InvalidOptionMessage *GreetingAudio       `protobuf:"bytes,16,opt,name=invalid_option_message,json=invalidOptionMessage,proto3" json:"invalid_option_message,omitempty"` // url when typing into empty option
	MenuFallback         *CallRoutingAction   `protobuf:"bytes,15,opt,name=menu_fallback,json=menuFallback,proto3" json:"menu_fallback,omitempty"`                           // do this when no option is selected
	// SECTION 3: (required)
	// ring one or more agents (or device) to handle the call
	DefaultGroupId  string `protobuf:"bytes,21,opt,name=default_group_id,json=defaultGroupId,proto3" json:"default_group_id,omitempty"`
	EnableRecording bool   `protobuf:"varint,22,opt,name=enable_recording,json=enableRecording,proto3" json:"enable_recording,omitempty"`
	Updated         int64  `protobuf:"varint,30,opt,name=updated,proto3" json:"updated,omitempty"`
	UpdatedBy       string `protobuf:"bytes,31,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
}

func (x *CallSetting) Reset() {
	*x = CallSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallSetting) ProtoMessage() {}

func (x *CallSetting) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallSetting.ProtoReflect.Descriptor instead.
func (*CallSetting) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{11}
}

func (x *CallSetting) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *CallSetting) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CallSetting) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *CallSetting) GetGreetingMessage() *GreetingAudio {
	if x != nil {
		return x.GreetingMessage
	}
	return nil
}

func (x *CallSetting) GetMissedMessage() *GreetingAudio {
	if x != nil {
		return x.MissedMessage
	}
	return nil
}

func (x *CallSetting) GetRestrictedOutgingCall() bool {
	if x != nil {
		return x.RestrictedOutgingCall
	}
	return false
}

func (x *CallSetting) GetForwardTo() string {
	if x != nil {
		return x.ForwardTo
	}
	return ""
}

func (x *CallSetting) GetEnableBusinessHour() bool {
	if x != nil {
		return x.EnableBusinessHour
	}
	return false
}

func (x *CallSetting) GetBusinessHourMessage() *GreetingAudio {
	if x != nil {
		return x.BusinessHourMessage
	}
	return nil
}

func (x *CallSetting) GetEnableMenu() bool {
	if x != nil {
		return x.EnableMenu
	}
	return false
}

func (x *CallSetting) GetMenuMessage() *GreetingAudio {
	if x != nil {
		return x.MenuMessage
	}
	return nil
}

func (x *CallSetting) GetMenuTimeoutSec() int64 {
	if x != nil {
		return x.MenuTimeoutSec
	}
	return 0
}

func (x *CallSetting) GetOptions() []*CallRoutingAction {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *CallSetting) GetInvalidOptionMessage() *GreetingAudio {
	if x != nil {
		return x.InvalidOptionMessage
	}
	return nil
}

func (x *CallSetting) GetMenuFallback() *CallRoutingAction {
	if x != nil {
		return x.MenuFallback
	}
	return nil
}

func (x *CallSetting) GetDefaultGroupId() string {
	if x != nil {
		return x.DefaultGroupId
	}
	return ""
}

func (x *CallSetting) GetEnableRecording() bool {
	if x != nil {
		return x.EnableRecording
	}
	return false
}

func (x *CallSetting) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *CallSetting) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

type CallRoutingAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key          string         `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`       // 0, 1, 2, 3 ..., *
	Action       string         `protobuf:"bytes,5,opt,name=action,proto3" json:"action,omitempty"` // fallthrough, repeat, forward, ring, hangup
	ForwardTo    string         `protobuf:"bytes,10,opt,name=forward_to,json=forwardTo,proto3" json:"forward_to,omitempty"`
	RingGroup    string         `protobuf:"bytes,9,opt,name=ring_group,json=ringGroup,proto3" json:"ring_group,omitempty"`
	AudioMessage *GreetingAudio `protobuf:"bytes,11,opt,name=audio_message,json=audioMessage,proto3" json:"audio_message,omitempty"`
}

func (x *CallRoutingAction) Reset() {
	*x = CallRoutingAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallRoutingAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallRoutingAction) ProtoMessage() {}

func (x *CallRoutingAction) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallRoutingAction.ProtoReflect.Descriptor instead.
func (*CallRoutingAction) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{12}
}

func (x *CallRoutingAction) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *CallRoutingAction) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *CallRoutingAction) GetForwardTo() string {
	if x != nil {
		return x.ForwardTo
	}
	return ""
}

func (x *CallRoutingAction) GetRingGroup() string {
	if x != nil {
		return x.RingGroup
	}
	return ""
}

func (x *CallRoutingAction) GetAudioMessage() *GreetingAudio {
	if x != nil {
		return x.AudioMessage
	}
	return nil
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx        *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Id         string          `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	AccountId  string          `protobuf:"bytes,4,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Aliases    []string        `protobuf:"bytes,5,rep,name=aliases,proto3" json:"aliases,omitempty"`
	Attributes []*Attribute    `protobuf:"bytes,18,rep,name=attributes,proto3" json:"attributes,omitempty"`
	Session    *UserSession    `protobuf:"bytes,40,opt,name=session,proto3" json:"session,omitempty"` // deprecating
	LeadOwners []string        `protobuf:"bytes,41,rep,name=lead_owners,json=leadOwners,proto3" json:"lead_owners,omitempty"`
	Labels     []*UserLabel    `protobuf:"bytes,42,rep,name=labels,proto3" json:"labels,omitempty"`
	IsLead     bool            `protobuf:"varint,43,opt,name=is_lead,json=isLead,proto3" json:"is_lead,omitempty"`
	Type       string          `protobuf:"bytes,47,opt,name=type,proto3" json:"type,omitempty"` // empty = user, lead, customer
	// repeated ContactProfile contact_profiles = 48;
	PrimaryId          string   `protobuf:"bytes,49,opt,name=primary_id,json=primaryId,proto3" json:"primary_id,omitempty"`
	SecondaryIds       []string `protobuf:"bytes,50,rep,name=secondary_ids,json=secondaryIds,proto3" json:"secondary_ids,omitempty"`
	ProfileId          string   `protobuf:"bytes,52,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
	ChannelSource      string   `protobuf:"bytes,53,opt,name=channel_source,json=channelSource,proto3" json:"channel_source,omitempty"`
	Channel            string   `protobuf:"bytes,54,opt,name=channel,proto3" json:"channel,omitempty"`
	LastestContentView *Event   `protobuf:"bytes,55,opt,name=lastest_content_view,json=lastestContentView,proto3" json:"lastest_content_view,omitempty"` // readonly
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{13}
}

func (x *User) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *User) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *User) GetAliases() []string {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *User) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *User) GetSession() *UserSession {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *User) GetLeadOwners() []string {
	if x != nil {
		return x.LeadOwners
	}
	return nil
}

func (x *User) GetLabels() []*UserLabel {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *User) GetIsLead() bool {
	if x != nil {
		return x.IsLead
	}
	return false
}

func (x *User) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *User) GetPrimaryId() string {
	if x != nil {
		return x.PrimaryId
	}
	return ""
}

func (x *User) GetSecondaryIds() []string {
	if x != nil {
		return x.SecondaryIds
	}
	return nil
}

func (x *User) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

func (x *User) GetChannelSource() string {
	if x != nil {
		return x.ChannelSource
	}
	return ""
}

func (x *User) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *User) GetLastestContentView() *Event {
	if x != nil {
		return x.LastestContentView
	}
	return nil
}

// lookup contact point to user_id
// contact point => chain => conversation
// ((accid, user_id), channel.source.touchpoint_id, touchpoint_id, channel, source)
// (accid, channel, source, touchpoint_id, user_idhu)
type Touchpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx          *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId    string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Id           string          `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`           // psid, igsid, zalo id or comment id
	Channel      string          `protobuf:"bytes,5,opt,name=channel,proto3" json:"channel,omitempty"` // facebook , facebook_comment, instagram, instagram_comment, call, sms
	Fields       []*KV           `protobuf:"bytes,8,rep,name=fields,proto3" json:"fields,omitempty"`
	LinkedPageId string          `protobuf:"bytes,24,opt,name=linked_page_id,json=linkedPageId,proto3" json:"linked_page_id,omitempty"` // instagram
	Source       string          `protobuf:"bytes,23,opt,name=source,proto3" json:"source,omitempty"`                                   // page id, zaloa id
	PostId       string          `protobuf:"bytes,25,opt,name=post_id,json=postId,proto3" json:"post_id,omitempty"`                     // for facebook or instagram
}

func (x *Touchpoint) Reset() {
	*x = Touchpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Touchpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Touchpoint) ProtoMessage() {}

func (x *Touchpoint) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Touchpoint.ProtoReflect.Descriptor instead.
func (*Touchpoint) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{14}
}

func (x *Touchpoint) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Touchpoint) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Touchpoint) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Touchpoint) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *Touchpoint) GetFields() []*KV {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Touchpoint) GetLinkedPageId() string {
	if x != nil {
		return x.LinkedPageId
	}
	return ""
}

func (x *Touchpoint) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Touchpoint) GetPostId() string {
	if x != nil {
		return x.PostId
	}
	return ""
}

type ShippingAddresses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx               *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId         string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	UserId            string          `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ShippingAddresses []*Address      `protobuf:"bytes,4,rep,name=shipping_addresses,json=shippingAddresses,proto3" json:"shipping_addresses,omitempty"`
}

func (x *ShippingAddresses) Reset() {
	*x = ShippingAddresses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShippingAddresses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShippingAddresses) ProtoMessage() {}

func (x *ShippingAddresses) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShippingAddresses.ProtoReflect.Descriptor instead.
func (*ShippingAddresses) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{15}
}

func (x *ShippingAddresses) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ShippingAddresses) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ShippingAddresses) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ShippingAddresses) GetShippingAddresses() []*Address {
	if x != nil {
		return x.ShippingAddresses
	}
	return nil
}

type UserLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"` // id
	By    string `protobuf:"bytes,3,opt,name=by,proto3" json:"by,omitempty"`
	At    int64  `protobuf:"varint,5,opt,name=at,proto3" json:"at,omitempty"` // ms
}

func (x *UserLabel) Reset() {
	*x = UserLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLabel) ProtoMessage() {}

func (x *UserLabel) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLabel.ProtoReflect.Descriptor instead.
func (*UserLabel) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{16}
}

func (x *UserLabel) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *UserLabel) GetBy() string {
	if x != nil {
		return x.By
	}
	return ""
}

func (x *UserLabel) GetAt() int64 {
	if x != nil {
		return x.At
	}
	return 0
}

type Label struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx         *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId   string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Id          string          `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"` // user generated // key
	Title       string          `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Description string          `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	CreatedBy   string          `protobuf:"bytes,8,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	Created     int64           `protobuf:"varint,9,opt,name=created,proto3" json:"created,omitempty"` // ms
	Color       string          `protobuf:"bytes,10,opt,name=color,proto3" json:"color,omitempty"`
	UpdatedBy   string          `protobuf:"bytes,12,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	Updated     int64           `protobuf:"varint,11,opt,name=updated,proto3" json:"updated,omitempty"`
	Disabled    bool            `protobuf:"varint,15,opt,name=disabled,proto3" json:"disabled,omitempty"`
	Deleted     int64           `protobuf:"varint,16,opt,name=deleted,proto3" json:"deleted,omitempty"`
}

func (x *Label) Reset() {
	*x = Label{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Label) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Label) ProtoMessage() {}

func (x *Label) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Label.ProtoReflect.Descriptor instead.
func (*Label) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{17}
}

func (x *Label) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Label) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Label) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Label) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Label) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Label) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *Label) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Label) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *Label) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *Label) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *Label) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *Label) GetDeleted() int64 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

type Labels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Labels    []*Label        `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *Labels) Reset() {
	*x = Labels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Labels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Labels) ProtoMessage() {}

func (x *Labels) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Labels.ProtoReflect.Descriptor instead.
func (*Labels) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{18}
}

func (x *Labels) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Labels) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Labels) GetLabels() []*Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

type Users struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users     []*User  `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	Errors    []*Error `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	Signature string   `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	Hit       int64    `protobuf:"varint,4,opt,name=hit,proto3" json:"hit,omitempty"`
	Total     int64    `protobuf:"varint,5,opt,name=total,proto3" json:"total,omitempty"`
	EndOffset int32    `protobuf:"varint,7,opt,name=end_offset,json=endOffset,proto3" json:"end_offset,omitempty"`
}

func (x *Users) Reset() {
	*x = Users{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Users) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Users) ProtoMessage() {}

func (x *Users) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Users.ProtoReflect.Descriptor instead.
func (*Users) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{19}
}

func (x *Users) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *Users) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *Users) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *Users) GetHit() int64 {
	if x != nil {
		return x.Hit
	}
	return 0
}

func (x *Users) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Users) GetEndOffset() int32 {
	if x != nil {
		return x.EndOffset
	}
	return 0
}

type SessionCampaign struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Source  string `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	Medium  string `protobuf:"bytes,4,opt,name=medium,proto3" json:"medium,omitempty"`
	Term    string `protobuf:"bytes,5,opt,name=term,proto3" json:"term,omitempty"`
	Content string `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *SessionCampaign) Reset() {
	*x = SessionCampaign{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionCampaign) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionCampaign) ProtoMessage() {}

func (x *SessionCampaign) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionCampaign.ProtoReflect.Descriptor instead.
func (*SessionCampaign) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{20}
}

func (x *SessionCampaign) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SessionCampaign) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *SessionCampaign) GetMedium() string {
	if x != nil {
		return x.Medium
	}
	return ""
}

func (x *SessionCampaign) GetTerm() string {
	if x != nil {
		return x.Term
	}
	return ""
}

func (x *SessionCampaign) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

// create user request
type CreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeId string `protobuf:"bytes,3,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	Answer      string `protobuf:"bytes,4,opt,name=answer,proto3" json:"answer,omitempty"`
}

func (x *CreateRequest) Reset() {
	*x = CreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRequest) ProtoMessage() {}

func (x *CreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRequest.ProtoReflect.Descriptor instead.
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{21}
}

func (x *CreateRequest) GetChallengeId() string {
	if x != nil {
		return x.ChallengeId
	}
	return ""
}

func (x *CreateRequest) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

type AttributeDefinitionListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value
	Value     string      `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"` // cannot be changed
	I18NLabel *I18NString `protobuf:"bytes,7,opt,name=i18n_label,json=i18nLabel,proto3" json:"i18n_label,omitempty"`
	Label     string      `protobuf:"bytes,8,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *AttributeDefinitionListItem) Reset() {
	*x = AttributeDefinitionListItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributeDefinitionListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeDefinitionListItem) ProtoMessage() {}

func (x *AttributeDefinitionListItem) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributeDefinitionListItem.ProtoReflect.Descriptor instead.
func (*AttributeDefinitionListItem) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{22}
}

func (x *AttributeDefinitionListItem) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *AttributeDefinitionListItem) GetI18NLabel() *I18NString {
	if x != nil {
		return x.I18NLabel
	}
	return nil
}

func (x *AttributeDefinitionListItem) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type AttributeDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx          *common.Context                `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId    string                         `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Name         string                         `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"` // will be removed
	Description  string                         `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	I18NLabel    *I18NString                    `protobuf:"bytes,16,opt,name=i18n_label,json=i18nLabel,proto3" json:"i18n_label,omitempty"` //
	Label        string                         `protobuf:"bytes,21,opt,name=label,proto3" json:"label,omitempty"`
	Type         string                         `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	MultipleLine bool                           `protobuf:"varint,17,opt,name=multiple_line,json=multipleLine,proto3" json:"multiple_line,omitempty"`
	Select       string                         `protobuf:"bytes,18,opt,name=select,proto3" json:"select,omitempty"` // radio, checkbox, dropdown
	IsImage      bool                           `protobuf:"varint,28,opt,name=is_image,json=isImage,proto3" json:"is_image,omitempty"`
	IsDateOnly   bool                           `protobuf:"varint,29,opt,name=is_date_only,json=isDateOnly,proto3" json:"is_date_only,omitempty"`
	Items        []*AttributeDefinitionListItem `protobuf:"bytes,19,rep,name=items,proto3" json:"items,omitempty"` // for select
	DefaultValue string                         `protobuf:"bytes,20,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	// repeated string options = 6;
	ListItems []string `protobuf:"bytes,6,rep,name=list_items,json=listItems,proto3" json:"list_items,omitempty"` // remove
	Key       string   `protobuf:"bytes,7,opt,name=key,proto3" json:"key,omitempty"`
	Kind      string   `protobuf:"bytes,8,opt,name=kind,proto3" json:"kind,omitempty"` // will be removed
	Updated   int64    `protobuf:"varint,9,opt,name=updated,proto3" json:"updated,omitempty"`
	UpdatedBy string   `protobuf:"bytes,11,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	Validator string   `protobuf:"bytes,10,opt,name=validator,proto3" json:"validator,omitempty"` // email, name, decimal
	// bool allow_multiples = 14; //
	AllowUserEdit bool   `protobuf:"varint,15,opt,name=allow_user_edit,json=allowUserEdit,proto3" json:"allow_user_edit,omitempty"`
	IsSystem      bool   `protobuf:"varint,22,opt,name=is_system,json=isSystem,proto3" json:"is_system,omitempty"`
	IsReadonly    bool   `protobuf:"varint,23,opt,name=is_readonly,json=isReadonly,proto3" json:"is_readonly,omitempty"`
	Created       int64  `protobuf:"varint,24,opt,name=created,proto3" json:"created,omitempty"`
	CreatedBy     string `protobuf:"bytes,25,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	Archived      int64  `protobuf:"varint,26,opt,name=archived,proto3" json:"archived,omitempty"`
	Usage         int64  `protobuf:"varint,27,opt,name=usage,proto3" json:"usage,omitempty"` // number of user has this attribute
}

func (x *AttributeDefinition) Reset() {
	*x = AttributeDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributeDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeDefinition) ProtoMessage() {}

func (x *AttributeDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributeDefinition.ProtoReflect.Descriptor instead.
func (*AttributeDefinition) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{23}
}

func (x *AttributeDefinition) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *AttributeDefinition) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AttributeDefinition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AttributeDefinition) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AttributeDefinition) GetI18NLabel() *I18NString {
	if x != nil {
		return x.I18NLabel
	}
	return nil
}

func (x *AttributeDefinition) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *AttributeDefinition) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AttributeDefinition) GetMultipleLine() bool {
	if x != nil {
		return x.MultipleLine
	}
	return false
}

func (x *AttributeDefinition) GetSelect() string {
	if x != nil {
		return x.Select
	}
	return ""
}

func (x *AttributeDefinition) GetIsImage() bool {
	if x != nil {
		return x.IsImage
	}
	return false
}

func (x *AttributeDefinition) GetIsDateOnly() bool {
	if x != nil {
		return x.IsDateOnly
	}
	return false
}

func (x *AttributeDefinition) GetItems() []*AttributeDefinitionListItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *AttributeDefinition) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

func (x *AttributeDefinition) GetListItems() []string {
	if x != nil {
		return x.ListItems
	}
	return nil
}

func (x *AttributeDefinition) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *AttributeDefinition) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *AttributeDefinition) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *AttributeDefinition) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *AttributeDefinition) GetValidator() string {
	if x != nil {
		return x.Validator
	}
	return ""
}

func (x *AttributeDefinition) GetAllowUserEdit() bool {
	if x != nil {
		return x.AllowUserEdit
	}
	return false
}

func (x *AttributeDefinition) GetIsSystem() bool {
	if x != nil {
		return x.IsSystem
	}
	return false
}

func (x *AttributeDefinition) GetIsReadonly() bool {
	if x != nil {
		return x.IsReadonly
	}
	return false
}

func (x *AttributeDefinition) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *AttributeDefinition) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *AttributeDefinition) GetArchived() int64 {
	if x != nil {
		return x.Archived
	}
	return 0
}

func (x *AttributeDefinition) GetUsage() int64 {
	if x != nil {
		return x.Usage
	}
	return 0
}

type AttributeDefinitions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx        *common.Context        `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Attributes []*AttributeDefinition `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *AttributeDefinitions) Reset() {
	*x = AttributeDefinitions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributeDefinitions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeDefinitions) ProtoMessage() {}

func (x *AttributeDefinitions) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributeDefinitions.ProtoReflect.Descriptor instead.
func (*AttributeDefinitions) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{24}
}

func (x *AttributeDefinitions) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *AttributeDefinitions) GetAttributes() []*AttributeDefinition {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type UserCreateResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Mask string `protobuf:"bytes,5,opt,name=mask,proto3" json:"mask,omitempty"`
}

func (x *UserCreateResult) Reset() {
	*x = UserCreateResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCreateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCreateResult) ProtoMessage() {}

func (x *UserCreateResult) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCreateResult.ProtoReflect.Descriptor instead.
func (*UserCreateResult) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{25}
}

func (x *UserCreateResult) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserCreateResult) GetMask() string {
	if x != nil {
		return x.Mask
	}
	return ""
}

// remove
type Note struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Id        string          `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	CreatorId string          `protobuf:"bytes,5,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
	Text      string          `protobuf:"bytes,6,opt,name=text,proto3" json:"text,omitempty"`
	Created   int64           `protobuf:"varint,7,opt,name=created,proto3" json:"created,omitempty"`
	Updated   int64           `protobuf:"varint,8,opt,name=updated,proto3" json:"updated,omitempty"`
	TargetId  string          `protobuf:"bytes,9,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"` // user_id
}

func (x *Note) Reset() {
	*x = Note{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Note) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Note) ProtoMessage() {}

func (x *Note) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Note.ProtoReflect.Descriptor instead.
func (*Note) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{26}
}

func (x *Note) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Note) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Note) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Note) GetCreatorId() string {
	if x != nil {
		return x.CreatorId
	}
	return ""
}

func (x *Note) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Note) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Note) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *Note) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

// remove
type Notes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx    *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Notes  []*Note         `protobuf:"bytes,3,rep,name=notes,proto3" json:"notes,omitempty"`
	Anchor string          `protobuf:"bytes,4,opt,name=anchor,proto3" json:"anchor,omitempty"`
}

func (x *Notes) Reset() {
	*x = Notes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notes) ProtoMessage() {}

func (x *Notes) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notes.ProtoReflect.Descriptor instead.
func (*Notes) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{27}
}

func (x *Notes) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Notes) GetNotes() []*Note {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (x *Notes) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

type UserNote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Id        string          `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	UserId    string          `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Text      string          `protobuf:"bytes,6,opt,name=text,proto3" json:"text,omitempty"`
	Created   int64           `protobuf:"varint,7,opt,name=created,proto3" json:"created,omitempty"`
	Updated   int64           `protobuf:"varint,8,opt,name=updated,proto3" json:"updated,omitempty"`
	CreatedBy string          `protobuf:"bytes,9,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	UpdatedBy string          `protobuf:"bytes,10,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
}

func (x *UserNote) Reset() {
	*x = UserNote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserNote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserNote) ProtoMessage() {}

func (x *UserNote) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserNote.ProtoReflect.Descriptor instead.
func (*UserNote) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{28}
}

func (x *UserNote) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *UserNote) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *UserNote) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserNote) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserNote) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *UserNote) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *UserNote) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *UserNote) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *UserNote) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

type UserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	UserId    string          `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ObjectId  string          `protobuf:"bytes,4,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
}

func (x *UserRequest) Reset() {
	*x = UserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRequest) ProtoMessage() {}

func (x *UserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRequest.ProtoReflect.Descriptor instead.
func (*UserRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{29}
}

func (x *UserRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *UserRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *UserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserRequest) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

type ListNotesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	UserId    string          `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *ListNotesRequest) Reset() {
	*x = ListNotesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNotesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNotesRequest) ProtoMessage() {}

func (x *ListNotesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNotesRequest.ProtoReflect.Descriptor instead.
func (*ListNotesRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{30}
}

func (x *ListNotesRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ListNotesRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ListNotesRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type DeleteNoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	TargetId  string `protobuf:"bytes,3,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	Id        string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteNoteRequest) Reset() {
	*x = DeleteNoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNoteRequest) ProtoMessage() {}

func (x *DeleteNoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNoteRequest.ProtoReflect.Descriptor instead.
func (*DeleteNoteRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{31}
}

func (x *DeleteNoteRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *DeleteNoteRequest) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *DeleteNoteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// TODO move params to common
type IntParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eq  int64 `protobuf:"varint,2,opt,name=eq,proto3" json:"eq,omitempty"`
	Neq int64 `protobuf:"varint,3,opt,name=neq,proto3" json:"neq,omitempty"`
	Gt  int64 `protobuf:"varint,4,opt,name=gt,proto3" json:"gt,omitempty"`
	Gte int64 `protobuf:"varint,5,opt,name=gte,proto3" json:"gte,omitempty"`
	Lt  int64 `protobuf:"varint,6,opt,name=lt,proto3" json:"lt,omitempty"`
	Lte int64 `protobuf:"varint,7,opt,name=lte,proto3" json:"lte,omitempty"`
}

func (x *IntParams) Reset() {
	*x = IntParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntParams) ProtoMessage() {}

func (x *IntParams) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntParams.ProtoReflect.Descriptor instead.
func (*IntParams) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{32}
}

func (x *IntParams) GetEq() int64 {
	if x != nil {
		return x.Eq
	}
	return 0
}

func (x *IntParams) GetNeq() int64 {
	if x != nil {
		return x.Neq
	}
	return 0
}

func (x *IntParams) GetGt() int64 {
	if x != nil {
		return x.Gt
	}
	return 0
}

func (x *IntParams) GetGte() int64 {
	if x != nil {
		return x.Gte
	}
	return 0
}

func (x *IntParams) GetLt() int64 {
	if x != nil {
		return x.Lt
	}
	return 0
}

func (x *IntParams) GetLte() int64 {
	if x != nil {
		return x.Lte
	}
	return 0
}

type StringParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eq      string   `protobuf:"bytes,2,opt,name=eq,proto3" json:"eq,omitempty"`
	In      []string `protobuf:"bytes,3,rep,name=in,proto3" json:"in,omitempty"`
	Contain string   `protobuf:"bytes,4,opt,name=contain,proto3" json:"contain,omitempty"`
}

func (x *StringParams) Reset() {
	*x = StringParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringParams) ProtoMessage() {}

func (x *StringParams) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringParams.ProtoReflect.Descriptor instead.
func (*StringParams) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{33}
}

func (x *StringParams) GetEq() string {
	if x != nil {
		return x.Eq
	}
	return ""
}

func (x *StringParams) GetIn() []string {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *StringParams) GetContain() string {
	if x != nil {
		return x.Contain
	}
	return ""
}

type IdParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Ids []string `protobuf:"bytes,3,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *IdParams) Reset() {
	*x = IdParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdParams) ProtoMessage() {}

func (x *IdParams) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdParams.ProtoReflect.Descriptor instead.
func (*IdParams) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{34}
}

func (x *IdParams) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IdParams) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Args []string `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *Params) Reset() {
	*x = Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params) ProtoMessage() {}

func (x *Params) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Params.ProtoReflect.Descriptor instead.
func (*Params) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{35}
}

func (x *Params) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Isp           string  `protobuf:"bytes,3,opt,name=isp,proto3" json:"isp,omitempty"`                                          // filled
	ContinentName string  `protobuf:"bytes,4,opt,name=continent_name,json=continentName,proto3" json:"continent_name,omitempty"` // filled
	CountryCode   string  `protobuf:"bytes,5,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`       // filled
	CityName      string  `protobuf:"bytes,6,opt,name=city_name,json=cityName,proto3" json:"city_name,omitempty"`                // filled
	CountryName   string  `protobuf:"bytes,7,opt,name=country_name,json=countryName,proto3" json:"country_name,omitempty"`       // filled
	ContinentCode string  `protobuf:"bytes,8,opt,name=continent_code,json=continentCode,proto3" json:"continent_code,omitempty"` // filled
	Latitude      float32 `protobuf:"fixed32,9,opt,name=latitude,proto3" json:"latitude,omitempty"`                              // filled
	Longitude     float32 `protobuf:"fixed32,10,opt,name=longitude,proto3" json:"longitude,omitempty"`                           // filled
	PostalCode    string  `protobuf:"bytes,11,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`         // filled
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{36}
}

func (x *Location) GetIsp() string {
	if x != nil {
		return x.Isp
	}
	return ""
}

func (x *Location) GetContinentName() string {
	if x != nil {
		return x.ContinentName
	}
	return ""
}

func (x *Location) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *Location) GetCityName() string {
	if x != nil {
		return x.CityName
	}
	return ""
}

func (x *Location) GetCountryName() string {
	if x != nil {
		return x.CountryName
	}
	return ""
}

func (x *Location) GetContinentCode() string {
	if x != nil {
		return x.ContinentCode
	}
	return ""
}

func (x *Location) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Location) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *Location) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

type Locations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locations []*Location `protobuf:"bytes,2,rep,name=locations,proto3" json:"locations,omitempty"`
	Errors    []*Error    `protobuf:"bytes,3,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *Locations) Reset() {
	*x = Locations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Locations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Locations) ProtoMessage() {}

func (x *Locations) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Locations.ProtoReflect.Descriptor instead.
func (*Locations) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{37}
}

func (x *Locations) GetLocations() []*Location {
	if x != nil {
		return x.Locations
	}
	return nil
}

func (x *Locations) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type LocationParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query     string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	Limit     int64  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	AccountId string `protobuf:"bytes,4,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *LocationParams) Reset() {
	*x = LocationParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationParams) ProtoMessage() {}

func (x *LocationParams) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationParams.ProtoReflect.Descriptor instead.
func (*LocationParams) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{38}
}

func (x *LocationParams) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *LocationParams) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *LocationParams) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type Page struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Url  string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Page) Reset() {
	*x = Page{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Page) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Page) ProtoMessage() {}

func (x *Page) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Page.ProtoReflect.Descriptor instead.
func (*Page) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{39}
}

func (x *Page) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Page) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Page) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type UserInfoParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId  string     `protobuf:"bytes,15,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Signature  string     `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	Limit      int32      `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset     int32      `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	OrderBy    string     `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	Source     *IdParams  `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`
	PageId     *IdParams  `protobuf:"bytes,8,opt,name=page_id,json=pageId,proto3" json:"page_id,omitempty"`
	LocationId *IdParams  `protobuf:"bytes,7,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	ViewCount  *IntParams `protobuf:"bytes,9,opt,name=view_count,json=viewCount,proto3" json:"view_count,omitempty"`
	Duration   *IntParams `protobuf:"bytes,10,opt,name=duration,proto3" json:"duration,omitempty"`
	// location params
	CountryCode   *StringParams `protobuf:"bytes,11,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	ContinentCode *StringParams `protobuf:"bytes,12,opt,name=continent_code,json=continentCode,proto3" json:"continent_code,omitempty"`
	Url           *StringParams `protobuf:"bytes,13,opt,name=url,proto3" json:"url,omitempty"`
	TimeOnSite    *IntParams    `protobuf:"bytes,14,opt,name=time_on_site,json=timeOnSite,proto3" json:"time_on_site,omitempty"`
}

func (x *UserInfoParams) Reset() {
	*x = UserInfoParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoParams) ProtoMessage() {}

func (x *UserInfoParams) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoParams.ProtoReflect.Descriptor instead.
func (*UserInfoParams) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{40}
}

func (x *UserInfoParams) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *UserInfoParams) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *UserInfoParams) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *UserInfoParams) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *UserInfoParams) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *UserInfoParams) GetSource() *IdParams {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *UserInfoParams) GetPageId() *IdParams {
	if x != nil {
		return x.PageId
	}
	return nil
}

func (x *UserInfoParams) GetLocationId() *IdParams {
	if x != nil {
		return x.LocationId
	}
	return nil
}

func (x *UserInfoParams) GetViewCount() *IntParams {
	if x != nil {
		return x.ViewCount
	}
	return nil
}

func (x *UserInfoParams) GetDuration() *IntParams {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *UserInfoParams) GetCountryCode() *StringParams {
	if x != nil {
		return x.CountryCode
	}
	return nil
}

func (x *UserInfoParams) GetContinentCode() *StringParams {
	if x != nil {
		return x.ContinentCode
	}
	return nil
}

func (x *UserInfoParams) GetUrl() *StringParams {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *UserInfoParams) GetTimeOnSite() *IntParams {
	if x != nil {
		return x.TimeOnSite
	}
	return nil
}

type Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId      string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	OrderId        string `protobuf:"bytes,3,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	ProductId      string `protobuf:"bytes,4,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	BillId         string `protobuf:"bytes,5,opt,name=bill_id,json=billId,proto3" json:"bill_id,omitempty"`
	OrderCommentId string `protobuf:"bytes,6,opt,name=order_comment_id,json=orderCommentId,proto3" json:"order_comment_id,omitempty"`
	TaskId         string `protobuf:"bytes,7,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TaskCommentId  string `protobuf:"bytes,8,opt,name=task_comment_id,json=taskCommentId,proto3" json:"task_comment_id,omitempty"`
}

func (x *Key) Reset() {
	*x = Key{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Key) ProtoMessage() {}

func (x *Key) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Key.ProtoReflect.Descriptor instead.
func (*Key) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{41}
}

func (x *Key) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Key) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *Key) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *Key) GetBillId() string {
	if x != nil {
		return x.BillId
	}
	return ""
}

func (x *Key) GetOrderCommentId() string {
	if x != nil {
		return x.OrderCommentId
	}
	return ""
}

func (x *Key) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *Key) GetTaskCommentId() string {
	if x != nil {
		return x.TaskCommentId
	}
	return ""
}

type UserEventMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId   string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	UserId      string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CreatedHour int64  `protobuf:"varint,4,opt,name=created_hour,json=createdHour,proto3" json:"created_hour,omitempty"`
	Date        string `protobuf:"bytes,5,opt,name=date,proto3" json:"date,omitempty"` // derived
	EventCount  int64  `protobuf:"varint,20,opt,name=event_count,json=eventCount,proto3" json:"event_count,omitempty"`
}

func (x *UserEventMetric) Reset() {
	*x = UserEventMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEventMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEventMetric) ProtoMessage() {}

func (x *UserEventMetric) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEventMetric.ProtoReflect.Descriptor instead.
func (*UserEventMetric) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{42}
}

func (x *UserEventMetric) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *UserEventMetric) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserEventMetric) GetCreatedHour() int64 {
	if x != nil {
		return x.CreatedHour
	}
	return 0
}

func (x *UserEventMetric) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *UserEventMetric) GetEventCount() int64 {
	if x != nil {
		return x.EventCount
	}
	return 0
}

type UserEventMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metrics []*UserEventMetric `protobuf:"bytes,2,rep,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *UserEventMetrics) Reset() {
	*x = UserEventMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEventMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEventMetrics) ProtoMessage() {}

func (x *UserEventMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEventMetrics.ProtoReflect.Descriptor instead.
func (*UserEventMetrics) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{43}
}

func (x *UserEventMetrics) GetMetrics() []*UserEventMetric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type UserEventMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId       string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	UserId          string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CreatedHourFrom int64  `protobuf:"varint,4,opt,name=created_hour_from,json=createdHourFrom,proto3" json:"created_hour_from,omitempty"`
	CreatedHourTo   int64  `protobuf:"varint,5,opt,name=created_hour_to,json=createdHourTo,proto3" json:"created_hour_to,omitempty"`
	Tz              int32  `protobuf:"varint,6,opt,name=tz,proto3" json:"tz,omitempty"`
	Dim             string `protobuf:"bytes,7,opt,name=dim,proto3" json:"dim,omitempty"`
}

func (x *UserEventMetricsRequest) Reset() {
	*x = UserEventMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEventMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEventMetricsRequest) ProtoMessage() {}

func (x *UserEventMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEventMetricsRequest.ProtoReflect.Descriptor instead.
func (*UserEventMetricsRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{44}
}

func (x *UserEventMetricsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *UserEventMetricsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserEventMetricsRequest) GetCreatedHourFrom() int64 {
	if x != nil {
		return x.CreatedHourFrom
	}
	return 0
}

func (x *UserEventMetricsRequest) GetCreatedHourTo() int64 {
	if x != nil {
		return x.CreatedHourTo
	}
	return 0
}

func (x *UserEventMetricsRequest) GetTz() int32 {
	if x != nil {
		return x.Tz
	}
	return 0
}

func (x *UserEventMetricsRequest) GetDim() string {
	if x != nil {
		return x.Dim
	}
	return ""
}

type UserMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActiveUserNum     int64  `protobuf:"varint,3,opt,name=active_user_num,json=activeUserNum,proto3" json:"active_user_num,omitempty"` // live
	HaveBeen          string `protobuf:"bytes,5,opt,name=have_been,json=haveBeen,proto3" json:"have_been,omitempty"`                   // live
	AccountId         string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	CreatedHour       int64  `protobuf:"varint,6,opt,name=created_hour,json=createdHour,proto3" json:"created_hour,omitempty"`
	SessionSource     string `protobuf:"bytes,7,opt,name=session_source,json=sessionSource,proto3" json:"session_source,omitempty"`
	Channel           string `protobuf:"bytes,8,opt,name=channel,proto3" json:"channel,omitempty"`
	ChannelTouchpoint string `protobuf:"bytes,9,opt,name=channel_touchpoint,json=channelTouchpoint,proto3" json:"channel_touchpoint,omitempty"`
	FirstInteract     string `protobuf:"bytes,10,opt,name=first_interact,json=firstInteract,proto3" json:"first_interact,omitempty"`
	Date              string `protobuf:"bytes,11,opt,name=date,proto3" json:"date,omitempty"` // derived
	SeenHour          int64  `protobuf:"varint,12,opt,name=seen_hour,json=seenHour,proto3" json:"seen_hour,omitempty"`
	UserCount         int64  `protobuf:"varint,65,opt,name=user_count,json=userCount,proto3" json:"user_count,omitempty"`
	LeadCount         int64  `protobuf:"varint,66,opt,name=lead_count,json=leadCount,proto3" json:"lead_count,omitempty"`
}

func (x *UserMetric) Reset() {
	*x = UserMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMetric) ProtoMessage() {}

func (x *UserMetric) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMetric.ProtoReflect.Descriptor instead.
func (*UserMetric) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{45}
}

func (x *UserMetric) GetActiveUserNum() int64 {
	if x != nil {
		return x.ActiveUserNum
	}
	return 0
}

func (x *UserMetric) GetHaveBeen() string {
	if x != nil {
		return x.HaveBeen
	}
	return ""
}

func (x *UserMetric) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *UserMetric) GetCreatedHour() int64 {
	if x != nil {
		return x.CreatedHour
	}
	return 0
}

func (x *UserMetric) GetSessionSource() string {
	if x != nil {
		return x.SessionSource
	}
	return ""
}

func (x *UserMetric) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *UserMetric) GetChannelTouchpoint() string {
	if x != nil {
		return x.ChannelTouchpoint
	}
	return ""
}

func (x *UserMetric) GetFirstInteract() string {
	if x != nil {
		return x.FirstInteract
	}
	return ""
}

func (x *UserMetric) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *UserMetric) GetSeenHour() int64 {
	if x != nil {
		return x.SeenHour
	}
	return 0
}

func (x *UserMetric) GetUserCount() int64 {
	if x != nil {
		return x.UserCount
	}
	return 0
}

func (x *UserMetric) GetLeadCount() int64 {
	if x != nil {
		return x.LeadCount
	}
	return 0
}

type UserMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metrics []*UserMetric `protobuf:"bytes,2,rep,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *UserMetrics) Reset() {
	*x = UserMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMetrics) ProtoMessage() {}

func (x *UserMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMetrics.ProtoReflect.Descriptor instead.
func (*UserMetrics) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{46}
}

func (x *UserMetrics) GetMetrics() []*UserMetric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type UserMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId          string                 `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	CreatedHourFrom    int64                  `protobuf:"varint,3,opt,name=created_hour_from,json=createdHourFrom,proto3" json:"created_hour_from,omitempty"`
	CreatedHourTo      int64                  `protobuf:"varint,4,opt,name=created_hour_to,json=createdHourTo,proto3" json:"created_hour_to,omitempty"`
	SeenHourFrom       int64                  `protobuf:"varint,13,opt,name=seen_hour_from,json=seenHourFrom,proto3" json:"seen_hour_from,omitempty"`
	SeenHourTo         int64                  `protobuf:"varint,14,opt,name=seen_hour_to,json=seenHourTo,proto3" json:"seen_hour_to,omitempty"`
	Sources            []string               `protobuf:"bytes,5,rep,name=sources,proto3" json:"sources,omitempty"`
	Channels           []string               `protobuf:"bytes,6,rep,name=channels,proto3" json:"channels,omitempty"`
	ChannelTouchpoints []string               `protobuf:"bytes,7,rep,name=channel_touchpoints,json=channelTouchpoints,proto3" json:"channel_touchpoints,omitempty"`
	FirstInteracts     []string               `protobuf:"bytes,8,rep,name=first_interacts,json=firstInteracts,proto3" json:"first_interacts,omitempty"`
	SessionSources     []string               `protobuf:"bytes,15,rep,name=session_sources,json=sessionSources,proto3" json:"session_sources,omitempty"`
	NotChannels        []string               `protobuf:"bytes,16,rep,name=not_channels,json=notChannels,proto3" json:"not_channels,omitempty"`
	BusinessHours      *account.BusinessHours `protobuf:"bytes,17,opt,name=business_hours,json=businessHours,proto3" json:"business_hours,omitempty"`
	NotBusinessHours   *account.BusinessHours `protobuf:"bytes,18,opt,name=not_business_hours,json=notBusinessHours,proto3" json:"not_business_hours,omitempty"`
	Tz                 int32                  `protobuf:"varint,9,opt,name=tz,proto3" json:"tz,omitempty"`
	Dim                string                 `protobuf:"bytes,10,opt,name=dim,proto3" json:"dim,omitempty"`
	Anchor             string                 `protobuf:"bytes,11,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Limit              int32                  `protobuf:"varint,12,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *UserMetricsRequest) Reset() {
	*x = UserMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMetricsRequest) ProtoMessage() {}

func (x *UserMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMetricsRequest.ProtoReflect.Descriptor instead.
func (*UserMetricsRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{47}
}

func (x *UserMetricsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *UserMetricsRequest) GetCreatedHourFrom() int64 {
	if x != nil {
		return x.CreatedHourFrom
	}
	return 0
}

func (x *UserMetricsRequest) GetCreatedHourTo() int64 {
	if x != nil {
		return x.CreatedHourTo
	}
	return 0
}

func (x *UserMetricsRequest) GetSeenHourFrom() int64 {
	if x != nil {
		return x.SeenHourFrom
	}
	return 0
}

func (x *UserMetricsRequest) GetSeenHourTo() int64 {
	if x != nil {
		return x.SeenHourTo
	}
	return 0
}

func (x *UserMetricsRequest) GetSources() []string {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *UserMetricsRequest) GetChannels() []string {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *UserMetricsRequest) GetChannelTouchpoints() []string {
	if x != nil {
		return x.ChannelTouchpoints
	}
	return nil
}

func (x *UserMetricsRequest) GetFirstInteracts() []string {
	if x != nil {
		return x.FirstInteracts
	}
	return nil
}

func (x *UserMetricsRequest) GetSessionSources() []string {
	if x != nil {
		return x.SessionSources
	}
	return nil
}

func (x *UserMetricsRequest) GetNotChannels() []string {
	if x != nil {
		return x.NotChannels
	}
	return nil
}

func (x *UserMetricsRequest) GetBusinessHours() *account.BusinessHours {
	if x != nil {
		return x.BusinessHours
	}
	return nil
}

func (x *UserMetricsRequest) GetNotBusinessHours() *account.BusinessHours {
	if x != nil {
		return x.NotBusinessHours
	}
	return nil
}

func (x *UserMetricsRequest) GetTz() int32 {
	if x != nil {
		return x.Tz
	}
	return 0
}

func (x *UserMetricsRequest) GetDim() string {
	if x != nil {
		return x.Dim
	}
	return ""
}

func (x *UserMetricsRequest) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *UserMetricsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ConversationMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId            string   `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	CreatedHour          int64    `protobuf:"varint,3,opt,name=created_hour,json=createdHour,proto3" json:"created_hour,omitempty"`
	Channel              string   `protobuf:"bytes,4,opt,name=channel,proto3" json:"channel,omitempty"`
	ChannelTouchpoint    string   `protobuf:"bytes,5,opt,name=channel_touchpoint,json=channelTouchpoint,proto3" json:"channel_touchpoint,omitempty"`
	Ratings              []int32  `protobuf:"varint,7,rep,packed,name=ratings,proto3" json:"ratings,omitempty"`
	LastRating           int32    `protobuf:"varint,8,opt,name=last_rating,json=lastRating,proto3" json:"last_rating,omitempty"`
	FirstRepliedCount    int64    `protobuf:"varint,9,opt,name=first_replied_count,json=firstRepliedCount,proto3" json:"first_replied_count,omitempty"`
	FirstRepliedDuration int64    `protobuf:"varint,10,opt,name=first_replied_duration,json=firstRepliedDuration,proto3" json:"first_replied_duration,omitempty"`
	AgentIds             []string `protobuf:"bytes,11,rep,name=agent_ids,json=agentIds,proto3" json:"agent_ids,omitempty"` // assigned
	AgentSentIds         []string `protobuf:"bytes,12,rep,name=agent_sent_ids,json=agentSentIds,proto3" json:"agent_sent_ids,omitempty"`
	Date                 string   `protobuf:"bytes,13,opt,name=date,proto3" json:"date,omitempty"`                               // derived
	TagBits              int64    `protobuf:"varint,14,opt,name=tag_bits,json=tagBits,proto3" json:"tag_bits,omitempty"`         // only system
	TagStrings           string   `protobuf:"bytes,15,opt,name=tag_strings,json=tagStrings,proto3" json:"tag_strings,omitempty"` // only system
	Tags                 []string `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
	Tag                  string   `protobuf:"bytes,16,opt,name=tag,proto3" json:"tag,omitempty"` // derived
	LatestSentHour       int64    `protobuf:"varint,17,opt,name=latest_sent_hour,json=latestSentHour,proto3" json:"latest_sent_hour,omitempty"`
	ConversationCount    int64    `protobuf:"varint,65,opt,name=conversation_count,json=conversationCount,proto3" json:"conversation_count,omitempty"`
	UserSentCount        int64    `protobuf:"varint,66,opt,name=user_sent_count,json=userSentCount,proto3" json:"user_sent_count,omitempty"`
	NotReplyCount        int64    `protobuf:"varint,67,opt,name=not_reply_count,json=notReplyCount,proto3" json:"not_reply_count,omitempty"`
	SendDurationSum      int64    `protobuf:"varint,68,opt,name=send_duration_sum,json=sendDurationSum,proto3" json:"send_duration_sum,omitempty"`
	ReturnedCount        int64    `protobuf:"varint,69,opt,name=returned_count,json=returnedCount,proto3" json:"returned_count,omitempty"`
}

func (x *ConversationMetric) Reset() {
	*x = ConversationMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationMetric) ProtoMessage() {}

func (x *ConversationMetric) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationMetric.ProtoReflect.Descriptor instead.
func (*ConversationMetric) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{48}
}

func (x *ConversationMetric) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ConversationMetric) GetCreatedHour() int64 {
	if x != nil {
		return x.CreatedHour
	}
	return 0
}

func (x *ConversationMetric) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *ConversationMetric) GetChannelTouchpoint() string {
	if x != nil {
		return x.ChannelTouchpoint
	}
	return ""
}

func (x *ConversationMetric) GetRatings() []int32 {
	if x != nil {
		return x.Ratings
	}
	return nil
}

func (x *ConversationMetric) GetLastRating() int32 {
	if x != nil {
		return x.LastRating
	}
	return 0
}

func (x *ConversationMetric) GetFirstRepliedCount() int64 {
	if x != nil {
		return x.FirstRepliedCount
	}
	return 0
}

func (x *ConversationMetric) GetFirstRepliedDuration() int64 {
	if x != nil {
		return x.FirstRepliedDuration
	}
	return 0
}

func (x *ConversationMetric) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *ConversationMetric) GetAgentSentIds() []string {
	if x != nil {
		return x.AgentSentIds
	}
	return nil
}

func (x *ConversationMetric) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *ConversationMetric) GetTagBits() int64 {
	if x != nil {
		return x.TagBits
	}
	return 0
}

func (x *ConversationMetric) GetTagStrings() string {
	if x != nil {
		return x.TagStrings
	}
	return ""
}

func (x *ConversationMetric) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ConversationMetric) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *ConversationMetric) GetLatestSentHour() int64 {
	if x != nil {
		return x.LatestSentHour
	}
	return 0
}

func (x *ConversationMetric) GetConversationCount() int64 {
	if x != nil {
		return x.ConversationCount
	}
	return 0
}

func (x *ConversationMetric) GetUserSentCount() int64 {
	if x != nil {
		return x.UserSentCount
	}
	return 0
}

func (x *ConversationMetric) GetNotReplyCount() int64 {
	if x != nil {
		return x.NotReplyCount
	}
	return 0
}

func (x *ConversationMetric) GetSendDurationSum() int64 {
	if x != nil {
		return x.SendDurationSum
	}
	return 0
}

func (x *ConversationMetric) GetReturnedCount() int64 {
	if x != nil {
		return x.ReturnedCount
	}
	return 0
}

type ConversationMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metrics []*ConversationMetric `protobuf:"bytes,2,rep,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *ConversationMetrics) Reset() {
	*x = ConversationMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationMetrics) ProtoMessage() {}

func (x *ConversationMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationMetrics.ProtoReflect.Descriptor instead.
func (*ConversationMetrics) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{49}
}

func (x *ConversationMetrics) GetMetrics() []*ConversationMetric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type ConversationMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId              string                 `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	CreatedHourFrom        int64                  `protobuf:"varint,3,opt,name=created_hour_from,json=createdHourFrom,proto3" json:"created_hour_from,omitempty"`
	CreatedHourTo          int64                  `protobuf:"varint,4,opt,name=created_hour_to,json=createdHourTo,proto3" json:"created_hour_to,omitempty"`
	LatestSentHourFrom     int64                  `protobuf:"varint,16,opt,name=latest_sent_hour_from,json=latestSentHourFrom,proto3" json:"latest_sent_hour_from,omitempty"`
	LatestSentHourTo       int64                  `protobuf:"varint,17,opt,name=latest_sent_hour_to,json=latestSentHourTo,proto3" json:"latest_sent_hour_to,omitempty"`
	Channels               []string               `protobuf:"bytes,5,rep,name=channels,proto3" json:"channels,omitempty"`
	ChannelTouchpoints     []string               `protobuf:"bytes,6,rep,name=channel_touchpoints,json=channelTouchpoints,proto3" json:"channel_touchpoints,omitempty"`
	Ratings                []int32                `protobuf:"varint,8,rep,packed,name=ratings,proto3" json:"ratings,omitempty"`
	Tags                   []string               `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`                                        // and
	AgentIds               []string               `protobuf:"bytes,9,rep,name=agent_ids,json=agentIds,proto3" json:"agent_ids,omitempty"`                // and
	AgentSentIds           []string               `protobuf:"bytes,14,rep,name=agent_sent_ids,json=agentSentIds,proto3" json:"agent_sent_ids,omitempty"` // and
	FirstRepliedDurationGt int64                  `protobuf:"varint,15,opt,name=first_replied_duration_gt,json=firstRepliedDurationGt,proto3" json:"first_replied_duration_gt,omitempty"`
	SendDurationSumGt      int64                  `protobuf:"varint,21,opt,name=send_duration_sum_gt,json=sendDurationSumGt,proto3" json:"send_duration_sum_gt,omitempty"`
	NotChannels            []string               `protobuf:"bytes,18,rep,name=not_channels,json=notChannels,proto3" json:"not_channels,omitempty"`
	BusinessHours          *account.BusinessHours `protobuf:"bytes,19,opt,name=business_hours,json=businessHours,proto3" json:"business_hours,omitempty"`
	NotBusinessHours       *account.BusinessHours `protobuf:"bytes,20,opt,name=not_business_hours,json=notBusinessHours,proto3" json:"not_business_hours,omitempty"`
	Tz                     int32                  `protobuf:"varint,10,opt,name=tz,proto3" json:"tz,omitempty"`
	Dim                    string                 `protobuf:"bytes,11,opt,name=dim,proto3" json:"dim,omitempty"`
	Anchor                 string                 `protobuf:"bytes,12,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Limit                  int32                  `protobuf:"varint,13,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ConversationMetricsRequest) Reset() {
	*x = ConversationMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationMetricsRequest) ProtoMessage() {}

func (x *ConversationMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationMetricsRequest.ProtoReflect.Descriptor instead.
func (*ConversationMetricsRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{50}
}

func (x *ConversationMetricsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ConversationMetricsRequest) GetCreatedHourFrom() int64 {
	if x != nil {
		return x.CreatedHourFrom
	}
	return 0
}

func (x *ConversationMetricsRequest) GetCreatedHourTo() int64 {
	if x != nil {
		return x.CreatedHourTo
	}
	return 0
}

func (x *ConversationMetricsRequest) GetLatestSentHourFrom() int64 {
	if x != nil {
		return x.LatestSentHourFrom
	}
	return 0
}

func (x *ConversationMetricsRequest) GetLatestSentHourTo() int64 {
	if x != nil {
		return x.LatestSentHourTo
	}
	return 0
}

func (x *ConversationMetricsRequest) GetChannels() []string {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *ConversationMetricsRequest) GetChannelTouchpoints() []string {
	if x != nil {
		return x.ChannelTouchpoints
	}
	return nil
}

func (x *ConversationMetricsRequest) GetRatings() []int32 {
	if x != nil {
		return x.Ratings
	}
	return nil
}

func (x *ConversationMetricsRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ConversationMetricsRequest) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *ConversationMetricsRequest) GetAgentSentIds() []string {
	if x != nil {
		return x.AgentSentIds
	}
	return nil
}

func (x *ConversationMetricsRequest) GetFirstRepliedDurationGt() int64 {
	if x != nil {
		return x.FirstRepliedDurationGt
	}
	return 0
}

func (x *ConversationMetricsRequest) GetSendDurationSumGt() int64 {
	if x != nil {
		return x.SendDurationSumGt
	}
	return 0
}

func (x *ConversationMetricsRequest) GetNotChannels() []string {
	if x != nil {
		return x.NotChannels
	}
	return nil
}

func (x *ConversationMetricsRequest) GetBusinessHours() *account.BusinessHours {
	if x != nil {
		return x.BusinessHours
	}
	return nil
}

func (x *ConversationMetricsRequest) GetNotBusinessHours() *account.BusinessHours {
	if x != nil {
		return x.NotBusinessHours
	}
	return nil
}

func (x *ConversationMetricsRequest) GetTz() int32 {
	if x != nil {
		return x.Tz
	}
	return 0
}

func (x *ConversationMetricsRequest) GetDim() string {
	if x != nil {
		return x.Dim
	}
	return ""
}

func (x *ConversationMetricsRequest) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *ConversationMetricsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type AgentMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId             string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	CreatedHour           int64  `protobuf:"varint,3,opt,name=created_hour,json=createdHour,proto3" json:"created_hour,omitempty"`
	Channel               string `protobuf:"bytes,6,opt,name=channel,proto3" json:"channel,omitempty"`
	AgentId               string `protobuf:"bytes,4,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Date                  string `protobuf:"bytes,5,opt,name=date,proto3" json:"date,omitempty"` // derived
	MessageSentCount      int64  `protobuf:"varint,65,opt,name=message_sent_count,json=messageSentCount,proto3" json:"message_sent_count,omitempty"`
	ConversationCount     int64  `protobuf:"varint,66,opt,name=conversation_count,json=conversationCount,proto3" json:"conversation_count,omitempty"`
	FirstRepliedCount     int64  `protobuf:"varint,67,opt,name=first_replied_count,json=firstRepliedCount,proto3" json:"first_replied_count,omitempty"`
	FirstRepliedDuration  int64  `protobuf:"varint,68,opt,name=first_replied_duration,json=firstRepliedDuration,proto3" json:"first_replied_duration,omitempty"`
	GreatRatingCount      int64  `protobuf:"varint,69,opt,name=great_rating_count,json=greatRatingCount,proto3" json:"great_rating_count,omitempty"`
	NotReplyCount         int64  `protobuf:"varint,70,opt,name=not_reply_count,json=notReplyCount,proto3" json:"not_reply_count,omitempty"`
	ConversationSentCount int64  `protobuf:"varint,71,opt,name=conversation_sent_count,json=conversationSentCount,proto3" json:"conversation_sent_count,omitempty"`
}

func (x *AgentMetric) Reset() {
	*x = AgentMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentMetric) ProtoMessage() {}

func (x *AgentMetric) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentMetric.ProtoReflect.Descriptor instead.
func (*AgentMetric) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{51}
}

func (x *AgentMetric) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AgentMetric) GetCreatedHour() int64 {
	if x != nil {
		return x.CreatedHour
	}
	return 0
}

func (x *AgentMetric) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *AgentMetric) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *AgentMetric) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *AgentMetric) GetMessageSentCount() int64 {
	if x != nil {
		return x.MessageSentCount
	}
	return 0
}

func (x *AgentMetric) GetConversationCount() int64 {
	if x != nil {
		return x.ConversationCount
	}
	return 0
}

func (x *AgentMetric) GetFirstRepliedCount() int64 {
	if x != nil {
		return x.FirstRepliedCount
	}
	return 0
}

func (x *AgentMetric) GetFirstRepliedDuration() int64 {
	if x != nil {
		return x.FirstRepliedDuration
	}
	return 0
}

func (x *AgentMetric) GetGreatRatingCount() int64 {
	if x != nil {
		return x.GreatRatingCount
	}
	return 0
}

func (x *AgentMetric) GetNotReplyCount() int64 {
	if x != nil {
		return x.NotReplyCount
	}
	return 0
}

func (x *AgentMetric) GetConversationSentCount() int64 {
	if x != nil {
		return x.ConversationSentCount
	}
	return 0
}

type AgentMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metrics []*AgentMetric `protobuf:"bytes,2,rep,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *AgentMetrics) Reset() {
	*x = AgentMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentMetrics) ProtoMessage() {}

func (x *AgentMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentMetrics.ProtoReflect.Descriptor instead.
func (*AgentMetrics) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{52}
}

func (x *AgentMetrics) GetMetrics() []*AgentMetric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type AgentMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId        string                 `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	CreatedHourFrom  int64                  `protobuf:"varint,3,opt,name=created_hour_from,json=createdHourFrom,proto3" json:"created_hour_from,omitempty"`
	CreatedHourTo    int64                  `protobuf:"varint,4,opt,name=created_hour_to,json=createdHourTo,proto3" json:"created_hour_to,omitempty"`
	AgentIds         []string               `protobuf:"bytes,5,rep,name=agent_ids,json=agentIds,proto3" json:"agent_ids,omitempty"`
	Channels         []string               `protobuf:"bytes,6,rep,name=channels,proto3" json:"channels,omitempty"`
	NotChannels      []string               `protobuf:"bytes,7,rep,name=not_channels,json=notChannels,proto3" json:"not_channels,omitempty"`
	BusinessHours    *account.BusinessHours `protobuf:"bytes,8,opt,name=business_hours,json=businessHours,proto3" json:"business_hours,omitempty"`
	NotBusinessHours *account.BusinessHours `protobuf:"bytes,9,opt,name=not_business_hours,json=notBusinessHours,proto3" json:"not_business_hours,omitempty"`
	Tz               int32                  `protobuf:"varint,10,opt,name=tz,proto3" json:"tz,omitempty"`
	Dim              string                 `protobuf:"bytes,11,opt,name=dim,proto3" json:"dim,omitempty"`
}

func (x *AgentMetricsRequest) Reset() {
	*x = AgentMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentMetricsRequest) ProtoMessage() {}

func (x *AgentMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentMetricsRequest.ProtoReflect.Descriptor instead.
func (*AgentMetricsRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{53}
}

func (x *AgentMetricsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AgentMetricsRequest) GetCreatedHourFrom() int64 {
	if x != nil {
		return x.CreatedHourFrom
	}
	return 0
}

func (x *AgentMetricsRequest) GetCreatedHourTo() int64 {
	if x != nil {
		return x.CreatedHourTo
	}
	return 0
}

func (x *AgentMetricsRequest) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *AgentMetricsRequest) GetChannels() []string {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *AgentMetricsRequest) GetNotChannels() []string {
	if x != nil {
		return x.NotChannels
	}
	return nil
}

func (x *AgentMetricsRequest) GetBusinessHours() *account.BusinessHours {
	if x != nil {
		return x.BusinessHours
	}
	return nil
}

func (x *AgentMetricsRequest) GetNotBusinessHours() *account.BusinessHours {
	if x != nil {
		return x.NotBusinessHours
	}
	return nil
}

func (x *AgentMetricsRequest) GetTz() int32 {
	if x != nil {
		return x.Tz
	}
	return 0
}

func (x *AgentMetricsRequest) GetDim() string {
	if x != nil {
		return x.Dim
	}
	return ""
}

type SourceMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId     string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Source        string `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"` // direct, referring, organic,social, advertising
	ActiveUserNum int64  `protobuf:"varint,4,opt,name=active_user_num,json=activeUserNum,proto3" json:"active_user_num,omitempty"`
	HaveBeen      string `protobuf:"bytes,5,opt,name=have_been,json=haveBeen,proto3" json:"have_been,omitempty"`
}

func (x *SourceMetric) Reset() {
	*x = SourceMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceMetric) ProtoMessage() {}

func (x *SourceMetric) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceMetric.ProtoReflect.Descriptor instead.
func (*SourceMetric) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{54}
}

func (x *SourceMetric) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *SourceMetric) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *SourceMetric) GetActiveUserNum() int64 {
	if x != nil {
		return x.ActiveUserNum
	}
	return 0
}

func (x *SourceMetric) GetHaveBeen() string {
	if x != nil {
		return x.HaveBeen
	}
	return ""
}

type LocationMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId     string    `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Location      *Location `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	ActiveUserNum int64     `protobuf:"varint,4,opt,name=active_user_num,json=activeUserNum,proto3" json:"active_user_num,omitempty"`
	HaveBeen      string    `protobuf:"bytes,5,opt,name=have_been,json=haveBeen,proto3" json:"have_been,omitempty"`
}

func (x *LocationMetric) Reset() {
	*x = LocationMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationMetric) ProtoMessage() {}

func (x *LocationMetric) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationMetric.ProtoReflect.Descriptor instead.
func (*LocationMetric) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{55}
}

func (x *LocationMetric) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *LocationMetric) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *LocationMetric) GetActiveUserNum() int64 {
	if x != nil {
		return x.ActiveUserNum
	}
	return 0
}

func (x *LocationMetric) GetHaveBeen() string {
	if x != nil {
		return x.HaveBeen
	}
	return ""
}

type PageMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId     string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Page          *Page  `protobuf:"bytes,3,opt,name=page,proto3" json:"page,omitempty"`
	ActiveUserNum int64  `protobuf:"varint,4,opt,name=active_user_num,json=activeUserNum,proto3" json:"active_user_num,omitempty"`
	HaveBeen      string `protobuf:"bytes,5,opt,name=have_been,json=haveBeen,proto3" json:"have_been,omitempty"`
}

func (x *PageMetric) Reset() {
	*x = PageMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageMetric) ProtoMessage() {}

func (x *PageMetric) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageMetric.ProtoReflect.Descriptor instead.
func (*PageMetric) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{56}
}

func (x *PageMetric) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *PageMetric) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *PageMetric) GetActiveUserNum() int64 {
	if x != nil {
		return x.ActiveUserNum
	}
	return 0
}

func (x *PageMetric) GetHaveBeen() string {
	if x != nil {
		return x.HaveBeen
	}
	return ""
}

type UserReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId   string            `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	TotalUser   *UserMetric       `protobuf:"bytes,3,opt,name=total_user,json=totalUser,proto3" json:"total_user,omitempty"`
	TopSource   []*SourceMetric   `protobuf:"bytes,4,rep,name=top_source,json=topSource,proto3" json:"top_source,omitempty"`
	TopLocation []*LocationMetric `protobuf:"bytes,5,rep,name=top_location,json=topLocation,proto3" json:"top_location,omitempty"`
	TopPage     []*PageMetric     `protobuf:"bytes,6,rep,name=top_page,json=topPage,proto3" json:"top_page,omitempty"`
}

func (x *UserReport) Reset() {
	*x = UserReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserReport) ProtoMessage() {}

func (x *UserReport) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserReport.ProtoReflect.Descriptor instead.
func (*UserReport) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{57}
}

func (x *UserReport) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *UserReport) GetTotalUser() *UserMetric {
	if x != nil {
		return x.TotalUser
	}
	return nil
}

func (x *UserReport) GetTopSource() []*SourceMetric {
	if x != nil {
		return x.TopSource
	}
	return nil
}

func (x *UserReport) GetTopLocation() []*LocationMetric {
	if x != nil {
		return x.TopLocation
	}
	return nil
}

func (x *UserReport) GetTopPage() []*PageMetric {
	if x != nil {
		return x.TopPage
	}
	return nil
}

type SourceMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceMetrics []*SourceMetric `protobuf:"bytes,2,rep,name=source_metrics,json=sourceMetrics,proto3" json:"source_metrics,omitempty"`
}

func (x *SourceMetrics) Reset() {
	*x = SourceMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceMetrics) ProtoMessage() {}

func (x *SourceMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceMetrics.ProtoReflect.Descriptor instead.
func (*SourceMetrics) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{58}
}

func (x *SourceMetrics) GetSourceMetrics() []*SourceMetric {
	if x != nil {
		return x.SourceMetrics
	}
	return nil
}

type LocationMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocationMetrics []*LocationMetric `protobuf:"bytes,2,rep,name=location_metrics,json=locationMetrics,proto3" json:"location_metrics,omitempty"`
}

func (x *LocationMetrics) Reset() {
	*x = LocationMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationMetrics) ProtoMessage() {}

func (x *LocationMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationMetrics.ProtoReflect.Descriptor instead.
func (*LocationMetrics) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{59}
}

func (x *LocationMetrics) GetLocationMetrics() []*LocationMetric {
	if x != nil {
		return x.LocationMetrics
	}
	return nil
}

type PageMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageMetrics []*PageMetric `protobuf:"bytes,2,rep,name=page_metrics,json=pageMetrics,proto3" json:"page_metrics,omitempty"`
}

func (x *PageMetrics) Reset() {
	*x = PageMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageMetrics) ProtoMessage() {}

func (x *PageMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageMetrics.ProtoReflect.Descriptor instead.
func (*PageMetrics) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{60}
}

func (x *PageMetrics) GetPageMetrics() []*PageMetric {
	if x != nil {
		return x.PageMetrics
	}
	return nil
}

type ConcurrentUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnixDay int64 `protobuf:"varint,2,opt,name=unix_day,json=unixDay,proto3" json:"unix_day,omitempty"`
	Sum     int64 `protobuf:"varint,3,opt,name=sum,proto3" json:"sum,omitempty"`
	Num     int64 `protobuf:"varint,4,opt,name=num,proto3" json:"num,omitempty"`
	Highest int64 `protobuf:"varint,5,opt,name=highest,proto3" json:"highest,omitempty"`
}

func (x *ConcurrentUser) Reset() {
	*x = ConcurrentUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConcurrentUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConcurrentUser) ProtoMessage() {}

func (x *ConcurrentUser) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConcurrentUser.ProtoReflect.Descriptor instead.
func (*ConcurrentUser) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{61}
}

func (x *ConcurrentUser) GetUnixDay() int64 {
	if x != nil {
		return x.UnixDay
	}
	return 0
}

func (x *ConcurrentUser) GetSum() int64 {
	if x != nil {
		return x.Sum
	}
	return 0
}

func (x *ConcurrentUser) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *ConcurrentUser) GetHighest() int64 {
	if x != nil {
		return x.Highest
	}
	return 0
}

type ReportCCU struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string            `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Ccus      []*ConcurrentUser `protobuf:"bytes,3,rep,name=ccus,proto3" json:"ccus,omitempty"`
}

func (x *ReportCCU) Reset() {
	*x = ReportCCU{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportCCU) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportCCU) ProtoMessage() {}

func (x *ReportCCU) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportCCU.ProtoReflect.Descriptor instead.
func (*ReportCCU) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{62}
}

func (x *ReportCCU) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ReportCCU) GetCcus() []*ConcurrentUser {
	if x != nil {
		return x.Ccus
	}
	return nil
}

type Events struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx          *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Events       []*Event        `protobuf:"bytes,4,rep,name=events,proto3" json:"events,omitempty"`
	Total        int64           `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Anchor       string          `protobuf:"bytes,3,opt,name=anchor,proto3" json:"anchor,omitempty"`
	LastModified int64           `protobuf:"varint,5,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
}

func (x *Events) Reset() {
	*x = Events{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Events) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Events) ProtoMessage() {}

func (x *Events) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Events.ProtoReflect.Descriptor instead.
func (*Events) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{63}
}

func (x *Events) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Events) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *Events) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Events) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *Events) GetLastModified() int64 {
	if x != nil {
		return x.LastModified
	}
	return 0
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx        *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	UserId     string          `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Id         string          `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	AccountId  string          `protobuf:"bytes,4,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Created    int64           `protobuf:"varint,8,opt,name=created,proto3" json:"created,omitempty"`
	Updated    int64           `protobuf:"varint,10,opt,name=updated,proto3" json:"updated,omitempty"`
	Type       string          `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
	Topics     []string        `protobuf:"bytes,11,rep,name=topics,proto3" json:"topics,omitempty"` // TODO: remove
	SessionId  string          `protobuf:"bytes,12,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	By         *common.By      `protobuf:"bytes,50,opt,name=by,proto3" json:"by,omitempty"`
	Touchpoint *Touchpoint     `protobuf:"bytes,52,opt,name=touchpoint,proto3" json:"touchpoint,omitempty"`
	Data       *Event_Data     `protobuf:"bytes,20,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{64}
}

func (x *Event) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Event) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Event) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Event) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Event) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Event) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *Event) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Event) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *Event) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *Event) GetBy() *common.By {
	if x != nil {
		return x.By
	}
	return nil
}

func (x *Event) GetTouchpoint() *Touchpoint {
	if x != nil {
		return x.Touchpoint
	}
	return nil
}

func (x *Event) GetData() *Event_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type EventParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	AccountId string `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *EventParams) Reset() {
	*x = EventParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventParams) ProtoMessage() {}

func (x *EventParams) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventParams.ProtoReflect.Descriptor instead.
func (*EventParams) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{65}
}

func (x *EventParams) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *EventParams) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type ListUserEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	UserId    string          `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Query     string          `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	Anchor    string          `protobuf:"bytes,5,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Limit     int32           `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"` // hour
	Category  string          `protobuf:"bytes,9,opt,name=category,proto3" json:"category,omitempty"`
	LimitHour int32           `protobuf:"varint,10,opt,name=limit_hour,json=limitHour,proto3" json:"limit_hour,omitempty"`
}

func (x *ListUserEventsRequest) Reset() {
	*x = ListUserEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserEventsRequest) ProtoMessage() {}

func (x *ListUserEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserEventsRequest.ProtoReflect.Descriptor instead.
func (*ListUserEventsRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{66}
}

func (x *ListUserEventsRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ListUserEventsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ListUserEventsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListUserEventsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ListUserEventsRequest) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *ListUserEventsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListUserEventsRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *ListUserEventsRequest) GetLimitHour() int32 {
	if x != nil {
		return x.LimitHour
	}
	return 0
}

type UserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	UserId    string          `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Event     *Event          `protobuf:"bytes,5,opt,name=event,proto3" json:"event,omitempty"`
	User      *User           `protobuf:"bytes,6,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *UserEvent) Reset() {
	*x = UserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEvent) ProtoMessage() {}

func (x *UserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEvent.ProtoReflect.Descriptor instead.
func (*UserEvent) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{67}
}

func (x *UserEvent) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *UserEvent) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *UserEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserEvent) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *UserEvent) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type Topic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Topic     string          `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	Type      string          `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Updated   int64           `protobuf:"varint,8,opt,name=updated,proto3" json:"updated,omitempty"`
	Unread    int32           `protobuf:"varint,9,opt,name=unread,proto3" json:"unread,omitempty"` // deprecated by is_read
	UserId    string          `protobuf:"bytes,10,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AgentId   string          `protobuf:"bytes,11,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	ByEvent   *Event          `protobuf:"bytes,14,opt,name=by_event,json=byEvent,proto3" json:"by_event,omitempty"`
	IsMuted   bool            `protobuf:"varint,15,opt,name=is_muted,json=isMuted,proto3" json:"is_muted,omitempty"`
	IsRead    bool            `protobuf:"varint,16,opt,name=is_read,json=isRead,proto3" json:"is_read,omitempty"`
}

func (x *Topic) Reset() {
	*x = Topic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Topic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Topic) ProtoMessage() {}

func (x *Topic) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Topic.ProtoReflect.Descriptor instead.
func (*Topic) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{68}
}

func (x *Topic) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Topic) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Topic) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *Topic) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Topic) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *Topic) GetUnread() int32 {
	if x != nil {
		return x.Unread
	}
	return 0
}

func (x *Topic) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Topic) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *Topic) GetByEvent() *Event {
	if x != nil {
		return x.ByEvent
	}
	return nil
}

func (x *Topic) GetIsMuted() bool {
	if x != nil {
		return x.IsMuted
	}
	return false
}

func (x *Topic) GetIsRead() bool {
	if x != nil {
		return x.IsRead
	}
	return false
}

type UnreadTopic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx     *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Topic   string          `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	AgentId string          `protobuf:"bytes,4,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	UserId  string          `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Type    string          `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	Updated int64           `protobuf:"varint,8,opt,name=updated,proto3" json:"updated,omitempty"`
	Unread  int32           `protobuf:"varint,9,opt,name=unread,proto3" json:"unread,omitempty"`
	ByEvent *Event          `protobuf:"bytes,10,opt,name=by_event,json=byEvent,proto3" json:"by_event,omitempty"`
}

func (x *UnreadTopic) Reset() {
	*x = UnreadTopic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnreadTopic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnreadTopic) ProtoMessage() {}

func (x *UnreadTopic) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnreadTopic.ProtoReflect.Descriptor instead.
func (*UnreadTopic) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{69}
}

func (x *UnreadTopic) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *UnreadTopic) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *UnreadTopic) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *UnreadTopic) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UnreadTopic) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UnreadTopic) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *UnreadTopic) GetUnread() int32 {
	if x != nil {
		return x.Unread
	}
	return 0
}

func (x *UnreadTopic) GetByEvent() *Event {
	if x != nil {
		return x.ByEvent
	}
	return nil
}

// deprecating
type UserSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx                 *common.Context    `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId           string             `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	UserId              string             `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Id                  string             `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	StartEvent          *Event             `protobuf:"bytes,5,opt,name=start_event,json=startEvent,proto3" json:"start_event,omitempty"`
	LatestEvent         *Event             `protobuf:"bytes,6,opt,name=latest_event,json=latestEvent,proto3" json:"latest_event,omitempty"`
	Ip                  string             `protobuf:"bytes,7,opt,name=ip,proto3" json:"ip,omitempty"`
	CityName            string             `protobuf:"bytes,8,opt,name=city_name,json=cityName,proto3" json:"city_name,omitempty"`                 // derived from ip
	CountryName         string             `protobuf:"bytes,9,opt,name=country_name,json=countryName,proto3" json:"country_name,omitempty"`        // derived from ip
	ContinentCode       string             `protobuf:"bytes,10,opt,name=continent_code,json=continentCode,proto3" json:"continent_code,omitempty"` // derived from ip
	Latitude            float32            `protobuf:"fixed32,12,opt,name=latitude,proto3" json:"latitude,omitempty"`                              // derived from ip
	Longitude           float32            `protobuf:"fixed32,13,opt,name=longitude,proto3" json:"longitude,omitempty"`                            // derived from ip
	PostalCode          string             `protobuf:"bytes,14,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`          // derived from ip
	Timezone            string             `protobuf:"bytes,16,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Isp                 string             `protobuf:"bytes,17,opt,name=isp,proto3" json:"isp,omitempty"`                                          // derived from ip
	ContinentName       string             `protobuf:"bytes,18,opt,name=continent_name,json=continentName,proto3" json:"continent_name,omitempty"` // derived from ip
	CountryCode         string             `protobuf:"bytes,19,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`       // derived from ip
	Platform            string             `protobuf:"bytes,20,opt,name=platform,proto3" json:"platform,omitempty"`
	DeviceType          string             `protobuf:"bytes,21,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`    // filled
	BrowserName         string             `protobuf:"bytes,22,opt,name=browser_name,json=browserName,proto3" json:"browser_name,omitempty"` // filled
	Language            string             `protobuf:"bytes,23,opt,name=language,proto3" json:"language,omitempty"`
	UserAgent           string             `protobuf:"bytes,24,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	ScreenResolution    string             `protobuf:"bytes,25,opt,name=screen_resolution,json=screenResolution,proto3" json:"screen_resolution,omitempty"`
	GaClientId          string             `protobuf:"bytes,26,opt,name=ga_client_id,json=gaClientId,proto3" json:"ga_client_id,omitempty"`
	GaTrackingIds       []string           `protobuf:"bytes,27,rep,name=ga_tracking_ids,json=gaTrackingIds,proto3" json:"ga_tracking_ids,omitempty"`
	AdsNetwork          string             `protobuf:"bytes,28,opt,name=ads_network,json=adsNetwork,proto3" json:"ads_network,omitempty"`
	Campaigns           []*SessionCampaign `protobuf:"bytes,29,rep,name=campaigns,proto3" json:"campaigns,omitempty"`
	Referrer            string             `protobuf:"bytes,32,opt,name=referrer,proto3" json:"referrer,omitempty"`
	DestinationReferrer string             `protobuf:"bytes,38,opt,name=destination_referrer,json=destinationReferrer,proto3" json:"destination_referrer,omitempty"`
	Source              string             `protobuf:"bytes,33,opt,name=source,proto3" json:"source,omitempty"`
	LatestContentView   *Event             `protobuf:"bytes,34,opt,name=latest_content_view,json=latestContentView,proto3" json:"latest_content_view,omitempty"`  // read only, do not persist
	TotalContentViews   int64              `protobuf:"varint,35,opt,name=total_content_views,json=totalContentViews,proto3" json:"total_content_views,omitempty"` // read only, do not persist
	LeadScore           float32            `protobuf:"fixed32,36,opt,name=lead_score,json=leadScore,proto3" json:"lead_score,omitempty"`
	TimeOnSite          int64              `protobuf:"varint,37,opt,name=time_on_site,json=timeOnSite,proto3" json:"time_on_site,omitempty"`
	LatestPageUrl       string             `protobuf:"bytes,40,opt,name=latest_page_url,json=latestPageUrl,proto3" json:"latest_page_url,omitempty"`
	LatestPageTitle     string             `protobuf:"bytes,41,opt,name=latest_page_title,json=latestPageTitle,proto3" json:"latest_page_title,omitempty"`
}

func (x *UserSession) Reset() {
	*x = UserSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSession) ProtoMessage() {}

func (x *UserSession) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSession.ProtoReflect.Descriptor instead.
func (*UserSession) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{70}
}

func (x *UserSession) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *UserSession) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *UserSession) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserSession) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserSession) GetStartEvent() *Event {
	if x != nil {
		return x.StartEvent
	}
	return nil
}

func (x *UserSession) GetLatestEvent() *Event {
	if x != nil {
		return x.LatestEvent
	}
	return nil
}

func (x *UserSession) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *UserSession) GetCityName() string {
	if x != nil {
		return x.CityName
	}
	return ""
}

func (x *UserSession) GetCountryName() string {
	if x != nil {
		return x.CountryName
	}
	return ""
}

func (x *UserSession) GetContinentCode() string {
	if x != nil {
		return x.ContinentCode
	}
	return ""
}

func (x *UserSession) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *UserSession) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *UserSession) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *UserSession) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *UserSession) GetIsp() string {
	if x != nil {
		return x.Isp
	}
	return ""
}

func (x *UserSession) GetContinentName() string {
	if x != nil {
		return x.ContinentName
	}
	return ""
}

func (x *UserSession) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *UserSession) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *UserSession) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *UserSession) GetBrowserName() string {
	if x != nil {
		return x.BrowserName
	}
	return ""
}

func (x *UserSession) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *UserSession) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *UserSession) GetScreenResolution() string {
	if x != nil {
		return x.ScreenResolution
	}
	return ""
}

func (x *UserSession) GetGaClientId() string {
	if x != nil {
		return x.GaClientId
	}
	return ""
}

func (x *UserSession) GetGaTrackingIds() []string {
	if x != nil {
		return x.GaTrackingIds
	}
	return nil
}

func (x *UserSession) GetAdsNetwork() string {
	if x != nil {
		return x.AdsNetwork
	}
	return ""
}

func (x *UserSession) GetCampaigns() []*SessionCampaign {
	if x != nil {
		return x.Campaigns
	}
	return nil
}

func (x *UserSession) GetReferrer() string {
	if x != nil {
		return x.Referrer
	}
	return ""
}

func (x *UserSession) GetDestinationReferrer() string {
	if x != nil {
		return x.DestinationReferrer
	}
	return ""
}

func (x *UserSession) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *UserSession) GetLatestContentView() *Event {
	if x != nil {
		return x.LatestContentView
	}
	return nil
}

func (x *UserSession) GetTotalContentViews() int64 {
	if x != nil {
		return x.TotalContentViews
	}
	return 0
}

func (x *UserSession) GetLeadScore() float32 {
	if x != nil {
		return x.LeadScore
	}
	return 0
}

func (x *UserSession) GetTimeOnSite() int64 {
	if x != nil {
		return x.TimeOnSite
	}
	return 0
}

func (x *UserSession) GetLatestPageUrl() string {
	if x != nil {
		return x.LatestPageUrl
	}
	return ""
}

func (x *UserSession) GetLatestPageTitle() string {
	if x != nil {
		return x.LatestPageTitle
	}
	return ""
}

type StartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx            *common.Context       `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId      string                `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Created        int64                 `protobuf:"varint,13,opt,name=created,proto3" json:"created,omitempty"`
	ConversationId string                `protobuf:"bytes,14,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	User           *User                 `protobuf:"bytes,25,opt,name=user,proto3" json:"user,omitempty"`
	IntegrationId  string                `protobuf:"bytes,26,opt,name=integration_id,json=integrationId,proto3" json:"integration_id,omitempty"`
	ChainId        string                `protobuf:"bytes,27,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Message        string                `protobuf:"bytes,30,opt,name=message,proto3" json:"message,omitempty"`
	Members        []*ConversationMember `protobuf:"bytes,31,rep,name=members,proto3" json:"members,omitempty"`
	GroupId        string                `protobuf:"bytes,32,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	State          string                `protobuf:"bytes,33,opt,name=state,proto3" json:"state,omitempty"` // default is pending, should be active if dont want routing
	Locale         string                `protobuf:"bytes,34,opt,name=locale,proto3" json:"locale,omitempty"`
	// starter may be user, but because of bot or automation,
	// if user manually click on start conversation button initial_by is user id
	// if bot automatically created conversation by widget (using user cred),
	// initial_by is bot id
	InitialBy  string      `protobuf:"bytes,35,opt,name=initial_by,json=initialBy,proto3" json:"initial_by,omitempty"`
	Source     string      `protobuf:"bytes,36,opt,name=source,proto3" json:"source,omitempty"`
	IsPrivate  bool        `protobuf:"varint,37,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
	Subject    string      `protobuf:"bytes,38,opt,name=subject,proto3" json:"subject,omitempty"`
	Touchpoint *Touchpoint `protobuf:"bytes,39,opt,name=touchpoint,proto3" json:"touchpoint,omitempty"`
	// call
	Direction string `protobuf:"bytes,7,opt,name=direction,proto3" json:"direction,omitempty"`
	DeviceId  string `protobuf:"bytes,8,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"` // require when direction = outgoing
}

func (x *StartRequest) Reset() {
	*x = StartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRequest) ProtoMessage() {}

func (x *StartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRequest.ProtoReflect.Descriptor instead.
func (*StartRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{71}
}

func (x *StartRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *StartRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *StartRequest) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *StartRequest) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *StartRequest) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *StartRequest) GetIntegrationId() string {
	if x != nil {
		return x.IntegrationId
	}
	return ""
}

func (x *StartRequest) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *StartRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *StartRequest) GetMembers() []*ConversationMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *StartRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *StartRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *StartRequest) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *StartRequest) GetInitialBy() string {
	if x != nil {
		return x.InitialBy
	}
	return ""
}

func (x *StartRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *StartRequest) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *StartRequest) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *StartRequest) GetTouchpoint() *Touchpoint {
	if x != nil {
		return x.Touchpoint
	}
	return nil
}

func (x *StartRequest) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *StartRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

type PresencesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	UserIds   []string        `protobuf:"bytes,2,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	AccountId string          `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *PresencesRequest) Reset() {
	*x = PresencesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PresencesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresencesRequest) ProtoMessage() {}

func (x *PresencesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresencesRequest.ProtoReflect.Descriptor instead.
func (*PresencesRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{72}
}

func (x *PresencesRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *PresencesRequest) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *PresencesRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type PresencesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnlineUserIds  []string `protobuf:"bytes,2,rep,name=online_user_ids,json=onlineUserIds,proto3" json:"online_user_ids,omitempty"`
	FocusedUserIds []string `protobuf:"bytes,3,rep,name=focused_user_ids,json=focusedUserIds,proto3" json:"focused_user_ids,omitempty"`
}

func (x *PresencesResponse) Reset() {
	*x = PresencesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PresencesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresencesResponse) ProtoMessage() {}

func (x *PresencesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresencesResponse.ProtoReflect.Descriptor instead.
func (*PresencesResponse) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{73}
}

func (x *PresencesResponse) GetOnlineUserIds() []string {
	if x != nil {
		return x.OnlineUserIds
	}
	return nil
}

func (x *PresencesResponse) GetFocusedUserIds() []string {
	if x != nil {
		return x.FocusedUserIds
	}
	return nil
}

type BotRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	// require
	AccountId  string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	BotId      string `protobuf:"bytes,3,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	ObjectType string `protobuf:"bytes,4,opt,name=object_type,json=objectType,proto3" json:"object_type,omitempty"` // conversations
	ObjectId   string `protobuf:"bytes,5,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`       // conversation_id
	// user_id is inside this
	ObjectContexts []*KV `protobuf:"bytes,14,rep,name=object_contexts,json=objectContexts,proto3" json:"object_contexts,omitempty"`
	// optional
	Mode     string     `protobuf:"bytes,6,opt,name=mode,proto3" json:"mode,omitempty"`
	Bot      *Bot       `protobuf:"bytes,7,opt,name=bot,proto3" json:"bot,omitempty"`
	ActionId string     `protobuf:"bytes,8,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
	Action   *BotAction `protobuf:"bytes,9,opt,name=action,proto3" json:"action,omitempty"`
	// internal use only
	BotRunType    string `protobuf:"bytes,15,opt,name=bot_run_type,json=botRunType,proto3" json:"bot_run_type,omitempty"`
	ActionRunType string `protobuf:"bytes,16,opt,name=action_run_type,json=actionRunType,proto3" json:"action_run_type,omitempty"`
	Index         int32  `protobuf:"varint,18,opt,name=index,proto3" json:"index,omitempty"`
	// payload
	Created        int64  `protobuf:"varint,10,opt,name=created,proto3" json:"created,omitempty"`
	Event          *Event `protobuf:"bytes,11,opt,name=event,proto3" json:"event,omitempty"`
	BotTriggerType string `protobuf:"bytes,12,opt,name=bot_trigger_type,json=botTriggerType,proto3" json:"bot_trigger_type,omitempty"`
	Lang           string `protobuf:"bytes,17,opt,name=lang,proto3" json:"lang,omitempty"`
}

func (x *BotRunRequest) Reset() {
	*x = BotRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BotRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotRunRequest) ProtoMessage() {}

func (x *BotRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotRunRequest.ProtoReflect.Descriptor instead.
func (*BotRunRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{74}
}

func (x *BotRunRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *BotRunRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *BotRunRequest) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

func (x *BotRunRequest) GetObjectType() string {
	if x != nil {
		return x.ObjectType
	}
	return ""
}

func (x *BotRunRequest) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *BotRunRequest) GetObjectContexts() []*KV {
	if x != nil {
		return x.ObjectContexts
	}
	return nil
}

func (x *BotRunRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *BotRunRequest) GetBot() *Bot {
	if x != nil {
		return x.Bot
	}
	return nil
}

func (x *BotRunRequest) GetActionId() string {
	if x != nil {
		return x.ActionId
	}
	return ""
}

func (x *BotRunRequest) GetAction() *BotAction {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *BotRunRequest) GetBotRunType() string {
	if x != nil {
		return x.BotRunType
	}
	return ""
}

func (x *BotRunRequest) GetActionRunType() string {
	if x != nil {
		return x.ActionRunType
	}
	return ""
}

func (x *BotRunRequest) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *BotRunRequest) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *BotRunRequest) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *BotRunRequest) GetBotTriggerType() string {
	if x != nil {
		return x.BotTriggerType
	}
	return ""
}

func (x *BotRunRequest) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

type BotRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId    string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	BotId        string `protobuf:"bytes,3,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	ObjectType   string `protobuf:"bytes,4,opt,name=object_type,json=objectType,proto3" json:"object_type,omitempty"`
	ObjectId     string `protobuf:"bytes,5,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	ExecBotId    string `protobuf:"bytes,8,opt,name=exec_bot_id,json=execBotId,proto3" json:"exec_bot_id,omitempty"`
	ExecBotState string `protobuf:"bytes,9,opt,name=exec_bot_state,json=execBotState,proto3" json:"exec_bot_state,omitempty"`
	ActionId     string `protobuf:"bytes,16,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
	ActionState  string `protobuf:"bytes,17,opt,name=action_state,json=actionState,proto3" json:"action_state,omitempty"`
}

func (x *BotRunResponse) Reset() {
	*x = BotRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BotRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotRunResponse) ProtoMessage() {}

func (x *BotRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotRunResponse.ProtoReflect.Descriptor instead.
func (*BotRunResponse) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{75}
}

func (x *BotRunResponse) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *BotRunResponse) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

func (x *BotRunResponse) GetObjectType() string {
	if x != nil {
		return x.ObjectType
	}
	return ""
}

func (x *BotRunResponse) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *BotRunResponse) GetExecBotId() string {
	if x != nil {
		return x.ExecBotId
	}
	return ""
}

func (x *BotRunResponse) GetExecBotState() string {
	if x != nil {
		return x.ExecBotState
	}
	return ""
}

func (x *BotRunResponse) GetActionId() string {
	if x != nil {
		return x.ActionId
	}
	return ""
}

func (x *BotRunResponse) GetActionState() string {
	if x != nil {
		return x.ActionState
	}
	return ""
}

type Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx                 *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Id                  string          `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	AccountId           string          `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Priority            int32           `protobuf:"varint,4,opt,name=priority,proto3" json:"priority,omitempty"`
	Strategy            string          `protobuf:"bytes,5,opt,name=strategy,proto3" json:"strategy,omitempty"`
	AssignTos           []string        `protobuf:"bytes,6,rep,name=assign_tos,json=assignTos,proto3" json:"assign_tos,omitempty"`
	Enabled             bool            `protobuf:"varint,8,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Created             int64           `protobuf:"varint,9,opt,name=created,proto3" json:"created,omitempty"`
	Modified            int64           `protobuf:"varint,12,opt,name=modified,proto3" json:"modified,omitempty"`
	Name                string          `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Description         string          `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	AvailableAgentsOnly bool            `protobuf:"varint,13,opt,name=available_agents_only,json=availableAgentsOnly,proto3" json:"available_agents_only,omitempty"` // strategy
	// new condition
	ChannelCondition     *ChannelCondition         `protobuf:"bytes,15,opt,name=channel_condition,json=channelCondition,proto3" json:"channel_condition,omitempty"`
	TimmingCondition     *TimmingCondition         `protobuf:"bytes,16,opt,name=timming_condition,json=timmingCondition,proto3" json:"timming_condition,omitempty"`
	UserHasRepliedBefore bool                      `protobuf:"varint,18,opt,name=user_has_replied_before,json=userHasRepliedBefore,proto3" json:"user_has_replied_before,omitempty"` // new
	UserConditions       []*UserAttributeCondition `protobuf:"bytes,19,rep,name=user_conditions,json=userConditions,proto3" json:"user_conditions,omitempty"`
	WhenOffline          bool                      `protobuf:"varint,21,opt,name=when_offline,json=whenOffline,proto3" json:"when_offline,omitempty"` // only run when there is no online agent
	FallbackAgents       []string                  `protobuf:"bytes,23,rep,name=fallback_agents,json=fallbackAgents,proto3" json:"fallback_agents,omitempty"`
	V                    int64                     `protobuf:"varint,22,opt,name=v,proto3" json:"v,omitempty"`                    // version
	Supervisors          []string                  `protobuf:"bytes,24,rep,name=supervisors,proto3" json:"supervisors,omitempty"` // add tags when rule is matched
}

func (x *Rule) Reset() {
	*x = Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{76}
}

func (x *Rule) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Rule) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Rule) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Rule) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *Rule) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

func (x *Rule) GetAssignTos() []string {
	if x != nil {
		return x.AssignTos
	}
	return nil
}

func (x *Rule) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Rule) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Rule) GetModified() int64 {
	if x != nil {
		return x.Modified
	}
	return 0
}

func (x *Rule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Rule) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Rule) GetAvailableAgentsOnly() bool {
	if x != nil {
		return x.AvailableAgentsOnly
	}
	return false
}

func (x *Rule) GetChannelCondition() *ChannelCondition {
	if x != nil {
		return x.ChannelCondition
	}
	return nil
}

func (x *Rule) GetTimmingCondition() *TimmingCondition {
	if x != nil {
		return x.TimmingCondition
	}
	return nil
}

func (x *Rule) GetUserHasRepliedBefore() bool {
	if x != nil {
		return x.UserHasRepliedBefore
	}
	return false
}

func (x *Rule) GetUserConditions() []*UserAttributeCondition {
	if x != nil {
		return x.UserConditions
	}
	return nil
}

func (x *Rule) GetWhenOffline() bool {
	if x != nil {
		return x.WhenOffline
	}
	return false
}

func (x *Rule) GetFallbackAgents() []string {
	if x != nil {
		return x.FallbackAgents
	}
	return nil
}

func (x *Rule) GetV() int64 {
	if x != nil {
		return x.V
	}
	return 0
}

func (x *Rule) GetSupervisors() []string {
	if x != nil {
		return x.Supervisors
	}
	return nil
}

type TimmingCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessHour string   `protobuf:"bytes,3,opt,name=business_hour,json=businessHour,proto3" json:"business_hour,omitempty"`           // [in, notIn] if this is true, ignore all other timming conditions
	DaysOfWeek   []string `protobuf:"bytes,2,rep,name=days_of_week,json=daysOfWeek,proto3" json:"days_of_week,omitempty"`               // Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday
	MinuteOfDays []int32  `protobuf:"varint,4,rep,packed,name=minute_of_days,json=minuteOfDays,proto3" json:"minute_of_days,omitempty"` // pair [0-4] [6-9]
}

func (x *TimmingCondition) Reset() {
	*x = TimmingCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimmingCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimmingCondition) ProtoMessage() {}

func (x *TimmingCondition) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimmingCondition.ProtoReflect.Descriptor instead.
func (*TimmingCondition) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{77}
}

func (x *TimmingCondition) GetBusinessHour() string {
	if x != nil {
		return x.BusinessHour
	}
	return ""
}

func (x *TimmingCondition) GetDaysOfWeek() []string {
	if x != nil {
		return x.DaysOfWeek
	}
	return nil
}

func (x *TimmingCondition) GetMinuteOfDays() []int32 {
	if x != nil {
		return x.MinuteOfDays
	}
	return nil
}

type ChannelCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channels []string `protobuf:"bytes,2,rep,name=channels,proto3" json:"channels,omitempty"` // default: all channel
	// for fb comment
	// for messenger
	// for zalo
	IntegrationIds []string `protobuf:"bytes,3,rep,name=integration_ids,json=integrationIds,proto3" json:"integration_ids,omitempty"` // optional for subiz and email
	// for subiz only
	Locations      []*LocationCondition `protobuf:"bytes,4,rep,name=locations,proto3" json:"locations,omitempty"`                                    // or
	NotInLocations []*LocationCondition `protobuf:"bytes,13,rep,name=not_in_locations,json=notInLocations,proto3" json:"not_in_locations,omitempty"` // or
	PageUrls       []string             `protobuf:"bytes,5,rep,name=page_urls,json=pageUrls,proto3" json:"page_urls,omitempty"`
	DeviceTypes    []string             `protobuf:"bytes,7,rep,name=device_types,json=deviceTypes,proto3" json:"device_types,omitempty"` // desktop, mobile, tablet
	// for email only
	EmailTos      []string `protobuf:"bytes,10,rep,name=email_tos,json=emailTos,proto3" json:"email_tos,omitempty"`                // contains
	EmailFroms    []string `protobuf:"bytes,11,rep,name=email_froms,json=emailFroms,proto3" json:"email_froms,omitempty"`          // contains
	EmailSubjects []string `protobuf:"bytes,12,rep,name=email_subjects,json=emailSubjects,proto3" json:"email_subjects,omitempty"` // contains
}

func (x *ChannelCondition) Reset() {
	*x = ChannelCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelCondition) ProtoMessage() {}

func (x *ChannelCondition) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelCondition.ProtoReflect.Descriptor instead.
func (*ChannelCondition) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{78}
}

func (x *ChannelCondition) GetChannels() []string {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *ChannelCondition) GetIntegrationIds() []string {
	if x != nil {
		return x.IntegrationIds
	}
	return nil
}

func (x *ChannelCondition) GetLocations() []*LocationCondition {
	if x != nil {
		return x.Locations
	}
	return nil
}

func (x *ChannelCondition) GetNotInLocations() []*LocationCondition {
	if x != nil {
		return x.NotInLocations
	}
	return nil
}

func (x *ChannelCondition) GetPageUrls() []string {
	if x != nil {
		return x.PageUrls
	}
	return nil
}

func (x *ChannelCondition) GetDeviceTypes() []string {
	if x != nil {
		return x.DeviceTypes
	}
	return nil
}

func (x *ChannelCondition) GetEmailTos() []string {
	if x != nil {
		return x.EmailTos
	}
	return nil
}

func (x *ChannelCondition) GetEmailFroms() []string {
	if x != nil {
		return x.EmailFroms
	}
	return nil
}

func (x *ChannelCondition) GetEmailSubjects() []string {
	if x != nil {
		return x.EmailSubjects
	}
	return nil
}

type LocationCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CityName    string   `protobuf:"bytes,3,opt,name=city_name,json=cityName,proto3" json:"city_name,omitempty"`          // must equal
	CountryCode string   `protobuf:"bytes,4,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"` // must equal
	Province    string   `protobuf:"bytes,5,opt,name=province,proto3" json:"province,omitempty"`
	Districts   []string `protobuf:"bytes,6,rep,name=districts,proto3" json:"districts,omitempty"`
}

func (x *LocationCondition) Reset() {
	*x = LocationCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationCondition) ProtoMessage() {}

func (x *LocationCondition) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationCondition.ProtoReflect.Descriptor instead.
func (*LocationCondition) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{79}
}

func (x *LocationCondition) GetCityName() string {
	if x != nil {
		return x.CityName
	}
	return ""
}

func (x *LocationCondition) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *LocationCondition) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *LocationCondition) GetDistricts() []string {
	if x != nil {
		return x.Districts
	}
	return nil
}

type Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx   *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Rules []*Rule         `protobuf:"bytes,2,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *Route) Reset() {
	*x = Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Route) ProtoMessage() {}

func (x *Route) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Route.ProtoReflect.Descriptor instead.
func (*Route) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{80}
}

func (x *Route) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Route) GetRules() []*Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type RouteResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleId   string   `protobuf:"bytes,1,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	Strategy string   `protobuf:"bytes,3,opt,name=strategy,proto3" json:"strategy,omitempty"`
	AgentIds []string `protobuf:"bytes,4,rep,name=agent_ids,json=agentIds,proto3" json:"agent_ids,omitempty"`
	GroupId  string   `protobuf:"bytes,5,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	State    string   `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	Assigned int64    `protobuf:"varint,7,opt,name=assigned,proto3" json:"assigned,omitempty"`       // ms
	BotId    string   `protobuf:"bytes,8,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"` // strategy == bot
}

func (x *RouteResult) Reset() {
	*x = RouteResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteResult) ProtoMessage() {}

func (x *RouteResult) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteResult.ProtoReflect.Descriptor instead.
func (*RouteResult) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{81}
}

func (x *RouteResult) GetRuleId() string {
	if x != nil {
		return x.RuleId
	}
	return ""
}

func (x *RouteResult) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

func (x *RouteResult) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *RouteResult) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *RouteResult) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *RouteResult) GetAssigned() int64 {
	if x != nil {
		return x.Assigned
	}
	return 0
}

func (x *RouteResult) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

type ConversationMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx             *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId       string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Type            string          `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"` // type
	Id              string          `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	ConversationId  string          `protobuf:"bytes,13,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	LastPageViewUrl string          `protobuf:"bytes,15,opt,name=last_page_view_url,json=lastPageViewUrl,proto3" json:"last_page_view_url,omitempty"`
	Membership      string          `protobuf:"bytes,12,opt,name=membership,proto3" json:"membership,omitempty"`
	InvitedBy       *common.By      `protobuf:"bytes,16,opt,name=invited_by,json=invitedBy,proto3" json:"invited_by,omitempty"`
	LeftAt          int64           `protobuf:"varint,17,opt,name=left_at,json=leftAt,proto3" json:"left_at,omitempty"`
	JoinedAt        int64           `protobuf:"varint,18,opt,name=joined_at,json=joinedAt,proto3" json:"joined_at,omitempty"`                     // ms
	FirstMessageAt  int64           `protobuf:"varint,19,opt,name=first_message_at,json=firstMessageAt,proto3" json:"first_message_at,omitempty"` // ms
	SeenAt          int64           `protobuf:"varint,20,opt,name=seen_at,json=seenAt,proto3" json:"seen_at,omitempty"`
	ReceivedAt      int64           `protobuf:"varint,21,opt,name=received_at,json=receivedAt,proto3" json:"received_at,omitempty"`
	LastSent        int64           `protobuf:"varint,23,opt,name=last_sent,json=lastSent,proto3" json:"last_sent,omitempty"` // timestamp
	IsMuted         bool            `protobuf:"varint,27,opt,name=is_muted,json=isMuted,proto3" json:"is_muted,omitempty"`
	OffNotification bool            `protobuf:"varint,28,opt,name=off_notification,json=offNotification,proto3" json:"off_notification,omitempty"`
	Hidden          int64           `protobuf:"varint,29,opt,name=hidden,proto3" json:"hidden,omitempty"`                                    // ms
	LastMentioned   int64           `protobuf:"varint,30,opt,name=last_mentioned,json=lastMentioned,proto3" json:"last_mentioned,omitempty"` // ms
	ProfileId       string          `protobuf:"bytes,31,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`              // only used if type = user
	Channel         string          `protobuf:"bytes,32,opt,name=channel,proto3" json:"channel,omitempty"`
	ChannelSource   string          `protobuf:"bytes,33,opt,name=channel_source,json=channelSource,proto3" json:"channel_source,omitempty"`
}

func (x *ConversationMember) Reset() {
	*x = ConversationMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationMember) ProtoMessage() {}

func (x *ConversationMember) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationMember.ProtoReflect.Descriptor instead.
func (*ConversationMember) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{82}
}

func (x *ConversationMember) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ConversationMember) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ConversationMember) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ConversationMember) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ConversationMember) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *ConversationMember) GetLastPageViewUrl() string {
	if x != nil {
		return x.LastPageViewUrl
	}
	return ""
}

func (x *ConversationMember) GetMembership() string {
	if x != nil {
		return x.Membership
	}
	return ""
}

func (x *ConversationMember) GetInvitedBy() *common.By {
	if x != nil {
		return x.InvitedBy
	}
	return nil
}

func (x *ConversationMember) GetLeftAt() int64 {
	if x != nil {
		return x.LeftAt
	}
	return 0
}

func (x *ConversationMember) GetJoinedAt() int64 {
	if x != nil {
		return x.JoinedAt
	}
	return 0
}

func (x *ConversationMember) GetFirstMessageAt() int64 {
	if x != nil {
		return x.FirstMessageAt
	}
	return 0
}

func (x *ConversationMember) GetSeenAt() int64 {
	if x != nil {
		return x.SeenAt
	}
	return 0
}

func (x *ConversationMember) GetReceivedAt() int64 {
	if x != nil {
		return x.ReceivedAt
	}
	return 0
}

func (x *ConversationMember) GetLastSent() int64 {
	if x != nil {
		return x.LastSent
	}
	return 0
}

func (x *ConversationMember) GetIsMuted() bool {
	if x != nil {
		return x.IsMuted
	}
	return false
}

func (x *ConversationMember) GetOffNotification() bool {
	if x != nil {
		return x.OffNotification
	}
	return false
}

func (x *ConversationMember) GetHidden() int64 {
	if x != nil {
		return x.Hidden
	}
	return 0
}

func (x *ConversationMember) GetLastMentioned() int64 {
	if x != nil {
		return x.LastMentioned
	}
	return 0
}

func (x *ConversationMember) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

func (x *ConversationMember) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *ConversationMember) GetChannelSource() string {
	if x != nil {
		return x.ChannelSource
	}
	return ""
}

type ListConversationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	//	 string state = 4; // empty or unassigned
	MemberId string `protobuf:"bytes,8,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"` // ignore
	//  string group_by = 9;
	IntegrationId     string   `protobuf:"bytes,10,opt,name=integration_id,json=integrationId,proto3" json:"integration_id,omitempty"`
	UserId            string   `protobuf:"bytes,11,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Limit             int32    `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	Anchor            string   `protobuf:"bytes,6,opt,name=anchor,proto3" json:"anchor,omitempty"`
	AgentId           string   `protobuf:"bytes,12,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"` // list conversations of agent
	UserIds           []string `protobuf:"bytes,13,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"` // for live, only return id and state
	State             string   `protobuf:"bytes,14,opt,name=state,proto3" json:"state,omitempty"`
	IsPrivate         bool     `protobuf:"varint,15,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"` // for agent only
	IdOnly            bool     `protobuf:"varint,16,opt,name=id_only,json=idOnly,proto3" json:"id_only,omitempty"`          // internal usage
	TouchpointChannel string   `protobuf:"bytes,17,opt,name=touchpoint_channel,json=touchpointChannel,proto3" json:"touchpoint_channel,omitempty"`
	TouchpointSource  string   `protobuf:"bytes,18,opt,name=touchpoint_source,json=touchpointSource,proto3" json:"touchpoint_source,omitempty"`
	TouchpointId      string   `protobuf:"bytes,19,opt,name=touchpoint_id,json=touchpointId,proto3" json:"touchpoint_id,omitempty"`
}

func (x *ListConversationsRequest) Reset() {
	*x = ListConversationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConversationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConversationsRequest) ProtoMessage() {}

func (x *ListConversationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConversationsRequest.ProtoReflect.Descriptor instead.
func (*ListConversationsRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{83}
}

func (x *ListConversationsRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ListConversationsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ListConversationsRequest) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

func (x *ListConversationsRequest) GetIntegrationId() string {
	if x != nil {
		return x.IntegrationId
	}
	return ""
}

func (x *ListConversationsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListConversationsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListConversationsRequest) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *ListConversationsRequest) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *ListConversationsRequest) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *ListConversationsRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *ListConversationsRequest) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *ListConversationsRequest) GetIdOnly() bool {
	if x != nil {
		return x.IdOnly
	}
	return false
}

func (x *ListConversationsRequest) GetTouchpointChannel() string {
	if x != nil {
		return x.TouchpointChannel
	}
	return ""
}

func (x *ListConversationsRequest) GetTouchpointSource() string {
	if x != nil {
		return x.TouchpointSource
	}
	return ""
}

func (x *ListConversationsRequest) GetTouchpointId() string {
	if x != nil {
		return x.TouchpointId
	}
	return ""
}

type ListConversationEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx            *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId      string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ConversationId string          `protobuf:"bytes,3,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	StartId        string          `protobuf:"bytes,4,opt,name=start_id,json=startId,proto3" json:"start_id,omitempty"`
	Limit          int32           `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	MessageType    string          `protobuf:"bytes,15,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"` // 'empty', file, image, link, pinned
	IsPrivate      bool            `protobuf:"varint,7,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
}

func (x *ListConversationEventsRequest) Reset() {
	*x = ListConversationEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConversationEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConversationEventsRequest) ProtoMessage() {}

func (x *ListConversationEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConversationEventsRequest.ProtoReflect.Descriptor instead.
func (*ListConversationEventsRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{84}
}

func (x *ListConversationEventsRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ListConversationEventsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ListConversationEventsRequest) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *ListConversationEventsRequest) GetStartId() string {
	if x != nil {
		return x.StartId
	}
	return ""
}

func (x *ListConversationEventsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListConversationEventsRequest) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *ListConversationEventsRequest) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

type Chain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId      string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Id             string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	ConversationId string `protobuf:"bytes,4,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
}

func (x *Chain) Reset() {
	*x = Chain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chain) ProtoMessage() {}

func (x *Chain) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chain.ProtoReflect.Descriptor instead.
func (*Chain) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{85}
}

func (x *Chain) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Chain) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Chain) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

type Conversation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx                     *common.Context       `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Id                      string                `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	AccountId               string                `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Created                 int64                 `protobuf:"varint,4,opt,name=created,proto3" json:"created,omitempty"`
	Members                 []*ConversationMember `protobuf:"bytes,7,rep,name=members,proto3" json:"members,omitempty"`
	Tags                    []*Tag                `protobuf:"bytes,10,rep,name=tags,proto3" json:"tags,omitempty"`
	Ended                   int64                 `protobuf:"varint,12,opt,name=ended,proto3" json:"ended,omitempty"`          // for call only
	State                   string                `protobuf:"bytes,11,opt,name=state,proto3" json:"state,omitempty"`           // converation state: pending, dialing, active, (routing||unassigned), congestion, ended
	Touchpoint              *Touchpoint           `protobuf:"bytes,13,opt,name=touchpoint,proto3" json:"touchpoint,omitempty"` // where does the conversation happend, replace integration and chain
	Integration             *Integration          `protobuf:"bytes,18,opt,name=integration,proto3" json:"integration,omitempty"`
	Actived                 int64                 `protobuf:"varint,19,opt,name=actived,proto3" json:"actived,omitempty"`
	LastMessage             *Message              `protobuf:"bytes,20,opt,name=last_message,json=lastMessage,proto3" json:"last_message,omitempty"` // remove after update mobile app
	LastInternalMessageSent *Event                `protobuf:"bytes,27,opt,name=last_internal_message_sent,json=lastInternalMessageSent,proto3" json:"last_internal_message_sent,omitempty"`
	LastMessageSent         *Event                `protobuf:"bytes,23,opt,name=last_message_sent,json=lastMessageSent,proto3" json:"last_message_sent,omitempty"` // no internal
	LastEvent               *Event                `protobuf:"bytes,26,opt,name=last_event,json=lastEvent,proto3" json:"last_event,omitempty"`                     // no internal
	InitialBy               string                `protobuf:"bytes,25,opt,name=initial_by,json=initialBy,proto3" json:"initial_by,omitempty"`                     // agent_id || popup || user || bot
	ResponseSec             int64                 `protobuf:"varint,22,opt,name=response_sec,json=responseSec,proto3" json:"response_sec,omitempty"`
	ChainId                 string                `protobuf:"bytes,24,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	AssignedTo              *RouteResult          `protobuf:"bytes,30,opt,name=assigned_to,json=assignedTo,proto3" json:"assigned_to,omitempty"`
	FirstMessage            string                `protobuf:"bytes,31,opt,name=first_message,json=firstMessage,proto3" json:"first_message,omitempty"`
	Subject                 string                `protobuf:"bytes,32,opt,name=subject,proto3" json:"subject,omitempty"`
	Fields                  []*KV                 `protobuf:"bytes,33,rep,name=fields,proto3" json:"fields,omitempty"`
	Ratings                 []*Rating             `protobuf:"bytes,35,rep,name=ratings,proto3" json:"ratings,omitempty"`
	Source                  string                `protobuf:"bytes,36,opt,name=source,proto3" json:"source,omitempty"` // indicate where does the conversation happended (url)
	// my field
	AgentId              string    `protobuf:"bytes,40,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Mute                 bool      `protobuf:"varint,41,opt,name=mute,proto3" json:"mute,omitempty"`   // true, false
	Read                 bool      `protobuf:"varint,42,opt,name=read,proto3" json:"read,omitempty"`   // true, false
	Watch                bool      `protobuf:"varint,44,opt,name=watch,proto3" json:"watch,omitempty"` // true
	Hidden               int64     `protobuf:"varint,39,opt,name=hidden,proto3" json:"hidden,omitempty"`
	Updated              int64     `protobuf:"varint,43,opt,name=updated,proto3" json:"updated,omitempty"`
	MatchedEvent         *Event    `protobuf:"bytes,45,opt,name=matched_event,json=matchedEvent,proto3" json:"matched_event,omitempty"` // for search only
	Locale               string    `protobuf:"bytes,46,opt,name=locale,proto3" json:"locale,omitempty"`
	AgentSentIds         []string  `protobuf:"bytes,47,rep,name=agent_sent_ids,json=agentSentIds,proto3" json:"agent_sent_ids,omitempty"`                          // holap derived
	FirstRepliedDuration int64     `protobuf:"varint,48,opt,name=first_replied_duration,json=firstRepliedDuration,proto3" json:"first_replied_duration,omitempty"` // holap derived
	Channel              string    `protobuf:"bytes,49,opt,name=channel,proto3" json:"channel,omitempty"`                                                          // holap derived
	ChannelTouchpoint    string    `protobuf:"bytes,50,opt,name=channel_touchpoint,json=channelTouchpoint,proto3" json:"channel_touchpoint,omitempty"`             // holap derived
	IsPrivate            bool      `protobuf:"varint,51,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
	AvatarUrl            string    `protobuf:"bytes,52,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	LastModified         int64     `protobuf:"varint,53,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	IsReturned           bool      `protobuf:"varint,54,opt,name=is_returned,json=isReturned,proto3" json:"is_returned,omitempty"` // for report new vs. old
	Call                 *CallInfo `protobuf:"bytes,55,opt,name=call,proto3" json:"call,omitempty"`
	// only use to communicate with call driver
	CallRequest *CallDriverRequest `protobuf:"bytes,56,opt,name=call_request,json=callRequest,proto3" json:"call_request,omitempty"`
}

func (x *Conversation) Reset() {
	*x = Conversation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conversation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conversation) ProtoMessage() {}

func (x *Conversation) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conversation.ProtoReflect.Descriptor instead.
func (*Conversation) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{86}
}

func (x *Conversation) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Conversation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Conversation) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Conversation) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Conversation) GetMembers() []*ConversationMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *Conversation) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Conversation) GetEnded() int64 {
	if x != nil {
		return x.Ended
	}
	return 0
}

func (x *Conversation) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Conversation) GetTouchpoint() *Touchpoint {
	if x != nil {
		return x.Touchpoint
	}
	return nil
}

func (x *Conversation) GetIntegration() *Integration {
	if x != nil {
		return x.Integration
	}
	return nil
}

func (x *Conversation) GetActived() int64 {
	if x != nil {
		return x.Actived
	}
	return 0
}

func (x *Conversation) GetLastMessage() *Message {
	if x != nil {
		return x.LastMessage
	}
	return nil
}

func (x *Conversation) GetLastInternalMessageSent() *Event {
	if x != nil {
		return x.LastInternalMessageSent
	}
	return nil
}

func (x *Conversation) GetLastMessageSent() *Event {
	if x != nil {
		return x.LastMessageSent
	}
	return nil
}

func (x *Conversation) GetLastEvent() *Event {
	if x != nil {
		return x.LastEvent
	}
	return nil
}

func (x *Conversation) GetInitialBy() string {
	if x != nil {
		return x.InitialBy
	}
	return ""
}

func (x *Conversation) GetResponseSec() int64 {
	if x != nil {
		return x.ResponseSec
	}
	return 0
}

func (x *Conversation) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *Conversation) GetAssignedTo() *RouteResult {
	if x != nil {
		return x.AssignedTo
	}
	return nil
}

func (x *Conversation) GetFirstMessage() string {
	if x != nil {
		return x.FirstMessage
	}
	return ""
}

func (x *Conversation) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *Conversation) GetFields() []*KV {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Conversation) GetRatings() []*Rating {
	if x != nil {
		return x.Ratings
	}
	return nil
}

func (x *Conversation) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Conversation) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *Conversation) GetMute() bool {
	if x != nil {
		return x.Mute
	}
	return false
}

func (x *Conversation) GetRead() bool {
	if x != nil {
		return x.Read
	}
	return false
}

func (x *Conversation) GetWatch() bool {
	if x != nil {
		return x.Watch
	}
	return false
}

func (x *Conversation) GetHidden() int64 {
	if x != nil {
		return x.Hidden
	}
	return 0
}

func (x *Conversation) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *Conversation) GetMatchedEvent() *Event {
	if x != nil {
		return x.MatchedEvent
	}
	return nil
}

func (x *Conversation) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *Conversation) GetAgentSentIds() []string {
	if x != nil {
		return x.AgentSentIds
	}
	return nil
}

func (x *Conversation) GetFirstRepliedDuration() int64 {
	if x != nil {
		return x.FirstRepliedDuration
	}
	return 0
}

func (x *Conversation) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *Conversation) GetChannelTouchpoint() string {
	if x != nil {
		return x.ChannelTouchpoint
	}
	return ""
}

func (x *Conversation) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *Conversation) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *Conversation) GetLastModified() int64 {
	if x != nil {
		return x.LastModified
	}
	return 0
}

func (x *Conversation) GetIsReturned() bool {
	if x != nil {
		return x.IsReturned
	}
	return false
}

func (x *Conversation) GetCall() *CallInfo {
	if x != nil {
		return x.Call
	}
	return nil
}

func (x *Conversation) GetCallRequest() *CallDriverRequest {
	if x != nil {
		return x.CallRequest
	}
	return nil
}

type CallInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId      string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ConversationId string `protobuf:"bytes,3,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	Started        int64  `protobuf:"varint,5,opt,name=started,proto3" json:"started,omitempty"`
	// call only
	// time start to anster
	Answered             int64  `protobuf:"varint,6,opt,name=answered,proto3" json:"answered,omitempty"`
	Ended                int64  `protobuf:"varint,7,opt,name=ended,proto3" json:"ended,omitempty"`
	ToNumber             string `protobuf:"bytes,8,opt,name=to_number,json=toNumber,proto3" json:"to_number,omitempty"`       // derived from touchpoint
	FromNumber           string `protobuf:"bytes,9,opt,name=from_number,json=fromNumber,proto3" json:"from_number,omitempty"` // derived from touchpoint
	Direction            string `protobuf:"bytes,10,opt,name=direction,proto3" json:"direction,omitempty"`                    // inbound, outbound
	InitialByPhoneDevice string `protobuf:"bytes,11,opt,name=initial_by_phone_device,json=initialByPhoneDevice,proto3" json:"initial_by_phone_device,omitempty"`
	IsMissed             bool   `protobuf:"varint,12,opt,name=is_missed,json=isMissed,proto3" json:"is_missed,omitempty"`
	EnableRecording      bool   `protobuf:"varint,14,opt,name=enable_recording,json=enableRecording,proto3" json:"enable_recording,omitempty"`
	Driver               string `protobuf:"bytes,15,opt,name=driver,proto3" json:"driver,omitempty"`                               // derived from integration.call_center_driver
	DurationSec          int64  `protobuf:"varint,16,opt,name=duration_sec,json=durationSec,proto3" json:"duration_sec,omitempty"` // ms
	HangupCode           string `protobuf:"bytes,17,opt,name=hangup_code,json=hangupCode,proto3" json:"hangup_code,omitempty"`
	// string call_status = 18; // waiting_for_key
	ProcessId string `protobuf:"bytes,19,opt,name=process_id,json=processId,proto3" json:"process_id,omitempty"` // check outdated
	// derived from convo.state, do not use this, use convo.state instead
	// this field only for driver to return call status
	// accepts: active, ended, dialing
	Status         string `protobuf:"bytes,20,opt,name=status,proto3" json:"status,omitempty"`
	AnsweredDevice string `protobuf:"bytes,21,opt,name=answered_device,json=answeredDevice,proto3" json:"answered_device,omitempty"`
	RecordedAudio  *File  `protobuf:"bytes,22,opt,name=recorded_audio,json=recordedAudio,proto3" json:"recorded_audio,omitempty"`
}

func (x *CallInfo) Reset() {
	*x = CallInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallInfo) ProtoMessage() {}

func (x *CallInfo) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallInfo.ProtoReflect.Descriptor instead.
func (*CallInfo) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{87}
}

func (x *CallInfo) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CallInfo) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *CallInfo) GetStarted() int64 {
	if x != nil {
		return x.Started
	}
	return 0
}

func (x *CallInfo) GetAnswered() int64 {
	if x != nil {
		return x.Answered
	}
	return 0
}

func (x *CallInfo) GetEnded() int64 {
	if x != nil {
		return x.Ended
	}
	return 0
}

func (x *CallInfo) GetToNumber() string {
	if x != nil {
		return x.ToNumber
	}
	return ""
}

func (x *CallInfo) GetFromNumber() string {
	if x != nil {
		return x.FromNumber
	}
	return ""
}

func (x *CallInfo) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *CallInfo) GetInitialByPhoneDevice() string {
	if x != nil {
		return x.InitialByPhoneDevice
	}
	return ""
}

func (x *CallInfo) GetIsMissed() bool {
	if x != nil {
		return x.IsMissed
	}
	return false
}

func (x *CallInfo) GetEnableRecording() bool {
	if x != nil {
		return x.EnableRecording
	}
	return false
}

func (x *CallInfo) GetDriver() string {
	if x != nil {
		return x.Driver
	}
	return ""
}

func (x *CallInfo) GetDurationSec() int64 {
	if x != nil {
		return x.DurationSec
	}
	return 0
}

func (x *CallInfo) GetHangupCode() string {
	if x != nil {
		return x.HangupCode
	}
	return ""
}

func (x *CallInfo) GetProcessId() string {
	if x != nil {
		return x.ProcessId
	}
	return ""
}

func (x *CallInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CallInfo) GetAnsweredDevice() string {
	if x != nil {
		return x.AnsweredDevice
	}
	return ""
}

func (x *CallInfo) GetRecordedAudio() *File {
	if x != nil {
		return x.RecordedAudio
	}
	return nil
}

type Rating struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rated    int64  `protobuf:"varint,35,opt,name=rated,proto3" json:"rated,omitempty"`                       // rated time ms
	Rating   int32  `protobuf:"varint,36,opt,name=rating,proto3" json:"rating,omitempty"`                     // 1-poor 2 3-average 4 5-great
	RatedBy  string `protobuf:"bytes,37,opt,name=rated_by,json=ratedBy,proto3" json:"rated_by,omitempty"`     // must be an user id
	NoRating bool   `protobuf:"varint,38,opt,name=no_rating,json=noRating,proto3" json:"no_rating,omitempty"` // use dont want to rate
	Comment  string `protobuf:"bytes,39,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *Rating) Reset() {
	*x = Rating{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rating) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rating) ProtoMessage() {}

func (x *Rating) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rating.ProtoReflect.Descriptor instead.
func (*Rating) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{88}
}

func (x *Rating) GetRated() int64 {
	if x != nil {
		return x.Rated
	}
	return 0
}

func (x *Rating) GetRating() int32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *Rating) GetRatedBy() string {
	if x != nil {
		return x.RatedBy
	}
	return ""
}

func (x *Rating) GetNoRating() bool {
	if x != nil {
		return x.NoRating
	}
	return false
}

func (x *Rating) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type Conversations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx           *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Conversations []*Conversation `protobuf:"bytes,3,rep,name=conversations,proto3" json:"conversations,omitempty"`
	Anchor        string          `protobuf:"bytes,4,opt,name=anchor,proto3" json:"anchor,omitempty"`
	UserIds       []string        `protobuf:"bytes,5,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	Errors        []*Error        `protobuf:"bytes,6,rep,name=errors,proto3" json:"errors,omitempty"`
	LastModified  int64           `protobuf:"varint,7,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
}

func (x *Conversations) Reset() {
	*x = Conversations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conversations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conversations) ProtoMessage() {}

func (x *Conversations) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conversations.ProtoReflect.Descriptor instead.
func (*Conversations) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{89}
}

func (x *Conversations) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Conversations) GetConversations() []*Conversation {
	if x != nil {
		return x.Conversations
	}
	return nil
}

func (x *Conversations) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *Conversations) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *Conversations) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *Conversations) GetLastModified() int64 {
	if x != nil {
		return x.LastModified
	}
	return 0
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx            *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId      string          `protobuf:"bytes,5,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	OrderId        string          `protobuf:"bytes,6,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	ConversationId string          `protobuf:"bytes,14,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	TaskId         string          `protobuf:"bytes,27,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Id             string          `protobuf:"bytes,11,opt,name=id,proto3" json:"id,omitempty"`
	Text           string          `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Format         string          `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"` // plaintext, html, markdown, delta
	Attachments    []*Attachment   `protobuf:"bytes,4,rep,name=attachments,proto3" json:"attachments,omitempty"`
	Fields         []*KV           `protobuf:"bytes,10,rep,name=fields,proto3" json:"fields,omitempty"`
	IntegrationId  string          `protobuf:"bytes,15,opt,name=integration_id,json=integrationId,proto3" json:"integration_id,omitempty"`
	ChainId        string          `protobuf:"bytes,16,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	UserId         string          `protobuf:"bytes,19,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // new standard, removing chain
	// used for reaction and delivery status, could be ignore
	Pongs          []*MessagePong `protobuf:"bytes,17,rep,name=pongs,proto3" json:"pongs,omitempty"`
	QuillDelta     string         `protobuf:"bytes,20,opt,name=quill_delta,json=quillDelta,proto3" json:"quill_delta,omitempty"`
	I18NQuillDelta *I18NString    `protobuf:"bytes,21,opt,name=i18n_quill_delta,json=i18nQuillDelta,proto3" json:"i18n_quill_delta,omitempty"` // for template
	IsPrivate      bool           `protobuf:"varint,22,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
	// bool is_pinned = 24;
	Pinned         int64           `protobuf:"varint,25,opt,name=pinned,proto3" json:"pinned,omitempty"`
	PinnedBy       string          `protobuf:"bytes,26,opt,name=pinned_by,json=pinnedBy,proto3" json:"pinned_by,omitempty"`
	CommentId      string          `protobuf:"bytes,28,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"` // for fb or instagram
	IdempotencyKey string          `protobuf:"bytes,29,opt,name=idempotency_key,json=idempotencyKey,proto3" json:"idempotency_key,omitempty"`
	Story          *InstagramStory `protobuf:"bytes,30,opt,name=story,proto3" json:"story,omitempty"` // for instagram
	Tos            []string        `protobuf:"bytes,31,rep,name=tos,proto3" json:"tos,omitempty"`     // to user_id
	IsInternal     bool            `protobuf:"varint,32,opt,name=is_internal,json=isInternal,proto3" json:"is_internal,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{90}
}

func (x *Message) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Message) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Message) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *Message) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *Message) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *Message) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Message) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Message) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *Message) GetAttachments() []*Attachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *Message) GetFields() []*KV {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Message) GetIntegrationId() string {
	if x != nil {
		return x.IntegrationId
	}
	return ""
}

func (x *Message) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *Message) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Message) GetPongs() []*MessagePong {
	if x != nil {
		return x.Pongs
	}
	return nil
}

func (x *Message) GetQuillDelta() string {
	if x != nil {
		return x.QuillDelta
	}
	return ""
}

func (x *Message) GetI18NQuillDelta() *I18NString {
	if x != nil {
		return x.I18NQuillDelta
	}
	return nil
}

func (x *Message) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *Message) GetPinned() int64 {
	if x != nil {
		return x.Pinned
	}
	return 0
}

func (x *Message) GetPinnedBy() string {
	if x != nil {
		return x.PinnedBy
	}
	return ""
}

func (x *Message) GetCommentId() string {
	if x != nil {
		return x.CommentId
	}
	return ""
}

func (x *Message) GetIdempotencyKey() string {
	if x != nil {
		return x.IdempotencyKey
	}
	return ""
}

func (x *Message) GetStory() *InstagramStory {
	if x != nil {
		return x.Story
	}
	return nil
}

func (x *Message) GetTos() []string {
	if x != nil {
		return x.Tos
	}
	return nil
}

func (x *Message) GetIsInternal() bool {
	if x != nil {
		return x.IsInternal
	}
	return false
}

type InstagramStory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Link string `protobuf:"bytes,4,opt,name=link,proto3" json:"link,omitempty"`
}

func (x *InstagramStory) Reset() {
	*x = InstagramStory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstagramStory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstagramStory) ProtoMessage() {}

func (x *InstagramStory) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstagramStory.ProtoReflect.Descriptor instead.
func (*InstagramStory) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{91}
}

func (x *InstagramStory) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InstagramStory) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

type MessagePong struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberId string `protobuf:"bytes,3,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	Type     string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Created  int64  `protobuf:"varint,5,opt,name=created,proto3" json:"created,omitempty"`
	AckError string `protobuf:"bytes,6,opt,name=ack_error,json=ackError,proto3" json:"ack_error,omitempty"` // used in ack
	Count    int64  `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *MessagePong) Reset() {
	*x = MessagePong{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessagePong) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagePong) ProtoMessage() {}

func (x *MessagePong) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagePong.ProtoReflect.Descriptor instead.
func (*MessagePong) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{92}
}

func (x *MessagePong) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

func (x *MessagePong) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MessagePong) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *MessagePong) GetAckError() string {
	if x != nil {
		return x.AckError
	}
	return ""
}

func (x *MessagePong) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type MessageButton struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Id   string `protobuf:"bytes,15,opt,name=id,proto3" json:"id,omitempty"`
	// post back
	Title     string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Payload   string `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	ImageUrl  string `protobuf:"bytes,5,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	ProductId string `protobuf:"bytes,10,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"` // if used in type = url => product url
	//	optional RawEvent event = 12;
	Url         string      `protobuf:"bytes,14,opt,name=url,proto3" json:"url,omitempty"`
	PhoneNumber string      `protobuf:"bytes,16,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	WebviewSize string      `protobuf:"bytes,18,opt,name=webview_size,json=webviewSize,proto3" json:"webview_size,omitempty"` // fb
	I18NTitle   *I18NString `protobuf:"bytes,19,opt,name=i18n_title,json=i18nTitle,proto3" json:"i18n_title,omitempty"`
}

func (x *MessageButton) Reset() {
	*x = MessageButton{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageButton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageButton) ProtoMessage() {}

func (x *MessageButton) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageButton.ProtoReflect.Descriptor instead.
func (*MessageButton) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{93}
}

func (x *MessageButton) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MessageButton) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MessageButton) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MessageButton) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *MessageButton) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *MessageButton) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *MessageButton) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MessageButton) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *MessageButton) GetWebviewSize() string {
	if x != nil {
		return x.WebviewSize
	}
	return ""
}

func (x *MessageButton) GetI18NTitle() *I18NString {
	if x != nil {
		return x.I18NTitle
	}
	return nil
}

type AskInfomationAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId string `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Answer    string `protobuf:"bytes,3,opt,name=answer,proto3" json:"answer,omitempty"`
}

func (x *AskInfomationAnswer) Reset() {
	*x = AskInfomationAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskInfomationAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskInfomationAnswer) ProtoMessage() {}

func (x *AskInfomationAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskInfomationAnswer.ProtoReflect.Descriptor instead.
func (*AskInfomationAnswer) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{94}
}

func (x *AskInfomationAnswer) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *AskInfomationAnswer) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

type AskInfomation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Question  string `protobuf:"bytes,2,opt,name=question,proto3" json:"question,omitempty"`
	InputType string `protobuf:"bytes,3,opt,name=input_type,json=inputType,proto3" json:"input_type,omitempty"`
	Key       string `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"` // user.name user.phone
	Answer    string `protobuf:"bytes,5,opt,name=answer,proto3" json:"answer,omitempty"`
	Answered  int64  `protobuf:"varint,6,opt,name=answered,proto3" json:"answered,omitempty"`
}

func (x *AskInfomation) Reset() {
	*x = AskInfomation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskInfomation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskInfomation) ProtoMessage() {}

func (x *AskInfomation) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskInfomation.ProtoReflect.Descriptor instead.
func (*AskInfomation) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{95}
}

func (x *AskInfomation) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *AskInfomation) GetInputType() string {
	if x != nil {
		return x.InputType
	}
	return ""
}

func (x *AskInfomation) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *AskInfomation) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *AskInfomation) GetAnswered() int64 {
	if x != nil {
		return x.Answered
	}
	return 0
}

type GenericElementTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title         string           `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	ImageUrl      string           `protobuf:"bytes,3,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	Subtitle      string           `protobuf:"bytes,4,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
	DefaultAction *MessageButton   `protobuf:"bytes,5,opt,name=default_action,json=defaultAction,proto3" json:"default_action,omitempty"`
	Buttons       []*MessageButton `protobuf:"bytes,6,rep,name=buttons,proto3" json:"buttons,omitempty"`
	Id            string           `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"` // fb product id
	I18NTitle     *I18NString      `protobuf:"bytes,8,opt,name=i18n_title,json=i18nTitle,proto3" json:"i18n_title,omitempty"`
	I18NSubtitle  *I18NString      `protobuf:"bytes,9,opt,name=i18n_subtitle,json=i18nSubtitle,proto3" json:"i18n_subtitle,omitempty"`
}

func (x *GenericElementTemplate) Reset() {
	*x = GenericElementTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericElementTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericElementTemplate) ProtoMessage() {}

func (x *GenericElementTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericElementTemplate.ProtoReflect.Descriptor instead.
func (*GenericElementTemplate) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{96}
}

func (x *GenericElementTemplate) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GenericElementTemplate) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *GenericElementTemplate) GetSubtitle() string {
	if x != nil {
		return x.Subtitle
	}
	return ""
}

func (x *GenericElementTemplate) GetDefaultAction() *MessageButton {
	if x != nil {
		return x.DefaultAction
	}
	return nil
}

func (x *GenericElementTemplate) GetButtons() []*MessageButton {
	if x != nil {
		return x.Buttons
	}
	return nil
}

func (x *GenericElementTemplate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GenericElementTemplate) GetI18NTitle() *I18NString {
	if x != nil {
		return x.I18NTitle
	}
	return nil
}

func (x *GenericElementTemplate) GetI18NSubtitle() *I18NString {
	if x != nil {
		return x.I18NSubtitle
	}
	return nil
}

type Attachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,12,opt,name=type,proto3" json:"type,omitempty"`
	// file
	Mimetype     string `protobuf:"bytes,2,opt,name=mimetype,proto3" json:"mimetype,omitempty"`
	Url          string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	ThumbnailUrl string `protobuf:"bytes,4,opt,name=thumbnail_url,json=thumbnailUrl,proto3" json:"thumbnail_url,omitempty"`
	Name         string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Description  string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	//string data = 7; // for custom data
	Length int32 `protobuf:"varint,15,opt,name=length,proto3" json:"length,omitempty"`
	Size   int32 `protobuf:"varint,13,opt,name=size,proto3" json:"size,omitempty"` // byte
	// generic
	Elements []*GenericElementTemplate `protobuf:"bytes,8,rep,name=elements,proto3" json:"elements,omitempty"`
	// preview
	Title         string               `protobuf:"bytes,9,opt,name=title,proto3" json:"title,omitempty"`
	Color         string               `protobuf:"bytes,10,opt,name=color,proto3" json:"color,omitempty"`
	Pretext       string               `protobuf:"bytes,11,opt,name=pretext,proto3" json:"pretext,omitempty"`
	Buttons       []*MessageButton     `protobuf:"bytes,16,rep,name=buttons,proto3" json:"buttons,omitempty"`
	AskInfo       *AskInfomation       `protobuf:"bytes,17,opt,name=ask_info,json=askInfo,proto3" json:"ask_info,omitempty"`
	AskInfoAnswer *AskInfomationAnswer `protobuf:"bytes,18,opt,name=ask_info_answer,json=askInfoAnswer,proto3" json:"ask_info_answer,omitempty"` //repeated string inputtype = 17;
	Form          *MessageForm         `protobuf:"bytes,20,opt,name=form,proto3" json:"form,omitempty"`
	FormSubmit    *MessageFormSubmit   `protobuf:"bytes,21,opt,name=form_submit,json=formSubmit,proto3" json:"form_submit,omitempty"`
	QuickReplies  []*QuickReply        `protobuf:"bytes,23,rep,name=quick_replies,json=quickReplies,proto3" json:"quick_replies,omitempty"`
	LockInput     bool                 `protobuf:"varint,24,opt,name=lock_input,json=lockInput,proto3" json:"lock_input,omitempty"` // lock input while has quick replies
	Postback      *Postback            `protobuf:"bytes,25,opt,name=postback,proto3" json:"postback,omitempty"`
	Quote         *Event               `protobuf:"bytes,26,opt,name=quote,proto3" json:"quote,omitempty"`
	Product       *Product             `protobuf:"bytes,30,opt,name=product,proto3" json:"product,omitempty"`
	QuickReply    *QuickReply          `protobuf:"bytes,31,opt,name=quick_reply,json=quickReply,proto3" json:"quick_reply,omitempty"`
	Order         *Order               `protobuf:"bytes,32,opt,name=order,proto3" json:"order,omitempty"`
	File          *File                `protobuf:"bytes,34,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *Attachment) Reset() {
	*x = Attachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attachment) ProtoMessage() {}

func (x *Attachment) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attachment.ProtoReflect.Descriptor instead.
func (*Attachment) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{97}
}

func (x *Attachment) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Attachment) GetMimetype() string {
	if x != nil {
		return x.Mimetype
	}
	return ""
}

func (x *Attachment) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Attachment) GetThumbnailUrl() string {
	if x != nil {
		return x.ThumbnailUrl
	}
	return ""
}

func (x *Attachment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Attachment) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Attachment) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *Attachment) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Attachment) GetElements() []*GenericElementTemplate {
	if x != nil {
		return x.Elements
	}
	return nil
}

func (x *Attachment) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Attachment) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *Attachment) GetPretext() string {
	if x != nil {
		return x.Pretext
	}
	return ""
}

func (x *Attachment) GetButtons() []*MessageButton {
	if x != nil {
		return x.Buttons
	}
	return nil
}

func (x *Attachment) GetAskInfo() *AskInfomation {
	if x != nil {
		return x.AskInfo
	}
	return nil
}

func (x *Attachment) GetAskInfoAnswer() *AskInfomationAnswer {
	if x != nil {
		return x.AskInfoAnswer
	}
	return nil
}

func (x *Attachment) GetForm() *MessageForm {
	if x != nil {
		return x.Form
	}
	return nil
}

func (x *Attachment) GetFormSubmit() *MessageFormSubmit {
	if x != nil {
		return x.FormSubmit
	}
	return nil
}

func (x *Attachment) GetQuickReplies() []*QuickReply {
	if x != nil {
		return x.QuickReplies
	}
	return nil
}

func (x *Attachment) GetLockInput() bool {
	if x != nil {
		return x.LockInput
	}
	return false
}

func (x *Attachment) GetPostback() *Postback {
	if x != nil {
		return x.Postback
	}
	return nil
}

func (x *Attachment) GetQuote() *Event {
	if x != nil {
		return x.Quote
	}
	return nil
}

func (x *Attachment) GetProduct() *Product {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *Attachment) GetQuickReply() *QuickReply {
	if x != nil {
		return x.QuickReply
	}
	return nil
}

func (x *Attachment) GetOrder() *Order {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *Attachment) GetFile() *File {
	if x != nil {
		return x.File
	}
	return nil
}

type QuickReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContentType string      `protobuf:"bytes,2,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"` // should be 'text'
	Title       string      `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Payload     string      `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	ImageUrl    string      `protobuf:"bytes,5,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	I18NTitle   *I18NString `protobuf:"bytes,6,opt,name=i18n_title,json=i18nTitle,proto3" json:"i18n_title,omitempty"`
}

func (x *QuickReply) Reset() {
	*x = QuickReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuickReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuickReply) ProtoMessage() {}

func (x *QuickReply) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuickReply.ProtoReflect.Descriptor instead.
func (*QuickReply) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{98}
}

func (x *QuickReply) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *QuickReply) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *QuickReply) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *QuickReply) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *QuickReply) GetI18NTitle() *I18NString {
	if x != nil {
		return x.I18NTitle
	}
	return nil
}

type MessageForm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title     string              `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	State     string              `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	Fields    []*MessageFormField `protobuf:"bytes,4,rep,name=fields,proto3" json:"fields,omitempty"`
	SubmitUrl string              `protobuf:"bytes,5,opt,name=submit_url,json=submitUrl,proto3" json:"submit_url,omitempty"`
}

func (x *MessageForm) Reset() {
	*x = MessageForm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageForm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageForm) ProtoMessage() {}

func (x *MessageForm) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageForm.ProtoReflect.Descriptor instead.
func (*MessageForm) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{99}
}

func (x *MessageForm) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MessageForm) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *MessageForm) GetFields() []*MessageFormField {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *MessageForm) GetSubmitUrl() string {
	if x != nil {
		return x.SubmitUrl
	}
	return ""
}

type MessageFormSubmit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormMessageId string              `protobuf:"bytes,2,opt,name=form_message_id,json=formMessageId,proto3" json:"form_message_id,omitempty"`
	Fields        []*MessageFormField `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	State         string              `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *MessageFormSubmit) Reset() {
	*x = MessageFormSubmit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageFormSubmit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageFormSubmit) ProtoMessage() {}

func (x *MessageFormSubmit) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageFormSubmit.ProtoReflect.Descriptor instead.
func (*MessageFormSubmit) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{100}
}

func (x *MessageFormSubmit) GetFormMessageId() string {
	if x != nil {
		return x.FormMessageId
	}
	return ""
}

func (x *MessageFormSubmit) GetFields() []*MessageFormField {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *MessageFormSubmit) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

type MessageFormField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputType string   `protobuf:"bytes,2,opt,name=input_type,json=inputType,proto3" json:"input_type,omitempty"`
	Items     []string `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	State     string   `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	Title     string   `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	ImageUrl  string   `protobuf:"bytes,6,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	Name      string   `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Answer    string   `protobuf:"bytes,8,opt,name=answer,proto3" json:"answer,omitempty"`
	Answered  int64    `protobuf:"varint,9,opt,name=answered,proto3" json:"answered,omitempty"`
}

func (x *MessageFormField) Reset() {
	*x = MessageFormField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageFormField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageFormField) ProtoMessage() {}

func (x *MessageFormField) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageFormField.ProtoReflect.Descriptor instead.
func (*MessageFormField) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{101}
}

func (x *MessageFormField) GetInputType() string {
	if x != nil {
		return x.InputType
	}
	return ""
}

func (x *MessageFormField) GetItems() []string {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *MessageFormField) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *MessageFormField) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MessageFormField) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *MessageFormField) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MessageFormField) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *MessageFormField) GetAnswered() int64 {
	if x != nil {
		return x.Answered
	}
	return 0
}

type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Id        string          `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	AccountId string          `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Title     string          `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Created   int64           `protobuf:"varint,5,opt,name=created,proto3" json:"created,omitempty"`
	Modified  int64           `protobuf:"varint,6,opt,name=modified,proto3" json:"modified,omitempty"`
	CreatorId string          `protobuf:"bytes,7,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
	Color     string          `protobuf:"bytes,8,opt,name=color,proto3" json:"color,omitempty"`
	LastUsed  int64           `protobuf:"varint,9,opt,name=last_used,json=lastUsed,proto3" json:"last_used,omitempty"`
}

func (x *Tag) Reset() {
	*x = Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{102}
}

func (x *Tag) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Tag) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Tag) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Tag) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Tag) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Tag) GetModified() int64 {
	if x != nil {
		return x.Modified
	}
	return 0
}

func (x *Tag) GetCreatorId() string {
	if x != nil {
		return x.CreatorId
	}
	return ""
}

func (x *Tag) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *Tag) GetLastUsed() int64 {
	if x != nil {
		return x.LastUsed
	}
	return 0
}

type TemplateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string   `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Key  string   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Ids  []string `protobuf:"bytes,3,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *TemplateData) Reset() {
	*x = TemplateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateData) ProtoMessage() {}

func (x *TemplateData) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateData.ProtoReflect.Descriptor instead.
func (*TemplateData) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{103}
}

func (x *TemplateData) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TemplateData) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *TemplateData) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type Template struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx          *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Id           string          `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	AccountId    string          `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Keys         []string        `protobuf:"bytes,6,rep,name=keys,proto3" json:"keys,omitempty"`
	ChannelType  string          `protobuf:"bytes,17,opt,name=channel_type,json=channelType,proto3" json:"channel_type,omitempty"` // remove
	Message      *Message        `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
	Data         []*TemplateData `protobuf:"bytes,18,rep,name=data,proto3" json:"data,omitempty"`
	IsPublic     bool            `protobuf:"varint,11,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
	Created      int64           `protobuf:"varint,12,opt,name=created,proto3" json:"created,omitempty"`
	Modified     int64           `protobuf:"varint,13,opt,name=modified,proto3" json:"modified,omitempty"`
	Creator      string          `protobuf:"bytes,14,opt,name=creator,proto3" json:"creator,omitempty"`
	LatestPicked int64           `protobuf:"varint,15,opt,name=latest_picked,json=latestPicked,proto3" json:"latest_picked,omitempty"`
}

func (x *Template) Reset() {
	*x = Template{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Template) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Template) ProtoMessage() {}

func (x *Template) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Template.ProtoReflect.Descriptor instead.
func (*Template) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{104}
}

func (x *Template) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Template) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Template) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Template) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *Template) GetChannelType() string {
	if x != nil {
		return x.ChannelType
	}
	return ""
}

func (x *Template) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *Template) GetData() []*TemplateData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Template) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *Template) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Template) GetModified() int64 {
	if x != nil {
		return x.Modified
	}
	return 0
}

func (x *Template) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Template) GetLatestPicked() int64 {
	if x != nil {
		return x.LatestPicked
	}
	return 0
}

type SearchTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Anchor    string          `protobuf:"bytes,2,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Limit     int32           `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	AccountId string          `protobuf:"bytes,5,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	OrderBy   string          `protobuf:"bytes,6,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"` // latest_picked
}

func (x *SearchTemplate) Reset() {
	*x = SearchTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchTemplate) ProtoMessage() {}

func (x *SearchTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchTemplate.ProtoReflect.Descriptor instead.
func (*SearchTemplate) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{105}
}

func (x *SearchTemplate) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *SearchTemplate) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *SearchTemplate) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SearchTemplate) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *SearchTemplate) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type Templates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Templates []*Template     `protobuf:"bytes,2,rep,name=templates,proto3" json:"templates,omitempty"`
	Anchor    string          `protobuf:"bytes,3,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Total     int64           `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *Templates) Reset() {
	*x = Templates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Templates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Templates) ProtoMessage() {}

func (x *Templates) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Templates.ProtoReflect.Descriptor instead.
func (*Templates) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{106}
}

func (x *Templates) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Templates) GetTemplates() []*Template {
	if x != nil {
		return x.Templates
	}
	return nil
}

func (x *Templates) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *Templates) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type Tags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx  *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Tags []*Tag          `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *Tags) Reset() {
	*x = Tags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tags) ProtoMessage() {}

func (x *Tags) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tags.ProtoReflect.Descriptor instead.
func (*Tags) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{107}
}

func (x *Tags) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Tags) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type Postback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,4,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Payload string `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`
	Title   string `protobuf:"bytes,8,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *Postback) Reset() {
	*x = Postback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Postback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Postback) ProtoMessage() {}

func (x *Postback) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Postback.ProtoReflect.Descriptor instead.
func (*Postback) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{108}
}

func (x *Postback) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *Postback) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *Postback) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type BotPostback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       string      `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`                // bot_jump || add_to_cart || order_confirmation || place_order
	BotId      string      `protobuf:"bytes,3,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"` // required
	ActionId   string      `protobuf:"bytes,4,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
	FromAction string      `protobuf:"bytes,5,opt,name=from_action,json=fromAction,proto3" json:"from_action,omitempty"` // required
	Title      string      `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`                             // for bot_jump
	I18NTitle  *I18NString `protobuf:"bytes,7,opt,name=i18n_title,json=i18nTitle,proto3" json:"i18n_title,omitempty"`    // for bot_jump
	// for add_to_card and place_order only
	ProductId string `protobuf:"bytes,10,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	// for order_confirmation
	Status string `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"` // confirmed || cancelled
}

func (x *BotPostback) Reset() {
	*x = BotPostback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BotPostback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotPostback) ProtoMessage() {}

func (x *BotPostback) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotPostback.ProtoReflect.Descriptor instead.
func (*BotPostback) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{109}
}

func (x *BotPostback) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *BotPostback) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

func (x *BotPostback) GetActionId() string {
	if x != nil {
		return x.ActionId
	}
	return ""
}

func (x *BotPostback) GetFromAction() string {
	if x != nil {
		return x.FromAction
	}
	return ""
}

func (x *BotPostback) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *BotPostback) GetI18NTitle() *I18NString {
	if x != nil {
		return x.I18NTitle
	}
	return nil
}

func (x *BotPostback) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *BotPostback) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type Integrations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx          *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId    string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Integrations []*Integration  `protobuf:"bytes,3,rep,name=integrations,proto3" json:"integrations,omitempty"`
}

func (x *Integrations) Reset() {
	*x = Integrations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Integrations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Integrations) ProtoMessage() {}

func (x *Integrations) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Integrations.ProtoReflect.Descriptor instead.
func (*Integrations) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{110}
}

func (x *Integrations) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Integrations) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Integrations) GetIntegrations() []*Integration {
	if x != nil {
		return x.Integrations
	}
	return nil
}

// rename to touchpoint
type Integration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId        string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ConnectorId      string          `protobuf:"bytes,3,opt,name=connector_id,json=connectorId,proto3" json:"connector_id,omitempty"`
	LogoUrl          string          `protobuf:"bytes,4,opt,name=logo_url,json=logoUrl,proto3" json:"logo_url,omitempty"` // emoji for phone
	Name             string          `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	ConnectorType    string          `protobuf:"bytes,12,opt,name=connector_type,json=connectorType,proto3" json:"connector_type,omitempty"` // see facebook, call
	Integrated       int64           `protobuf:"varint,6,opt,name=integrated,proto3" json:"integrated,omitempty"`
	LastIntegrated   int64           `protobuf:"varint,7,opt,name=last_integrated,json=lastIntegrated,proto3" json:"last_integrated,omitempty"` // int64 updated = 7;
	State            string          `protobuf:"bytes,8,opt,name=state,proto3" json:"state,omitempty"`
	Id               string          `protobuf:"bytes,10,opt,name=id,proto3" json:"id,omitempty"` // generated by connector, must be format of accid.XXX.connectorid
	Created          int64           `protobuf:"varint,11,opt,name=created,proto3" json:"created,omitempty"`
	IntegratedBy     string          `protobuf:"bytes,13,opt,name=integrated_by,json=integratedBy,proto3" json:"integrated_by,omitempty"`
	LastFailed       int64           `protobuf:"varint,14,opt,name=last_failed,json=lastFailed,proto3" json:"last_failed,omitempty"`
	Disabled         bool            `protobuf:"varint,15,opt,name=disabled,proto3" json:"disabled,omitempty"`
	SendingStatus    string          `protobuf:"bytes,17,opt,name=sending_status,json=sendingStatus,proto3" json:"sending_status,omitempty"`       // ok, failed
	ReceivingStatus  string          `protobuf:"bytes,18,opt,name=receiving_status,json=receivingStatus,proto3" json:"receiving_status,omitempty"` // ok, failed
	Username         string          `protobuf:"bytes,19,opt,name=username,proto3" json:"username,omitempty"`
	LinkedPageId     string          `protobuf:"bytes,20,opt,name=linked_page_id,json=linkedPageId,proto3" json:"linked_page_id,omitempty"`
	Chaining         bool            `protobuf:"varint,21,opt,name=chaining,proto3" json:"chaining,omitempty"`                                          // use chain instead of conversation
	CallCenterDriver string          `protobuf:"bytes,43,opt,name=call_center_driver,json=callCenterDriver,proto3" json:"call_center_driver,omitempty"` // empty => subiz, stringee
	SipProvider      string          `protobuf:"bytes,44,opt,name=sip_provider,json=sipProvider,proto3" json:"sip_provider,omitempty"`                  // itel, fpt, vnpt; for call only
}

func (x *Integration) Reset() {
	*x = Integration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Integration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Integration) ProtoMessage() {}

func (x *Integration) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Integration.ProtoReflect.Descriptor instead.
func (*Integration) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{111}
}

func (x *Integration) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Integration) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Integration) GetConnectorId() string {
	if x != nil {
		return x.ConnectorId
	}
	return ""
}

func (x *Integration) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *Integration) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Integration) GetConnectorType() string {
	if x != nil {
		return x.ConnectorType
	}
	return ""
}

func (x *Integration) GetIntegrated() int64 {
	if x != nil {
		return x.Integrated
	}
	return 0
}

func (x *Integration) GetLastIntegrated() int64 {
	if x != nil {
		return x.LastIntegrated
	}
	return 0
}

func (x *Integration) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Integration) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Integration) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Integration) GetIntegratedBy() string {
	if x != nil {
		return x.IntegratedBy
	}
	return ""
}

func (x *Integration) GetLastFailed() int64 {
	if x != nil {
		return x.LastFailed
	}
	return 0
}

func (x *Integration) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *Integration) GetSendingStatus() string {
	if x != nil {
		return x.SendingStatus
	}
	return ""
}

func (x *Integration) GetReceivingStatus() string {
	if x != nil {
		return x.ReceivingStatus
	}
	return ""
}

func (x *Integration) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Integration) GetLinkedPageId() string {
	if x != nil {
		return x.LinkedPageId
	}
	return ""
}

func (x *Integration) GetChaining() bool {
	if x != nil {
		return x.Chaining
	}
	return false
}

func (x *Integration) GetCallCenterDriver() string {
	if x != nil {
		return x.CallCenterDriver
	}
	return ""
}

func (x *Integration) GetSipProvider() string {
	if x != nil {
		return x.SipProvider
	}
	return ""
}

type TagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx            *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId      string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ConversationId string          `protobuf:"bytes,3,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	Id             string          `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TagRequest) Reset() {
	*x = TagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagRequest) ProtoMessage() {}

func (x *TagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagRequest.ProtoReflect.Descriptor instead.
func (*TagRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{112}
}

func (x *TagRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *TagRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *TagRequest) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *TagRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type AssignRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx                 *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId           string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ConversationId      string          `protobuf:"bytes,3,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	UserId              string          `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UseRule             bool            `protobuf:"varint,5,opt,name=use_rule,json=useRule,proto3" json:"use_rule,omitempty"`
	Strategy            string          `protobuf:"bytes,6,opt,name=strategy,proto3" json:"strategy,omitempty"`
	AssignTos           []string        `protobuf:"bytes,7,rep,name=assign_tos,json=assignTos,proto3" json:"assign_tos,omitempty"`
	AvailableAgentsOnly bool            `protobuf:"varint,8,opt,name=available_agents_only,json=availableAgentsOnly,proto3" json:"available_agents_only,omitempty"` // strategy
	// for bot only
	AgentReplyTimeout int64  `protobuf:"varint,9,opt,name=agent_reply_timeout,json=agentReplyTimeout,proto3" json:"agent_reply_timeout,omitempty"` // sec
	BranchOnNoReply   string `protobuf:"bytes,10,opt,name=branch_on_no_reply,json=branchOnNoReply,proto3" json:"branch_on_no_reply,omitempty"`     // action id
	BotId             string `protobuf:"bytes,11,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	ActionId          string `protobuf:"bytes,12,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
}

func (x *AssignRequest) Reset() {
	*x = AssignRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignRequest) ProtoMessage() {}

func (x *AssignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignRequest.ProtoReflect.Descriptor instead.
func (*AssignRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{113}
}

func (x *AssignRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *AssignRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AssignRequest) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *AssignRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AssignRequest) GetUseRule() bool {
	if x != nil {
		return x.UseRule
	}
	return false
}

func (x *AssignRequest) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

func (x *AssignRequest) GetAssignTos() []string {
	if x != nil {
		return x.AssignTos
	}
	return nil
}

func (x *AssignRequest) GetAvailableAgentsOnly() bool {
	if x != nil {
		return x.AvailableAgentsOnly
	}
	return false
}

func (x *AssignRequest) GetAgentReplyTimeout() int64 {
	if x != nil {
		return x.AgentReplyTimeout
	}
	return 0
}

func (x *AssignRequest) GetBranchOnNoReply() string {
	if x != nil {
		return x.BranchOnNoReply
	}
	return ""
}

func (x *AssignRequest) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

func (x *AssignRequest) GetActionId() string {
	if x != nil {
		return x.ActionId
	}
	return ""
}

type EndchatConnectorSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectorId         string `protobuf:"bytes,3,opt,name=connector_id,json=connectorId,proto3" json:"connector_id,omitempty"`
	AtMidnight          bool   `protobuf:"varint,4,opt,name=at_midnight,json=atMidnight,proto3" json:"at_midnight,omitempty"`
	AfterInactivityMins int64  `protobuf:"varint,6,opt,name=after_inactivity_mins,json=afterInactivityMins,proto3" json:"after_inactivity_mins,omitempty"`
	Enabled             bool   `protobuf:"varint,11,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Custom              bool   `protobuf:"varint,12,opt,name=custom,proto3" json:"custom,omitempty"`
}

func (x *EndchatConnectorSetting) Reset() {
	*x = EndchatConnectorSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndchatConnectorSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndchatConnectorSetting) ProtoMessage() {}

func (x *EndchatConnectorSetting) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndchatConnectorSetting.ProtoReflect.Descriptor instead.
func (*EndchatConnectorSetting) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{114}
}

func (x *EndchatConnectorSetting) GetConnectorId() string {
	if x != nil {
		return x.ConnectorId
	}
	return ""
}

func (x *EndchatConnectorSetting) GetAtMidnight() bool {
	if x != nil {
		return x.AtMidnight
	}
	return false
}

func (x *EndchatConnectorSetting) GetAfterInactivityMins() int64 {
	if x != nil {
		return x.AfterInactivityMins
	}
	return 0
}

func (x *EndchatConnectorSetting) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *EndchatConnectorSetting) GetCustom() bool {
	if x != nil {
		return x.Custom
	}
	return false
}

type EndchatSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx               *common.Context            `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId         string                     `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ConnectorSettings []*EndchatConnectorSetting `protobuf:"bytes,3,rep,name=connector_settings,json=connectorSettings,proto3" json:"connector_settings,omitempty"`
	GlobalSetting     *EndchatConnectorSetting   `protobuf:"bytes,4,opt,name=global_setting,json=globalSetting,proto3" json:"global_setting,omitempty"`
	Updated           int64                      `protobuf:"varint,5,opt,name=updated,proto3" json:"updated,omitempty"`
	SendTranscript    bool                       `protobuf:"varint,7,opt,name=send_transcript,json=sendTranscript,proto3" json:"send_transcript,omitempty"`
	SendTranscriptTos []string                   `protobuf:"bytes,8,rep,name=send_transcript_tos,json=sendTranscriptTos,proto3" json:"send_transcript_tos,omitempty"`
}

func (x *EndchatSetting) Reset() {
	*x = EndchatSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndchatSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndchatSetting) ProtoMessage() {}

func (x *EndchatSetting) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndchatSetting.ProtoReflect.Descriptor instead.
func (*EndchatSetting) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{115}
}

func (x *EndchatSetting) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *EndchatSetting) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *EndchatSetting) GetConnectorSettings() []*EndchatConnectorSetting {
	if x != nil {
		return x.ConnectorSettings
	}
	return nil
}

func (x *EndchatSetting) GetGlobalSetting() *EndchatConnectorSetting {
	if x != nil {
		return x.GlobalSetting
	}
	return nil
}

func (x *EndchatSetting) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *EndchatSetting) GetSendTranscript() bool {
	if x != nil {
		return x.SendTranscript
	}
	return false
}

func (x *EndchatSetting) GetSendTranscriptTos() []string {
	if x != nil {
		return x.SendTranscriptTos
	}
	return nil
}

type ConversationAutomations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx                     *common.Context           `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId               string                    `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ConversationAutomations []*ConversationAutomation `protobuf:"bytes,3,rep,name=conversation_automations,json=conversationAutomations,proto3" json:"conversation_automations,omitempty"`
}

func (x *ConversationAutomations) Reset() {
	*x = ConversationAutomations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationAutomations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationAutomations) ProtoMessage() {}

func (x *ConversationAutomations) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationAutomations.ProtoReflect.Descriptor instead.
func (*ConversationAutomations) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{116}
}

func (x *ConversationAutomations) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ConversationAutomations) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ConversationAutomations) GetConversationAutomations() []*ConversationAutomation {
	if x != nil {
		return x.ConversationAutomations
	}
	return nil
}

type ConversationAutomation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx           *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId     string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Id            string          `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Type          string          `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"` // endchat
	Name          string          `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Description   string          `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	ChannelTypes  []string        `protobuf:"bytes,7,rep,name=channel_types,json=channelTypes,proto3" json:"channel_types,omitempty"`
	AvatarUrl     string          `protobuf:"bytes,9,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	ExcludeTags   []string        `protobuf:"bytes,11,rep,name=exclude_tags,json=excludeTags,proto3" json:"exclude_tags,omitempty"` // dont run on those tag
	ExcludeFields []string        `protobuf:"bytes,12,rep,name=exclude_fields,json=excludeFields,proto3" json:"exclude_fields,omitempty"`
	Fields        []string        `protobuf:"bytes,13,rep,name=fields,proto3" json:"fields,omitempty"`
	Tags          []string        `protobuf:"bytes,14,rep,name=tags,proto3" json:"tags,omitempty"`      // only run on
	Repeat        bool            `protobuf:"varint,15,opt,name=repeat,proto3" json:"repeat,omitempty"` // allow to run multiple time
	Conditions    []*BotCondition `protobuf:"bytes,16,rep,name=conditions,proto3" json:"conditions,omitempty"`
	// trigger
	AfterLastSentMs     int64        `protobuf:"varint,17,opt,name=after_last_sent_ms,json=afterLastSentMs,proto3" json:"after_last_sent_ms,omitempty"`
	AfterLastSentByType []string     `protobuf:"bytes,18,rep,name=after_last_sent_by_type,json=afterLastSentByType,proto3" json:"after_last_sent_by_type,omitempty"` // agent, user
	Actions             []*BotAction `protobuf:"bytes,19,rep,name=actions,proto3" json:"actions,omitempty"`
	UpdatedBy           string       `protobuf:"bytes,20,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	Updated             int64        `protobuf:"varint,21,opt,name=updated,proto3" json:"updated,omitempty"`
	CreatedBy           string       `protobuf:"bytes,22,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	Created             int64        `protobuf:"varint,23,opt,name=created,proto3" json:"created,omitempty"` // ms
	Disabled            int64        `protobuf:"varint,24,opt,name=disabled,proto3" json:"disabled,omitempty"`
	LastRunAt           int64        `protobuf:"varint,26,opt,name=last_run_at,json=lastRunAt,proto3" json:"last_run_at,omitempty"`
}

func (x *ConversationAutomation) Reset() {
	*x = ConversationAutomation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationAutomation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationAutomation) ProtoMessage() {}

func (x *ConversationAutomation) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationAutomation.ProtoReflect.Descriptor instead.
func (*ConversationAutomation) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{117}
}

func (x *ConversationAutomation) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ConversationAutomation) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ConversationAutomation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ConversationAutomation) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ConversationAutomation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConversationAutomation) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ConversationAutomation) GetChannelTypes() []string {
	if x != nil {
		return x.ChannelTypes
	}
	return nil
}

func (x *ConversationAutomation) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *ConversationAutomation) GetExcludeTags() []string {
	if x != nil {
		return x.ExcludeTags
	}
	return nil
}

func (x *ConversationAutomation) GetExcludeFields() []string {
	if x != nil {
		return x.ExcludeFields
	}
	return nil
}

func (x *ConversationAutomation) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ConversationAutomation) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ConversationAutomation) GetRepeat() bool {
	if x != nil {
		return x.Repeat
	}
	return false
}

func (x *ConversationAutomation) GetConditions() []*BotCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *ConversationAutomation) GetAfterLastSentMs() int64 {
	if x != nil {
		return x.AfterLastSentMs
	}
	return 0
}

func (x *ConversationAutomation) GetAfterLastSentByType() []string {
	if x != nil {
		return x.AfterLastSentByType
	}
	return nil
}

func (x *ConversationAutomation) GetActions() []*BotAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *ConversationAutomation) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *ConversationAutomation) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *ConversationAutomation) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *ConversationAutomation) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *ConversationAutomation) GetDisabled() int64 {
	if x != nil {
		return x.Disabled
	}
	return 0
}

func (x *ConversationAutomation) GetLastRunAt() int64 {
	if x != nil {
		return x.LastRunAt
	}
	return 0
}

type Trigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                   string  `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`                                                                       // conversation_assigned, conversation_start, area_clicked (web only), scrolling_percentage (web only), inactivity_duration (web only), after_pageview (web only), after_js_event (web only)
	AreaClickedCssSelector string  `protobuf:"bytes,4,opt,name=area_clicked_css_selector,json=areaClickedCssSelector,proto3" json:"area_clicked_css_selector,omitempty"` // .user_name #user
	ScrollingPercentage    float32 `protobuf:"fixed32,6,opt,name=scrolling_percentage,json=scrollingPercentage,proto3" json:"scrolling_percentage,omitempty"`            // 0.55
	InactivitySec          int64   `protobuf:"varint,8,opt,name=inactivity_sec,json=inactivitySec,proto3" json:"inactivity_sec,omitempty"`                               // 50s
	AfterPageviewSec       int64   `protobuf:"varint,9,opt,name=after_pageview_sec,json=afterPageviewSec,proto3" json:"after_pageview_sec,omitempty"`                    // 50s
	Disabled               bool    `protobuf:"varint,10,opt,name=disabled,proto3" json:"disabled,omitempty"`
}

func (x *Trigger) Reset() {
	*x = Trigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger) ProtoMessage() {}

func (x *Trigger) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trigger.ProtoReflect.Descriptor instead.
func (*Trigger) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{118}
}

func (x *Trigger) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Trigger) GetAreaClickedCssSelector() string {
	if x != nil {
		return x.AreaClickedCssSelector
	}
	return ""
}

func (x *Trigger) GetScrollingPercentage() float32 {
	if x != nil {
		return x.ScrollingPercentage
	}
	return 0
}

func (x *Trigger) GetInactivitySec() int64 {
	if x != nil {
		return x.InactivitySec
	}
	return 0
}

func (x *Trigger) GetAfterPageviewSec() int64 {
	if x != nil {
		return x.AfterPageviewSec
	}
	return 0
}

func (x *Trigger) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

type BotCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// url, browser, location, returning_visitor, device_type, referer, source, user_attribute,
	// timming, integration_id, offline, user_is_a_contact, order, conversation_tags
	// agent_online, conversation_member_online
	Key               string               `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Sources           []string             `protobuf:"bytes,2,rep,name=sources,proto3" json:"sources,omitempty"`
	DeviceTypes       []string             `protobuf:"bytes,3,rep,name=device_types,json=deviceTypes,proto3" json:"device_types,omitempty"`
	Browsers          []string             `protobuf:"bytes,4,rep,name=browsers,proto3" json:"browsers,omitempty"`
	Referers          []string             `protobuf:"bytes,6,rep,name=referers,proto3" json:"referers,omitempty"`                                                 // referer
	ExcludeReferers   []string             `protobuf:"bytes,9,rep,name=exclude_referers,json=excludeReferers,proto3" json:"exclude_referers,omitempty"`            // referrer
	Urls              []string             `protobuf:"bytes,10,rep,name=urls,proto3" json:"urls,omitempty"`                                                        // url, url_term, url_medium, ... (or only)
	ExcludeUrls       []string             `protobuf:"bytes,11,rep,name=exclude_urls,json=excludeUrls,proto3" json:"exclude_urls,omitempty"`                       // url (or only)
	HasVisitedUrl     []string             `protobuf:"bytes,12,rep,name=has_visited_url,json=hasVisitedUrl,proto3" json:"has_visited_url,omitempty"`               // url (or only)
	HasNotVisitedUrls []string             `protobuf:"bytes,13,rep,name=has_not_visited_urls,json=hasNotVisitedUrls,proto3" json:"has_not_visited_urls,omitempty"` // url (or only)
	Locations         []*LocationCondition `protobuf:"bytes,14,rep,name=locations,proto3" json:"locations,omitempty"`                                              // or
	ExcludeLocations  []*LocationCondition `protobuf:"bytes,15,rep,name=exclude_locations,json=excludeLocations,proto3" json:"exclude_locations,omitempty"`        // or
	// timming
	BusinessHour string   `protobuf:"bytes,20,opt,name=business_hour,json=businessHour,proto3" json:"business_hour,omitempty"`           // [in, notIn] if this is true, ignore all other timming conditions
	DaysOfWeek   []string `protobuf:"bytes,21,rep,name=days_of_week,json=daysOfWeek,proto3" json:"days_of_week,omitempty"`               // Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday
	MinutesOfDay []int32  `protobuf:"varint,22,rep,packed,name=minutes_of_day,json=minutesOfDay,proto3" json:"minutes_of_day,omitempty"` // pair [0-4] [6-9]
	// user
	User           *UserAttributeCondition `protobuf:"bytes,23,opt,name=user,proto3" json:"user,omitempty"`                                           // user_attribute
	IntegrationIds []string                `protobuf:"bytes,24,rep,name=integration_ids,json=integrationIds,proto3" json:"integration_ids,omitempty"` // optional for subiz and email
	// offline
	Offline                     bool            `protobuf:"varint,25,opt,name=offline,proto3" json:"offline,omitempty"` // only run when there is no online agent
	ReturningVisitor            bool            `protobuf:"varint,26,opt,name=returning_visitor,json=returningVisitor,proto3" json:"returning_visitor,omitempty"`
	UserIsAContact              bool            `protobuf:"varint,27,opt,name=user_is_a_contact,json=userIsAContact,proto3" json:"user_is_a_contact,omitempty"` // has a way to re-connnect to user (email or phone)
	Order                       *OrderCondition `protobuf:"bytes,28,opt,name=order,proto3" json:"order,omitempty"`                                              // order
	ConversationTags            []string        `protobuf:"bytes,29,rep,name=conversation_tags,json=conversationTags,proto3" json:"conversation_tags,omitempty"`
	ExcludeConversationTags     []string        `protobuf:"bytes,30,rep,name=exclude_conversation_tags,json=excludeConversationTags,proto3" json:"exclude_conversation_tags,omitempty"`
	HasAgentOnline              bool            `protobuf:"varint,31,opt,name=has_agent_online,json=hasAgentOnline,proto3" json:"has_agent_online,omitempty"`
	HasConversationMemberOnline bool            `protobuf:"varint,32,opt,name=has_conversation_member_online,json=hasConversationMemberOnline,proto3" json:"has_conversation_member_online,omitempty"`
}

func (x *BotCondition) Reset() {
	*x = BotCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BotCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotCondition) ProtoMessage() {}

func (x *BotCondition) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotCondition.ProtoReflect.Descriptor instead.
func (*BotCondition) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{119}
}

func (x *BotCondition) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *BotCondition) GetSources() []string {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *BotCondition) GetDeviceTypes() []string {
	if x != nil {
		return x.DeviceTypes
	}
	return nil
}

func (x *BotCondition) GetBrowsers() []string {
	if x != nil {
		return x.Browsers
	}
	return nil
}

func (x *BotCondition) GetReferers() []string {
	if x != nil {
		return x.Referers
	}
	return nil
}

func (x *BotCondition) GetExcludeReferers() []string {
	if x != nil {
		return x.ExcludeReferers
	}
	return nil
}

func (x *BotCondition) GetUrls() []string {
	if x != nil {
		return x.Urls
	}
	return nil
}

func (x *BotCondition) GetExcludeUrls() []string {
	if x != nil {
		return x.ExcludeUrls
	}
	return nil
}

func (x *BotCondition) GetHasVisitedUrl() []string {
	if x != nil {
		return x.HasVisitedUrl
	}
	return nil
}

func (x *BotCondition) GetHasNotVisitedUrls() []string {
	if x != nil {
		return x.HasNotVisitedUrls
	}
	return nil
}

func (x *BotCondition) GetLocations() []*LocationCondition {
	if x != nil {
		return x.Locations
	}
	return nil
}

func (x *BotCondition) GetExcludeLocations() []*LocationCondition {
	if x != nil {
		return x.ExcludeLocations
	}
	return nil
}

func (x *BotCondition) GetBusinessHour() string {
	if x != nil {
		return x.BusinessHour
	}
	return ""
}

func (x *BotCondition) GetDaysOfWeek() []string {
	if x != nil {
		return x.DaysOfWeek
	}
	return nil
}

func (x *BotCondition) GetMinutesOfDay() []int32 {
	if x != nil {
		return x.MinutesOfDay
	}
	return nil
}

func (x *BotCondition) GetUser() *UserAttributeCondition {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *BotCondition) GetIntegrationIds() []string {
	if x != nil {
		return x.IntegrationIds
	}
	return nil
}

func (x *BotCondition) GetOffline() bool {
	if x != nil {
		return x.Offline
	}
	return false
}

func (x *BotCondition) GetReturningVisitor() bool {
	if x != nil {
		return x.ReturningVisitor
	}
	return false
}

func (x *BotCondition) GetUserIsAContact() bool {
	if x != nil {
		return x.UserIsAContact
	}
	return false
}

func (x *BotCondition) GetOrder() *OrderCondition {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *BotCondition) GetConversationTags() []string {
	if x != nil {
		return x.ConversationTags
	}
	return nil
}

func (x *BotCondition) GetExcludeConversationTags() []string {
	if x != nil {
		return x.ExcludeConversationTags
	}
	return nil
}

func (x *BotCondition) GetHasAgentOnline() bool {
	if x != nil {
		return x.HasAgentOnline
	}
	return false
}

func (x *BotCondition) GetHasConversationMemberOnline() bool {
	if x != nil {
		return x.HasConversationMemberOnline
	}
	return false
}

type OrderCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key               string               `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"` // product, order_total, pos, shipping
	ProductIds        []string             `protobuf:"bytes,3,rep,name=product_ids,json=productIds,proto3" json:"product_ids,omitempty"`
	ExcludeProductIds []string             `protobuf:"bytes,4,rep,name=exclude_product_ids,json=excludeProductIds,proto3" json:"exclude_product_ids,omitempty"`
	PosIds            []string             `protobuf:"bytes,5,rep,name=pos_ids,json=posIds,proto3" json:"pos_ids,omitempty"`
	ExcludePosIds     []string             `protobuf:"bytes,6,rep,name=exclude_pos_ids,json=excludePosIds,proto3" json:"exclude_pos_ids,omitempty"`
	Currencies        []string             `protobuf:"bytes,7,rep,name=currencies,proto3" json:"currencies,omitempty"`
	ExcludeCurrencies []string             `protobuf:"bytes,8,rep,name=exclude_currencies,json=excludeCurrencies,proto3" json:"exclude_currencies,omitempty"`
	Total             *FloatCondition      `protobuf:"bytes,9,opt,name=total,proto3" json:"total,omitempty"`
	Shipping          []*LocationCondition `protobuf:"bytes,10,rep,name=shipping,proto3" json:"shipping,omitempty"`
	ExcludeShipping   []*LocationCondition `protobuf:"bytes,11,rep,name=exclude_shipping,json=excludeShipping,proto3" json:"exclude_shipping,omitempty"`
}

func (x *OrderCondition) Reset() {
	*x = OrderCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderCondition) ProtoMessage() {}

func (x *OrderCondition) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderCondition.ProtoReflect.Descriptor instead.
func (*OrderCondition) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{120}
}

func (x *OrderCondition) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *OrderCondition) GetProductIds() []string {
	if x != nil {
		return x.ProductIds
	}
	return nil
}

func (x *OrderCondition) GetExcludeProductIds() []string {
	if x != nil {
		return x.ExcludeProductIds
	}
	return nil
}

func (x *OrderCondition) GetPosIds() []string {
	if x != nil {
		return x.PosIds
	}
	return nil
}

func (x *OrderCondition) GetExcludePosIds() []string {
	if x != nil {
		return x.ExcludePosIds
	}
	return nil
}

func (x *OrderCondition) GetCurrencies() []string {
	if x != nil {
		return x.Currencies
	}
	return nil
}

func (x *OrderCondition) GetExcludeCurrencies() []string {
	if x != nil {
		return x.ExcludeCurrencies
	}
	return nil
}

func (x *OrderCondition) GetTotal() *FloatCondition {
	if x != nil {
		return x.Total
	}
	return nil
}

func (x *OrderCondition) GetShipping() []*LocationCondition {
	if x != nil {
		return x.Shipping
	}
	return nil
}

func (x *OrderCondition) GetExcludeShipping() []*LocationCondition {
	if x != nil {
		return x.ExcludeShipping
	}
	return nil
}

type UserAttributeCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key      string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Operator string `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"`
	Value    string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UserAttributeCondition) Reset() {
	*x = UserAttributeCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAttributeCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAttributeCondition) ProtoMessage() {}

func (x *UserAttributeCondition) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAttributeCondition.ProtoReflect.Descriptor instead.
func (*UserAttributeCondition) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{121}
}

func (x *UserAttributeCondition) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *UserAttributeCondition) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *UserAttributeCondition) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Sites struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"` // web, messenger, zalo
	Sites     []*Site         `protobuf:"bytes,3,rep,name=sites,proto3" json:"sites,omitempty"`
}

func (x *Sites) Reset() {
	*x = Sites{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sites) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sites) ProtoMessage() {}

func (x *Sites) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sites.ProtoReflect.Descriptor instead.
func (*Sites) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{122}
}

func (x *Sites) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Sites) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Sites) GetSites() []*Site {
	if x != nil {
		return x.Sites
	}
	return nil
}

type VisitProductSiteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"` // web, messenger, zalo
	Url       string          `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Format    string          `protobuf:"bytes,4,opt,name=format,proto3" json:"format,omitempty"` // jsonld, rdfa, microdata
	DryRun    bool            `protobuf:"varint,5,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
	Created   int64           `protobuf:"varint,6,opt,name=created,proto3" json:"created,omitempty"`
}

func (x *VisitProductSiteRequest) Reset() {
	*x = VisitProductSiteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VisitProductSiteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VisitProductSiteRequest) ProtoMessage() {}

func (x *VisitProductSiteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VisitProductSiteRequest.ProtoReflect.Descriptor instead.
func (*VisitProductSiteRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{123}
}

func (x *VisitProductSiteRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *VisitProductSiteRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *VisitProductSiteRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *VisitProductSiteRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *VisitProductSiteRequest) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

func (x *VisitProductSiteRequest) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

type Site struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx                   *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId             string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"` // web, messenger, zalo
	Id                    string          `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`                                // web:abc.com, web:xyz.com, facebook:423084234234, zalo:3903002404
	UserVerified          bool            `protobuf:"varint,4,opt,name=user_verified,json=userVerified,proto3" json:"user_verified,omitempty"`
	ImageUrl              string          `protobuf:"bytes,5,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	ImageHash             string          `protobuf:"bytes,12,opt,name=image_hash,json=imageHash,proto3" json:"image_hash,omitempty"` // MD5 sum of image (internal)
	AgentConfirmed        bool            `protobuf:"varint,6,opt,name=agent_confirmed,json=agentConfirmed,proto3" json:"agent_confirmed,omitempty"`
	Created               int64           `protobuf:"varint,7,opt,name=created,proto3" json:"created,omitempty"`
	Title                 string          `protobuf:"bytes,9,opt,name=title,proto3" json:"title,omitempty"`
	LastUserVerified      int64           `protobuf:"varint,10,opt,name=last_user_verified,json=lastUserVerified,proto3" json:"last_user_verified,omitempty"`
	LastUserVerifyUri     string          `protobuf:"bytes,11,opt,name=last_user_verify_uri,json=lastUserVerifyUri,proto3" json:"last_user_verify_uri,omitempty"`
	MobileScreenshootUrl  string          `protobuf:"bytes,13,opt,name=mobile_screenshoot_url,json=mobileScreenshootUrl,proto3" json:"mobile_screenshoot_url,omitempty"`
	DesktopScreenshootUrl string          `protobuf:"bytes,14,opt,name=desktop_screenshoot_url,json=desktopScreenshootUrl,proto3" json:"desktop_screenshoot_url,omitempty"`
}

func (x *Site) Reset() {
	*x = Site{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Site) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Site) ProtoMessage() {}

func (x *Site) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Site.ProtoReflect.Descriptor instead.
func (*Site) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{124}
}

func (x *Site) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Site) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Site) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Site) GetUserVerified() bool {
	if x != nil {
		return x.UserVerified
	}
	return false
}

func (x *Site) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *Site) GetImageHash() string {
	if x != nil {
		return x.ImageHash
	}
	return ""
}

func (x *Site) GetAgentConfirmed() bool {
	if x != nil {
		return x.AgentConfirmed
	}
	return false
}

func (x *Site) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Site) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Site) GetLastUserVerified() int64 {
	if x != nil {
		return x.LastUserVerified
	}
	return 0
}

func (x *Site) GetLastUserVerifyUri() string {
	if x != nil {
		return x.LastUserVerifyUri
	}
	return ""
}

func (x *Site) GetMobileScreenshootUrl() string {
	if x != nil {
		return x.MobileScreenshootUrl
	}
	return ""
}

func (x *Site) GetDesktopScreenshootUrl() string {
	if x != nil {
		return x.DesktopScreenshootUrl
	}
	return ""
}

type Bot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx                   *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId             string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Id                    string          `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Fullname              string          `protobuf:"bytes,4,opt,name=fullname,proto3" json:"fullname,omitempty"`
	JobTitle              string          `protobuf:"bytes,19,opt,name=job_title,json=jobTitle,proto3" json:"job_title,omitempty"`
	AvatarUrl             string          `protobuf:"bytes,5,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	Category              string          `protobuf:"bytes,6,opt,name=category,proto3" json:"category,omitempty"` // see BotCategory: users, orders
	State                 string          `protobuf:"bytes,7,opt,name=state,proto3" json:"state,omitempty"`       // like agent state: active, inactive, deleted
	Action                *BotAction      `protobuf:"bytes,9,opt,name=action,proto3" json:"action,omitempty"`     // point to root action
	Created               int64           `protobuf:"varint,10,opt,name=created,proto3" json:"created,omitempty"`
	CreatedBy             string          `protobuf:"bytes,11,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	Updated               int64           `protobuf:"varint,12,opt,name=updated,proto3" json:"updated,omitempty"`
	UpdatedBy             string          `protobuf:"bytes,13,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	Triggers              []*Trigger      `protobuf:"bytes,14,rep,name=triggers,proto3" json:"triggers,omitempty"`
	InitiativeFrequency   *Frequently     `protobuf:"bytes,15,opt,name=initiative_frequency,json=initiativeFrequency,proto3" json:"initiative_frequency,omitempty"`
	Conditions            []*BotCondition `protobuf:"bytes,16,rep,name=conditions,proto3" json:"conditions,omitempty"`
	Channels              []string        `protobuf:"bytes,17,rep,name=channels,proto3" json:"channels,omitempty"`                              // default: all channel
	BotState              string          `protobuf:"bytes,18,opt,name=bot_state,json=botState,proto3" json:"bot_state,omitempty"`              // active, inactive
	LastExecuted          int64           `protobuf:"varint,20,opt,name=last_executed,json=lastExecuted,proto3" json:"last_executed,omitempty"` // ms
	BotType               string          `protobuf:"bytes,21,opt,name=bot_type,json=botType,proto3" json:"bot_type,omitempty"`                 // hello, lead, operator, pipeline_automation
	ActionHash            string          `protobuf:"bytes,22,opt,name=action_hash,json=actionHash,proto3" json:"action_hash,omitempty"`        // hex of sha1
	Version               string          `protobuf:"bytes,23,opt,name=version,proto3" json:"version,omitempty"`
	TemplateData          string          `protobuf:"bytes,24,opt,name=template_data,json=templateData,proto3" json:"template_data,omitempty"`
	CountLeadInLast_7Days int64           `protobuf:"varint,25,opt,name=count_lead_in_last_7_days,json=countLeadInLast7Days,proto3" json:"count_lead_in_last_7_days,omitempty"`
	CountConvInLast_7Days int64           `protobuf:"varint,26,opt,name=count_conv_in_last_7_days,json=countConvInLast7Days,proto3" json:"count_conv_in_last_7_days,omitempty"`
	Sites                 []string        `protobuf:"bytes,27,rep,name=sites,proto3" json:"sites,omitempty"`
	Locale                string          `protobuf:"bytes,28,opt,name=locale,proto3" json:"locale,omitempty"` // can be auto
	Locales               []string        `protobuf:"bytes,29,rep,name=locales,proto3" json:"locales,omitempty"`
	Pipeline              string          `protobuf:"bytes,30,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	PipelineStage         string          `protobuf:"bytes,31,opt,name=pipeline_stage,json=pipelineStage,proto3" json:"pipeline_stage,omitempty"` // for pipeline_stage
}

func (x *Bot) Reset() {
	*x = Bot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bot) ProtoMessage() {}

func (x *Bot) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bot.ProtoReflect.Descriptor instead.
func (*Bot) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{125}
}

func (x *Bot) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Bot) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Bot) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Bot) GetFullname() string {
	if x != nil {
		return x.Fullname
	}
	return ""
}

func (x *Bot) GetJobTitle() string {
	if x != nil {
		return x.JobTitle
	}
	return ""
}

func (x *Bot) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *Bot) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Bot) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Bot) GetAction() *BotAction {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *Bot) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Bot) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *Bot) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *Bot) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *Bot) GetTriggers() []*Trigger {
	if x != nil {
		return x.Triggers
	}
	return nil
}

func (x *Bot) GetInitiativeFrequency() *Frequently {
	if x != nil {
		return x.InitiativeFrequency
	}
	return nil
}

func (x *Bot) GetConditions() []*BotCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *Bot) GetChannels() []string {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *Bot) GetBotState() string {
	if x != nil {
		return x.BotState
	}
	return ""
}

func (x *Bot) GetLastExecuted() int64 {
	if x != nil {
		return x.LastExecuted
	}
	return 0
}

func (x *Bot) GetBotType() string {
	if x != nil {
		return x.BotType
	}
	return ""
}

func (x *Bot) GetActionHash() string {
	if x != nil {
		return x.ActionHash
	}
	return ""
}

func (x *Bot) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Bot) GetTemplateData() string {
	if x != nil {
		return x.TemplateData
	}
	return ""
}

func (x *Bot) GetCountLeadInLast_7Days() int64 {
	if x != nil {
		return x.CountLeadInLast_7Days
	}
	return 0
}

func (x *Bot) GetCountConvInLast_7Days() int64 {
	if x != nil {
		return x.CountConvInLast_7Days
	}
	return 0
}

func (x *Bot) GetSites() []string {
	if x != nil {
		return x.Sites
	}
	return nil
}

func (x *Bot) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *Bot) GetLocales() []string {
	if x != nil {
		return x.Locales
	}
	return nil
}

func (x *Bot) GetPipeline() string {
	if x != nil {
		return x.Pipeline
	}
	return ""
}

func (x *Bot) GetPipelineStage() string {
	if x != nil {
		return x.PipelineStage
	}
	return ""
}

type Bots struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx  *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Bots []*Bot          `protobuf:"bytes,2,rep,name=bots,proto3" json:"bots,omitempty"`
}

func (x *Bots) Reset() {
	*x = Bots{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bots) ProtoMessage() {}

func (x *Bots) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bots.ProtoReflect.Descriptor instead.
func (*Bots) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{126}
}

func (x *Bots) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Bots) GetBots() []*Bot {
	if x != nil {
		return x.Bots
	}
	return nil
}

type NextBotAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action *BotAction `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"` // pointed to the next action or used for branching to multiple actions
}

func (x *NextBotAction) Reset() {
	*x = NextBotAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextBotAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextBotAction) ProtoMessage() {}

func (x *NextBotAction) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextBotAction.ProtoReflect.Descriptor instead.
func (*NextBotAction) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{127}
}

func (x *NextBotAction) GetAction() *BotAction {
	if x != nil {
		return x.Action
	}
	return nil
}

type BotAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	BotId     string `protobuf:"bytes,3,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"` // could be pipeline automation id
	Id        string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	Name      string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// first action require trigger
	Nexts              []*NextBotAction          `protobuf:"bytes,8,rep,name=nexts,proto3" json:"nexts,omitempty"`
	Type               string                    `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"` // send_email, tag, convert_to_ticket, condition, sleep, send_webhook, create_task, update_order_state, send_message
	Jump               *ActionJump               `protobuf:"bytes,15,opt,name=jump,proto3" json:"jump,omitempty"`
	SendHttp           *ActionSendHttp           `protobuf:"bytes,17,opt,name=send_http,json=sendHttp,proto3" json:"send_http,omitempty"`
	AskQuestion        *ActionAskQuestion        `protobuf:"bytes,18,opt,name=ask_question,json=askQuestion,proto3" json:"ask_question,omitempty"`
	Assign             *AssignRequest            `protobuf:"bytes,19,opt,name=assign,proto3" json:"assign,omitempty"`
	DelaySec           int64                     `protobuf:"varint,20,opt,name=delay_sec,json=delaySec,proto3" json:"delay_sec,omitempty"` // max 20sec
	UpdateConversation *ActionUpdateConversation `protobuf:"bytes,21,opt,name=update_conversation,json=updateConversation,proto3" json:"update_conversation,omitempty"`
	InternalState      []byte                    `protobuf:"bytes,30,opt,name=internal_state,json=internalState,proto3" json:"internal_state,omitempty"`
	UpdateUser         *ActionUpdateUser         `protobuf:"bytes,31,opt,name=update_user,json=updateUser,proto3" json:"update_user,omitempty"`
	UpdateUserLabels   *ActionUpdateUserLabels   `protobuf:"bytes,32,opt,name=update_user_labels,json=updateUserLabels,proto3" json:"update_user_labels,omitempty"`
	ConfirmOrder       *ActionConfirmOrder       `protobuf:"bytes,34,opt,name=confirm_order,json=confirmOrder,proto3" json:"confirm_order,omitempty"`
	CreateTask         *ActionCreateTask         `protobuf:"bytes,35,opt,name=create_task,json=createTask,proto3" json:"create_task,omitempty"`
	SendChatTranscript *ActionSendChatTranscript `protobuf:"bytes,36,opt,name=send_chat_transcript,json=sendChatTranscript,proto3" json:"send_chat_transcript,omitempty"`
}

func (x *BotAction) Reset() {
	*x = BotAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BotAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotAction) ProtoMessage() {}

func (x *BotAction) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotAction.ProtoReflect.Descriptor instead.
func (*BotAction) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{128}
}

func (x *BotAction) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *BotAction) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

func (x *BotAction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BotAction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BotAction) GetNexts() []*NextBotAction {
	if x != nil {
		return x.Nexts
	}
	return nil
}

func (x *BotAction) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *BotAction) GetJump() *ActionJump {
	if x != nil {
		return x.Jump
	}
	return nil
}

func (x *BotAction) GetSendHttp() *ActionSendHttp {
	if x != nil {
		return x.SendHttp
	}
	return nil
}

func (x *BotAction) GetAskQuestion() *ActionAskQuestion {
	if x != nil {
		return x.AskQuestion
	}
	return nil
}

func (x *BotAction) GetAssign() *AssignRequest {
	if x != nil {
		return x.Assign
	}
	return nil
}

func (x *BotAction) GetDelaySec() int64 {
	if x != nil {
		return x.DelaySec
	}
	return 0
}

func (x *BotAction) GetUpdateConversation() *ActionUpdateConversation {
	if x != nil {
		return x.UpdateConversation
	}
	return nil
}

func (x *BotAction) GetInternalState() []byte {
	if x != nil {
		return x.InternalState
	}
	return nil
}

func (x *BotAction) GetUpdateUser() *ActionUpdateUser {
	if x != nil {
		return x.UpdateUser
	}
	return nil
}

func (x *BotAction) GetUpdateUserLabels() *ActionUpdateUserLabels {
	if x != nil {
		return x.UpdateUserLabels
	}
	return nil
}

func (x *BotAction) GetConfirmOrder() *ActionConfirmOrder {
	if x != nil {
		return x.ConfirmOrder
	}
	return nil
}

func (x *BotAction) GetCreateTask() *ActionCreateTask {
	if x != nil {
		return x.CreateTask
	}
	return nil
}

func (x *BotAction) GetSendChatTranscript() *ActionSendChatTranscript {
	if x != nil {
		return x.SendChatTranscript
	}
	return nil
}

type ActionCreateTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task *Task `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *ActionCreateTask) Reset() {
	*x = ActionCreateTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionCreateTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionCreateTask) ProtoMessage() {}

func (x *ActionCreateTask) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionCreateTask.ProtoReflect.Descriptor instead.
func (*ActionCreateTask) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{129}
}

func (x *ActionCreateTask) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type ActionConfirmOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WaitForUserResponse  bool       `protobuf:"varint,2,opt,name=wait_for_user_response,json=waitForUserResponse,proto3" json:"wait_for_user_response,omitempty"`
	Messages             []*Message `protobuf:"bytes,3,rep,name=messages,proto3" json:"messages,omitempty"`
	InvalidMessages      []*Message `protobuf:"bytes,4,rep,name=invalid_messages,json=invalidMessages,proto3" json:"invalid_messages,omitempty"`                  // send random message if user doesn't give any expected input
	BranchOnCancellation string     `protobuf:"bytes,8,opt,name=branch_on_cancellation,json=branchOnCancellation,proto3" json:"branch_on_cancellation,omitempty"` // user click on cancel or X button
}

func (x *ActionConfirmOrder) Reset() {
	*x = ActionConfirmOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionConfirmOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionConfirmOrder) ProtoMessage() {}

func (x *ActionConfirmOrder) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionConfirmOrder.ProtoReflect.Descriptor instead.
func (*ActionConfirmOrder) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{130}
}

func (x *ActionConfirmOrder) GetWaitForUserResponse() bool {
	if x != nil {
		return x.WaitForUserResponse
	}
	return false
}

func (x *ActionConfirmOrder) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *ActionConfirmOrder) GetInvalidMessages() []*Message {
	if x != nil {
		return x.InvalidMessages
	}
	return nil
}

func (x *ActionConfirmOrder) GetBranchOnCancellation() string {
	if x != nil {
		return x.BranchOnCancellation
	}
	return ""
}

type ActionSendChatTranscript struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendTranscript    bool     `protobuf:"varint,3,opt,name=send_transcript,json=sendTranscript,proto3" json:"send_transcript,omitempty"`
	SendTranscriptTos []string `protobuf:"bytes,4,rep,name=send_transcript_tos,json=sendTranscriptTos,proto3" json:"send_transcript_tos,omitempty"`
}

func (x *ActionSendChatTranscript) Reset() {
	*x = ActionSendChatTranscript{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionSendChatTranscript) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionSendChatTranscript) ProtoMessage() {}

func (x *ActionSendChatTranscript) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionSendChatTranscript.ProtoReflect.Descriptor instead.
func (*ActionSendChatTranscript) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{131}
}

func (x *ActionSendChatTranscript) GetSendTranscript() bool {
	if x != nil {
		return x.SendTranscript
	}
	return false
}

func (x *ActionSendChatTranscript) GetSendTranscriptTos() []string {
	if x != nil {
		return x.SendTranscriptTos
	}
	return nil
}

type ActionUpdateConversation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagIds          []string `protobuf:"bytes,2,rep,name=tag_ids,json=tagIds,proto3" json:"tag_ids,omitempty"`
	UntagIds        []string `protobuf:"bytes,3,rep,name=untag_ids,json=untagIds,proto3" json:"untag_ids,omitempty"`
	EndConversation bool     `protobuf:"varint,4,opt,name=end_conversation,json=endConversation,proto3" json:"end_conversation,omitempty"`
	Fields          []*KV    `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *ActionUpdateConversation) Reset() {
	*x = ActionUpdateConversation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionUpdateConversation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionUpdateConversation) ProtoMessage() {}

func (x *ActionUpdateConversation) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionUpdateConversation.ProtoReflect.Descriptor instead.
func (*ActionUpdateConversation) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{132}
}

func (x *ActionUpdateConversation) GetTagIds() []string {
	if x != nil {
		return x.TagIds
	}
	return nil
}

func (x *ActionUpdateConversation) GetUntagIds() []string {
	if x != nil {
		return x.UntagIds
	}
	return nil
}

func (x *ActionUpdateConversation) GetEndConversation() bool {
	if x != nil {
		return x.EndConversation
	}
	return false
}

func (x *ActionUpdateConversation) GetFields() []*KV {
	if x != nil {
		return x.Fields
	}
	return nil
}

type ActionJump struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionId      string `protobuf:"bytes,2,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
	ToFirstAction bool   `protobuf:"varint,3,opt,name=to_first_action,json=toFirstAction,proto3" json:"to_first_action,omitempty"`
}

func (x *ActionJump) Reset() {
	*x = ActionJump{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionJump) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionJump) ProtoMessage() {}

func (x *ActionJump) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionJump.ProtoReflect.Descriptor instead.
func (*ActionJump) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{133}
}

func (x *ActionJump) GetActionId() string {
	if x != nil {
		return x.ActionId
	}
	return ""
}

func (x *ActionJump) GetToFirstAction() bool {
	if x != nil {
		return x.ToFirstAction
	}
	return false
}

type ActionSwitchLanguage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActionSwitchLanguage) Reset() {
	*x = ActionSwitchLanguage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionSwitchLanguage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionSwitchLanguage) ProtoMessage() {}

func (x *ActionSwitchLanguage) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionSwitchLanguage.ProtoReflect.Descriptor instead.
func (*ActionSwitchLanguage) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{134}
}

type ActionSendHttp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// string payload = 3;
	Method     string `protobuf:"bytes,4,opt,name=method,proto3" json:"method,omitempty"`
	Header     []*KV  `protobuf:"bytes,5,rep,name=header,proto3" json:"header,omitempty"`
	QuillDelta string `protobuf:"bytes,6,opt,name=quill_delta,json=quillDelta,proto3" json:"quill_delta,omitempty"` // body
}

func (x *ActionSendHttp) Reset() {
	*x = ActionSendHttp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionSendHttp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionSendHttp) ProtoMessage() {}

func (x *ActionSendHttp) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionSendHttp.ProtoReflect.Descriptor instead.
func (*ActionSendHttp) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{135}
}

func (x *ActionSendHttp) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ActionSendHttp) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *ActionSendHttp) GetHeader() []*KV {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ActionSendHttp) GetQuillDelta() string {
	if x != nil {
		return x.QuillDelta
	}
	return ""
}

type ActionAskQuestion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WaitForUserResponse           bool       `protobuf:"varint,2,opt,name=wait_for_user_response,json=waitForUserResponse,proto3" json:"wait_for_user_response,omitempty"`
	Messages                      []*Message `protobuf:"bytes,3,rep,name=messages,proto3" json:"messages,omitempty"`
	AllowOpenResponse             bool       `protobuf:"varint,4,opt,name=allow_open_response,json=allowOpenResponse,proto3" json:"allow_open_response,omitempty"`
	SaveToAttribute               string     `protobuf:"bytes,5,opt,name=save_to_attribute,json=saveToAttribute,proto3" json:"save_to_attribute,omitempty"`
	Validation                    string     `protobuf:"bytes,6,opt,name=validation,proto3" json:"validation,omitempty"` // none, email, phone, date, link, number, regex
	ValidationRegex               string     `protobuf:"bytes,7,opt,name=validation_regex,json=validationRegex,proto3" json:"validation_regex,omitempty"`
	SkipIfAttributeAlreadyExisted bool       `protobuf:"varint,11,opt,name=skip_if_attribute_already_existed,json=skipIfAttributeAlreadyExisted,proto3" json:"skip_if_attribute_already_existed,omitempty"`
	ResumeMessage                 *Message   `protobuf:"bytes,15,opt,name=resume_message,json=resumeMessage,proto3" json:"resume_message,omitempty"`
	ResumeInterval                int64      `protobuf:"varint,16,opt,name=resume_interval,json=resumeInterval,proto3" json:"resume_interval,omitempty"` // sec
	UseResumeMessage              bool       `protobuf:"varint,17,opt,name=use_resume_message,json=useResumeMessage,proto3" json:"use_resume_message,omitempty"`
	Retry                         int32      `protobuf:"varint,18,opt,name=retry,proto3" json:"retry,omitempty"` // TODO: remove != 1 => 0 retry, 1 retry forever
	// if user doesn't reply in this amount of time => failed
	// only active if value > 0
	UserReplyTimeout int64  `protobuf:"varint,19,opt,name=user_reply_timeout,json=userReplyTimeout,proto3" json:"user_reply_timeout,omitempty"`
	BranchOnFailed   string `protobuf:"bytes,20,opt,name=branch_on_failed,json=branchOnFailed,proto3" json:"branch_on_failed,omitempty"` // empty => retry forever
}

func (x *ActionAskQuestion) Reset() {
	*x = ActionAskQuestion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionAskQuestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionAskQuestion) ProtoMessage() {}

func (x *ActionAskQuestion) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionAskQuestion.ProtoReflect.Descriptor instead.
func (*ActionAskQuestion) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{136}
}

func (x *ActionAskQuestion) GetWaitForUserResponse() bool {
	if x != nil {
		return x.WaitForUserResponse
	}
	return false
}

func (x *ActionAskQuestion) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *ActionAskQuestion) GetAllowOpenResponse() bool {
	if x != nil {
		return x.AllowOpenResponse
	}
	return false
}

func (x *ActionAskQuestion) GetSaveToAttribute() string {
	if x != nil {
		return x.SaveToAttribute
	}
	return ""
}

func (x *ActionAskQuestion) GetValidation() string {
	if x != nil {
		return x.Validation
	}
	return ""
}

func (x *ActionAskQuestion) GetValidationRegex() string {
	if x != nil {
		return x.ValidationRegex
	}
	return ""
}

func (x *ActionAskQuestion) GetSkipIfAttributeAlreadyExisted() bool {
	if x != nil {
		return x.SkipIfAttributeAlreadyExisted
	}
	return false
}

func (x *ActionAskQuestion) GetResumeMessage() *Message {
	if x != nil {
		return x.ResumeMessage
	}
	return nil
}

func (x *ActionAskQuestion) GetResumeInterval() int64 {
	if x != nil {
		return x.ResumeInterval
	}
	return 0
}

func (x *ActionAskQuestion) GetUseResumeMessage() bool {
	if x != nil {
		return x.UseResumeMessage
	}
	return false
}

func (x *ActionAskQuestion) GetRetry() int32 {
	if x != nil {
		return x.Retry
	}
	return 0
}

func (x *ActionAskQuestion) GetUserReplyTimeout() int64 {
	if x != nil {
		return x.UserReplyTimeout
	}
	return 0
}

func (x *ActionAskQuestion) GetBranchOnFailed() string {
	if x != nil {
		return x.BranchOnFailed
	}
	return ""
}

type ActionUpdateUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr  *Attribute   `protobuf:"bytes,3,opt,name=attr,proto3" json:"attr,omitempty"`
	Attrs []*Attribute `protobuf:"bytes,4,rep,name=attrs,proto3" json:"attrs,omitempty"`
}

func (x *ActionUpdateUser) Reset() {
	*x = ActionUpdateUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionUpdateUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionUpdateUser) ProtoMessage() {}

func (x *ActionUpdateUser) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionUpdateUser.ProtoReflect.Descriptor instead.
func (*ActionUpdateUser) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{137}
}

func (x *ActionUpdateUser) GetAttr() *Attribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

func (x *ActionUpdateUser) GetAttrs() []*Attribute {
	if x != nil {
		return x.Attrs
	}
	return nil
}

type ActionUpdateUserLabels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels       []string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
	RemoveLabels []string `protobuf:"bytes,3,rep,name=remove_labels,json=removeLabels,proto3" json:"remove_labels,omitempty"`
}

func (x *ActionUpdateUserLabels) Reset() {
	*x = ActionUpdateUserLabels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionUpdateUserLabels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionUpdateUserLabels) ProtoMessage() {}

func (x *ActionUpdateUserLabels) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionUpdateUserLabels.ProtoReflect.Descriptor instead.
func (*ActionUpdateUserLabels) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{138}
}

func (x *ActionUpdateUserLabels) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ActionUpdateUserLabels) GetRemoveLabels() []string {
	if x != nil {
		return x.RemoveLabels
	}
	return nil
}

type Metric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Submetrics  []*Metric `protobuf:"bytes,5,rep,name=submetrics,proto3" json:"submetrics,omitempty"`
	DateDim     int64     `protobuf:"varint,2,opt,name=date_dim,json=dateDim,proto3" json:"date_dim,omitempty"`
	ObjectType  string    `protobuf:"bytes,3,opt,name=object_type,json=objectType,proto3" json:"object_type,omitempty"` // all if empty
	Count       int64     `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	ObjectCount int64     `protobuf:"varint,6,opt,name=object_count,json=objectCount,proto3" json:"object_count,omitempty"`
	LeadCount   int64     `protobuf:"varint,7,opt,name=lead_count,json=leadCount,proto3" json:"lead_count,omitempty"`
}

func (x *Metric) Reset() {
	*x = Metric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metric) ProtoMessage() {}

func (x *Metric) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metric.ProtoReflect.Descriptor instead.
func (*Metric) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{139}
}

func (x *Metric) GetSubmetrics() []*Metric {
	if x != nil {
		return x.Submetrics
	}
	return nil
}

func (x *Metric) GetDateDim() int64 {
	if x != nil {
		return x.DateDim
	}
	return 0
}

func (x *Metric) GetObjectType() string {
	if x != nil {
		return x.ObjectType
	}
	return ""
}

func (x *Metric) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Metric) GetObjectCount() int64 {
	if x != nil {
		return x.ObjectCount
	}
	return 0
}

func (x *Metric) GetLeadCount() int64 {
	if x != nil {
		return x.LeadCount
	}
	return 0
}

type ReportBotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	BotId     string `protobuf:"bytes,3,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	DayFrom   int64  `protobuf:"varint,4,opt,name=day_from,json=dayFrom,proto3" json:"day_from,omitempty"`
	DayTo     int64  `protobuf:"varint,5,opt,name=day_to,json=dayTo,proto3" json:"day_to,omitempty"`
}

func (x *ReportBotRequest) Reset() {
	*x = ReportBotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportBotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportBotRequest) ProtoMessage() {}

func (x *ReportBotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportBotRequest.ProtoReflect.Descriptor instead.
func (*ReportBotRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{140}
}

func (x *ReportBotRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ReportBotRequest) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

func (x *ReportBotRequest) GetDayFrom() int64 {
	if x != nil {
		return x.DayFrom
	}
	return 0
}

func (x *ReportBotRequest) GetDayTo() int64 {
	if x != nil {
		return x.DayTo
	}
	return 0
}

type ReportBotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metrics []*Metric `protobuf:"bytes,2,rep,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *ReportBotResponse) Reset() {
	*x = ReportBotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportBotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportBotResponse) ProtoMessage() {}

func (x *ReportBotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportBotResponse.ProtoReflect.Descriptor instead.
func (*ReportBotResponse) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{141}
}

func (x *ReportBotResponse) GetMetrics() []*Metric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type BotrunMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeadCount   int64  `protobuf:"varint,2,opt,name=lead_count,json=leadCount,proto3" json:"lead_count,omitempty"`
	BotrunCount int64  `protobuf:"varint,3,opt,name=botrun_count,json=botrunCount,proto3" json:"botrun_count,omitempty"`
	AccountId   string `protobuf:"bytes,4,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	BotId       string `protobuf:"bytes,5,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	CreatedHour int64  `protobuf:"varint,6,opt,name=created_hour,json=createdHour,proto3" json:"created_hour,omitempty"`
	Date        string `protobuf:"bytes,7,opt,name=date,proto3" json:"date,omitempty"` // derived
}

func (x *BotrunMetric) Reset() {
	*x = BotrunMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BotrunMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotrunMetric) ProtoMessage() {}

func (x *BotrunMetric) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotrunMetric.ProtoReflect.Descriptor instead.
func (*BotrunMetric) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{142}
}

func (x *BotrunMetric) GetLeadCount() int64 {
	if x != nil {
		return x.LeadCount
	}
	return 0
}

func (x *BotrunMetric) GetBotrunCount() int64 {
	if x != nil {
		return x.BotrunCount
	}
	return 0
}

func (x *BotrunMetric) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *BotrunMetric) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

func (x *BotrunMetric) GetCreatedHour() int64 {
	if x != nil {
		return x.CreatedHour
	}
	return 0
}

func (x *BotrunMetric) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

type BotrunMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dim             string `protobuf:"bytes,2,opt,name=dim,proto3" json:"dim,omitempty"`
	Tz              int32  `protobuf:"varint,3,opt,name=tz,proto3" json:"tz,omitempty"`
	AccountId       string `protobuf:"bytes,4,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	BotId           string `protobuf:"bytes,5,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	CreatedHourFrom int64  `protobuf:"varint,6,opt,name=created_hour_from,json=createdHourFrom,proto3" json:"created_hour_from,omitempty"`
	CreatedHourTo   int64  `protobuf:"varint,7,opt,name=created_hour_to,json=createdHourTo,proto3" json:"created_hour_to,omitempty"`
}

func (x *BotrunMetricsRequest) Reset() {
	*x = BotrunMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BotrunMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotrunMetricsRequest) ProtoMessage() {}

func (x *BotrunMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotrunMetricsRequest.ProtoReflect.Descriptor instead.
func (*BotrunMetricsRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{143}
}

func (x *BotrunMetricsRequest) GetDim() string {
	if x != nil {
		return x.Dim
	}
	return ""
}

func (x *BotrunMetricsRequest) GetTz() int32 {
	if x != nil {
		return x.Tz
	}
	return 0
}

func (x *BotrunMetricsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *BotrunMetricsRequest) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

func (x *BotrunMetricsRequest) GetCreatedHourFrom() int64 {
	if x != nil {
		return x.CreatedHourFrom
	}
	return 0
}

func (x *BotrunMetricsRequest) GetCreatedHourTo() int64 {
	if x != nil {
		return x.CreatedHourTo
	}
	return 0
}

type BotrunMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metrics []*BotrunMetric `protobuf:"bytes,2,rep,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *BotrunMetrics) Reset() {
	*x = BotrunMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BotrunMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotrunMetrics) ProtoMessage() {}

func (x *BotrunMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotrunMetrics.ProtoReflect.Descriptor instead.
func (*BotrunMetrics) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{144}
}

func (x *BotrunMetrics) GetMetrics() []*BotrunMetric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type ActionrunMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionrunCount int64  `protobuf:"varint,2,opt,name=actionrun_count,json=actionrunCount,proto3" json:"actionrun_count,omitempty"`
	AccountId      string `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	BotId          string `protobuf:"bytes,4,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	ActionId       string `protobuf:"bytes,5,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
	CreatedHour    int64  `protobuf:"varint,6,opt,name=created_hour,json=createdHour,proto3" json:"created_hour,omitempty"`
	Date           string `protobuf:"bytes,7,opt,name=date,proto3" json:"date,omitempty"` // derived
}

func (x *ActionrunMetric) Reset() {
	*x = ActionrunMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionrunMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionrunMetric) ProtoMessage() {}

func (x *ActionrunMetric) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionrunMetric.ProtoReflect.Descriptor instead.
func (*ActionrunMetric) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{145}
}

func (x *ActionrunMetric) GetActionrunCount() int64 {
	if x != nil {
		return x.ActionrunCount
	}
	return 0
}

func (x *ActionrunMetric) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ActionrunMetric) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

func (x *ActionrunMetric) GetActionId() string {
	if x != nil {
		return x.ActionId
	}
	return ""
}

func (x *ActionrunMetric) GetCreatedHour() int64 {
	if x != nil {
		return x.CreatedHour
	}
	return 0
}

func (x *ActionrunMetric) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

type ActionrunMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dim             string `protobuf:"bytes,2,opt,name=dim,proto3" json:"dim,omitempty"`
	Tz              int32  `protobuf:"varint,3,opt,name=tz,proto3" json:"tz,omitempty"`
	AccountId       string `protobuf:"bytes,4,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	BotId           string `protobuf:"bytes,5,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	CreatedHourFrom int64  `protobuf:"varint,6,opt,name=created_hour_from,json=createdHourFrom,proto3" json:"created_hour_from,omitempty"`
	CreatedHourTo   int64  `protobuf:"varint,7,opt,name=created_hour_to,json=createdHourTo,proto3" json:"created_hour_to,omitempty"`
}

func (x *ActionrunMetricsRequest) Reset() {
	*x = ActionrunMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionrunMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionrunMetricsRequest) ProtoMessage() {}

func (x *ActionrunMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionrunMetricsRequest.ProtoReflect.Descriptor instead.
func (*ActionrunMetricsRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{146}
}

func (x *ActionrunMetricsRequest) GetDim() string {
	if x != nil {
		return x.Dim
	}
	return ""
}

func (x *ActionrunMetricsRequest) GetTz() int32 {
	if x != nil {
		return x.Tz
	}
	return 0
}

func (x *ActionrunMetricsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ActionrunMetricsRequest) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

func (x *ActionrunMetricsRequest) GetCreatedHourFrom() int64 {
	if x != nil {
		return x.CreatedHourFrom
	}
	return 0
}

func (x *ActionrunMetricsRequest) GetCreatedHourTo() int64 {
	if x != nil {
		return x.CreatedHourTo
	}
	return 0
}

type ActionrunMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metrics []*ActionrunMetric `protobuf:"bytes,2,rep,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *ActionrunMetrics) Reset() {
	*x = ActionrunMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionrunMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionrunMetrics) ProtoMessage() {}

func (x *ActionrunMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionrunMetrics.ProtoReflect.Descriptor instead.
func (*ActionrunMetrics) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{147}
}

func (x *ActionrunMetrics) GetMetrics() []*ActionrunMetric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type ListObjectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId       string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	BotId           string `protobuf:"bytes,3,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	CreatedHourFrom int64  `protobuf:"varint,8,opt,name=created_hour_from,json=createdHourFrom,proto3" json:"created_hour_from,omitempty"`
	CreatedHourTo   int64  `protobuf:"varint,9,opt,name=created_hour_to,json=createdHourTo,proto3" json:"created_hour_to,omitempty"`
	Anchor          string `protobuf:"bytes,6,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Limit           int32  `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	DayFrom         int64  `protobuf:"varint,4,opt,name=day_from,json=dayFrom,proto3" json:"day_from,omitempty"`
	DayTo           int64  `protobuf:"varint,5,opt,name=day_to,json=dayTo,proto3" json:"day_to,omitempty"`
}

func (x *ListObjectsRequest) Reset() {
	*x = ListObjectsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListObjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListObjectsRequest) ProtoMessage() {}

func (x *ListObjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListObjectsRequest.ProtoReflect.Descriptor instead.
func (*ListObjectsRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{148}
}

func (x *ListObjectsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ListObjectsRequest) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

func (x *ListObjectsRequest) GetCreatedHourFrom() int64 {
	if x != nil {
		return x.CreatedHourFrom
	}
	return 0
}

func (x *ListObjectsRequest) GetCreatedHourTo() int64 {
	if x != nil {
		return x.CreatedHourTo
	}
	return 0
}

func (x *ListObjectsRequest) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *ListObjectsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListObjectsRequest) GetDayFrom() int64 {
	if x != nil {
		return x.DayFrom
	}
	return 0
}

func (x *ListObjectsRequest) GetDayTo() int64 {
	if x != nil {
		return x.DayTo
	}
	return 0
}

type ListObjectsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Anchor          string   `protobuf:"bytes,3,opt,name=anchor,proto3" json:"anchor,omitempty"`
	ConversationIds []string `protobuf:"bytes,4,rep,name=conversation_ids,json=conversationIds,proto3" json:"conversation_ids,omitempty"`
}

func (x *ListObjectsResponse) Reset() {
	*x = ListObjectsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListObjectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListObjectsResponse) ProtoMessage() {}

func (x *ListObjectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListObjectsResponse.ProtoReflect.Descriptor instead.
func (*ListObjectsResponse) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{149}
}

func (x *ListObjectsResponse) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *ListObjectsResponse) GetConversationIds() []string {
	if x != nil {
		return x.ConversationIds
	}
	return nil
}

type Frequently struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OncePerUser    bool  `protobuf:"varint,2,opt,name=once_per_user,json=oncePerUser,proto3" json:"once_per_user,omitempty"`
	OncePerSession bool  `protobuf:"varint,3,opt,name=once_per_session,json=oncePerSession,proto3" json:"once_per_session,omitempty"`
	IntervalSec    int64 `protobuf:"varint,4,opt,name=interval_sec,json=intervalSec,proto3" json:"interval_sec,omitempty"` // dont do twice between those seconds
}

func (x *Frequently) Reset() {
	*x = Frequently{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Frequently) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Frequently) ProtoMessage() {}

func (x *Frequently) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Frequently.ProtoReflect.Descriptor instead.
func (*Frequently) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{150}
}

func (x *Frequently) GetOncePerUser() bool {
	if x != nil {
		return x.OncePerUser
	}
	return false
}

func (x *Frequently) GetOncePerSession() bool {
	if x != nil {
		return x.OncePerSession
	}
	return false
}

func (x *Frequently) GetIntervalSec() int64 {
	if x != nil {
		return x.IntervalSec
	}
	return 0
}

////////////////////
type RealtimeSubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx          *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	InitialToken string          `protobuf:"bytes,2,opt,name=initial_token,json=initialToken,proto3" json:"initial_token,omitempty"`
	Events       []string        `protobuf:"bytes,3,rep,name=events,proto3" json:"events,omitempty"`
	Host         string          `protobuf:"bytes,5,opt,name=host,proto3" json:"host,omitempty"` // notify client about the wrong host
}

func (x *RealtimeSubscription) Reset() {
	*x = RealtimeSubscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealtimeSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealtimeSubscription) ProtoMessage() {}

func (x *RealtimeSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealtimeSubscription.ProtoReflect.Descriptor instead.
func (*RealtimeSubscription) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{151}
}

func (x *RealtimeSubscription) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *RealtimeSubscription) GetInitialToken() string {
	if x != nil {
		return x.InitialToken
	}
	return ""
}

func (x *RealtimeSubscription) GetEvents() []string {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *RealtimeSubscription) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

type PollResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events          []*Event `protobuf:"bytes,4,rep,name=events,proto3" json:"events,omitempty"`
	SequentialToken string   `protobuf:"bytes,6,opt,name=sequential_token,json=sequentialToken,proto3" json:"sequential_token,omitempty"`
	Host            string   `protobuf:"bytes,7,opt,name=host,proto3" json:"host,omitempty"` // notify client about the wrong host
}

func (x *PollResult) Reset() {
	*x = PollResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollResult) ProtoMessage() {}

func (x *PollResult) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollResult.ProtoReflect.Descriptor instead.
func (*PollResult) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{152}
}

func (x *PollResult) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *PollResult) GetSequentialToken() string {
	if x != nil {
		return x.SequentialToken
	}
	return ""
}

func (x *PollResult) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

type RealtimeToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId    string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ConnectionId string `protobuf:"bytes,4,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	LastOffset   int64  `protobuf:"varint,5,opt,name=last_offset,json=lastOffset,proto3" json:"last_offset,omitempty"`
	Created      int64  `protobuf:"varint,6,opt,name=created,proto3" json:"created,omitempty"`
	Expired      int64  `protobuf:"varint,7,opt,name=expired,proto3" json:"expired,omitempty"`
	LastPolled   int64  `protobuf:"varint,8,opt,name=last_polled,json=lastPolled,proto3" json:"last_polled,omitempty"`
	PackageSize  int64  `protobuf:"varint,9,opt,name=package_size,json=packageSize,proto3" json:"package_size,omitempty"`
}

func (x *RealtimeToken) Reset() {
	*x = RealtimeToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealtimeToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealtimeToken) ProtoMessage() {}

func (x *RealtimeToken) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealtimeToken.ProtoReflect.Descriptor instead.
func (*RealtimeToken) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{153}
}

func (x *RealtimeToken) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *RealtimeToken) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *RealtimeToken) GetLastOffset() int64 {
	if x != nil {
		return x.LastOffset
	}
	return 0
}

func (x *RealtimeToken) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *RealtimeToken) GetExpired() int64 {
	if x != nil {
		return x.Expired
	}
	return 0
}

func (x *RealtimeToken) GetLastPolled() int64 {
	if x != nil {
		return x.LastPolled
	}
	return 0
}

func (x *RealtimeToken) GetPackageSize() int64 {
	if x != nil {
		return x.PackageSize
	}
	return 0
}

type PublishMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Topics    []string        `protobuf:"bytes,2,rep,name=topics,proto3" json:"topics,omitempty"`
	Payload   []byte          `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	AccountId string          `protobuf:"bytes,5,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *PublishMessage) Reset() {
	*x = PublishMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishMessage) ProtoMessage() {}

func (x *PublishMessage) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishMessage.ProtoReflect.Descriptor instead.
func (*PublishMessage) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{154}
}

func (x *PublishMessage) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *PublishMessage) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *PublishMessage) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *PublishMessage) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type WidgetUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	User             *User           `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	IsOnline         bool            `protobuf:"varint,20,opt,name=is_online,json=isOnline,proto3" json:"is_online,omitempty"`
	IsInBusinessHour bool            `protobuf:"varint,21,opt,name=is_in_business_hour,json=isInBusinessHour,proto3" json:"is_in_business_hour,omitempty"`
}

func (x *WidgetUser) Reset() {
	*x = WidgetUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WidgetUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WidgetUser) ProtoMessage() {}

func (x *WidgetUser) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WidgetUser.ProtoReflect.Descriptor instead.
func (*WidgetUser) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{155}
}

func (x *WidgetUser) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *WidgetUser) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *WidgetUser) GetIsOnline() bool {
	if x != nil {
		return x.IsOnline
	}
	return false
}

func (x *WidgetUser) GetIsInBusinessHour() bool {
	if x != nil {
		return x.IsInBusinessHour
	}
	return false
}

// widget
type WidgetUserSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx              *common.Context  `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Account          *account.Account `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`
	Agents           []*account.Agent `protobuf:"bytes,5,rep,name=agents,proto3" json:"agents,omitempty"`
	AccountId        string           `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"` // subiz use only
	User             *User            `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`                            // remove
	UserId           string           `protobuf:"bytes,7,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          // subiz use only
	Language         string           `protobuf:"bytes,6,opt,name=language,proto3" json:"language,omitempty"`
	SendTranscript   bool             `protobuf:"varint,8,opt,name=send_transcript,json=sendTranscript,proto3" json:"send_transcript,omitempty"`
	AccountSetting   *WidgetSetting   `protobuf:"bytes,9,opt,name=account_setting,json=accountSetting,proto3" json:"account_setting,omitempty"`
	Bots             []*Bot           `protobuf:"bytes,14,rep,name=bots,proto3" json:"bots,omitempty"`
	Plugins          []*WebPlugin     `protobuf:"bytes,15,rep,name=plugins,proto3" json:"plugins,omitempty"`
	IsOnline         bool             `protobuf:"varint,20,opt,name=is_online,json=isOnline,proto3" json:"is_online,omitempty"`                             // remove
	IsInBusinessHour bool             `protobuf:"varint,21,opt,name=is_in_business_hour,json=isInBusinessHour,proto3" json:"is_in_business_hour,omitempty"` // remove
	LastModified     int64            `protobuf:"varint,22,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	Addresses        []*Address       `protobuf:"bytes,23,rep,name=addresses,proto3" json:"addresses,omitempty"`
	PaymentMethods   []*PaymentMethod `protobuf:"bytes,24,rep,name=payment_methods,json=paymentMethods,proto3" json:"payment_methods,omitempty"`
}

func (x *WidgetUserSetting) Reset() {
	*x = WidgetUserSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WidgetUserSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WidgetUserSetting) ProtoMessage() {}

func (x *WidgetUserSetting) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WidgetUserSetting.ProtoReflect.Descriptor instead.
func (*WidgetUserSetting) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{156}
}

func (x *WidgetUserSetting) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *WidgetUserSetting) GetAccount() *account.Account {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *WidgetUserSetting) GetAgents() []*account.Agent {
	if x != nil {
		return x.Agents
	}
	return nil
}

func (x *WidgetUserSetting) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *WidgetUserSetting) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *WidgetUserSetting) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *WidgetUserSetting) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *WidgetUserSetting) GetSendTranscript() bool {
	if x != nil {
		return x.SendTranscript
	}
	return false
}

func (x *WidgetUserSetting) GetAccountSetting() *WidgetSetting {
	if x != nil {
		return x.AccountSetting
	}
	return nil
}

func (x *WidgetUserSetting) GetBots() []*Bot {
	if x != nil {
		return x.Bots
	}
	return nil
}

func (x *WidgetUserSetting) GetPlugins() []*WebPlugin {
	if x != nil {
		return x.Plugins
	}
	return nil
}

func (x *WidgetUserSetting) GetIsOnline() bool {
	if x != nil {
		return x.IsOnline
	}
	return false
}

func (x *WidgetUserSetting) GetIsInBusinessHour() bool {
	if x != nil {
		return x.IsInBusinessHour
	}
	return false
}

func (x *WidgetUserSetting) GetLastModified() int64 {
	if x != nil {
		return x.LastModified
	}
	return 0
}

func (x *WidgetUserSetting) GetAddresses() []*Address {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *WidgetUserSetting) GetPaymentMethods() []*PaymentMethod {
	if x != nil {
		return x.PaymentMethods
	}
	return nil
}

type AccountWeb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx            *common.Context  `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId      string           `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Account        *account.Account `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`
	Agents         []*account.Agent `protobuf:"bytes,5,rep,name=agents,proto3" json:"agents,omitempty"`
	Bots           []*Bot           `protobuf:"bytes,14,rep,name=bots,proto3" json:"bots,omitempty"`
	Plugins        []*WebPlugin     `protobuf:"bytes,15,rep,name=plugins,proto3" json:"plugins,omitempty"`
	LastModified   int64            `protobuf:"varint,22,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	PaymentMethods []*PaymentMethod `protobuf:"bytes,24,rep,name=payment_methods,json=paymentMethods,proto3" json:"payment_methods,omitempty"`
}

func (x *AccountWeb) Reset() {
	*x = AccountWeb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountWeb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountWeb) ProtoMessage() {}

func (x *AccountWeb) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountWeb.ProtoReflect.Descriptor instead.
func (*AccountWeb) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{157}
}

func (x *AccountWeb) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *AccountWeb) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AccountWeb) GetAccount() *account.Account {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *AccountWeb) GetAgents() []*account.Agent {
	if x != nil {
		return x.Agents
	}
	return nil
}

func (x *AccountWeb) GetBots() []*Bot {
	if x != nil {
		return x.Bots
	}
	return nil
}

func (x *AccountWeb) GetPlugins() []*WebPlugin {
	if x != nil {
		return x.Plugins
	}
	return nil
}

func (x *AccountWeb) GetLastModified() int64 {
	if x != nil {
		return x.LastModified
	}
	return 0
}

func (x *AccountWeb) GetPaymentMethods() []*PaymentMethod {
	if x != nil {
		return x.PaymentMethods
	}
	return nil
}

type SocialLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"` // facebook, viber, subiz, email, ...
	Url  string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *SocialLink) Reset() {
	*x = SocialLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SocialLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocialLink) ProtoMessage() {}

func (x *SocialLink) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocialLink.ProtoReflect.Descriptor instead.
func (*SocialLink) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{158}
}

func (x *SocialLink) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SocialLink) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type WidgetHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Layout string `protobuf:"bytes,2,opt,name=layout,proto3" json:"layout,omitempty"`
	// for social layout only
	Links []*SocialLink `protobuf:"bytes,3,rep,name=links,proto3" json:"links,omitempty"`
	// agents whose avatar will be display in the header
	AgentIds []string `protobuf:"bytes,4,rep,name=agent_ids,json=agentIds,proto3" json:"agent_ids,omitempty"`
}

func (x *WidgetHeader) Reset() {
	*x = WidgetHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WidgetHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WidgetHeader) ProtoMessage() {}

func (x *WidgetHeader) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WidgetHeader.ProtoReflect.Descriptor instead.
func (*WidgetHeader) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{159}
}

func (x *WidgetHeader) GetLayout() string {
	if x != nil {
		return x.Layout
	}
	return ""
}

func (x *WidgetHeader) GetLinks() []*SocialLink {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *WidgetHeader) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

type WidgetSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx           *common.Context  `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId     string           `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	WidgetVersion string           `protobuf:"bytes,3,opt,name=widget_version,json=widgetVersion,proto3" json:"widget_version,omitempty"`
	Agents        []*account.Agent `protobuf:"bytes,7,rep,name=agents,proto3" json:"agents,omitempty"`
	AgentIds      []string         `protobuf:"bytes,8,rep,name=agent_ids,json=agentIds,proto3" json:"agent_ids,omitempty"` // subiz only
	//  string css_url = 9; // old version
	//  string custom_css_url = 10; // deprecated
	Replytime int32 `protobuf:"varint,11,opt,name=replytime,proto3" json:"replytime,omitempty"` // deprecated
	//  string css = 12; // communication client to server
	//  string style_url = 13;
	// read-only, tell whether account is ready for chat or not
	IsOnline          bool              `protobuf:"varint,14,opt,name=is_online,json=isOnline,proto3" json:"is_online,omitempty"`
	IsInBusinessHour  bool              `protobuf:"varint,34,opt,name=is_in_business_hour,json=isInBusinessHour,proto3" json:"is_in_business_hour,omitempty"`
	WindowMode        string            `protobuf:"bytes,15,opt,name=window_mode,json=windowMode,proto3" json:"window_mode,omitempty"`
	Header            *WidgetHeader     `protobuf:"bytes,16,opt,name=header,proto3" json:"header,omitempty"`
	Height            int32             `protobuf:"varint,17,opt,name=height,proto3" json:"height,omitempty"`
	Width             int32             `protobuf:"varint,18,opt,name=width,proto3" json:"width,omitempty"`
	PrimaryColor      string            `protobuf:"bytes,19,opt,name=primary_color,json=primaryColor,proto3" json:"primary_color,omitempty"`
	SecondaryColor    string            `protobuf:"bytes,20,opt,name=secondary_color,json=secondaryColor,proto3" json:"secondary_color,omitempty"`
	Background        string            `protobuf:"bytes,21,opt,name=background,proto3" json:"background,omitempty"`
	TextColor         string            `protobuf:"bytes,22,opt,name=text_color,json=textColor,proto3" json:"text_color,omitempty"`
	OfflineForm       *WidgetForm       `protobuf:"bytes,23,opt,name=offline_form,json=offlineForm,proto3" json:"offline_form,omitempty"`
	PrechatForm       *WidgetForm       `protobuf:"bytes,24,opt,name=prechat_form,json=prechatForm,proto3" json:"prechat_form,omitempty"`
	DesktopButton     *WidgetChatButton `protobuf:"bytes,25,opt,name=desktop_button,json=desktopButton,proto3" json:"desktop_button,omitempty"`
	MobileButton      *WidgetChatButton `protobuf:"bytes,26,opt,name=mobile_button,json=mobileButton,proto3" json:"mobile_button,omitempty"`
	Greeting          *WidgetGreeting   `protobuf:"bytes,27,opt,name=greeting,proto3" json:"greeting,omitempty"`
	Title             string            `protobuf:"bytes,28,opt,name=title,proto3" json:"title,omitempty"`
	Introduction      string            `protobuf:"bytes,29,opt,name=introduction,proto3" json:"introduction,omitempty"`
	AutoRequestRating bool              `protobuf:"varint,33,opt,name=auto_request_rating,json=autoRequestRating,proto3" json:"auto_request_rating,omitempty"`
	Caption           *I18NString       `protobuf:"bytes,35,opt,name=caption,proto3" json:"caption,omitempty"`
	Tagline           *I18NString       `protobuf:"bytes,36,opt,name=tagline,proto3" json:"tagline,omitempty"`
	ZIndex            int64             `protobuf:"varint,37,opt,name=z_index,json=zIndex,proto3" json:"z_index,omitempty"`
	HideSubizLogo     bool              `protobuf:"varint,38,opt,name=hide_subiz_logo,json=hideSubizLogo,proto3" json:"hide_subiz_logo,omitempty"`
	HideCloseButton   bool              `protobuf:"varint,39,opt,name=hide_close_button,json=hideCloseButton,proto3" json:"hide_close_button,omitempty"`
}

func (x *WidgetSetting) Reset() {
	*x = WidgetSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WidgetSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WidgetSetting) ProtoMessage() {}

func (x *WidgetSetting) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WidgetSetting.ProtoReflect.Descriptor instead.
func (*WidgetSetting) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{160}
}

func (x *WidgetSetting) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *WidgetSetting) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *WidgetSetting) GetWidgetVersion() string {
	if x != nil {
		return x.WidgetVersion
	}
	return ""
}

func (x *WidgetSetting) GetAgents() []*account.Agent {
	if x != nil {
		return x.Agents
	}
	return nil
}

func (x *WidgetSetting) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *WidgetSetting) GetReplytime() int32 {
	if x != nil {
		return x.Replytime
	}
	return 0
}

func (x *WidgetSetting) GetIsOnline() bool {
	if x != nil {
		return x.IsOnline
	}
	return false
}

func (x *WidgetSetting) GetIsInBusinessHour() bool {
	if x != nil {
		return x.IsInBusinessHour
	}
	return false
}

func (x *WidgetSetting) GetWindowMode() string {
	if x != nil {
		return x.WindowMode
	}
	return ""
}

func (x *WidgetSetting) GetHeader() *WidgetHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *WidgetSetting) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *WidgetSetting) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *WidgetSetting) GetPrimaryColor() string {
	if x != nil {
		return x.PrimaryColor
	}
	return ""
}

func (x *WidgetSetting) GetSecondaryColor() string {
	if x != nil {
		return x.SecondaryColor
	}
	return ""
}

func (x *WidgetSetting) GetBackground() string {
	if x != nil {
		return x.Background
	}
	return ""
}

func (x *WidgetSetting) GetTextColor() string {
	if x != nil {
		return x.TextColor
	}
	return ""
}

func (x *WidgetSetting) GetOfflineForm() *WidgetForm {
	if x != nil {
		return x.OfflineForm
	}
	return nil
}

func (x *WidgetSetting) GetPrechatForm() *WidgetForm {
	if x != nil {
		return x.PrechatForm
	}
	return nil
}

func (x *WidgetSetting) GetDesktopButton() *WidgetChatButton {
	if x != nil {
		return x.DesktopButton
	}
	return nil
}

func (x *WidgetSetting) GetMobileButton() *WidgetChatButton {
	if x != nil {
		return x.MobileButton
	}
	return nil
}

func (x *WidgetSetting) GetGreeting() *WidgetGreeting {
	if x != nil {
		return x.Greeting
	}
	return nil
}

func (x *WidgetSetting) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *WidgetSetting) GetIntroduction() string {
	if x != nil {
		return x.Introduction
	}
	return ""
}

func (x *WidgetSetting) GetAutoRequestRating() bool {
	if x != nil {
		return x.AutoRequestRating
	}
	return false
}

func (x *WidgetSetting) GetCaption() *I18NString {
	if x != nil {
		return x.Caption
	}
	return nil
}

func (x *WidgetSetting) GetTagline() *I18NString {
	if x != nil {
		return x.Tagline
	}
	return nil
}

func (x *WidgetSetting) GetZIndex() int64 {
	if x != nil {
		return x.ZIndex
	}
	return 0
}

func (x *WidgetSetting) GetHideSubizLogo() bool {
	if x != nil {
		return x.HideSubizLogo
	}
	return false
}

func (x *WidgetSetting) GetHideCloseButton() bool {
	if x != nil {
		return x.HideCloseButton
	}
	return false
}

type WidgetField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key        string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Label      string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	IsRequired bool   `protobuf:"varint,3,opt,name=is_required,json=isRequired,proto3" json:"is_required,omitempty"`
	// so front end dont have to download attribute definitions
	Type            string      `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	List            []string    `protobuf:"bytes,6,rep,name=list,proto3" json:"list,omitempty"`       // available option for field
	Subtype         string      `protobuf:"bytes,8,opt,name=subtype,proto3" json:"subtype,omitempty"` // phone, email, rating
	MultipleChoice  bool        `protobuf:"varint,9,opt,name=multiple_choice,json=multipleChoice,proto3" json:"multiple_choice,omitempty"`
	MultilineText   bool        `protobuf:"varint,10,opt,name=multiline_text,json=multilineText,proto3" json:"multiline_text,omitempty"`
	Placeholder     string      `protobuf:"bytes,11,opt,name=placeholder,proto3" json:"placeholder,omitempty"`
	IsUserAttribute bool        `protobuf:"varint,12,opt,name=is_user_attribute,json=isUserAttribute,proto3" json:"is_user_attribute,omitempty"`
	Value           string      `protobuf:"bytes,13,opt,name=value,proto3" json:"value,omitempty"`
	I18NLabel       *I18NString `protobuf:"bytes,14,opt,name=i18n_label,json=i18nLabel,proto3" json:"i18n_label,omitempty"` // label i18n
	I18NPlaceholder *I18NString `protobuf:"bytes,15,opt,name=i18n_placeholder,json=i18nPlaceholder,proto3" json:"i18n_placeholder,omitempty"`
}

func (x *WidgetField) Reset() {
	*x = WidgetField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WidgetField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WidgetField) ProtoMessage() {}

func (x *WidgetField) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WidgetField.ProtoReflect.Descriptor instead.
func (*WidgetField) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{161}
}

func (x *WidgetField) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *WidgetField) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *WidgetField) GetIsRequired() bool {
	if x != nil {
		return x.IsRequired
	}
	return false
}

func (x *WidgetField) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *WidgetField) GetList() []string {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *WidgetField) GetSubtype() string {
	if x != nil {
		return x.Subtype
	}
	return ""
}

func (x *WidgetField) GetMultipleChoice() bool {
	if x != nil {
		return x.MultipleChoice
	}
	return false
}

func (x *WidgetField) GetMultilineText() bool {
	if x != nil {
		return x.MultilineText
	}
	return false
}

func (x *WidgetField) GetPlaceholder() string {
	if x != nil {
		return x.Placeholder
	}
	return ""
}

func (x *WidgetField) GetIsUserAttribute() bool {
	if x != nil {
		return x.IsUserAttribute
	}
	return false
}

func (x *WidgetField) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *WidgetField) GetI18NLabel() *I18NString {
	if x != nil {
		return x.I18NLabel
	}
	return nil
}

func (x *WidgetField) GetI18NPlaceholder() *I18NString {
	if x != nil {
		return x.I18NPlaceholder
	}
	return nil
}

type WidgetGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *WidgetGroup) Reset() {
	*x = WidgetGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WidgetGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WidgetGroup) ProtoMessage() {}

func (x *WidgetGroup) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WidgetGroup.ProtoReflect.Descriptor instead.
func (*WidgetGroup) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{162}
}

func (x *WidgetGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WidgetGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type WidgetForm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields                     []*WidgetField `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	GroupRequired              bool           `protobuf:"varint,2,opt,name=group_required,json=groupRequired,proto3" json:"group_required,omitempty"`
	Groups                     []*WidgetGroup `protobuf:"bytes,3,rep,name=groups,proto3" json:"groups,omitempty"`
	GroupLabel                 string         `protobuf:"bytes,4,opt,name=group_label,json=groupLabel,proto3" json:"group_label,omitempty"`
	Title                      string         `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Enabled                    bool           `protobuf:"varint,6,opt,name=enabled,proto3" json:"enabled,omitempty"`
	EndConversationAfterSubmit bool           `protobuf:"varint,7,opt,name=end_conversation_after_submit,json=endConversationAfterSubmit,proto3" json:"end_conversation_after_submit,omitempty"`
	EnableWhen                 string         `protobuf:"bytes,8,opt,name=enable_when,json=enableWhen,proto3" json:"enable_when,omitempty"`
	QuestionRequired           bool           `protobuf:"varint,10,opt,name=question_required,json=questionRequired,proto3" json:"question_required,omitempty"`
	QuestionLabel              string         `protobuf:"bytes,11,opt,name=question_label,json=questionLabel,proto3" json:"question_label,omitempty"`
	I18NGroupLabel             *I18NString    `protobuf:"bytes,12,opt,name=i18n_group_label,json=i18nGroupLabel,proto3" json:"i18n_group_label,omitempty"`
	I18NTitle                  *I18NString    `protobuf:"bytes,13,opt,name=i18n_title,json=i18nTitle,proto3" json:"i18n_title,omitempty"`
	I18NQuestionLabel          *I18NString    `protobuf:"bytes,14,opt,name=i18n_question_label,json=i18nQuestionLabel,proto3" json:"i18n_question_label,omitempty"`
}

func (x *WidgetForm) Reset() {
	*x = WidgetForm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WidgetForm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WidgetForm) ProtoMessage() {}

func (x *WidgetForm) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WidgetForm.ProtoReflect.Descriptor instead.
func (*WidgetForm) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{163}
}

func (x *WidgetForm) GetFields() []*WidgetField {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *WidgetForm) GetGroupRequired() bool {
	if x != nil {
		return x.GroupRequired
	}
	return false
}

func (x *WidgetForm) GetGroups() []*WidgetGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *WidgetForm) GetGroupLabel() string {
	if x != nil {
		return x.GroupLabel
	}
	return ""
}

func (x *WidgetForm) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *WidgetForm) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *WidgetForm) GetEndConversationAfterSubmit() bool {
	if x != nil {
		return x.EndConversationAfterSubmit
	}
	return false
}

func (x *WidgetForm) GetEnableWhen() string {
	if x != nil {
		return x.EnableWhen
	}
	return ""
}

func (x *WidgetForm) GetQuestionRequired() bool {
	if x != nil {
		return x.QuestionRequired
	}
	return false
}

func (x *WidgetForm) GetQuestionLabel() string {
	if x != nil {
		return x.QuestionLabel
	}
	return ""
}

func (x *WidgetForm) GetI18NGroupLabel() *I18NString {
	if x != nil {
		return x.I18NGroupLabel
	}
	return nil
}

func (x *WidgetForm) GetI18NTitle() *I18NString {
	if x != nil {
		return x.I18NTitle
	}
	return nil
}

func (x *WidgetForm) GetI18NQuestionLabel() *I18NString {
	if x != nil {
		return x.I18NQuestionLabel
	}
	return nil
}

type WidgetChatButton struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BackgroundImageUrl     string `protobuf:"bytes,1,opt,name=background_image_url,json=backgroundImageUrl,proto3" json:"background_image_url,omitempty"`
	BackgroundMaskUrl      string `protobuf:"bytes,11,opt,name=background_mask_url,json=backgroundMaskUrl,proto3" json:"background_mask_url,omitempty"`
	Width                  int32  `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
	Height                 int32  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	Background             string `protobuf:"bytes,4,opt,name=background,proto3" json:"background,omitempty"`
	MarginX                int32  `protobuf:"varint,5,opt,name=margin_x,json=marginX,proto3" json:"margin_x,omitempty"`
	MarginY                int32  `protobuf:"varint,6,opt,name=margin_y,json=marginY,proto3" json:"margin_y,omitempty"`
	Position               string `protobuf:"bytes,7,opt,name=position,proto3" json:"position,omitempty"`
	DefaultStyle           bool   `protobuf:"varint,8,opt,name=default_style,json=defaultStyle,proto3" json:"default_style,omitempty"`
	BackgroundBorderRadius string `protobuf:"bytes,9,opt,name=background_border_radius,json=backgroundBorderRadius,proto3" json:"background_border_radius,omitempty"`
	Hidden                 bool   `protobuf:"varint,10,opt,name=hidden,proto3" json:"hidden,omitempty"`
}

func (x *WidgetChatButton) Reset() {
	*x = WidgetChatButton{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WidgetChatButton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WidgetChatButton) ProtoMessage() {}

func (x *WidgetChatButton) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WidgetChatButton.ProtoReflect.Descriptor instead.
func (*WidgetChatButton) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{164}
}

func (x *WidgetChatButton) GetBackgroundImageUrl() string {
	if x != nil {
		return x.BackgroundImageUrl
	}
	return ""
}

func (x *WidgetChatButton) GetBackgroundMaskUrl() string {
	if x != nil {
		return x.BackgroundMaskUrl
	}
	return ""
}

func (x *WidgetChatButton) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *WidgetChatButton) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *WidgetChatButton) GetBackground() string {
	if x != nil {
		return x.Background
	}
	return ""
}

func (x *WidgetChatButton) GetMarginX() int32 {
	if x != nil {
		return x.MarginX
	}
	return 0
}

func (x *WidgetChatButton) GetMarginY() int32 {
	if x != nil {
		return x.MarginY
	}
	return 0
}

func (x *WidgetChatButton) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *WidgetChatButton) GetDefaultStyle() bool {
	if x != nil {
		return x.DefaultStyle
	}
	return false
}

func (x *WidgetChatButton) GetBackgroundBorderRadius() string {
	if x != nil {
		return x.BackgroundBorderRadius
	}
	return ""
}

func (x *WidgetChatButton) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

type WidgetGreeting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message  string      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Enabled  bool        `protobuf:"varint,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
	AgentId  string      `protobuf:"bytes,5,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Greeting *I18NString `protobuf:"bytes,6,opt,name=greeting,proto3" json:"greeting,omitempty"`
}

func (x *WidgetGreeting) Reset() {
	*x = WidgetGreeting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WidgetGreeting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WidgetGreeting) ProtoMessage() {}

func (x *WidgetGreeting) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WidgetGreeting.ProtoReflect.Descriptor instead.
func (*WidgetGreeting) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{165}
}

func (x *WidgetGreeting) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *WidgetGreeting) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *WidgetGreeting) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *WidgetGreeting) GetGreeting() *I18NString {
	if x != nil {
		return x.Greeting
	}
	return nil
}

////////////// CAMPAIGN //////////////
type CampaignNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//  email.Email email = 1;
	Enabled   bool     `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	SenderId  string   `protobuf:"bytes,4,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	From      string   `protobuf:"bytes,5,opt,name=from,proto3" json:"from,omitempty"`
	To        []string `protobuf:"bytes,7,rep,name=to,proto3" json:"to,omitempty"`
	Subject   string   `protobuf:"bytes,9,opt,name=subject,proto3" json:"subject,omitempty"`
	Body      string   `protobuf:"bytes,10,opt,name=body,proto3" json:"body,omitempty"`
	Agents    []string `protobuf:"bytes,12,rep,name=agents,proto3" json:"agents,omitempty"`
	AllAgents bool     `protobuf:"varint,13,opt,name=all_agents,json=allAgents,proto3" json:"all_agents,omitempty"`
	UserEmail *Message `protobuf:"bytes,14,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
}

func (x *CampaignNotification) Reset() {
	*x = CampaignNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CampaignNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CampaignNotification) ProtoMessage() {}

func (x *CampaignNotification) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CampaignNotification.ProtoReflect.Descriptor instead.
func (*CampaignNotification) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{166}
}

func (x *CampaignNotification) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *CampaignNotification) GetSenderId() string {
	if x != nil {
		return x.SenderId
	}
	return ""
}

func (x *CampaignNotification) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *CampaignNotification) GetTo() []string {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *CampaignNotification) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *CampaignNotification) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *CampaignNotification) GetAgents() []string {
	if x != nil {
		return x.Agents
	}
	return nil
}

func (x *CampaignNotification) GetAllAgents() bool {
	if x != nil {
		return x.AllAgents
	}
	return false
}

func (x *CampaignNotification) GetUserEmail() *Message {
	if x != nil {
		return x.UserEmail
	}
	return nil
}

type WebPlugins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Plugins   []*WebPlugin    `protobuf:"bytes,3,rep,name=plugins,proto3" json:"plugins,omitempty"`
}

func (x *WebPlugins) Reset() {
	*x = WebPlugins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebPlugins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebPlugins) ProtoMessage() {}

func (x *WebPlugins) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebPlugins.ProtoReflect.Descriptor instead.
func (*WebPlugins) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{167}
}

func (x *WebPlugins) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *WebPlugins) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *WebPlugins) GetPlugins() []*WebPlugin {
	if x != nil {
		return x.Plugins
	}
	return nil
}

type WebPlugin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Id        string          `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Name      string          `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// chatbox, popup, contact, notification
	Type                   string                `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	Created                int64                 `protobuf:"varint,10,opt,name=created,proto3" json:"created,omitempty"`
	CreatedBy              string                `protobuf:"bytes,11,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	Updated                int64                 `protobuf:"varint,12,opt,name=updated,proto3" json:"updated,omitempty"`
	UpdatedBy              string                `protobuf:"bytes,13,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	Enabled                bool                  `protobuf:"varint,15,opt,name=enabled,proto3" json:"enabled,omitempty"`
	LastImpression         int64                 `protobuf:"varint,16,opt,name=last_impression,json=lastImpression,proto3" json:"last_impression,omitempty"`
	LastConversion         int64                 `protobuf:"varint,17,opt,name=last_conversion,json=lastConversion,proto3" json:"last_conversion,omitempty"`
	Triggers               []*Trigger            `protobuf:"bytes,19,rep,name=triggers,proto3" json:"triggers,omitempty"`
	InitiativeFrequency    *Frequently           `protobuf:"bytes,20,opt,name=initiative_frequency,json=initiativeFrequency,proto3" json:"initiative_frequency,omitempty"`
	ImpressionLimit        int64                 `protobuf:"varint,21,opt,name=impression_limit,json=impressionLimit,proto3" json:"impression_limit,omitempty"`
	Conditions             []*BotCondition       `protobuf:"bytes,22,rep,name=conditions,proto3" json:"conditions,omitempty"`
	TotalImpression        int64                 `protobuf:"varint,27,opt,name=total_impression,json=totalImpression,proto3" json:"total_impression,omitempty"`
	TotalGoalReached       int64                 `protobuf:"varint,28,opt,name=total_goal_reached,json=totalGoalReached,proto3" json:"total_goal_reached,omitempty"`
	TotalLead              int64                 `protobuf:"varint,29,opt,name=total_lead,json=totalLead,proto3" json:"total_lead,omitempty"`
	IsDeleted              bool                  `protobuf:"varint,30,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	Locale                 string                `protobuf:"bytes,31,opt,name=locale,proto3" json:"locale,omitempty"` // can be auto
	Locales                []string              `protobuf:"bytes,32,rep,name=locales,proto3" json:"locales,omitempty"`
	Chatbox                *WidgetSetting        `protobuf:"bytes,40,opt,name=chatbox,proto3" json:"chatbox,omitempty"`
	Popup                  *Popup                `protobuf:"bytes,41,opt,name=popup,proto3" json:"popup,omitempty"`
	Contact                *ContactComponent     `protobuf:"bytes,46,opt,name=contact,proto3" json:"contact,omitempty"`
	Notification           *Notif                `protobuf:"bytes,47,opt,name=notification,proto3" json:"notification,omitempty"`
	ConversionNotification *CampaignNotification `protobuf:"bytes,26,opt,name=conversion_notification,json=conversionNotification,proto3" json:"conversion_notification,omitempty"`
	TemplateCategories     []string              `protobuf:"bytes,50,rep,name=template_categories,json=templateCategories,proto3" json:"template_categories,omitempty"`
	TemplateTags           []string              `protobuf:"bytes,51,rep,name=template_tags,json=templateTags,proto3" json:"template_tags,omitempty"`
	TemplateTitle          string                `protobuf:"bytes,52,opt,name=template_title,json=templateTitle,proto3" json:"template_title,omitempty"`
	TemplateDescription    string                `protobuf:"bytes,53,opt,name=template_description,json=templateDescription,proto3" json:"template_description,omitempty"`
	ThumbnailUrl           string                `protobuf:"bytes,54,opt,name=thumbnail_url,json=thumbnailUrl,proto3" json:"thumbnail_url,omitempty"`
}

func (x *WebPlugin) Reset() {
	*x = WebPlugin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebPlugin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebPlugin) ProtoMessage() {}

func (x *WebPlugin) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebPlugin.ProtoReflect.Descriptor instead.
func (*WebPlugin) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{168}
}

func (x *WebPlugin) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *WebPlugin) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *WebPlugin) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WebPlugin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WebPlugin) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *WebPlugin) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *WebPlugin) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *WebPlugin) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *WebPlugin) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *WebPlugin) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *WebPlugin) GetLastImpression() int64 {
	if x != nil {
		return x.LastImpression
	}
	return 0
}

func (x *WebPlugin) GetLastConversion() int64 {
	if x != nil {
		return x.LastConversion
	}
	return 0
}

func (x *WebPlugin) GetTriggers() []*Trigger {
	if x != nil {
		return x.Triggers
	}
	return nil
}

func (x *WebPlugin) GetInitiativeFrequency() *Frequently {
	if x != nil {
		return x.InitiativeFrequency
	}
	return nil
}

func (x *WebPlugin) GetImpressionLimit() int64 {
	if x != nil {
		return x.ImpressionLimit
	}
	return 0
}

func (x *WebPlugin) GetConditions() []*BotCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *WebPlugin) GetTotalImpression() int64 {
	if x != nil {
		return x.TotalImpression
	}
	return 0
}

func (x *WebPlugin) GetTotalGoalReached() int64 {
	if x != nil {
		return x.TotalGoalReached
	}
	return 0
}

func (x *WebPlugin) GetTotalLead() int64 {
	if x != nil {
		return x.TotalLead
	}
	return 0
}

func (x *WebPlugin) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *WebPlugin) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *WebPlugin) GetLocales() []string {
	if x != nil {
		return x.Locales
	}
	return nil
}

func (x *WebPlugin) GetChatbox() *WidgetSetting {
	if x != nil {
		return x.Chatbox
	}
	return nil
}

func (x *WebPlugin) GetPopup() *Popup {
	if x != nil {
		return x.Popup
	}
	return nil
}

func (x *WebPlugin) GetContact() *ContactComponent {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *WebPlugin) GetNotification() *Notif {
	if x != nil {
		return x.Notification
	}
	return nil
}

func (x *WebPlugin) GetConversionNotification() *CampaignNotification {
	if x != nil {
		return x.ConversionNotification
	}
	return nil
}

func (x *WebPlugin) GetTemplateCategories() []string {
	if x != nil {
		return x.TemplateCategories
	}
	return nil
}

func (x *WebPlugin) GetTemplateTags() []string {
	if x != nil {
		return x.TemplateTags
	}
	return nil
}

func (x *WebPlugin) GetTemplateTitle() string {
	if x != nil {
		return x.TemplateTitle
	}
	return ""
}

func (x *WebPlugin) GetTemplateDescription() string {
	if x != nil {
		return x.TemplateDescription
	}
	return ""
}

func (x *WebPlugin) GetThumbnailUrl() string {
	if x != nil {
		return x.ThumbnailUrl
	}
	return ""
}

type TextComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Html           string      `protobuf:"bytes,2,opt,name=html,proto3" json:"html,omitempty"`                         // do not edit, generated from quill_delta
	I18NHtml       *I18NString `protobuf:"bytes,5,opt,name=i18n_html,json=i18nHtml,proto3" json:"i18n_html,omitempty"` // do not edit, generated from quill_delta
	QuillDelta     string      `protobuf:"bytes,3,opt,name=quill_delta,json=quillDelta,proto3" json:"quill_delta,omitempty"`
	I18NQuillDelta *I18NString `protobuf:"bytes,4,opt,name=i18n_quill_delta,json=i18nQuillDelta,proto3" json:"i18n_quill_delta,omitempty"`
}

func (x *TextComponent) Reset() {
	*x = TextComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextComponent) ProtoMessage() {}

func (x *TextComponent) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextComponent.ProtoReflect.Descriptor instead.
func (*TextComponent) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{169}
}

func (x *TextComponent) GetHtml() string {
	if x != nil {
		return x.Html
	}
	return ""
}

func (x *TextComponent) GetI18NHtml() *I18NString {
	if x != nil {
		return x.I18NHtml
	}
	return nil
}

func (x *TextComponent) GetQuillDelta() string {
	if x != nil {
		return x.QuillDelta
	}
	return ""
}

func (x *TextComponent) GetI18NQuillDelta() *I18NString {
	if x != nil {
		return x.I18NQuillDelta
	}
	return nil
}

type LineComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LineComponent) Reset() {
	*x = LineComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LineComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LineComponent) ProtoMessage() {}

func (x *LineComponent) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LineComponent.ProtoReflect.Descriptor instead.
func (*LineComponent) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{170}
}

type ImageComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *ImageComponent) Reset() {
	*x = ImageComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageComponent) ProtoMessage() {}

func (x *ImageComponent) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageComponent.ProtoReflect.Descriptor instead.
func (*ImageComponent) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{171}
}

func (x *ImageComponent) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type NotifProfiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx      *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Profiles []*NotifProfile `protobuf:"bytes,2,rep,name=profiles,proto3" json:"profiles,omitempty"`
}

func (x *NotifProfiles) Reset() {
	*x = NotifProfiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifProfiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifProfiles) ProtoMessage() {}

func (x *NotifProfiles) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifProfiles.ProtoReflect.Descriptor instead.
func (*NotifProfiles) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{172}
}

func (x *NotifProfiles) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *NotifProfiles) GetProfiles() []*NotifProfile {
	if x != nil {
		return x.Profiles
	}
	return nil
}

type NotifProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Type      string          `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"` // person, location
	AvatarUrl string          `protobuf:"bytes,3,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	Fullname  string          `protobuf:"bytes,4,opt,name=fullname,proto3" json:"fullname,omitempty"`
	Country   string          `protobuf:"bytes,5,opt,name=country,proto3" json:"country,omitempty"`
	Gender    string          `protobuf:"bytes,6,opt,name=gender,proto3" json:"gender,omitempty"`
	Age       int32           `protobuf:"varint,7,opt,name=age,proto3" json:"age,omitempty"`
	Tags      []string        `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	Email     string          `protobuf:"bytes,9,opt,name=email,proto3" json:"email,omitempty"`
	Phone     string          `protobuf:"bytes,10,opt,name=phone,proto3" json:"phone,omitempty"`
	Address   string          `protobuf:"bytes,11,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *NotifProfile) Reset() {
	*x = NotifProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifProfile) ProtoMessage() {}

func (x *NotifProfile) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifProfile.ProtoReflect.Descriptor instead.
func (*NotifProfile) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{173}
}

func (x *NotifProfile) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *NotifProfile) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NotifProfile) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *NotifProfile) GetFullname() string {
	if x != nil {
		return x.Fullname
	}
	return ""
}

func (x *NotifProfile) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *NotifProfile) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *NotifProfile) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *NotifProfile) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *NotifProfile) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *NotifProfile) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *NotifProfile) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type Notif struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileTags      []string `protobuf:"bytes,4,rep,name=profile_tags,json=profileTags,proto3" json:"profile_tags,omitempty"` // female, male office, location, random
	CustomAvatarUrls []string `protobuf:"bytes,5,rep,name=custom_avatar_urls,json=customAvatarUrls,proto3" json:"custom_avatar_urls,omitempty"`
	// server returns only for client
	Profiles               []*NotifProfile `protobuf:"bytes,6,rep,name=profiles,proto3" json:"profiles,omitempty"`
	TitleQuillDelta        string          `protobuf:"bytes,9,opt,name=title_quill_delta,json=titleQuillDelta,proto3" json:"title_quill_delta,omitempty"` // markdown
	I18NTitleQuillDelta    *I18NString     `protobuf:"bytes,22,opt,name=i18n_title_quill_delta,json=i18nTitleQuillDelta,proto3" json:"i18n_title_quill_delta,omitempty"`
	TitleStyle             *Style          `protobuf:"bytes,10,opt,name=title_style,json=titleStyle,proto3" json:"title_style,omitempty"`
	MessageQuillDeltas     []string        `protobuf:"bytes,11,rep,name=message_quill_deltas,json=messageQuillDeltas,proto3" json:"message_quill_deltas,omitempty"` // markdown
	I18NMessageQuillDeltas []*I18NString   `protobuf:"bytes,23,rep,name=i18n_message_quill_deltas,json=i18nMessageQuillDeltas,proto3" json:"i18n_message_quill_deltas,omitempty"`
	MessageStyle           *Style          `protobuf:"bytes,12,opt,name=message_style,json=messageStyle,proto3" json:"message_style,omitempty"`
	Url                    string          `protobuf:"bytes,13,opt,name=url,proto3" json:"url,omitempty"`
	NewTab                 bool            `protobuf:"varint,14,opt,name=new_tab,json=newTab,proto3" json:"new_tab,omitempty"`
	BackgroundUrl          string          `protobuf:"bytes,15,opt,name=background_url,json=backgroundUrl,proto3" json:"background_url,omitempty"`
	BackgroundStyle        *Style          `protobuf:"bytes,16,opt,name=background_style,json=backgroundStyle,proto3" json:"background_style,omitempty"`
	SubtextStyle           *Style          `protobuf:"bytes,17,opt,name=subtext_style,json=subtextStyle,proto3" json:"subtext_style,omitempty"`
	AvatarStyle            *Style          `protobuf:"bytes,18,opt,name=avatar_style,json=avatarStyle,proto3" json:"avatar_style,omitempty"`
	Position               string          `protobuf:"bytes,19,opt,name=position,proto3" json:"position,omitempty"`
	MobilePosition         string          `protobuf:"bytes,20,opt,name=mobile_position,json=mobilePosition,proto3" json:"mobile_position,omitempty"`
	IntervalSec            int64           `protobuf:"varint,21,opt,name=interval_sec,json=intervalSec,proto3" json:"interval_sec,omitempty"` // sec
}

func (x *Notif) Reset() {
	*x = Notif{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notif) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notif) ProtoMessage() {}

func (x *Notif) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notif.ProtoReflect.Descriptor instead.
func (*Notif) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{174}
}

func (x *Notif) GetProfileTags() []string {
	if x != nil {
		return x.ProfileTags
	}
	return nil
}

func (x *Notif) GetCustomAvatarUrls() []string {
	if x != nil {
		return x.CustomAvatarUrls
	}
	return nil
}

func (x *Notif) GetProfiles() []*NotifProfile {
	if x != nil {
		return x.Profiles
	}
	return nil
}

func (x *Notif) GetTitleQuillDelta() string {
	if x != nil {
		return x.TitleQuillDelta
	}
	return ""
}

func (x *Notif) GetI18NTitleQuillDelta() *I18NString {
	if x != nil {
		return x.I18NTitleQuillDelta
	}
	return nil
}

func (x *Notif) GetTitleStyle() *Style {
	if x != nil {
		return x.TitleStyle
	}
	return nil
}

func (x *Notif) GetMessageQuillDeltas() []string {
	if x != nil {
		return x.MessageQuillDeltas
	}
	return nil
}

func (x *Notif) GetI18NMessageQuillDeltas() []*I18NString {
	if x != nil {
		return x.I18NMessageQuillDeltas
	}
	return nil
}

func (x *Notif) GetMessageStyle() *Style {
	if x != nil {
		return x.MessageStyle
	}
	return nil
}

func (x *Notif) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Notif) GetNewTab() bool {
	if x != nil {
		return x.NewTab
	}
	return false
}

func (x *Notif) GetBackgroundUrl() string {
	if x != nil {
		return x.BackgroundUrl
	}
	return ""
}

func (x *Notif) GetBackgroundStyle() *Style {
	if x != nil {
		return x.BackgroundStyle
	}
	return nil
}

func (x *Notif) GetSubtextStyle() *Style {
	if x != nil {
		return x.SubtextStyle
	}
	return nil
}

func (x *Notif) GetAvatarStyle() *Style {
	if x != nil {
		return x.AvatarStyle
	}
	return nil
}

func (x *Notif) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Notif) GetMobilePosition() string {
	if x != nil {
		return x.MobilePosition
	}
	return ""
}

func (x *Notif) GetIntervalSec() int64 {
	if x != nil {
		return x.IntervalSec
	}
	return 0
}

type ContactComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Theme    string                            `protobuf:"bytes,3,opt,name=theme,proto3" json:"theme,omitempty"`   // flat, material, long-shadow, fluent, mac
	Layout   string                            `protobuf:"bytes,4,opt,name=layout,proto3" json:"layout,omitempty"` // standard, footer, mini
	Position string                            `protobuf:"bytes,5,opt,name=position,proto3" json:"position,omitempty"`
	Size     string                            `protobuf:"bytes,6,opt,name=size,proto3" json:"size,omitempty"` // sm, md, lg
	Buttons  []*ContactComponent_ContactButton `protobuf:"bytes,7,rep,name=buttons,proto3" json:"buttons,omitempty"`
}

func (x *ContactComponent) Reset() {
	*x = ContactComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactComponent) ProtoMessage() {}

func (x *ContactComponent) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactComponent.ProtoReflect.Descriptor instead.
func (*ContactComponent) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{175}
}

func (x *ContactComponent) GetTheme() string {
	if x != nil {
		return x.Theme
	}
	return ""
}

func (x *ContactComponent) GetLayout() string {
	if x != nil {
		return x.Layout
	}
	return ""
}

func (x *ContactComponent) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *ContactComponent) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *ContactComponent) GetButtons() []*ContactComponent_ContactButton {
	if x != nil {
		return x.Buttons
	}
	return nil
}

type FacebookContactComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FacebookUrl string `protobuf:"bytes,2,opt,name=facebook_url,json=facebookUrl,proto3" json:"facebook_url,omitempty"`
	PageId      string `protobuf:"bytes,4,opt,name=page_id,json=pageId,proto3" json:"page_id,omitempty"`
	Title       string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *FacebookContactComponent) Reset() {
	*x = FacebookContactComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FacebookContactComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FacebookContactComponent) ProtoMessage() {}

func (x *FacebookContactComponent) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FacebookContactComponent.ProtoReflect.Descriptor instead.
func (*FacebookContactComponent) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{176}
}

func (x *FacebookContactComponent) GetFacebookUrl() string {
	if x != nil {
		return x.FacebookUrl
	}
	return ""
}

func (x *FacebookContactComponent) GetPageId() string {
	if x != nil {
		return x.PageId
	}
	return ""
}

func (x *FacebookContactComponent) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type ZaloContactComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZaloOaId string `protobuf:"bytes,2,opt,name=zalo_oa_id,json=zaloOaId,proto3" json:"zalo_oa_id,omitempty"`
	Title    string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *ZaloContactComponent) Reset() {
	*x = ZaloContactComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZaloContactComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZaloContactComponent) ProtoMessage() {}

func (x *ZaloContactComponent) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZaloContactComponent.ProtoReflect.Descriptor instead.
func (*ZaloContactComponent) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{177}
}

func (x *ZaloContactComponent) GetZaloOaId() string {
	if x != nil {
		return x.ZaloOaId
	}
	return ""
}

func (x *ZaloContactComponent) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type CallContactComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hotlines     []*CallContactComponent_Hotline `protobuf:"bytes,4,rep,name=hotlines,proto3" json:"hotlines,omitempty"`
	RecallTitle  string                          `protobuf:"bytes,5,opt,name=recall_title,json=recallTitle,proto3" json:"recall_title,omitempty"`
	ThankMessage string                          `protobuf:"bytes,6,opt,name=thank_message,json=thankMessage,proto3" json:"thank_message,omitempty"`
	Background   string                          `protobuf:"bytes,7,opt,name=background,proto3" json:"background,omitempty"`
	Color        string                          `protobuf:"bytes,8,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *CallContactComponent) Reset() {
	*x = CallContactComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallContactComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallContactComponent) ProtoMessage() {}

func (x *CallContactComponent) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallContactComponent.ProtoReflect.Descriptor instead.
func (*CallContactComponent) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{178}
}

func (x *CallContactComponent) GetHotlines() []*CallContactComponent_Hotline {
	if x != nil {
		return x.Hotlines
	}
	return nil
}

func (x *CallContactComponent) GetRecallTitle() string {
	if x != nil {
		return x.RecallTitle
	}
	return ""
}

func (x *CallContactComponent) GetThankMessage() string {
	if x != nil {
		return x.ThankMessage
	}
	return ""
}

func (x *CallContactComponent) GetBackground() string {
	if x != nil {
		return x.Background
	}
	return ""
}

func (x *CallContactComponent) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

type ChatContactComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChatContactComponent) Reset() {
	*x = ChatContactComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatContactComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatContactComponent) ProtoMessage() {}

func (x *ChatContactComponent) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatContactComponent.ProtoReflect.Descriptor instead.
func (*ChatContactComponent) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{179}
}

type MapContactComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title     string                          `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Locations []*MapContactComponent_Location `protobuf:"bytes,4,rep,name=locations,proto3" json:"locations,omitempty"`
}

func (x *MapContactComponent) Reset() {
	*x = MapContactComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapContactComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapContactComponent) ProtoMessage() {}

func (x *MapContactComponent) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapContactComponent.ProtoReflect.Descriptor instead.
func (*MapContactComponent) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{180}
}

func (x *MapContactComponent) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MapContactComponent) GetLocations() []*MapContactComponent_Location {
	if x != nil {
		return x.Locations
	}
	return nil
}

type CountdownComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpireTimeType      string `protobuf:"bytes,3,opt,name=expire_time_type,json=expireTimeType,proto3" json:"expire_time_type,omitempty"` // fixed_time, visit_time, repeat_daily, repeat_weekly
	FixedTime           int64  `protobuf:"varint,4,opt,name=fixed_time,json=fixedTime,proto3" json:"fixed_time,omitempty"`
	VisitTime           int64  `protobuf:"varint,5,opt,name=visit_time,json=visitTime,proto3" json:"visit_time,omitempty"`       // minute (example 60)
	RepeatDaily         int64  `protobuf:"varint,6,opt,name=repeat_daily,json=repeatDaily,proto3" json:"repeat_daily,omitempty"` // unix min
	RepeatWeeklyMin     int64  `protobuf:"varint,7,opt,name=repeat_weekly_min,json=repeatWeeklyMin,proto3" json:"repeat_weekly_min,omitempty"`
	RepeatWeeklyWeekday string `protobuf:"bytes,8,opt,name=repeat_weekly_weekday,json=repeatWeeklyWeekday,proto3" json:"repeat_weekly_weekday,omitempty"` // monday, wednesday
	Skin                string `protobuf:"bytes,10,opt,name=skin,proto3" json:"skin,omitempty"`                                                           // flip, electric
	Size                string `protobuf:"bytes,11,opt,name=size,proto3" json:"size,omitempty"`                                                           // sm md lg
	Timezone            string `protobuf:"bytes,12,opt,name=timezone,proto3" json:"timezone,omitempty"`                                                   // +07:00 or empty => user timeone
}

func (x *CountdownComponent) Reset() {
	*x = CountdownComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountdownComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountdownComponent) ProtoMessage() {}

func (x *CountdownComponent) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountdownComponent.ProtoReflect.Descriptor instead.
func (*CountdownComponent) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{181}
}

func (x *CountdownComponent) GetExpireTimeType() string {
	if x != nil {
		return x.ExpireTimeType
	}
	return ""
}

func (x *CountdownComponent) GetFixedTime() int64 {
	if x != nil {
		return x.FixedTime
	}
	return 0
}

func (x *CountdownComponent) GetVisitTime() int64 {
	if x != nil {
		return x.VisitTime
	}
	return 0
}

func (x *CountdownComponent) GetRepeatDaily() int64 {
	if x != nil {
		return x.RepeatDaily
	}
	return 0
}

func (x *CountdownComponent) GetRepeatWeeklyMin() int64 {
	if x != nil {
		return x.RepeatWeeklyMin
	}
	return 0
}

func (x *CountdownComponent) GetRepeatWeeklyWeekday() string {
	if x != nil {
		return x.RepeatWeeklyWeekday
	}
	return ""
}

func (x *CountdownComponent) GetSkin() string {
	if x != nil {
		return x.Skin
	}
	return ""
}

func (x *CountdownComponent) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *CountdownComponent) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

type WebPluginFormField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key             string      `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	LabelQuillDelta string      `protobuf:"bytes,2,opt,name=label_quill_delta,json=labelQuillDelta,proto3" json:"label_quill_delta,omitempty"`
	Label           string      `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	I18NLabel       *I18NString `protobuf:"bytes,14,opt,name=i18n_label,json=i18nLabel,proto3" json:"i18n_label,omitempty"`
	IsRequired      bool        `protobuf:"varint,4,opt,name=is_required,json=isRequired,proto3" json:"is_required,omitempty"`
	// so front end dont have to download attribute definitions
	// text, phone, email, rating, multiple-choice, single-choice, dropdown, checkbox
	Type            string                                         `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Validate        string                                         `protobuf:"bytes,8,opt,name=validate,proto3" json:"validate,omitempty"` // phone, email, rating
	RandomizeOption bool                                           `protobuf:"varint,9,opt,name=randomize_option,json=randomizeOption,proto3" json:"randomize_option,omitempty"`
	Options         []*WebPluginFormField_WebPluginFormFieldOption `protobuf:"bytes,10,rep,name=options,proto3" json:"options,omitempty"`
	Placeholder     string                                         `protobuf:"bytes,11,opt,name=placeholder,proto3" json:"placeholder,omitempty"`
	I18NPlaceholder *I18NString                                    `protobuf:"bytes,15,opt,name=i18n_placeholder,json=i18nPlaceholder,proto3" json:"i18n_placeholder,omitempty"`
	Value           string                                         `protobuf:"bytes,13,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *WebPluginFormField) Reset() {
	*x = WebPluginFormField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebPluginFormField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebPluginFormField) ProtoMessage() {}

func (x *WebPluginFormField) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebPluginFormField.ProtoReflect.Descriptor instead.
func (*WebPluginFormField) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{182}
}

func (x *WebPluginFormField) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *WebPluginFormField) GetLabelQuillDelta() string {
	if x != nil {
		return x.LabelQuillDelta
	}
	return ""
}

func (x *WebPluginFormField) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *WebPluginFormField) GetI18NLabel() *I18NString {
	if x != nil {
		return x.I18NLabel
	}
	return nil
}

func (x *WebPluginFormField) GetIsRequired() bool {
	if x != nil {
		return x.IsRequired
	}
	return false
}

func (x *WebPluginFormField) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *WebPluginFormField) GetValidate() string {
	if x != nil {
		return x.Validate
	}
	return ""
}

func (x *WebPluginFormField) GetRandomizeOption() bool {
	if x != nil {
		return x.RandomizeOption
	}
	return false
}

func (x *WebPluginFormField) GetOptions() []*WebPluginFormField_WebPluginFormFieldOption {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *WebPluginFormField) GetPlaceholder() string {
	if x != nil {
		return x.Placeholder
	}
	return ""
}

func (x *WebPluginFormField) GetI18NPlaceholder() *I18NString {
	if x != nil {
		return x.I18NPlaceholder
	}
	return nil
}

func (x *WebPluginFormField) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type WebPluginForm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// general stype
	Fields []*WebPluginFormField `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *WebPluginForm) Reset() {
	*x = WebPluginForm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebPluginForm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebPluginForm) ProtoMessage() {}

func (x *WebPluginForm) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebPluginForm.ProtoReflect.Descriptor instead.
func (*WebPluginForm) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{183}
}

func (x *WebPluginForm) GetFields() []*WebPluginFormField {
	if x != nil {
		return x.Fields
	}
	return nil
}

type ButtonsComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrimaryEnabled    bool                 `protobuf:"varint,2,opt,name=primary_enabled,json=primaryEnabled,proto3" json:"primary_enabled,omitempty"`
	PrimaryActions    []*PopupButtonAction `protobuf:"bytes,3,rep,name=primary_actions,json=primaryActions,proto3" json:"primary_actions,omitempty"`
	PrimaryText       string               `protobuf:"bytes,4,opt,name=primary_text,json=primaryText,proto3" json:"primary_text,omitempty"`
	I18NPrimaryText   *I18NString          `protobuf:"bytes,5,opt,name=i18n_primary_text,json=i18nPrimaryText,proto3" json:"i18n_primary_text,omitempty"`
	SecondaryEnabled  bool                 `protobuf:"varint,8,opt,name=secondary_enabled,json=secondaryEnabled,proto3" json:"secondary_enabled,omitempty"`
	SecondaryActions  []*PopupButtonAction `protobuf:"bytes,9,rep,name=secondary_actions,json=secondaryActions,proto3" json:"secondary_actions,omitempty"`
	SecondaryText     string               `protobuf:"bytes,10,opt,name=secondary_text,json=secondaryText,proto3" json:"secondary_text,omitempty"`
	I18NSecondaryText *I18NString          `protobuf:"bytes,11,opt,name=i18n_secondary_text,json=i18nSecondaryText,proto3" json:"i18n_secondary_text,omitempty"`
}

func (x *ButtonsComponent) Reset() {
	*x = ButtonsComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ButtonsComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ButtonsComponent) ProtoMessage() {}

func (x *ButtonsComponent) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ButtonsComponent.ProtoReflect.Descriptor instead.
func (*ButtonsComponent) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{184}
}

func (x *ButtonsComponent) GetPrimaryEnabled() bool {
	if x != nil {
		return x.PrimaryEnabled
	}
	return false
}

func (x *ButtonsComponent) GetPrimaryActions() []*PopupButtonAction {
	if x != nil {
		return x.PrimaryActions
	}
	return nil
}

func (x *ButtonsComponent) GetPrimaryText() string {
	if x != nil {
		return x.PrimaryText
	}
	return ""
}

func (x *ButtonsComponent) GetI18NPrimaryText() *I18NString {
	if x != nil {
		return x.I18NPrimaryText
	}
	return nil
}

func (x *ButtonsComponent) GetSecondaryEnabled() bool {
	if x != nil {
		return x.SecondaryEnabled
	}
	return false
}

func (x *ButtonsComponent) GetSecondaryActions() []*PopupButtonAction {
	if x != nil {
		return x.SecondaryActions
	}
	return nil
}

func (x *ButtonsComponent) GetSecondaryText() string {
	if x != nil {
		return x.SecondaryText
	}
	return ""
}

func (x *ButtonsComponent) GetI18NSecondaryText() *I18NString {
	if x != nil {
		return x.I18NSecondaryText
	}
	return nil
}

type WebPluginComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           string                   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"` // text, image, countdown, form, buttons, line, social_buttons, follow_facebook
	Style          *Style                   `protobuf:"bytes,3,opt,name=style,proto3" json:"style,omitempty"`
	MobileStyle    *Style                   `protobuf:"bytes,4,opt,name=mobile_style,json=mobileStyle,proto3" json:"mobile_style,omitempty"`
	Text           *TextComponent           `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	Buttons        *ButtonsComponent        `protobuf:"bytes,6,opt,name=buttons,proto3" json:"buttons,omitempty"`
	Countdown      *CountdownComponent      `protobuf:"bytes,7,opt,name=countdown,proto3" json:"countdown,omitempty"`
	Form           *WebPluginForm           `protobuf:"bytes,8,opt,name=form,proto3" json:"form,omitempty"`
	Link           *LinkComponent           `protobuf:"bytes,9,opt,name=link,proto3" json:"link,omitempty"`
	Image          *ImageComponent          `protobuf:"bytes,10,opt,name=image,proto3" json:"image,omitempty"`
	Line           *LineComponent           `protobuf:"bytes,11,opt,name=line,proto3" json:"line,omitempty"`
	SocialButtons  *SocialButtonsComponent  `protobuf:"bytes,12,opt,name=social_buttons,json=socialButtons,proto3" json:"social_buttons,omitempty"`
	FollowFacebook *FollowFacebookComponent `protobuf:"bytes,13,opt,name=follow_facebook,json=followFacebook,proto3" json:"follow_facebook,omitempty"`
}

func (x *WebPluginComponent) Reset() {
	*x = WebPluginComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebPluginComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebPluginComponent) ProtoMessage() {}

func (x *WebPluginComponent) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebPluginComponent.ProtoReflect.Descriptor instead.
func (*WebPluginComponent) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{185}
}

func (x *WebPluginComponent) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *WebPluginComponent) GetStyle() *Style {
	if x != nil {
		return x.Style
	}
	return nil
}

func (x *WebPluginComponent) GetMobileStyle() *Style {
	if x != nil {
		return x.MobileStyle
	}
	return nil
}

func (x *WebPluginComponent) GetText() *TextComponent {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *WebPluginComponent) GetButtons() *ButtonsComponent {
	if x != nil {
		return x.Buttons
	}
	return nil
}

func (x *WebPluginComponent) GetCountdown() *CountdownComponent {
	if x != nil {
		return x.Countdown
	}
	return nil
}

func (x *WebPluginComponent) GetForm() *WebPluginForm {
	if x != nil {
		return x.Form
	}
	return nil
}

func (x *WebPluginComponent) GetLink() *LinkComponent {
	if x != nil {
		return x.Link
	}
	return nil
}

func (x *WebPluginComponent) GetImage() *ImageComponent {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *WebPluginComponent) GetLine() *LineComponent {
	if x != nil {
		return x.Line
	}
	return nil
}

func (x *WebPluginComponent) GetSocialButtons() *SocialButtonsComponent {
	if x != nil {
		return x.SocialButtons
	}
	return nil
}

func (x *WebPluginComponent) GetFollowFacebook() *FollowFacebookComponent {
	if x != nil {
		return x.FollowFacebook
	}
	return nil
}

type FollowFacebookComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *FollowFacebookComponent) Reset() {
	*x = FollowFacebookComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FollowFacebookComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FollowFacebookComponent) ProtoMessage() {}

func (x *FollowFacebookComponent) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FollowFacebookComponent.ProtoReflect.Descriptor instead.
func (*FollowFacebookComponent) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{186}
}

func (x *FollowFacebookComponent) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type SocialButtonsComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Facebook string `protobuf:"bytes,3,opt,name=facebook,proto3" json:"facebook,omitempty"`
	Zalo     string `protobuf:"bytes,4,opt,name=zalo,proto3" json:"zalo,omitempty"`
	Twitter  string `protobuf:"bytes,5,opt,name=twitter,proto3" json:"twitter,omitempty"`
}

func (x *SocialButtonsComponent) Reset() {
	*x = SocialButtonsComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SocialButtonsComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocialButtonsComponent) ProtoMessage() {}

func (x *SocialButtonsComponent) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocialButtonsComponent.ProtoReflect.Descriptor instead.
func (*SocialButtonsComponent) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{187}
}

func (x *SocialButtonsComponent) GetFacebook() string {
	if x != nil {
		return x.Facebook
	}
	return ""
}

func (x *SocialButtonsComponent) GetZalo() string {
	if x != nil {
		return x.Zalo
	}
	return ""
}

func (x *SocialButtonsComponent) GetTwitter() string {
	if x != nil {
		return x.Twitter
	}
	return ""
}

type Popup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position        string       `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"` // top, bottom       fullscreen, center, middle-left, middle-center, top-left, very-bottom, verry-top, halfway-top, halfway-bottom
	Type            string       `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`         // bar, modal
	Animation       bool         `protobuf:"varint,5,opt,name=animation,proto3" json:"animation,omitempty"`
	ShowCloseButton bool         `protobuf:"varint,6,opt,name=show_close_button,json=showCloseButton,proto3" json:"show_close_button,omitempty"`
	Overlay         bool         `protobuf:"varint,7,opt,name=overlay,proto3" json:"overlay,omitempty"`
	TextColor       string       `protobuf:"bytes,9,opt,name=text_color,json=textColor,proto3" json:"text_color,omitempty"` // description
	FontFamily      string       `protobuf:"bytes,10,opt,name=font_family,json=fontFamily,proto3" json:"font_family,omitempty"`
	FontSize        string       `protobuf:"bytes,11,opt,name=font_size,json=fontSize,proto3" json:"font_size,omitempty"`
	Background      string       `protobuf:"bytes,12,opt,name=background,proto3" json:"background,omitempty"`
	Spacer          string       `protobuf:"bytes,13,opt,name=spacer,proto3" json:"spacer,omitempty"`
	Theme           string       `protobuf:"bytes,17,opt,name=theme,proto3" json:"theme,omitempty"` // plain, light, paper, bold
	Pages           []*PopupPage `protobuf:"bytes,20,rep,name=pages,proto3" json:"pages,omitempty"`
}

func (x *Popup) Reset() {
	*x = Popup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Popup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Popup) ProtoMessage() {}

func (x *Popup) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Popup.ProtoReflect.Descriptor instead.
func (*Popup) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{188}
}

func (x *Popup) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Popup) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Popup) GetAnimation() bool {
	if x != nil {
		return x.Animation
	}
	return false
}

func (x *Popup) GetShowCloseButton() bool {
	if x != nil {
		return x.ShowCloseButton
	}
	return false
}

func (x *Popup) GetOverlay() bool {
	if x != nil {
		return x.Overlay
	}
	return false
}

func (x *Popup) GetTextColor() string {
	if x != nil {
		return x.TextColor
	}
	return ""
}

func (x *Popup) GetFontFamily() string {
	if x != nil {
		return x.FontFamily
	}
	return ""
}

func (x *Popup) GetFontSize() string {
	if x != nil {
		return x.FontSize
	}
	return ""
}

func (x *Popup) GetBackground() string {
	if x != nil {
		return x.Background
	}
	return ""
}

func (x *Popup) GetSpacer() string {
	if x != nil {
		return x.Spacer
	}
	return ""
}

func (x *Popup) GetTheme() string {
	if x != nil {
		return x.Theme
	}
	return ""
}

func (x *Popup) GetPages() []*PopupPage {
	if x != nil {
		return x.Pages
	}
	return nil
}

type LinkComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuillDelta string `protobuf:"bytes,2,opt,name=quill_delta,json=quillDelta,proto3" json:"quill_delta,omitempty"`
	Text       string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	Url        string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *LinkComponent) Reset() {
	*x = LinkComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkComponent) ProtoMessage() {}

func (x *LinkComponent) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkComponent.ProtoReflect.Descriptor instead.
func (*LinkComponent) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{189}
}

func (x *LinkComponent) GetQuillDelta() string {
	if x != nil {
		return x.QuillDelta
	}
	return ""
}

func (x *LinkComponent) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *LinkComponent) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type Style struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hover              *Style `protobuf:"bytes,1,opt,name=hover,proto3" json:"hover,omitempty"`
	BorderRadius       string `protobuf:"bytes,2,opt,name=border_radius,json=borderRadius,proto3" json:"border_radius,omitempty"`
	FontFamily         string `protobuf:"bytes,3,opt,name=font_family,json=fontFamily,proto3" json:"font_family,omitempty"` // default font family
	Color              string `protobuf:"bytes,4,opt,name=color,proto3" json:"color,omitempty"`
	Background         string `protobuf:"bytes,5,opt,name=background,proto3" json:"background,omitempty"` // color or gradient
	TextAlign          string `protobuf:"bytes,6,opt,name=text_align,json=textAlign,proto3" json:"text_align,omitempty"`
	TextTransform      string `protobuf:"bytes,7,opt,name=text_transform,json=textTransform,proto3" json:"text_transform,omitempty"`
	FontStyle          string `protobuf:"bytes,8,opt,name=font_style,json=fontStyle,proto3" json:"font_style,omitempty"`
	FontWeight         string `protobuf:"bytes,9,opt,name=font_weight,json=fontWeight,proto3" json:"font_weight,omitempty"`
	Width              string `protobuf:"bytes,10,opt,name=width,proto3" json:"width,omitempty"`
	MaxWidth           string `protobuf:"bytes,11,opt,name=max_width,json=maxWidth,proto3" json:"max_width,omitempty"`
	Height             string `protobuf:"bytes,12,opt,name=height,proto3" json:"height,omitempty"`
	MaxHeight          string `protobuf:"bytes,13,opt,name=max_height,json=maxHeight,proto3" json:"max_height,omitempty"`
	PaddingLeft        string `protobuf:"bytes,14,opt,name=padding_left,json=paddingLeft,proto3" json:"padding_left,omitempty"`
	PaddingRight       string `protobuf:"bytes,15,opt,name=padding_right,json=paddingRight,proto3" json:"padding_right,omitempty"`
	PaddingTop         string `protobuf:"bytes,16,opt,name=padding_top,json=paddingTop,proto3" json:"padding_top,omitempty"`
	PaddingBottom      string `protobuf:"bytes,17,opt,name=padding_bottom,json=paddingBottom,proto3" json:"padding_bottom,omitempty"`
	MarginLeft         string `protobuf:"bytes,18,opt,name=margin_left,json=marginLeft,proto3" json:"margin_left,omitempty"`
	MarginRight        string `protobuf:"bytes,19,opt,name=margin_right,json=marginRight,proto3" json:"margin_right,omitempty"`
	MarginTop          string `protobuf:"bytes,20,opt,name=margin_top,json=marginTop,proto3" json:"margin_top,omitempty"`
	MarginBottom       string `protobuf:"bytes,21,opt,name=margin_bottom,json=marginBottom,proto3" json:"margin_bottom,omitempty"`
	Position           string `protobuf:"bytes,25,opt,name=position,proto3" json:"position,omitempty"`                    //absolute, relative
	ObjectFit          string `protobuf:"bytes,26,opt,name=object_fit,json=objectFit,proto3" json:"object_fit,omitempty"` // cover, contain
	LineHeight         string `protobuf:"bytes,27,opt,name=line_height,json=lineHeight,proto3" json:"line_height,omitempty"`
	BackgroundPosition string `protobuf:"bytes,28,opt,name=background_position,json=backgroundPosition,proto3" json:"background_position,omitempty"`
	Left               string `protobuf:"bytes,30,opt,name=left,proto3" json:"left,omitempty"`
	Right              string `protobuf:"bytes,31,opt,name=right,proto3" json:"right,omitempty"`
	Top                string `protobuf:"bytes,32,opt,name=top,proto3" json:"top,omitempty"`
	Bottom             string `protobuf:"bytes,33,opt,name=bottom,proto3" json:"bottom,omitempty"`
	Opacity            string `protobuf:"bytes,34,opt,name=opacity,proto3" json:"opacity,omitempty"`
	Rotate             string `protobuf:"bytes,35,opt,name=rotate,proto3" json:"rotate,omitempty"`
	// filter
	Blur           string `protobuf:"bytes,46,opt,name=blur,proto3" json:"blur,omitempty"`           //px
	Grayscale      string `protobuf:"bytes,37,opt,name=grayscale,proto3" json:"grayscale,omitempty"` // %
	Overlay        string `protobuf:"bytes,38,opt,name=overlay,proto3" json:"overlay,omitempty"`     // background
	OverlayOpacity string `protobuf:"bytes,39,opt,name=overlay_opacity,json=overlayOpacity,proto3" json:"overlay_opacity,omitempty"`
	Flex           string `protobuf:"bytes,40,opt,name=flex,proto3" json:"flex,omitempty"`
	FlexDirection  string `protobuf:"bytes,41,opt,name=flex_direction,json=flexDirection,proto3" json:"flex_direction,omitempty"`
	FlexShrink     string `protobuf:"bytes,42,opt,name=flex_shrink,json=flexShrink,proto3" json:"flex_shrink,omitempty"`
	AlignItems     string `protobuf:"bytes,43,opt,name=align_items,json=alignItems,proto3" json:"align_items,omitempty"`
	JustifyContent string `protobuf:"bytes,44,opt,name=justify_content,json=justifyContent,proto3" json:"justify_content,omitempty"`
	Transform      string `protobuf:"bytes,48,opt,name=transform,proto3" json:"transform,omitempty"`
	FontSize       string `protobuf:"bytes,49,opt,name=font_size,json=fontSize,proto3" json:"font_size,omitempty"`
	ZIndex         string `protobuf:"bytes,60,opt,name=z_index,json=zIndex,proto3" json:"z_index,omitempty"`
	BorderBottom   string `protobuf:"bytes,61,opt,name=border_bottom,json=borderBottom,proto3" json:"border_bottom,omitempty"`
	BorderLeft     string `protobuf:"bytes,62,opt,name=border_left,json=borderLeft,proto3" json:"border_left,omitempty"`
	BorderTop      string `protobuf:"bytes,63,opt,name=border_top,json=borderTop,proto3" json:"border_top,omitempty"`
	BorderRight    string `protobuf:"bytes,64,opt,name=border_right,json=borderRight,proto3" json:"border_right,omitempty"`
	Border         string `protobuf:"bytes,65,opt,name=border,proto3" json:"border,omitempty"`
	BoxShadow      string `protobuf:"bytes,66,opt,name=box_shadow,json=boxShadow,proto3" json:"box_shadow,omitempty"`
	Overflow       string `protobuf:"bytes,67,opt,name=overflow,proto3" json:"overflow,omitempty"`
	OverflowX      string `protobuf:"bytes,68,opt,name=overflow_x,json=overflowX,proto3" json:"overflow_x,omitempty"`
	OverflowY      string `protobuf:"bytes,69,opt,name=overflow_y,json=overflowY,proto3" json:"overflow_y,omitempty"`
	WhiteSpace     string `protobuf:"bytes,70,opt,name=white_space,json=whiteSpace,proto3" json:"white_space,omitempty"`
	UserSelect     string `protobuf:"bytes,71,opt,name=user_select,json=userSelect,proto3" json:"user_select,omitempty"`
	PointerEvents  string `protobuf:"bytes,72,opt,name=pointer_events,json=pointerEvents,proto3" json:"pointer_events,omitempty"`
}

func (x *Style) Reset() {
	*x = Style{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Style) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Style) ProtoMessage() {}

func (x *Style) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Style.ProtoReflect.Descriptor instead.
func (*Style) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{190}
}

func (x *Style) GetHover() *Style {
	if x != nil {
		return x.Hover
	}
	return nil
}

func (x *Style) GetBorderRadius() string {
	if x != nil {
		return x.BorderRadius
	}
	return ""
}

func (x *Style) GetFontFamily() string {
	if x != nil {
		return x.FontFamily
	}
	return ""
}

func (x *Style) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *Style) GetBackground() string {
	if x != nil {
		return x.Background
	}
	return ""
}

func (x *Style) GetTextAlign() string {
	if x != nil {
		return x.TextAlign
	}
	return ""
}

func (x *Style) GetTextTransform() string {
	if x != nil {
		return x.TextTransform
	}
	return ""
}

func (x *Style) GetFontStyle() string {
	if x != nil {
		return x.FontStyle
	}
	return ""
}

func (x *Style) GetFontWeight() string {
	if x != nil {
		return x.FontWeight
	}
	return ""
}

func (x *Style) GetWidth() string {
	if x != nil {
		return x.Width
	}
	return ""
}

func (x *Style) GetMaxWidth() string {
	if x != nil {
		return x.MaxWidth
	}
	return ""
}

func (x *Style) GetHeight() string {
	if x != nil {
		return x.Height
	}
	return ""
}

func (x *Style) GetMaxHeight() string {
	if x != nil {
		return x.MaxHeight
	}
	return ""
}

func (x *Style) GetPaddingLeft() string {
	if x != nil {
		return x.PaddingLeft
	}
	return ""
}

func (x *Style) GetPaddingRight() string {
	if x != nil {
		return x.PaddingRight
	}
	return ""
}

func (x *Style) GetPaddingTop() string {
	if x != nil {
		return x.PaddingTop
	}
	return ""
}

func (x *Style) GetPaddingBottom() string {
	if x != nil {
		return x.PaddingBottom
	}
	return ""
}

func (x *Style) GetMarginLeft() string {
	if x != nil {
		return x.MarginLeft
	}
	return ""
}

func (x *Style) GetMarginRight() string {
	if x != nil {
		return x.MarginRight
	}
	return ""
}

func (x *Style) GetMarginTop() string {
	if x != nil {
		return x.MarginTop
	}
	return ""
}

func (x *Style) GetMarginBottom() string {
	if x != nil {
		return x.MarginBottom
	}
	return ""
}

func (x *Style) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Style) GetObjectFit() string {
	if x != nil {
		return x.ObjectFit
	}
	return ""
}

func (x *Style) GetLineHeight() string {
	if x != nil {
		return x.LineHeight
	}
	return ""
}

func (x *Style) GetBackgroundPosition() string {
	if x != nil {
		return x.BackgroundPosition
	}
	return ""
}

func (x *Style) GetLeft() string {
	if x != nil {
		return x.Left
	}
	return ""
}

func (x *Style) GetRight() string {
	if x != nil {
		return x.Right
	}
	return ""
}

func (x *Style) GetTop() string {
	if x != nil {
		return x.Top
	}
	return ""
}

func (x *Style) GetBottom() string {
	if x != nil {
		return x.Bottom
	}
	return ""
}

func (x *Style) GetOpacity() string {
	if x != nil {
		return x.Opacity
	}
	return ""
}

func (x *Style) GetRotate() string {
	if x != nil {
		return x.Rotate
	}
	return ""
}

func (x *Style) GetBlur() string {
	if x != nil {
		return x.Blur
	}
	return ""
}

func (x *Style) GetGrayscale() string {
	if x != nil {
		return x.Grayscale
	}
	return ""
}

func (x *Style) GetOverlay() string {
	if x != nil {
		return x.Overlay
	}
	return ""
}

func (x *Style) GetOverlayOpacity() string {
	if x != nil {
		return x.OverlayOpacity
	}
	return ""
}

func (x *Style) GetFlex() string {
	if x != nil {
		return x.Flex
	}
	return ""
}

func (x *Style) GetFlexDirection() string {
	if x != nil {
		return x.FlexDirection
	}
	return ""
}

func (x *Style) GetFlexShrink() string {
	if x != nil {
		return x.FlexShrink
	}
	return ""
}

func (x *Style) GetAlignItems() string {
	if x != nil {
		return x.AlignItems
	}
	return ""
}

func (x *Style) GetJustifyContent() string {
	if x != nil {
		return x.JustifyContent
	}
	return ""
}

func (x *Style) GetTransform() string {
	if x != nil {
		return x.Transform
	}
	return ""
}

func (x *Style) GetFontSize() string {
	if x != nil {
		return x.FontSize
	}
	return ""
}

func (x *Style) GetZIndex() string {
	if x != nil {
		return x.ZIndex
	}
	return ""
}

func (x *Style) GetBorderBottom() string {
	if x != nil {
		return x.BorderBottom
	}
	return ""
}

func (x *Style) GetBorderLeft() string {
	if x != nil {
		return x.BorderLeft
	}
	return ""
}

func (x *Style) GetBorderTop() string {
	if x != nil {
		return x.BorderTop
	}
	return ""
}

func (x *Style) GetBorderRight() string {
	if x != nil {
		return x.BorderRight
	}
	return ""
}

func (x *Style) GetBorder() string {
	if x != nil {
		return x.Border
	}
	return ""
}

func (x *Style) GetBoxShadow() string {
	if x != nil {
		return x.BoxShadow
	}
	return ""
}

func (x *Style) GetOverflow() string {
	if x != nil {
		return x.Overflow
	}
	return ""
}

func (x *Style) GetOverflowX() string {
	if x != nil {
		return x.OverflowX
	}
	return ""
}

func (x *Style) GetOverflowY() string {
	if x != nil {
		return x.OverflowY
	}
	return ""
}

func (x *Style) GetWhiteSpace() string {
	if x != nil {
		return x.WhiteSpace
	}
	return ""
}

func (x *Style) GetUserSelect() string {
	if x != nil {
		return x.UserSelect
	}
	return ""
}

func (x *Style) GetPointerEvents() string {
	if x != nil {
		return x.PointerEvents
	}
	return ""
}

type PopupPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Components      []*WebPluginComponent `protobuf:"bytes,10,rep,name=components,proto3" json:"components,omitempty"`
	Style           *Style                `protobuf:"bytes,11,opt,name=style,proto3" json:"style,omitempty"` // body
	MobileStyle     *Style                `protobuf:"bytes,12,opt,name=mobile_style,json=mobileStyle,proto3" json:"mobile_style,omitempty"`
	BackgroundClick *ButtonComponent      `protobuf:"bytes,9,opt,name=background_click,json=backgroundClick,proto3" json:"background_click,omitempty"`
	Layout          string                `protobuf:"bytes,3,opt,name=layout,proto3" json:"layout,omitempty"` // row, column
	MobileLayout    string                `protobuf:"bytes,4,opt,name=mobile_layout,json=mobileLayout,proto3" json:"mobile_layout,omitempty"`
}

func (x *PopupPage) Reset() {
	*x = PopupPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PopupPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PopupPage) ProtoMessage() {}

func (x *PopupPage) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PopupPage.ProtoReflect.Descriptor instead.
func (*PopupPage) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{191}
}

func (x *PopupPage) GetComponents() []*WebPluginComponent {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *PopupPage) GetStyle() *Style {
	if x != nil {
		return x.Style
	}
	return nil
}

func (x *PopupPage) GetMobileStyle() *Style {
	if x != nil {
		return x.MobileStyle
	}
	return nil
}

func (x *PopupPage) GetBackgroundClick() *ButtonComponent {
	if x != nil {
		return x.BackgroundClick
	}
	return nil
}

func (x *PopupPage) GetLayout() string {
	if x != nil {
		return x.Layout
	}
	return ""
}

func (x *PopupPage) GetMobileLayout() string {
	if x != nil {
		return x.MobileLayout
	}
	return ""
}

// impression = view
type Impression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx             *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId       string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	CampaignId      string          `protobuf:"bytes,3,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`
	Id              string          `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	UserId          string          `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Url             string          `protobuf:"bytes,7,opt,name=url,proto3" json:"url,omitempty"`
	Device          *common.Device  `protobuf:"bytes,8,opt,name=device,proto3" json:"device,omitempty"`
	Created         int64           `protobuf:"varint,9,opt,name=created,proto3" json:"created,omitempty"`
	ByTrigger       string          `protobuf:"bytes,10,opt,name=by_trigger,json=byTrigger,proto3" json:"by_trigger,omitempty"`
	ImpressionToken string          `protobuf:"bytes,11,opt,name=impression_token,json=impressionToken,proto3" json:"impression_token,omitempty"` // for request submit only
	WebPluginId     string          `protobuf:"bytes,12,opt,name=web_plugin_id,json=webPluginId,proto3" json:"web_plugin_id,omitempty"`
	SessionId       string          `protobuf:"bytes,13,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *Impression) Reset() {
	*x = Impression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Impression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Impression) ProtoMessage() {}

func (x *Impression) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Impression.ProtoReflect.Descriptor instead.
func (*Impression) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{192}
}

func (x *Impression) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Impression) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Impression) GetCampaignId() string {
	if x != nil {
		return x.CampaignId
	}
	return ""
}

func (x *Impression) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Impression) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Impression) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Impression) GetDevice() *common.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *Impression) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Impression) GetByTrigger() string {
	if x != nil {
		return x.ByTrigger
	}
	return ""
}

func (x *Impression) GetImpressionToken() string {
	if x != nil {
		return x.ImpressionToken
	}
	return ""
}

func (x *Impression) GetWebPluginId() string {
	if x != nil {
		return x.WebPluginId
	}
	return ""
}

func (x *Impression) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type ConversionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx         *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId   string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	CampaignId  string          `protobuf:"bytes,3,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`
	Anchor      string          `protobuf:"bytes,4,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Limit       int32           `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	FromHour    int32           `protobuf:"varint,7,opt,name=from_hour,json=fromHour,proto3" json:"from_hour,omitempty"`
	ToHour      int32           `protobuf:"varint,8,opt,name=to_hour,json=toHour,proto3" json:"to_hour,omitempty"`
	WebPluginId string          `protobuf:"bytes,9,opt,name=web_plugin_id,json=webPluginId,proto3" json:"web_plugin_id,omitempty"`
}

func (x *ConversionRequest) Reset() {
	*x = ConversionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversionRequest) ProtoMessage() {}

func (x *ConversionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversionRequest.ProtoReflect.Descriptor instead.
func (*ConversionRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{193}
}

func (x *ConversionRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ConversionRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ConversionRequest) GetCampaignId() string {
	if x != nil {
		return x.CampaignId
	}
	return ""
}

func (x *ConversionRequest) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *ConversionRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ConversionRequest) GetFromHour() int32 {
	if x != nil {
		return x.FromHour
	}
	return 0
}

func (x *ConversionRequest) GetToHour() int32 {
	if x != nil {
		return x.ToHour
	}
	return 0
}

func (x *ConversionRequest) GetWebPluginId() string {
	if x != nil {
		return x.WebPluginId
	}
	return ""
}

type Conversions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx         *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Conversions []*Conversion   `protobuf:"bytes,2,rep,name=conversions,proto3" json:"conversions,omitempty"`
	Anchor      string          `protobuf:"bytes,4,opt,name=anchor,proto3" json:"anchor,omitempty"`
}

func (x *Conversions) Reset() {
	*x = Conversions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conversions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conversions) ProtoMessage() {}

func (x *Conversions) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conversions.ProtoReflect.Descriptor instead.
func (*Conversions) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{194}
}

func (x *Conversions) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Conversions) GetConversions() []*Conversion {
	if x != nil {
		return x.Conversions
	}
	return nil
}

func (x *Conversions) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

type Conversion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx             *common.Context     `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId       string              `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	CampaignId      string              `protobuf:"bytes,3,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`
	ImpressionId    string              `protobuf:"bytes,4,opt,name=impression_id,json=impressionId,proto3" json:"impression_id,omitempty"`
	UserId          string              `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Url             string              `protobuf:"bytes,7,opt,name=url,proto3" json:"url,omitempty"`
	Device          *common.Device      `protobuf:"bytes,8,opt,name=device,proto3" json:"device,omitempty"`
	ByTrigger       string              `protobuf:"bytes,10,opt,name=by_trigger,json=byTrigger,proto3" json:"by_trigger,omitempty"`
	Submission      *CampaignSubmission `protobuf:"bytes,12,opt,name=submission,proto3" json:"submission,omitempty"`
	Created         int64               `protobuf:"varint,13,opt,name=created,proto3" json:"created,omitempty"`
	Week            int64               `protobuf:"varint,14,opt,name=week,proto3" json:"week,omitempty"`                                             // internal use only
	ImpressionToken string              `protobuf:"bytes,15,opt,name=impression_token,json=impressionToken,proto3" json:"impression_token,omitempty"` // for request submit only
	WebPluginId     string              `protobuf:"bytes,16,opt,name=web_plugin_id,json=webPluginId,proto3" json:"web_plugin_id,omitempty"`
	User            *User               `protobuf:"bytes,17,opt,name=user,proto3" json:"user,omitempty"` // for webhook only
	SessionId       string              `protobuf:"bytes,18,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *Conversion) Reset() {
	*x = Conversion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conversion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conversion) ProtoMessage() {}

func (x *Conversion) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conversion.ProtoReflect.Descriptor instead.
func (*Conversion) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{195}
}

func (x *Conversion) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Conversion) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Conversion) GetCampaignId() string {
	if x != nil {
		return x.CampaignId
	}
	return ""
}

func (x *Conversion) GetImpressionId() string {
	if x != nil {
		return x.ImpressionId
	}
	return ""
}

func (x *Conversion) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Conversion) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Conversion) GetDevice() *common.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *Conversion) GetByTrigger() string {
	if x != nil {
		return x.ByTrigger
	}
	return ""
}

func (x *Conversion) GetSubmission() *CampaignSubmission {
	if x != nil {
		return x.Submission
	}
	return nil
}

func (x *Conversion) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Conversion) GetWeek() int64 {
	if x != nil {
		return x.Week
	}
	return 0
}

func (x *Conversion) GetImpressionToken() string {
	if x != nil {
		return x.ImpressionToken
	}
	return ""
}

func (x *Conversion) GetWebPluginId() string {
	if x != nil {
		return x.WebPluginId
	}
	return ""
}

func (x *Conversion) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Conversion) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type UserCampaignStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx         *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId   string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	CampaignId  string          `protobuf:"bytes,3,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`
	UserId      string          `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Status      string          `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"` // goal_reached || failed || nothing
	Created     int64           `protobuf:"varint,10,opt,name=created,proto3" json:"created,omitempty"`
	WebPluginId string          `protobuf:"bytes,11,opt,name=web_plugin_id,json=webPluginId,proto3" json:"web_plugin_id,omitempty"`
}

func (x *UserCampaignStatus) Reset() {
	*x = UserCampaignStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCampaignStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCampaignStatus) ProtoMessage() {}

func (x *UserCampaignStatus) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCampaignStatus.ProtoReflect.Descriptor instead.
func (*UserCampaignStatus) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{196}
}

func (x *UserCampaignStatus) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *UserCampaignStatus) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *UserCampaignStatus) GetCampaignId() string {
	if x != nil {
		return x.CampaignId
	}
	return ""
}

func (x *UserCampaignStatus) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserCampaignStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UserCampaignStatus) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *UserCampaignStatus) GetWebPluginId() string {
	if x != nil {
		return x.WebPluginId
	}
	return ""
}

type CampaignSubmission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx        *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId  string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	CampaignId string          `protobuf:"bytes,3,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`
	UserId     string          `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Fields     []*WidgetField  `protobuf:"bytes,6,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *CampaignSubmission) Reset() {
	*x = CampaignSubmission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CampaignSubmission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CampaignSubmission) ProtoMessage() {}

func (x *CampaignSubmission) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CampaignSubmission.ProtoReflect.Descriptor instead.
func (*CampaignSubmission) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{197}
}

func (x *CampaignSubmission) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *CampaignSubmission) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CampaignSubmission) GetCampaignId() string {
	if x != nil {
		return x.CampaignId
	}
	return ""
}

func (x *CampaignSubmission) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CampaignSubmission) GetFields() []*WidgetField {
	if x != nil {
		return x.Fields
	}
	return nil
}

type PopupButtonAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`                // open_url, close, open_widget, submit, next, goal_reach
	Url    string `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`                      // url to open
	NewTab bool   `protobuf:"varint,6,opt,name=new_tab,json=newTab,proto3" json:"new_tab,omitempty"` // open new url on new tab
}

func (x *PopupButtonAction) Reset() {
	*x = PopupButtonAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PopupButtonAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PopupButtonAction) ProtoMessage() {}

func (x *PopupButtonAction) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PopupButtonAction.ProtoReflect.Descriptor instead.
func (*PopupButtonAction) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{198}
}

func (x *PopupButtonAction) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *PopupButtonAction) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *PopupButtonAction) GetNewTab() bool {
	if x != nil {
		return x.NewTab
	}
	return false
}

type ButtonComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled       bool                 `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Actions       []*PopupButtonAction `protobuf:"bytes,3,rep,name=actions,proto3" json:"actions,omitempty"`
	Text          string               `protobuf:"bytes,6,opt,name=text,proto3" json:"text,omitempty"`
	Color         string               `protobuf:"bytes,10,opt,name=color,proto3" json:"color,omitempty"`
	Background    string               `protobuf:"bytes,11,opt,name=background,proto3" json:"background,omitempty"`
	FontFamily    string               `protobuf:"bytes,30,opt,name=font_family,json=fontFamily,proto3" json:"font_family,omitempty"`
	FontSize      string               `protobuf:"bytes,31,opt,name=font_size,json=fontSize,proto3" json:"font_size,omitempty"`
	FontStyle     string               `protobuf:"bytes,32,opt,name=font_style,json=fontStyle,proto3" json:"font_style,omitempty"`
	FontWeight    string               `protobuf:"bytes,33,opt,name=font_weight,json=fontWeight,proto3" json:"font_weight,omitempty"`
	TextTransform string               `protobuf:"bytes,34,opt,name=text_transform,json=textTransform,proto3" json:"text_transform,omitempty"`
	Type          string               `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"` // primary, secondary
}

func (x *ButtonComponent) Reset() {
	*x = ButtonComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ButtonComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ButtonComponent) ProtoMessage() {}

func (x *ButtonComponent) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ButtonComponent.ProtoReflect.Descriptor instead.
func (*ButtonComponent) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{199}
}

func (x *ButtonComponent) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ButtonComponent) GetActions() []*PopupButtonAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *ButtonComponent) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ButtonComponent) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *ButtonComponent) GetBackground() string {
	if x != nil {
		return x.Background
	}
	return ""
}

func (x *ButtonComponent) GetFontFamily() string {
	if x != nil {
		return x.FontFamily
	}
	return ""
}

func (x *ButtonComponent) GetFontSize() string {
	if x != nil {
		return x.FontSize
	}
	return ""
}

func (x *ButtonComponent) GetFontStyle() string {
	if x != nil {
		return x.FontStyle
	}
	return ""
}

func (x *ButtonComponent) GetFontWeight() string {
	if x != nil {
		return x.FontWeight
	}
	return ""
}

func (x *ButtonComponent) GetTextTransform() string {
	if x != nil {
		return x.TextTransform
	}
	return ""
}

func (x *ButtonComponent) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type ImpressionCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId  string `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	CampaignId string `protobuf:"bytes,4,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`
	Count      int32  `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`
	Hour       int32  `protobuf:"varint,6,opt,name=hour,proto3" json:"hour,omitempty"`
	Month      int32  `protobuf:"varint,7,opt,name=month,proto3" json:"month,omitempty"`
}

func (x *ImpressionCount) Reset() {
	*x = ImpressionCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImpressionCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImpressionCount) ProtoMessage() {}

func (x *ImpressionCount) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImpressionCount.ProtoReflect.Descriptor instead.
func (*ImpressionCount) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{200}
}

func (x *ImpressionCount) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ImpressionCount) GetCampaignId() string {
	if x != nil {
		return x.CampaignId
	}
	return ""
}

func (x *ImpressionCount) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ImpressionCount) GetHour() int32 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *ImpressionCount) GetMonth() int32 {
	if x != nil {
		return x.Month
	}
	return 0
}

type ConversionCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId  string `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	CampaignId string `protobuf:"bytes,4,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`
	Count      int32  `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`
	Hour       int32  `protobuf:"varint,6,opt,name=hour,proto3" json:"hour,omitempty"`
	Month      int32  `protobuf:"varint,7,opt,name=month,proto3" json:"month,omitempty"`
}

func (x *ConversionCount) Reset() {
	*x = ConversionCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversionCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversionCount) ProtoMessage() {}

func (x *ConversionCount) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversionCount.ProtoReflect.Descriptor instead.
func (*ConversionCount) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{201}
}

func (x *ConversionCount) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ConversionCount) GetCampaignId() string {
	if x != nil {
		return x.CampaignId
	}
	return ""
}

func (x *ConversionCount) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ConversionCount) GetHour() int32 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *ConversionCount) GetMonth() int32 {
	if x != nil {
		return x.Month
	}
	return 0
}

type ReportCampaignRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx        *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId  string          `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	CampaignId string          `protobuf:"bytes,4,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`
	FromHour   int32           `protobuf:"varint,5,opt,name=from_hour,json=fromHour,proto3" json:"from_hour,omitempty"`
	ToHour     int32           `protobuf:"varint,6,opt,name=to_hour,json=toHour,proto3" json:"to_hour,omitempty"`
	Range      string          `protobuf:"bytes,7,opt,name=range,proto3" json:"range,omitempty"`
	Tz         int32           `protobuf:"varint,8,opt,name=tz,proto3" json:"tz,omitempty"`
}

func (x *ReportCampaignRequest) Reset() {
	*x = ReportCampaignRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportCampaignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportCampaignRequest) ProtoMessage() {}

func (x *ReportCampaignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportCampaignRequest.ProtoReflect.Descriptor instead.
func (*ReportCampaignRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{202}
}

func (x *ReportCampaignRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ReportCampaignRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ReportCampaignRequest) GetCampaignId() string {
	if x != nil {
		return x.CampaignId
	}
	return ""
}

func (x *ReportCampaignRequest) GetFromHour() int32 {
	if x != nil {
		return x.FromHour
	}
	return 0
}

func (x *ReportCampaignRequest) GetToHour() int32 {
	if x != nil {
		return x.ToHour
	}
	return 0
}

func (x *ReportCampaignRequest) GetRange() string {
	if x != nil {
		return x.Range
	}
	return ""
}

func (x *ReportCampaignRequest) GetTz() int32 {
	if x != nil {
		return x.Tz
	}
	return 0
}

type ReportCampaignResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx              *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	ImpressionsCount []int32         `protobuf:"varint,3,rep,packed,name=impressions_count,json=impressionsCount,proto3" json:"impressions_count,omitempty"`
	ConversionsCount []int32         `protobuf:"varint,4,rep,packed,name=conversions_count,json=conversionsCount,proto3" json:"conversions_count,omitempty"`
}

func (x *ReportCampaignResponse) Reset() {
	*x = ReportCampaignResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportCampaignResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportCampaignResponse) ProtoMessage() {}

func (x *ReportCampaignResponse) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportCampaignResponse.ProtoReflect.Descriptor instead.
func (*ReportCampaignResponse) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{203}
}

func (x *ReportCampaignResponse) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ReportCampaignResponse) GetImpressionsCount() []int32 {
	if x != nil {
		return x.ImpressionsCount
	}
	return nil
}

func (x *ReportCampaignResponse) GetConversionsCount() []int32 {
	if x != nil {
		return x.ConversionsCount
	}
	return nil
}

type WebPluginMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RangeValue int64 `protobuf:"varint,2,opt,name=range_value,json=rangeValue,proto3" json:"range_value,omitempty"`
	Impression int64 `protobuf:"varint,6,opt,name=impression,proto3" json:"impression,omitempty"`
	Conversion int64 `protobuf:"varint,7,opt,name=conversion,proto3" json:"conversion,omitempty"`
}

func (x *WebPluginMetric) Reset() {
	*x = WebPluginMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebPluginMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebPluginMetric) ProtoMessage() {}

func (x *WebPluginMetric) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebPluginMetric.ProtoReflect.Descriptor instead.
func (*WebPluginMetric) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{204}
}

func (x *WebPluginMetric) GetRangeValue() int64 {
	if x != nil {
		return x.RangeValue
	}
	return 0
}

func (x *WebPluginMetric) GetImpression() int64 {
	if x != nil {
		return x.Impression
	}
	return 0
}

func (x *WebPluginMetric) GetConversion() int64 {
	if x != nil {
		return x.Conversion
	}
	return 0
}

type ReportWebPluginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx         *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId   string          `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	WebPluginId string          `protobuf:"bytes,4,opt,name=web_plugin_id,json=webPluginId,proto3" json:"web_plugin_id,omitempty"`
	FromHour    int32           `protobuf:"varint,5,opt,name=from_hour,json=fromHour,proto3" json:"from_hour,omitempty"`
	ToHour      int32           `protobuf:"varint,6,opt,name=to_hour,json=toHour,proto3" json:"to_hour,omitempty"`
	Range       string          `protobuf:"bytes,7,opt,name=range,proto3" json:"range,omitempty"`
	Tz          int32           `protobuf:"varint,8,opt,name=tz,proto3" json:"tz,omitempty"`
}

func (x *ReportWebPluginRequest) Reset() {
	*x = ReportWebPluginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportWebPluginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportWebPluginRequest) ProtoMessage() {}

func (x *ReportWebPluginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportWebPluginRequest.ProtoReflect.Descriptor instead.
func (*ReportWebPluginRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{205}
}

func (x *ReportWebPluginRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ReportWebPluginRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ReportWebPluginRequest) GetWebPluginId() string {
	if x != nil {
		return x.WebPluginId
	}
	return ""
}

func (x *ReportWebPluginRequest) GetFromHour() int32 {
	if x != nil {
		return x.FromHour
	}
	return 0
}

func (x *ReportWebPluginRequest) GetToHour() int32 {
	if x != nil {
		return x.ToHour
	}
	return 0
}

func (x *ReportWebPluginRequest) GetRange() string {
	if x != nil {
		return x.Range
	}
	return ""
}

func (x *ReportWebPluginRequest) GetTz() int32 {
	if x != nil {
		return x.Tz
	}
	return 0
}

type ReportWebPluginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx     *common.Context    `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Range   string             `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`
	Metrics []*WebPluginMetric `protobuf:"bytes,3,rep,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *ReportWebPluginResponse) Reset() {
	*x = ReportWebPluginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportWebPluginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportWebPluginResponse) ProtoMessage() {}

func (x *ReportWebPluginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportWebPluginResponse.ProtoReflect.Descriptor instead.
func (*ReportWebPluginResponse) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{206}
}

func (x *ReportWebPluginResponse) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ReportWebPluginResponse) GetRange() string {
	if x != nil {
		return x.Range
	}
	return ""
}

func (x *ReportWebPluginResponse) GetMetrics() []*WebPluginMetric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type WebPluginConversionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx         *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId   string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	WebPluginId string          `protobuf:"bytes,3,opt,name=web_plugin_id,json=webPluginId,proto3" json:"web_plugin_id,omitempty"`
	UnixDayFrom int64           `protobuf:"varint,5,opt,name=unix_day_from,json=unixDayFrom,proto3" json:"unix_day_from,omitempty"`
	UnixDayTo   int64           `protobuf:"varint,6,opt,name=unix_day_to,json=unixDayTo,proto3" json:"unix_day_to,omitempty"`
	Anchor      string          `protobuf:"bytes,8,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Limit       int32           `protobuf:"varint,9,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *WebPluginConversionRequest) Reset() {
	*x = WebPluginConversionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebPluginConversionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebPluginConversionRequest) ProtoMessage() {}

func (x *WebPluginConversionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebPluginConversionRequest.ProtoReflect.Descriptor instead.
func (*WebPluginConversionRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{207}
}

func (x *WebPluginConversionRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *WebPluginConversionRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *WebPluginConversionRequest) GetWebPluginId() string {
	if x != nil {
		return x.WebPluginId
	}
	return ""
}

func (x *WebPluginConversionRequest) GetUnixDayFrom() int64 {
	if x != nil {
		return x.UnixDayFrom
	}
	return 0
}

func (x *WebPluginConversionRequest) GetUnixDayTo() int64 {
	if x != nil {
		return x.UnixDayTo
	}
	return 0
}

func (x *WebPluginConversionRequest) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *WebPluginConversionRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ConversionsExported struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url    string `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	Anchor string `protobuf:"bytes,7,opt,name=anchor,proto3" json:"anchor,omitempty"`
}

func (x *ConversionsExported) Reset() {
	*x = ConversionsExported{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversionsExported) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversionsExported) ProtoMessage() {}

func (x *ConversionsExported) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversionsExported.ProtoReflect.Descriptor instead.
func (*ConversionsExported) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{208}
}

func (x *ConversionsExported) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ConversionsExported) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

type SearchLocationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx   *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Query string          `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	Limit int64           `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *SearchLocationsRequest) Reset() {
	*x = SearchLocationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchLocationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchLocationsRequest) ProtoMessage() {}

func (x *SearchLocationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchLocationsRequest.ProtoReflect.Descriptor instead.
func (*SearchLocationsRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{209}
}

func (x *SearchLocationsRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *SearchLocationsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SearchLocationsRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GreetingAudios struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx            *common.Context  `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId      string           `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	GreetingAudios []*GreetingAudio `protobuf:"bytes,4,rep,name=greeting_audios,json=greetingAudios,proto3" json:"greeting_audios,omitempty"`
}

func (x *GreetingAudios) Reset() {
	*x = GreetingAudios{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GreetingAudios) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GreetingAudios) ProtoMessage() {}

func (x *GreetingAudios) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GreetingAudios.ProtoReflect.Descriptor instead.
func (*GreetingAudios) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{210}
}

func (x *GreetingAudios) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *GreetingAudios) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GreetingAudios) GetGreetingAudios() []*GreetingAudio {
	if x != nil {
		return x.GreetingAudios
	}
	return nil
}

type GreetingAudio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Id        string          `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	Name      string          `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Type      string          `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"` // sound, robot
	Created   int64           `protobuf:"varint,10,opt,name=created,proto3" json:"created,omitempty"`
	CreatedBy string          `protobuf:"bytes,11,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	Text      string          `protobuf:"bytes,13,opt,name=text,proto3" json:"text,omitempty"` // could be text or ssml, for indexing purpose only
	File      *File           `protobuf:"bytes,14,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *GreetingAudio) Reset() {
	*x = GreetingAudio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GreetingAudio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GreetingAudio) ProtoMessage() {}

func (x *GreetingAudio) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GreetingAudio.ProtoReflect.Descriptor instead.
func (*GreetingAudio) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{211}
}

func (x *GreetingAudio) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *GreetingAudio) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GreetingAudio) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GreetingAudio) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GreetingAudio) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GreetingAudio) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *GreetingAudio) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *GreetingAudio) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *GreetingAudio) GetFile() *File {
	if x != nil {
		return x.File
	}
	return nil
}

type UploadedImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx          *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId    string          `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Url          string          `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	ThumbnailUrl string          `protobuf:"bytes,5,opt,name=thumbnail_url,json=thumbnailUrl,proto3" json:"thumbnail_url,omitempty"`
	Width        int64           `protobuf:"varint,10,opt,name=width,proto3" json:"width,omitempty"`
	Height       int64           `protobuf:"varint,11,opt,name=height,proto3" json:"height,omitempty"`
	Created      int64           `protobuf:"varint,12,opt,name=created,proto3" json:"created,omitempty"`
	Author       string          `protobuf:"bytes,13,opt,name=author,proto3" json:"author,omitempty"` // for upspash photos
	AuthorUrl    string          `protobuf:"bytes,14,opt,name=author_url,json=authorUrl,proto3" json:"author_url,omitempty"`
}

func (x *UploadedImage) Reset() {
	*x = UploadedImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadedImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadedImage) ProtoMessage() {}

func (x *UploadedImage) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadedImage.ProtoReflect.Descriptor instead.
func (*UploadedImage) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{212}
}

func (x *UploadedImage) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *UploadedImage) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *UploadedImage) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *UploadedImage) GetThumbnailUrl() string {
	if x != nil {
		return x.ThumbnailUrl
	}
	return ""
}

func (x *UploadedImage) GetWidth() int64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *UploadedImage) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *UploadedImage) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *UploadedImage) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *UploadedImage) GetAuthorUrl() string {
	if x != nil {
		return x.AuthorUrl
	}
	return ""
}

type UploadedImages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx    *common.Context  `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Images []*UploadedImage `protobuf:"bytes,2,rep,name=images,proto3" json:"images,omitempty"`
}

func (x *UploadedImages) Reset() {
	*x = UploadedImages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadedImages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadedImages) ProtoMessage() {}

func (x *UploadedImages) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadedImages.ProtoReflect.Descriptor instead.
func (*UploadedImages) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{213}
}

func (x *UploadedImages) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *UploadedImages) GetImages() []*UploadedImage {
	if x != nil {
		return x.Images
	}
	return nil
}

type Clients struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx     *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Clients []*Client       `protobuf:"bytes,2,rep,name=clients,proto3" json:"clients,omitempty"`
}

func (x *Clients) Reset() {
	*x = Clients{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Clients) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Clients) ProtoMessage() {}

func (x *Clients) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Clients.ProtoReflect.Descriptor instead.
func (*Clients) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{214}
}

func (x *Clients) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Clients) GetClients() []*Client {
	if x != nil {
		return x.Clients
	}
	return nil
}

type Client struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Id  string          `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// secret used to authorize client with oauth2 server
	Secret string `protobuf:"bytes,4,opt,name=secret,proto3" json:"secret,omitempty"`
	// LogoUrl is url to logo of the client, should be 256x256 and lessthan 256KB
	LogoUrl   string `protobuf:"bytes,5,opt,name=logo_url,json=logoUrl,proto3" json:"logo_url,omitempty"`
	AccountId string `protobuf:"bytes,6,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// IsVerified will be true if client is verified by the authority
	IsVerified bool  `protobuf:"varint,8,opt,name=is_verified,json=isVerified,proto3" json:"is_verified,omitempty"`
	Verified   int64 `protobuf:"varint,9,opt,name=verified,proto3" json:"verified,omitempty"`
	// List of URLs which client must register for oauth redirection
	RedirectUri string `protobuf:"bytes,10,opt,name=redirect_uri,json=redirectUri,proto3" json:"redirect_uri,omitempty"`
	Type        string `protobuf:"bytes,11,opt,name=type,proto3" json:"type,omitempty"`
	Name        string `protobuf:"bytes,12,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName string `protobuf:"bytes,13,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Version number of the client.
	Version    string   `protobuf:"bytes,14,opt,name=version,proto3" json:"version,omitempty"`
	IsEnabled  bool     `protobuf:"varint,15,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	Created    int64    `protobuf:"varint,17,opt,name=created,proto3" json:"created,omitempty"`
	Modified   int64    `protobuf:"varint,18,opt,name=modified,proto3" json:"modified,omitempty"`
	WebhookUri string   `protobuf:"bytes,20,opt,name=webhook_uri,json=webhookUri,proto3" json:"webhook_uri,omitempty"`
	Events     []string `protobuf:"bytes,19,rep,name=events,proto3" json:"events,omitempty"` // subscribed event
	// for connector only
	ChannelType        string   `protobuf:"bytes,21,opt,name=channel_type,json=channelType,proto3" json:"channel_type,omitempty"`
	AvailabilityUri    string   `protobuf:"bytes,22,opt,name=availability_uri,json=availabilityUri,proto3" json:"availability_uri,omitempty"`
	PingUri            string   `protobuf:"bytes,23,opt,name=ping_uri,json=pingUri,proto3" json:"ping_uri,omitempty"`
	IsInternal         bool     `protobuf:"varint,24,opt,name=is_internal,json=isInternal,proto3" json:"is_internal,omitempty"`
	UnsubscribeUri     string   `protobuf:"bytes,25,opt,name=unsubscribe_uri,json=unsubscribeUri,proto3" json:"unsubscribe_uri,omitempty"`
	Scopes             []string `protobuf:"bytes,26,rep,name=scopes,proto3" json:"scopes,omitempty"`
	BotDefaultJobTitle string   `protobuf:"bytes,28,opt,name=bot_default_job_title,json=botDefaultJobTitle,proto3" json:"bot_default_job_title,omitempty"`
	BotDefaultFullname string   `protobuf:"bytes,29,opt,name=bot_default_fullname,json=botDefaultFullname,proto3" json:"bot_default_fullname,omitempty"`
	BotIsSupervisor    bool     `protobuf:"varint,30,opt,name=bot_is_supervisor,json=botIsSupervisor,proto3" json:"bot_is_supervisor,omitempty"`
}

func (x *Client) Reset() {
	*x = Client{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Client) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Client) ProtoMessage() {}

func (x *Client) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Client.ProtoReflect.Descriptor instead.
func (*Client) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{215}
}

func (x *Client) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Client) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Client) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *Client) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *Client) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Client) GetIsVerified() bool {
	if x != nil {
		return x.IsVerified
	}
	return false
}

func (x *Client) GetVerified() int64 {
	if x != nil {
		return x.Verified
	}
	return 0
}

func (x *Client) GetRedirectUri() string {
	if x != nil {
		return x.RedirectUri
	}
	return ""
}

func (x *Client) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Client) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Client) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Client) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Client) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *Client) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Client) GetModified() int64 {
	if x != nil {
		return x.Modified
	}
	return 0
}

func (x *Client) GetWebhookUri() string {
	if x != nil {
		return x.WebhookUri
	}
	return ""
}

func (x *Client) GetEvents() []string {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *Client) GetChannelType() string {
	if x != nil {
		return x.ChannelType
	}
	return ""
}

func (x *Client) GetAvailabilityUri() string {
	if x != nil {
		return x.AvailabilityUri
	}
	return ""
}

func (x *Client) GetPingUri() string {
	if x != nil {
		return x.PingUri
	}
	return ""
}

func (x *Client) GetIsInternal() bool {
	if x != nil {
		return x.IsInternal
	}
	return false
}

func (x *Client) GetUnsubscribeUri() string {
	if x != nil {
		return x.UnsubscribeUri
	}
	return ""
}

func (x *Client) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *Client) GetBotDefaultJobTitle() string {
	if x != nil {
		return x.BotDefaultJobTitle
	}
	return ""
}

func (x *Client) GetBotDefaultFullname() string {
	if x != nil {
		return x.BotDefaultFullname
	}
	return ""
}

func (x *Client) GetBotIsSupervisor() bool {
	if x != nil {
		return x.BotIsSupervisor
	}
	return false
}

type Webhooks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx      *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Webhooks []*Webhook      `protobuf:"bytes,2,rep,name=webhooks,proto3" json:"webhooks,omitempty"`
}

func (x *Webhooks) Reset() {
	*x = Webhooks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Webhooks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Webhooks) ProtoMessage() {}

func (x *Webhooks) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Webhooks.ProtoReflect.Descriptor instead.
func (*Webhooks) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{216}
}

func (x *Webhooks) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Webhooks) GetWebhooks() []*Webhook {
	if x != nil {
		return x.Webhooks
	}
	return nil
}

type WebhookSecret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Secret  string `protobuf:"bytes,3,opt,name=secret,proto3" json:"secret,omitempty"`
	Expired int64  `protobuf:"varint,5,opt,name=expired,proto3" json:"expired,omitempty"`
	Created int64  `protobuf:"varint,6,opt,name=created,proto3" json:"created,omitempty"`
}

func (x *WebhookSecret) Reset() {
	*x = WebhookSecret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookSecret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookSecret) ProtoMessage() {}

func (x *WebhookSecret) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookSecret.ProtoReflect.Descriptor instead.
func (*WebhookSecret) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{217}
}

func (x *WebhookSecret) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *WebhookSecret) GetExpired() int64 {
	if x != nil {
		return x.Expired
	}
	return 0
}

func (x *WebhookSecret) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

type Webhook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx                               *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId                         string          `protobuf:"bytes,12,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Id                                string          `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Url                               string          `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Secret                            string          `protobuf:"bytes,4,opt,name=secret,proto3" json:"secret,omitempty"`
	OldSecret                         *WebhookSecret  `protobuf:"bytes,5,opt,name=old_secret,json=oldSecret,proto3" json:"old_secret,omitempty"` // keep old secret so endpoint could do gradual update
	Events                            []string        `protobuf:"bytes,6,rep,name=events,proto3" json:"events,omitempty"`
	State                             string          `protobuf:"bytes,7,opt,name=state,proto3" json:"state,omitempty"`
	Modified                          int64           `protobuf:"varint,19,opt,name=modified,proto3" json:"modified,omitempty"` // update when url, events or secret updated
	Created                           int64           `protobuf:"varint,20,opt,name=created,proto3" json:"created,omitempty"`
	Creator                           string          `protobuf:"bytes,21,opt,name=creator,proto3" json:"creator,omitempty"`
	IsEnabled                         bool            `protobuf:"varint,22,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`       // deprecated
	IsProtected                       bool            `protobuf:"varint,23,opt,name=is_protected,json=isProtected,proto3" json:"is_protected,omitempty"` // deprecated
	AvatarUrl                         string          `protobuf:"bytes,27,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`        // favicon for the domain
	TotalDeliveriesInLast_7Days       int64           `protobuf:"varint,30,opt,name=total_deliveries_in_last_7_days,json=totalDeliveriesInLast7Days,proto3" json:"total_deliveries_in_last_7_days,omitempty"`
	TotalFailedDeliveriesInLast_7Days int64           `protobuf:"varint,31,opt,name=total_failed_deliveries_in_last_7_days,json=totalFailedDeliveriesInLast7Days,proto3" json:"total_failed_deliveries_in_last_7_days,omitempty"`
	IsDisabled                        bool            `protobuf:"varint,33,opt,name=is_disabled,json=isDisabled,proto3" json:"is_disabled,omitempty"`
	LastDeliveryAt                    int64           `protobuf:"varint,34,opt,name=last_delivery_at,json=lastDeliveryAt,proto3" json:"last_delivery_at,omitempty"`
	LastSuccessDeliveryAt             int64           `protobuf:"varint,35,opt,name=last_success_delivery_at,json=lastSuccessDeliveryAt,proto3" json:"last_success_delivery_at,omitempty"`
	NextRetryAt                       int64           `protobuf:"varint,36,opt,name=next_retry_at,json=nextRetryAt,proto3" json:"next_retry_at,omitempty"`
	ApiVersion                        string          `protobuf:"bytes,37,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
}

func (x *Webhook) Reset() {
	*x = Webhook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Webhook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Webhook) ProtoMessage() {}

func (x *Webhook) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Webhook.ProtoReflect.Descriptor instead.
func (*Webhook) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{218}
}

func (x *Webhook) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Webhook) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Webhook) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Webhook) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Webhook) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *Webhook) GetOldSecret() *WebhookSecret {
	if x != nil {
		return x.OldSecret
	}
	return nil
}

func (x *Webhook) GetEvents() []string {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *Webhook) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Webhook) GetModified() int64 {
	if x != nil {
		return x.Modified
	}
	return 0
}

func (x *Webhook) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Webhook) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Webhook) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *Webhook) GetIsProtected() bool {
	if x != nil {
		return x.IsProtected
	}
	return false
}

func (x *Webhook) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *Webhook) GetTotalDeliveriesInLast_7Days() int64 {
	if x != nil {
		return x.TotalDeliveriesInLast_7Days
	}
	return 0
}

func (x *Webhook) GetTotalFailedDeliveriesInLast_7Days() int64 {
	if x != nil {
		return x.TotalFailedDeliveriesInLast_7Days
	}
	return 0
}

func (x *Webhook) GetIsDisabled() bool {
	if x != nil {
		return x.IsDisabled
	}
	return false
}

func (x *Webhook) GetLastDeliveryAt() int64 {
	if x != nil {
		return x.LastDeliveryAt
	}
	return 0
}

func (x *Webhook) GetLastSuccessDeliveryAt() int64 {
	if x != nil {
		return x.LastSuccessDeliveryAt
	}
	return 0
}

func (x *Webhook) GetNextRetryAt() int64 {
	if x != nil {
		return x.NextRetryAt
	}
	return 0
}

func (x *Webhook) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

type WebhookDeliveries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx        *common.Context    `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Deliveries []*WebhookDelivery `protobuf:"bytes,2,rep,name=deliveries,proto3" json:"deliveries,omitempty"`
}

func (x *WebhookDeliveries) Reset() {
	*x = WebhookDeliveries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookDeliveries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookDeliveries) ProtoMessage() {}

func (x *WebhookDeliveries) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookDeliveries.ProtoReflect.Descriptor instead.
func (*WebhookDeliveries) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{219}
}

func (x *WebhookDeliveries) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *WebhookDeliveries) GetDeliveries() []*WebhookDelivery {
	if x != nil {
		return x.Deliveries
	}
	return nil
}

type WebhookDelivery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	WebhookId string          `protobuf:"bytes,3,opt,name=webhook_id,json=webhookId,proto3" json:"webhook_id,omitempty"`
	Id        int32           `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	Url       string          `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	// string method = 6; no need this field since the method is alway POST
	ResquestHeaders   []*KV    `protobuf:"bytes,7,rep,name=resquest_headers,json=resquestHeaders,proto3" json:"resquest_headers,omitempty"`
	RequestPayload    string   `protobuf:"bytes,8,opt,name=request_payload,json=requestPayload,proto3" json:"request_payload,omitempty"`
	ResponseHeaders   []*KV    `protobuf:"bytes,9,rep,name=response_headers,json=responseHeaders,proto3" json:"response_headers,omitempty"`
	ResponseBody      string   `protobuf:"bytes,10,opt,name=response_body,json=responseBody,proto3" json:"response_body,omitempty"`
	Status            string   `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	StatusCode        int32    `protobuf:"varint,12,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	BeginAt           int64    `protobuf:"varint,13,opt,name=begin_at,json=beginAt,proto3" json:"begin_at,omitempty"`
	EndAt             int64    `protobuf:"varint,14,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
	Errs              []string `protobuf:"bytes,15,rep,name=errs,proto3" json:"errs,omitempty"`
	RequestPayloadLen int32    `protobuf:"varint,16,opt,name=request_payload_len,json=requestPayloadLen,proto3" json:"request_payload_len,omitempty"` // derived
	ResponseBodyLen   int32    `protobuf:"varint,17,opt,name=response_body_len,json=responseBodyLen,proto3" json:"response_body_len,omitempty"`       // derived
}

func (x *WebhookDelivery) Reset() {
	*x = WebhookDelivery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookDelivery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookDelivery) ProtoMessage() {}

func (x *WebhookDelivery) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookDelivery.ProtoReflect.Descriptor instead.
func (*WebhookDelivery) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{220}
}

func (x *WebhookDelivery) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *WebhookDelivery) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *WebhookDelivery) GetWebhookId() string {
	if x != nil {
		return x.WebhookId
	}
	return ""
}

func (x *WebhookDelivery) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WebhookDelivery) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *WebhookDelivery) GetResquestHeaders() []*KV {
	if x != nil {
		return x.ResquestHeaders
	}
	return nil
}

func (x *WebhookDelivery) GetRequestPayload() string {
	if x != nil {
		return x.RequestPayload
	}
	return ""
}

func (x *WebhookDelivery) GetResponseHeaders() []*KV {
	if x != nil {
		return x.ResponseHeaders
	}
	return nil
}

func (x *WebhookDelivery) GetResponseBody() string {
	if x != nil {
		return x.ResponseBody
	}
	return ""
}

func (x *WebhookDelivery) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *WebhookDelivery) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *WebhookDelivery) GetBeginAt() int64 {
	if x != nil {
		return x.BeginAt
	}
	return 0
}

func (x *WebhookDelivery) GetEndAt() int64 {
	if x != nil {
		return x.EndAt
	}
	return 0
}

func (x *WebhookDelivery) GetErrs() []string {
	if x != nil {
		return x.Errs
	}
	return nil
}

func (x *WebhookDelivery) GetRequestPayloadLen() int32 {
	if x != nil {
		return x.RequestPayloadLen
	}
	return 0
}

func (x *WebhookDelivery) GetResponseBodyLen() int32 {
	if x != nil {
		return x.ResponseBodyLen
	}
	return 0
}

type RecentIndexDeliveryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	WebhookId string          `protobuf:"bytes,2,opt,name=webhook_id,json=webhookId,proto3" json:"webhook_id,omitempty"`
	Limit     int32           `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *RecentIndexDeliveryRequest) Reset() {
	*x = RecentIndexDeliveryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecentIndexDeliveryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecentIndexDeliveryRequest) ProtoMessage() {}

func (x *RecentIndexDeliveryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecentIndexDeliveryRequest.ProtoReflect.Descriptor instead.
func (*RecentIndexDeliveryRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{221}
}

func (x *RecentIndexDeliveryRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *RecentIndexDeliveryRequest) GetWebhookId() string {
	if x != nil {
		return x.WebhookId
	}
	return ""
}

func (x *RecentIndexDeliveryRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type DeliveryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	WebhookId string          `protobuf:"bytes,2,opt,name=webhook_id,json=webhookId,proto3" json:"webhook_id,omitempty"`
	Id        int32           `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeliveryRequest) Reset() {
	*x = DeliveryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliveryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliveryRequest) ProtoMessage() {}

func (x *DeliveryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliveryRequest.ProtoReflect.Descriptor instead.
func (*DeliveryRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{222}
}

func (x *DeliveryRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *DeliveryRequest) GetWebhookId() string {
	if x != nil {
		return x.WebhookId
	}
	return ""
}

func (x *DeliveryRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type WebhookPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	HubId     string          `protobuf:"bytes,3,opt,name=hub_id,json=hubId,proto3" json:"hub_id,omitempty"`
	Payload   []byte          `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"` //json format
	Event     string          `protobuf:"bytes,5,opt,name=event,proto3" json:"event,omitempty"`
	WebhookId string          `protobuf:"bytes,6,opt,name=webhook_id,json=webhookId,proto3" json:"webhook_id,omitempty"` // internal use only
	Key       string          `protobuf:"bytes,9,opt,name=key,proto3" json:"key,omitempty"`                              // kafka key, internal use only
	IsDirect  bool            `protobuf:"varint,10,opt,name=is_direct,json=isDirect,proto3" json:"is_direct,omitempty"`
}

func (x *WebhookPayload) Reset() {
	*x = WebhookPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookPayload) ProtoMessage() {}

func (x *WebhookPayload) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookPayload.ProtoReflect.Descriptor instead.
func (*WebhookPayload) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{223}
}

func (x *WebhookPayload) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *WebhookPayload) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *WebhookPayload) GetHubId() string {
	if x != nil {
		return x.HubId
	}
	return ""
}

func (x *WebhookPayload) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *WebhookPayload) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *WebhookPayload) GetWebhookId() string {
	if x != nil {
		return x.WebhookId
	}
	return ""
}

func (x *WebhookPayload) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *WebhookPayload) GetIsDirect() bool {
	if x != nil {
		return x.IsDirect
	}
	return false
}

type WebhookTestResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx          *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId    string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ClientId     string          `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ResponseBody string          `protobuf:"bytes,14,opt,name=response_body,json=responseBody,proto3" json:"response_body,omitempty"`
	Status       int32           `protobuf:"varint,15,opt,name=status,proto3" json:"status,omitempty"`
	Payload      string          `protobuf:"bytes,16,opt,name=payload,proto3" json:"payload,omitempty"`
	Latency      int64           `protobuf:"varint,17,opt,name=latency,proto3" json:"latency,omitempty"` // seconds
}

func (x *WebhookTestResult) Reset() {
	*x = WebhookTestResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookTestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookTestResult) ProtoMessage() {}

func (x *WebhookTestResult) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookTestResult.ProtoReflect.Descriptor instead.
func (*WebhookTestResult) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{224}
}

func (x *WebhookTestResult) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *WebhookTestResult) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *WebhookTestResult) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *WebhookTestResult) GetResponseBody() string {
	if x != nil {
		return x.ResponseBody
	}
	return ""
}

func (x *WebhookTestResult) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *WebhookTestResult) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *WebhookTestResult) GetLatency() int64 {
	if x != nil {
		return x.Latency
	}
	return 0
}

type Email struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx  *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	From string          `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	//string to = 4;
	Subject     string             `protobuf:"bytes,5,opt,name=subject,proto3" json:"subject,omitempty"`
	Body        string             `protobuf:"bytes,6,opt,name=body,proto3" json:"body,omitempty"`
	Header      map[string]string  `protobuf:"bytes,7,rep,name=header,proto3" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Attachments []*EmailAttachment `protobuf:"bytes,8,rep,name=attachments,proto3" json:"attachments,omitempty"` // s3 links
	To          []string           `protobuf:"bytes,9,rep,name=to,proto3" json:"to,omitempty"`
	Cc          []string           `protobuf:"bytes,10,rep,name=cc,proto3" json:"cc,omitempty"`
	Bcc         []string           `protobuf:"bytes,11,rep,name=bcc,proto3" json:"bcc,omitempty"`
	Encoding    string             `protobuf:"bytes,12,opt,name=encoding,proto3" json:"encoding,omitempty"`
}

func (x *Email) Reset() {
	*x = Email{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Email) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Email) ProtoMessage() {}

func (x *Email) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Email.ProtoReflect.Descriptor instead.
func (*Email) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{225}
}

func (x *Email) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Email) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Email) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *Email) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *Email) GetHeader() map[string]string {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Email) GetAttachments() []*EmailAttachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *Email) GetTo() []string {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *Email) GetCc() []string {
	if x != nil {
		return x.Cc
	}
	return nil
}

func (x *Email) GetBcc() []string {
	if x != nil {
		return x.Bcc
	}
	return nil
}

func (x *Email) GetEncoding() string {
	if x != nil {
		return x.Encoding
	}
	return ""
}

type EmailAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url      string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Mimetype string `protobuf:"bytes,4,opt,name=mimetype,proto3" json:"mimetype,omitempty"`
}

func (x *EmailAttachment) Reset() {
	*x = EmailAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailAttachment) ProtoMessage() {}

func (x *EmailAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailAttachment.ProtoReflect.Descriptor instead.
func (*EmailAttachment) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{226}
}

func (x *EmailAttachment) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *EmailAttachment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EmailAttachment) GetMimetype() string {
	if x != nil {
		return x.Mimetype
	}
	return ""
}

type FileHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx                *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId          string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Name               string          `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Type               string          `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Size               int64           `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	Md5                string          `protobuf:"bytes,6,opt,name=md5,proto3" json:"md5,omitempty"`
	Description        string          `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	ContentDisposition string          `protobuf:"bytes,8,opt,name=content_disposition,json=contentDisposition,proto3" json:"content_disposition,omitempty"` // inline || attachment
	// metadata
	Uploaded   int64  `protobuf:"varint,20,opt,name=uploaded,proto3" json:"uploaded,omitempty"`
	FullUrl    string `protobuf:"bytes,21,opt,name=full_url,json=fullUrl,proto3" json:"full_url,omitempty"`
	MimeType   string `protobuf:"bytes,22,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	Downloaded int64  `protobuf:"varint,23,opt,name=downloaded,proto3" json:"downloaded,omitempty"`
}

func (x *FileHeader) Reset() {
	*x = FileHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileHeader) ProtoMessage() {}

func (x *FileHeader) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileHeader.ProtoReflect.Descriptor instead.
func (*FileHeader) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{227}
}

func (x *FileHeader) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *FileHeader) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *FileHeader) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FileHeader) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FileHeader) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FileHeader) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *FileHeader) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FileHeader) GetContentDisposition() string {
	if x != nil {
		return x.ContentDisposition
	}
	return ""
}

func (x *FileHeader) GetUploaded() int64 {
	if x != nil {
		return x.Uploaded
	}
	return 0
}

func (x *FileHeader) GetFullUrl() string {
	if x != nil {
		return x.FullUrl
	}
	return ""
}

func (x *FileHeader) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *FileHeader) GetDownloaded() int64 {
	if x != nil {
		return x.Downloaded
	}
	return 0
}

type PresignResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Url       string          `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	Id        string          `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty"`
	SignedUrl string          `protobuf:"bytes,5,opt,name=signed_url,json=signedUrl,proto3" json:"signed_url,omitempty"`
}

func (x *PresignResult) Reset() {
	*x = PresignResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PresignResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresignResult) ProtoMessage() {}

func (x *PresignResult) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresignResult.ProtoReflect.Descriptor instead.
func (*PresignResult) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{228}
}

func (x *PresignResult) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *PresignResult) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *PresignResult) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *PresignResult) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PresignResult) GetSignedUrl() string {
	if x != nil {
		return x.SignedUrl
	}
	return ""
}

type FileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Id        string          `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *FileRequest) Reset() {
	*x = FileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileRequest) ProtoMessage() {}

func (x *FileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileRequest.ProtoReflect.Descriptor instead.
func (*FileRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{229}
}

func (x *FileRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *FileRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *FileRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx                *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId          string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Name               string          `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Type               string          `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Size               int64           `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	Md5                string          `protobuf:"bytes,6,opt,name=md5,proto3" json:"md5,omitempty"`
	Description        string          `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
	Created            int64           `protobuf:"varint,7,opt,name=created,proto3" json:"created,omitempty"`
	Url                string          `protobuf:"bytes,8,opt,name=url,proto3" json:"url,omitempty"`
	Creator            string          `protobuf:"bytes,9,opt,name=creator,proto3" json:"creator,omitempty"`
	Id                 string          `protobuf:"bytes,11,opt,name=id,proto3" json:"id,omitempty"`
	ContentDisposition string          `protobuf:"bytes,12,opt,name=content_disposition,json=contentDisposition,proto3" json:"content_disposition,omitempty"` // inline (for printing) || attachment (download)
	LastAccessAt       int64           `protobuf:"varint,13,opt,name=last_access_at,json=lastAccessAt,proto3" json:"last_access_at,omitempty"`
	Bucket             string          `protobuf:"bytes,14,opt,name=bucket,proto3" json:"bucket,omitempty"`
	// for audio file only
	AudioWaveform []float32 `protobuf:"fixed32,15,rep,packed,name=audio_waveform,json=audioWaveform,proto3" json:"audio_waveform,omitempty"`
	// for video and audio
	Duration int64 `protobuf:"varint,16,opt,name=duration,proto3" json:"duration,omitempty"` // sec
	// for image file
	Width          int64  `protobuf:"varint,17,opt,name=width,proto3" json:"width,omitempty"`
	Height         int64  `protobuf:"varint,18,opt,name=height,proto3" json:"height,omitempty"`
	ThumbnailUrl   string `protobuf:"bytes,19,opt,name=thumbnail_url,json=thumbnailUrl,proto3" json:"thumbnail_url,omitempty"`
	ThumbnailWidth int64  `protobuf:"varint,20,opt,name=thumbnail_width,json=thumbnailWidth,proto3" json:"thumbnail_width,omitempty"`
	ThumnailHeight int64  `protobuf:"varint,21,opt,name=thumnail_height,json=thumnailHeight,proto3" json:"thumnail_height,omitempty"`
}

func (x *File) Reset() {
	*x = File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{230}
}

func (x *File) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *File) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *File) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *File) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *File) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *File) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *File) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *File) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *File) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *File) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *File) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *File) GetContentDisposition() string {
	if x != nil {
		return x.ContentDisposition
	}
	return ""
}

func (x *File) GetLastAccessAt() int64 {
	if x != nil {
		return x.LastAccessAt
	}
	return 0
}

func (x *File) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *File) GetAudioWaveform() []float32 {
	if x != nil {
		return x.AudioWaveform
	}
	return nil
}

func (x *File) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *File) GetWidth() int64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *File) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *File) GetThumbnailUrl() string {
	if x != nil {
		return x.ThumbnailUrl
	}
	return ""
}

func (x *File) GetThumbnailWidth() int64 {
	if x != nil {
		return x.ThumbnailWidth
	}
	return 0
}

func (x *File) GetThumnailHeight() int64 {
	if x != nil {
		return x.ThumnailHeight
	}
	return 0
}

type BotTerminated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx            *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId      string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	BotId          string          `protobuf:"bytes,3,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	ConversationId string          `protobuf:"bytes,4,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	Success        bool            `protobuf:"varint,5,opt,name=success,proto3" json:"success,omitempty"`
	Code           string          `protobuf:"bytes,6,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *BotTerminated) Reset() {
	*x = BotTerminated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BotTerminated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotTerminated) ProtoMessage() {}

func (x *BotTerminated) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotTerminated.ProtoReflect.Descriptor instead.
func (*BotTerminated) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{231}
}

func (x *BotTerminated) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *BotTerminated) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *BotTerminated) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

func (x *BotTerminated) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *BotTerminated) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BotTerminated) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type BlacklistIP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Ip        string          `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	Created   int64           `protobuf:"varint,5,opt,name=created,proto3" json:"created,omitempty"`
	By        string          `protobuf:"bytes,6,opt,name=by,proto3" json:"by,omitempty"`
}

func (x *BlacklistIP) Reset() {
	*x = BlacklistIP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlacklistIP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlacklistIP) ProtoMessage() {}

func (x *BlacklistIP) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlacklistIP.ProtoReflect.Descriptor instead.
func (*BlacklistIP) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{232}
}

func (x *BlacklistIP) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *BlacklistIP) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *BlacklistIP) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *BlacklistIP) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *BlacklistIP) GetBy() string {
	if x != nil {
		return x.By
	}
	return ""
}

type BannedUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	UserId    string          `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Created   int64           `protobuf:"varint,5,opt,name=created,proto3" json:"created,omitempty"`
	By        string          `protobuf:"bytes,6,opt,name=by,proto3" json:"by,omitempty"`
}

func (x *BannedUser) Reset() {
	*x = BannedUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BannedUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BannedUser) ProtoMessage() {}

func (x *BannedUser) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BannedUser.ProtoReflect.Descriptor instead.
func (*BannedUser) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{233}
}

func (x *BannedUser) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *BannedUser) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *BannedUser) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BannedUser) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *BannedUser) GetBy() string {
	if x != nil {
		return x.By
	}
	return ""
}

type LoginSessions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx      *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Sessions []*LoginSession `protobuf:"bytes,2,rep,name=sessions,proto3" json:"sessions,omitempty"`
}

func (x *LoginSessions) Reset() {
	*x = LoginSessions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginSessions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginSessions) ProtoMessage() {}

func (x *LoginSessions) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginSessions.ProtoReflect.Descriptor instead.
func (*LoginSessions) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{234}
}

func (x *LoginSessions) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *LoginSessions) GetSessions() []*LoginSession {
	if x != nil {
		return x.Sessions
	}
	return nil
}

// agent session
type LoginSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	AgentId   string          `protobuf:"bytes,3,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	ClientId  string          `protobuf:"bytes,4,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"` // application id
	Id        string          `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`                             // crc32 code of refresh_token
	Kind      string          `protobuf:"bytes,6,opt,name=kind,proto3" json:"kind,omitempty"`                         // should be agent, connector or bot
	// should be the same as access_token, since we dont want to use refresh token
	RefreshToken         string         `protobuf:"bytes,7,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
	AccessToken          string         `protobuf:"bytes,8,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	Scopes               []string       `protobuf:"bytes,9,rep,name=scopes,proto3" json:"scopes,omitempty"`
	Created              int64          `protobuf:"varint,10,opt,name=created,proto3" json:"created,omitempty"` // ms
	Device               *common.Device `protobuf:"bytes,11,opt,name=device,proto3" json:"device,omitempty"`
	LastUsed             int64          `protobuf:"varint,12,opt,name=last_used,json=lastUsed,proto3" json:"last_used,omitempty"`                                       // ms
	AccessTokenExpired   int64          `protobuf:"varint,15,opt,name=access_token_expired,json=accessTokenExpired,proto3" json:"access_token_expired,omitempty"`       // should be long
	AccessTokenGenerated int64          `protobuf:"varint,16,opt,name=access_token_generated,json=accessTokenGenerated,proto3" json:"access_token_generated,omitempty"` // ms
	Location             *Location      `protobuf:"bytes,17,opt,name=location,proto3" json:"location,omitempty"`
	// use on realtime event only
	State         string `protobuf:"bytes,18,opt,name=state,proto3" json:"state,omitempty"` // ended, created, updated
	Type          string `protobuf:"bytes,19,opt,name=type,proto3" json:"type,omitempty"`   // session, apikey, admin
	ClientVersion string `protobuf:"bytes,20,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
	Ttls          int64  `protobuf:"varint,21,opt,name=ttls,proto3" json:"ttls,omitempty"` // seconds, apikey only
	Note          string `protobuf:"bytes,23,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *LoginSession) Reset() {
	*x = LoginSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginSession) ProtoMessage() {}

func (x *LoginSession) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginSession.ProtoReflect.Descriptor instead.
func (*LoginSession) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{235}
}

func (x *LoginSession) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *LoginSession) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *LoginSession) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *LoginSession) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *LoginSession) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LoginSession) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *LoginSession) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *LoginSession) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *LoginSession) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *LoginSession) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *LoginSession) GetDevice() *common.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *LoginSession) GetLastUsed() int64 {
	if x != nil {
		return x.LastUsed
	}
	return 0
}

func (x *LoginSession) GetAccessTokenExpired() int64 {
	if x != nil {
		return x.AccessTokenExpired
	}
	return 0
}

func (x *LoginSession) GetAccessTokenGenerated() int64 {
	if x != nil {
		return x.AccessTokenGenerated
	}
	return 0
}

func (x *LoginSession) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *LoginSession) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *LoginSession) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *LoginSession) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

func (x *LoginSession) GetTtls() int64 {
	if x != nil {
		return x.Ttls
	}
	return 0
}

func (x *LoginSession) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type ScryptChallenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,9,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Id        string          `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"` // very long string
	N         int32           `protobuf:"varint,3,opt,name=N,proto3" json:"N,omitempty"`
	P         int32           `protobuf:"varint,4,opt,name=P,proto3" json:"P,omitempty"`
	R         int32           `protobuf:"varint,5,opt,name=r,proto3" json:"r,omitempty"`
	Salt      string          `protobuf:"bytes,6,opt,name=salt,proto3" json:"salt,omitempty"`
	Hash      string          `protobuf:"bytes,8,opt,name=hash,proto3" json:"hash,omitempty"` // 32 bit hex
	Domain    int32           `protobuf:"varint,14,opt,name=domain,proto3" json:"domain,omitempty"`
	Dklen     int32           `protobuf:"varint,15,opt,name=dklen,proto3" json:"dklen,omitempty"`
	// only for subiz use
	Answer  string `protobuf:"bytes,10,opt,name=answer,proto3" json:"answer,omitempty"`
	Created int64  `protobuf:"varint,11,opt,name=created,proto3" json:"created,omitempty"`
}

func (x *ScryptChallenge) Reset() {
	*x = ScryptChallenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScryptChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScryptChallenge) ProtoMessage() {}

func (x *ScryptChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScryptChallenge.ProtoReflect.Descriptor instead.
func (*ScryptChallenge) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{236}
}

func (x *ScryptChallenge) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ScryptChallenge) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ScryptChallenge) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ScryptChallenge) GetN() int32 {
	if x != nil {
		return x.N
	}
	return 0
}

func (x *ScryptChallenge) GetP() int32 {
	if x != nil {
		return x.P
	}
	return 0
}

func (x *ScryptChallenge) GetR() int32 {
	if x != nil {
		return x.R
	}
	return 0
}

func (x *ScryptChallenge) GetSalt() string {
	if x != nil {
		return x.Salt
	}
	return ""
}

func (x *ScryptChallenge) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *ScryptChallenge) GetDomain() int32 {
	if x != nil {
		return x.Domain
	}
	return 0
}

func (x *ScryptChallenge) GetDklen() int32 {
	if x != nil {
		return x.Dklen
	}
	return 0
}

func (x *ScryptChallenge) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *ScryptChallenge) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

type SearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx                  *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId            string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Query                string          `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	Limit                int32           `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	AgentId              string          `protobuf:"bytes,8,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`         // search my user of agent
	Labels               []string        `protobuf:"bytes,9,rep,name=labels,proto3" json:"labels,omitempty"`                          // or
	Agents               []string        `protobuf:"bytes,10,rep,name=agents,proto3" json:"agents,omitempty"`                         // or
	IsPrivate            bool            `protobuf:"varint,11,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"` // search in private convo only
	OnlyHeader           bool            `protobuf:"varint,13,opt,name=only_header,json=onlyHeader,proto3" json:"only_header,omitempty"`
	ConversationId       string          `protobuf:"bytes,14,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"` // filter by conversation
	Anchor               string          `protobuf:"bytes,15,opt,name=anchor,proto3" json:"anchor,omitempty"`
	ExcludeConversations []string        `protobuf:"bytes,16,rep,name=exclude_conversations,json=excludeConversations,proto3" json:"exclude_conversations,omitempty"`
}

func (x *SearchRequest) Reset() {
	*x = SearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest) ProtoMessage() {}

func (x *SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{237}
}

func (x *SearchRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *SearchRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *SearchRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SearchRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SearchRequest) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *SearchRequest) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *SearchRequest) GetAgents() []string {
	if x != nil {
		return x.Agents
	}
	return nil
}

func (x *SearchRequest) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *SearchRequest) GetOnlyHeader() bool {
	if x != nil {
		return x.OnlyHeader
	}
	return false
}

func (x *SearchRequest) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *SearchRequest) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *SearchRequest) GetExcludeConversations() []string {
	if x != nil {
		return x.ExcludeConversations
	}
	return nil
}

type ExchangeRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromCurrency string  `protobuf:"bytes,2,opt,name=from_currency,json=fromCurrency,proto3" json:"from_currency,omitempty"`
	ToCurrency   string  `protobuf:"bytes,3,opt,name=to_currency,json=toCurrency,proto3" json:"to_currency,omitempty"`
	ExchangeRate float32 `protobuf:"fixed32,4,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"`
	ExchangeTime int64   `protobuf:"varint,5,opt,name=exchange_time,json=exchangeTime,proto3" json:"exchange_time,omitempty"` // nanosec
}

func (x *ExchangeRate) Reset() {
	*x = ExchangeRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeRate) ProtoMessage() {}

func (x *ExchangeRate) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeRate.ProtoReflect.Descriptor instead.
func (*ExchangeRate) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{238}
}

func (x *ExchangeRate) GetFromCurrency() string {
	if x != nil {
		return x.FromCurrency
	}
	return ""
}

func (x *ExchangeRate) GetToCurrency() string {
	if x != nil {
		return x.ToCurrency
	}
	return ""
}

func (x *ExchangeRate) GetExchangeRate() float32 {
	if x != nil {
		return x.ExchangeRate
	}
	return 0
}

func (x *ExchangeRate) GetExchangeTime() int64 {
	if x != nil {
		return x.ExchangeTime
	}
	return 0
}

type FbComment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comment    string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"` // read only
	QuillDelta string `protobuf:"bytes,3,opt,name=quill_delta,json=quillDelta,proto3" json:"quill_delta,omitempty"`
	ImageUrl   string `protobuf:"bytes,4,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
}

func (x *FbComment) Reset() {
	*x = FbComment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbComment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbComment) ProtoMessage() {}

func (x *FbComment) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbComment.ProtoReflect.Descriptor instead.
func (*FbComment) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{239}
}

func (x *FbComment) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *FbComment) GetQuillDelta() string {
	if x != nil {
		return x.QuillDelta
	}
	return ""
}

func (x *FbComment) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

type FbFanpageSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx                        *common.Context   `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId                  string            `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	FanpageId                  string            `protobuf:"bytes,3,opt,name=fanpage_id,json=fanpageId,proto3" json:"fanpage_id,omitempty"`
	GeneralCommentSetting      *FbCommentSetting `protobuf:"bytes,5,opt,name=general_comment_setting,json=generalCommentSetting,proto3" json:"general_comment_setting,omitempty"`
	SpecificPostCommentSetting *FbCommentSetting `protobuf:"bytes,6,opt,name=specific_post_comment_setting,json=specificPostCommentSetting,proto3" json:"specific_post_comment_setting,omitempty"`
	Updated                    int64             `protobuf:"varint,9,opt,name=updated,proto3" json:"updated,omitempty"`
	Platform                   string            `protobuf:"bytes,10,opt,name=platform,proto3" json:"platform,omitempty"` // default facebook. Could be instagram
}

func (x *FbFanpageSetting) Reset() {
	*x = FbFanpageSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbFanpageSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbFanpageSetting) ProtoMessage() {}

func (x *FbFanpageSetting) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbFanpageSetting.ProtoReflect.Descriptor instead.
func (*FbFanpageSetting) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{240}
}

func (x *FbFanpageSetting) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *FbFanpageSetting) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *FbFanpageSetting) GetFanpageId() string {
	if x != nil {
		return x.FanpageId
	}
	return ""
}

func (x *FbFanpageSetting) GetGeneralCommentSetting() *FbCommentSetting {
	if x != nil {
		return x.GeneralCommentSetting
	}
	return nil
}

func (x *FbFanpageSetting) GetSpecificPostCommentSetting() *FbCommentSetting {
	if x != nil {
		return x.SpecificPostCommentSetting
	}
	return nil
}

func (x *FbFanpageSetting) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *FbFanpageSetting) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

type FbFanpageSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx      *common.Context     `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Settings []*FbFanpageSetting `protobuf:"bytes,2,rep,name=settings,proto3" json:"settings,omitempty"`
}

func (x *FbFanpageSettings) Reset() {
	*x = FbFanpageSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbFanpageSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbFanpageSettings) ProtoMessage() {}

func (x *FbFanpageSettings) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbFanpageSettings.ProtoReflect.Descriptor instead.
func (*FbFanpageSettings) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{241}
}

func (x *FbFanpageSettings) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *FbFanpageSettings) GetSettings() []*FbFanpageSetting {
	if x != nil {
		return x.Settings
	}
	return nil
}

type FbCommentSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled                                          bool         `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	AutoLike                                         bool         `protobuf:"varint,2,opt,name=auto_like,json=autoLike,proto3" json:"auto_like,omitempty"`
	AutoHide                                         int64        `protobuf:"varint,3,opt,name=auto_hide,json=autoHide,proto3" json:"auto_hide,omitempty"`
	AutoReply                                        bool         `protobuf:"varint,4,opt,name=auto_reply,json=autoReply,proto3" json:"auto_reply,omitempty"`
	Comments                                         []*FbComment `protobuf:"bytes,5,rep,name=comments,proto3" json:"comments,omitempty"`
	AutoInbox                                        bool         `protobuf:"varint,6,opt,name=auto_inbox,json=autoInbox,proto3" json:"auto_inbox,omitempty"`
	Message                                          *Message     `protobuf:"bytes,7,opt,name=message,proto3" json:"message,omitempty"`
	CustomInboxForCommentsContainPhoneEmailOrAddress bool         `protobuf:"varint,14,opt,name=custom_inbox_for_comments_contain_phone_email_or_address,json=customInboxForCommentsContainPhoneEmailOrAddress,proto3" json:"custom_inbox_for_comments_contain_phone_email_or_address,omitempty"`
	MessageForCommentsContainPhoneEmailOrAddress     *Message     `protobuf:"bytes,15,opt,name=message_for_comments_contain_phone_email_or_address,json=messageForCommentsContainPhoneEmailOrAddress,proto3" json:"message_for_comments_contain_phone_email_or_address,omitempty"`
	CustomInboxForCommentsContainKeyword             bool         `protobuf:"varint,16,opt,name=custom_inbox_for_comments_contain_keyword,json=customInboxForCommentsContainKeyword,proto3" json:"custom_inbox_for_comments_contain_keyword,omitempty"`
	MessageForCommentsContainKeyword                 *Message     `protobuf:"bytes,17,opt,name=message_for_comments_contain_keyword,json=messageForCommentsContainKeyword,proto3" json:"message_for_comments_contain_keyword,omitempty"`
	Keywords                                         []string     `protobuf:"bytes,10,rep,name=keywords,proto3" json:"keywords,omitempty"`              // comment
	PostIds                                          []string     `protobuf:"bytes,11,rep,name=post_ids,json=postIds,proto3" json:"post_ids,omitempty"` // post
	Hashtags                                         []string     `protobuf:"bytes,12,rep,name=hashtags,proto3" json:"hashtags,omitempty"`              // post (contain #)
}

func (x *FbCommentSetting) Reset() {
	*x = FbCommentSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbCommentSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbCommentSetting) ProtoMessage() {}

func (x *FbCommentSetting) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbCommentSetting.ProtoReflect.Descriptor instead.
func (*FbCommentSetting) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{242}
}

func (x *FbCommentSetting) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *FbCommentSetting) GetAutoLike() bool {
	if x != nil {
		return x.AutoLike
	}
	return false
}

func (x *FbCommentSetting) GetAutoHide() int64 {
	if x != nil {
		return x.AutoHide
	}
	return 0
}

func (x *FbCommentSetting) GetAutoReply() bool {
	if x != nil {
		return x.AutoReply
	}
	return false
}

func (x *FbCommentSetting) GetComments() []*FbComment {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *FbCommentSetting) GetAutoInbox() bool {
	if x != nil {
		return x.AutoInbox
	}
	return false
}

func (x *FbCommentSetting) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *FbCommentSetting) GetCustomInboxForCommentsContainPhoneEmailOrAddress() bool {
	if x != nil {
		return x.CustomInboxForCommentsContainPhoneEmailOrAddress
	}
	return false
}

func (x *FbCommentSetting) GetMessageForCommentsContainPhoneEmailOrAddress() *Message {
	if x != nil {
		return x.MessageForCommentsContainPhoneEmailOrAddress
	}
	return nil
}

func (x *FbCommentSetting) GetCustomInboxForCommentsContainKeyword() bool {
	if x != nil {
		return x.CustomInboxForCommentsContainKeyword
	}
	return false
}

func (x *FbCommentSetting) GetMessageForCommentsContainKeyword() *Message {
	if x != nil {
		return x.MessageForCommentsContainKeyword
	}
	return nil
}

func (x *FbCommentSetting) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *FbCommentSetting) GetPostIds() []string {
	if x != nil {
		return x.PostIds
	}
	return nil
}

func (x *FbCommentSetting) GetHashtags() []string {
	if x != nil {
		return x.Hashtags
	}
	return nil
}

type FacebookPosts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx   *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Posts []*FacebookPost `protobuf:"bytes,2,rep,name=posts,proto3" json:"posts,omitempty"`
}

func (x *FacebookPosts) Reset() {
	*x = FacebookPosts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FacebookPosts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FacebookPosts) ProtoMessage() {}

func (x *FacebookPosts) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FacebookPosts.ProtoReflect.Descriptor instead.
func (*FacebookPosts) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{243}
}

func (x *FacebookPosts) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *FacebookPosts) GetPosts() []*FacebookPost {
	if x != nil {
		return x.Posts
	}
	return nil
}

type FacebookPostAttachmentMediaImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Src string `protobuf:"bytes,2,opt,name=src,proto3" json:"src,omitempty"`
}

func (x *FacebookPostAttachmentMediaImage) Reset() {
	*x = FacebookPostAttachmentMediaImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FacebookPostAttachmentMediaImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FacebookPostAttachmentMediaImage) ProtoMessage() {}

func (x *FacebookPostAttachmentMediaImage) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FacebookPostAttachmentMediaImage.ProtoReflect.Descriptor instead.
func (*FacebookPostAttachmentMediaImage) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{244}
}

func (x *FacebookPostAttachmentMediaImage) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

type FacebookPostAttachmentMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image  *FacebookPostAttachmentMediaImage `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	Source string                            `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *FacebookPostAttachmentMedia) Reset() {
	*x = FacebookPostAttachmentMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FacebookPostAttachmentMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FacebookPostAttachmentMedia) ProtoMessage() {}

func (x *FacebookPostAttachmentMedia) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FacebookPostAttachmentMedia.ProtoReflect.Descriptor instead.
func (*FacebookPostAttachmentMedia) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{245}
}

func (x *FacebookPostAttachmentMedia) GetImage() *FacebookPostAttachmentMediaImage {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *FacebookPostAttachmentMedia) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type FacebookPostAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Media       *FacebookPostAttachmentMedia `protobuf:"bytes,2,opt,name=media,proto3" json:"media,omitempty"`
	Type        string                       `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Url         string                       `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	Description string                       `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Title       string                       `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *FacebookPostAttachment) Reset() {
	*x = FacebookPostAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FacebookPostAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FacebookPostAttachment) ProtoMessage() {}

func (x *FacebookPostAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FacebookPostAttachment.ProtoReflect.Descriptor instead.
func (*FacebookPostAttachment) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{246}
}

func (x *FacebookPostAttachment) GetMedia() *FacebookPostAttachmentMedia {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *FacebookPostAttachment) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FacebookPostAttachment) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *FacebookPostAttachment) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FacebookPostAttachment) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type FacebookPostAttachemnts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*FacebookPostAttachment `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *FacebookPostAttachemnts) Reset() {
	*x = FacebookPostAttachemnts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FacebookPostAttachemnts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FacebookPostAttachemnts) ProtoMessage() {}

func (x *FacebookPostAttachemnts) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FacebookPostAttachemnts.ProtoReflect.Descriptor instead.
func (*FacebookPostAttachemnts) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{247}
}

func (x *FacebookPostAttachemnts) GetData() []*FacebookPostAttachment {
	if x != nil {
		return x.Data
	}
	return nil
}

type FacebookPostFrom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *FacebookPostFrom) Reset() {
	*x = FacebookPostFrom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FacebookPostFrom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FacebookPostFrom) ProtoMessage() {}

func (x *FacebookPostFrom) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FacebookPostFrom.ProtoReflect.Descriptor instead.
func (*FacebookPostFrom) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{248}
}

func (x *FacebookPostFrom) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type FbFacebookPosts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data   []*FacebookPost `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	Paging *FacebookPaging `protobuf:"bytes,3,opt,name=paging,proto3" json:"paging,omitempty"`
}

func (x *FbFacebookPosts) Reset() {
	*x = FbFacebookPosts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FbFacebookPosts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FbFacebookPosts) ProtoMessage() {}

func (x *FbFacebookPosts) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FbFacebookPosts.ProtoReflect.Descriptor instead.
func (*FbFacebookPosts) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{249}
}

func (x *FbFacebookPosts) GetData() []*FacebookPost {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *FbFacebookPosts) GetPaging() *FacebookPaging {
	if x != nil {
		return x.Paging
	}
	return nil
}

type FacebookPagingCursor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	After  string `protobuf:"bytes,2,opt,name=after,proto3" json:"after,omitempty"`
	Before string `protobuf:"bytes,3,opt,name=before,proto3" json:"before,omitempty"`
}

func (x *FacebookPagingCursor) Reset() {
	*x = FacebookPagingCursor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FacebookPagingCursor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FacebookPagingCursor) ProtoMessage() {}

func (x *FacebookPagingCursor) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FacebookPagingCursor.ProtoReflect.Descriptor instead.
func (*FacebookPagingCursor) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{250}
}

func (x *FacebookPagingCursor) GetAfter() string {
	if x != nil {
		return x.After
	}
	return ""
}

func (x *FacebookPagingCursor) GetBefore() string {
	if x != nil {
		return x.Before
	}
	return ""
}

type FacebookPaging struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cursors *FacebookPagingCursor `protobuf:"bytes,2,opt,name=cursors,proto3" json:"cursors,omitempty"`
}

func (x *FacebookPaging) Reset() {
	*x = FacebookPaging{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FacebookPaging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FacebookPaging) ProtoMessage() {}

func (x *FacebookPaging) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FacebookPaging.ProtoReflect.Descriptor instead.
func (*FacebookPaging) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{251}
}

func (x *FacebookPaging) GetCursors() *FacebookPagingCursor {
	if x != nil {
		return x.Cursors
	}
	return nil
}

type InstagramMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	PageId    string          `protobuf:"bytes,3,opt,name=page_id,json=pageId,proto3" json:"page_id,omitempty"`
	Id        string          `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	Caption   string          `protobuf:"bytes,5,opt,name=caption,proto3" json:"caption,omitempty"`
	MediaType string          `protobuf:"bytes,6,opt,name=media_type,json=mediaType,proto3" json:"media_type,omitempty"`
	MediaUrl  string          `protobuf:"bytes,7,opt,name=media_url,json=mediaUrl,proto3" json:"media_url,omitempty"`
	Permalink string          `protobuf:"bytes,10,opt,name=permalink,proto3" json:"permalink,omitempty"`
	Timestamp string          `protobuf:"bytes,11,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Username  string          `protobuf:"bytes,12,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *InstagramMedia) Reset() {
	*x = InstagramMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstagramMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstagramMedia) ProtoMessage() {}

func (x *InstagramMedia) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstagramMedia.ProtoReflect.Descriptor instead.
func (*InstagramMedia) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{252}
}

func (x *InstagramMedia) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *InstagramMedia) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *InstagramMedia) GetPageId() string {
	if x != nil {
		return x.PageId
	}
	return ""
}

func (x *InstagramMedia) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InstagramMedia) GetCaption() string {
	if x != nil {
		return x.Caption
	}
	return ""
}

func (x *InstagramMedia) GetMediaType() string {
	if x != nil {
		return x.MediaType
	}
	return ""
}

func (x *InstagramMedia) GetMediaUrl() string {
	if x != nil {
		return x.MediaUrl
	}
	return ""
}

func (x *InstagramMedia) GetPermalink() string {
	if x != nil {
		return x.Permalink
	}
	return ""
}

func (x *InstagramMedia) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *InstagramMedia) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type FacebookPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx          *common.Context          `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId    string                   `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	PageId       string                   `protobuf:"bytes,3,opt,name=page_id,json=pageId,proto3" json:"page_id,omitempty"`
	Id           string                   `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	From         *FacebookPostFrom        `protobuf:"bytes,5,opt,name=from,proto3" json:"from,omitempty"`
	Message      string                   `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	CreatedTime  string                   `protobuf:"bytes,7,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	IsHidden     bool                     `protobuf:"varint,8,opt,name=is_hidden,json=isHidden,proto3" json:"is_hidden,omitempty"`
	IsPublished  bool                     `protobuf:"varint,9,opt,name=is_published,json=isPublished,proto3" json:"is_published,omitempty"`
	PermalinkUrl string                   `protobuf:"bytes,10,opt,name=permalink_url,json=permalinkUrl,proto3" json:"permalink_url,omitempty"`
	StatusType   string                   `protobuf:"bytes,11,opt,name=status_type,json=statusType,proto3" json:"status_type,omitempty"`
	FullPicture  string                   `protobuf:"bytes,12,opt,name=full_picture,json=fullPicture,proto3" json:"full_picture,omitempty"`
	Story        string                   `protobuf:"bytes,13,opt,name=story,proto3" json:"story,omitempty"`
	Attachments  *FacebookPostAttachemnts `protobuf:"bytes,14,opt,name=attachments,proto3" json:"attachments,omitempty"`
}

func (x *FacebookPost) Reset() {
	*x = FacebookPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FacebookPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FacebookPost) ProtoMessage() {}

func (x *FacebookPost) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FacebookPost.ProtoReflect.Descriptor instead.
func (*FacebookPost) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{253}
}

func (x *FacebookPost) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *FacebookPost) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *FacebookPost) GetPageId() string {
	if x != nil {
		return x.PageId
	}
	return ""
}

func (x *FacebookPost) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FacebookPost) GetFrom() *FacebookPostFrom {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *FacebookPost) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *FacebookPost) GetCreatedTime() string {
	if x != nil {
		return x.CreatedTime
	}
	return ""
}

func (x *FacebookPost) GetIsHidden() bool {
	if x != nil {
		return x.IsHidden
	}
	return false
}

func (x *FacebookPost) GetIsPublished() bool {
	if x != nil {
		return x.IsPublished
	}
	return false
}

func (x *FacebookPost) GetPermalinkUrl() string {
	if x != nil {
		return x.PermalinkUrl
	}
	return ""
}

func (x *FacebookPost) GetStatusType() string {
	if x != nil {
		return x.StatusType
	}
	return ""
}

func (x *FacebookPost) GetFullPicture() string {
	if x != nil {
		return x.FullPicture
	}
	return ""
}

func (x *FacebookPost) GetStory() string {
	if x != nil {
		return x.Story
	}
	return ""
}

func (x *FacebookPost) GetAttachments() *FacebookPostAttachemnts {
	if x != nil {
		return x.Attachments
	}
	return nil
}

type UserOrderConfirmation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx            *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId      string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	UserId         string          `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Order          *Order          `protobuf:"bytes,5,opt,name=order,proto3" json:"order,omitempty"`
	Status         string          `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"` // confirmed || cancelled
	ConversationId string          `protobuf:"bytes,7,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
}

func (x *UserOrderConfirmation) Reset() {
	*x = UserOrderConfirmation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserOrderConfirmation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserOrderConfirmation) ProtoMessage() {}

func (x *UserOrderConfirmation) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserOrderConfirmation.ProtoReflect.Descriptor instead.
func (*UserOrderConfirmation) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{254}
}

func (x *UserOrderConfirmation) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *UserOrderConfirmation) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *UserOrderConfirmation) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserOrderConfirmation) GetOrder() *Order {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *UserOrderConfirmation) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UserOrderConfirmation) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

// TODO: remove after remove old dashboard
type SessionCookie struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshToken string `protobuf:"bytes,3,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
	ExpiredAt    int64  `protobuf:"varint,4,opt,name=expired_at,json=expiredAt,proto3" json:"expired_at,omitempty"`
	IssuedAt     int64  `protobuf:"varint,5,opt,name=issued_at,json=issuedAt,proto3" json:"issued_at,omitempty"`
	Type         string `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	Email        string `protobuf:"bytes,7,opt,name=email,proto3" json:"email,omitempty"`
	RememberMe   bool   `protobuf:"varint,8,opt,name=remember_me,json=rememberMe,proto3" json:"remember_me,omitempty"`
	AccountId    string `protobuf:"bytes,9,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	AgentId      string `protobuf:"bytes,10,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
}

func (x *SessionCookie) Reset() {
	*x = SessionCookie{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionCookie) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionCookie) ProtoMessage() {}

func (x *SessionCookie) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionCookie.ProtoReflect.Descriptor instead.
func (*SessionCookie) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{255}
}

func (x *SessionCookie) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *SessionCookie) GetExpiredAt() int64 {
	if x != nil {
		return x.ExpiredAt
	}
	return 0
}

func (x *SessionCookie) GetIssuedAt() int64 {
	if x != nil {
		return x.IssuedAt
	}
	return 0
}

func (x *SessionCookie) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SessionCookie) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *SessionCookie) GetRememberMe() bool {
	if x != nil {
		return x.RememberMe
	}
	return false
}

func (x *SessionCookie) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *SessionCookie) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

type Webpage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx           *common.Context           `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId     string                    `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Id            string                    `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Url           string                    `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	Modified      int64                     `protobuf:"varint,5,opt,name=modified,proto3" json:"modified,omitempty"` // update when url|method|headers|payload updated
	Created       int64                     `protobuf:"varint,6,opt,name=created,proto3" json:"created,omitempty"`
	Creator       string                    `protobuf:"bytes,7,opt,name=creator,proto3" json:"creator,omitempty"`
	IsDisabled    bool                      `protobuf:"varint,8,opt,name=is_disabled,json=isDisabled,proto3" json:"is_disabled,omitempty"`
	LastCheckAt   int64                     `protobuf:"varint,9,opt,name=last_check_at,json=lastCheckAt,proto3" json:"last_check_at,omitempty"`
	Method        string                    `protobuf:"bytes,10,opt,name=method,proto3" json:"method,omitempty"`
	Headers       []*KV                     `protobuf:"bytes,11,rep,name=headers,proto3" json:"headers,omitempty"`
	Payload       string                    `protobuf:"bytes,12,opt,name=payload,proto3" json:"payload,omitempty"`
	State         string                    `protobuf:"bytes,13,opt,name=state,proto3" json:"state,omitempty"`
	MustContain   string                    `protobuf:"bytes,14,opt,name=must_contain,json=mustContain,proto3" json:"must_contain,omitempty"` // string name = 15;
	Subscribers   []string                  `protobuf:"bytes,19,rep,name=subscribers,proto3" json:"subscribers,omitempty"`                    // agent id
	Reports       []*WebpageReportDataPoint `protobuf:"bytes,18,rep,name=reports,proto3" json:"reports,omitempty"`                            // report of last 14 days
	CheckInterval int64                     `protobuf:"varint,20,opt,name=check_interval,json=checkInterval,proto3" json:"check_interval,omitempty"`
	Title         string                    `protobuf:"bytes,22,opt,name=title,proto3" json:"title,omitempty"`
	Favicon       string                    `protobuf:"bytes,24,opt,name=favicon,proto3" json:"favicon,omitempty"`
	LastFetch     int64                     `protobuf:"varint,25,opt,name=last_fetch,json=lastFetch,proto3" json:"last_fetch,omitempty"`
}

func (x *Webpage) Reset() {
	*x = Webpage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Webpage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Webpage) ProtoMessage() {}

func (x *Webpage) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Webpage.ProtoReflect.Descriptor instead.
func (*Webpage) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{256}
}

func (x *Webpage) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Webpage) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Webpage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Webpage) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Webpage) GetModified() int64 {
	if x != nil {
		return x.Modified
	}
	return 0
}

func (x *Webpage) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Webpage) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Webpage) GetIsDisabled() bool {
	if x != nil {
		return x.IsDisabled
	}
	return false
}

func (x *Webpage) GetLastCheckAt() int64 {
	if x != nil {
		return x.LastCheckAt
	}
	return 0
}

func (x *Webpage) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *Webpage) GetHeaders() []*KV {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Webpage) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *Webpage) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Webpage) GetMustContain() string {
	if x != nil {
		return x.MustContain
	}
	return ""
}

func (x *Webpage) GetSubscribers() []string {
	if x != nil {
		return x.Subscribers
	}
	return nil
}

func (x *Webpage) GetReports() []*WebpageReportDataPoint {
	if x != nil {
		return x.Reports
	}
	return nil
}

func (x *Webpage) GetCheckInterval() int64 {
	if x != nil {
		return x.CheckInterval
	}
	return 0
}

func (x *Webpage) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Webpage) GetFavicon() string {
	if x != nil {
		return x.Favicon
	}
	return ""
}

func (x *Webpage) GetLastFetch() int64 {
	if x != nil {
		return x.LastFetch
	}
	return 0
}

type Webpages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx      *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Webpages []*Webpage      `protobuf:"bytes,2,rep,name=webpages,proto3" json:"webpages,omitempty"`
}

func (x *Webpages) Reset() {
	*x = Webpages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Webpages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Webpages) ProtoMessage() {}

func (x *Webpages) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Webpages.ProtoReflect.Descriptor instead.
func (*Webpages) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{257}
}

func (x *Webpages) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Webpages) GetWebpages() []*Webpage {
	if x != nil {
		return x.Webpages
	}
	return nil
}

type WebpageCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx               *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId         string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	WebpageId         string          `protobuf:"bytes,3,opt,name=webpage_id,json=webpageId,proto3" json:"webpage_id,omitempty"`
	Id                int32           `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	Url               string          `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	Method            string          `protobuf:"bytes,6,opt,name=method,proto3" json:"method,omitempty"`
	RequestHeaders    []*KV           `protobuf:"bytes,7,rep,name=request_headers,json=requestHeaders,proto3" json:"request_headers,omitempty"`
	RequestPayload    string          `protobuf:"bytes,8,opt,name=request_payload,json=requestPayload,proto3" json:"request_payload,omitempty"`
	ResponseHeaders   []*KV           `protobuf:"bytes,9,rep,name=response_headers,json=responseHeaders,proto3" json:"response_headers,omitempty"`
	ResponseBody      string          `protobuf:"bytes,10,opt,name=response_body,json=responseBody,proto3" json:"response_body,omitempty"`
	Status            string          `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	StatusCode        int32           `protobuf:"varint,12,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	BeginAt           int64           `protobuf:"varint,13,opt,name=begin_at,json=beginAt,proto3" json:"begin_at,omitempty"`
	EndAt             int64           `protobuf:"varint,14,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
	Errs              []string        `protobuf:"bytes,15,rep,name=errs,proto3" json:"errs,omitempty"`
	RequestPayloadLen int32           `protobuf:"varint,16,opt,name=request_payload_len,json=requestPayloadLen,proto3" json:"request_payload_len,omitempty"` // derived
	ResponseBodyLen   int32           `protobuf:"varint,17,opt,name=response_body_len,json=responseBodyLen,proto3" json:"response_body_len,omitempty"`       // derived
	MustContain       string          `protobuf:"bytes,18,opt,name=must_contain,json=mustContain,proto3" json:"must_contain,omitempty"`
	State             string          `protobuf:"bytes,19,opt,name=state,proto3" json:"state,omitempty"` // up down missing
	ResolvedIp        string          `protobuf:"bytes,20,opt,name=resolved_ip,json=resolvedIp,proto3" json:"resolved_ip,omitempty"`
}

func (x *WebpageCheck) Reset() {
	*x = WebpageCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebpageCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebpageCheck) ProtoMessage() {}

func (x *WebpageCheck) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebpageCheck.ProtoReflect.Descriptor instead.
func (*WebpageCheck) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{258}
}

func (x *WebpageCheck) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *WebpageCheck) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *WebpageCheck) GetWebpageId() string {
	if x != nil {
		return x.WebpageId
	}
	return ""
}

func (x *WebpageCheck) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WebpageCheck) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *WebpageCheck) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *WebpageCheck) GetRequestHeaders() []*KV {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *WebpageCheck) GetRequestPayload() string {
	if x != nil {
		return x.RequestPayload
	}
	return ""
}

func (x *WebpageCheck) GetResponseHeaders() []*KV {
	if x != nil {
		return x.ResponseHeaders
	}
	return nil
}

func (x *WebpageCheck) GetResponseBody() string {
	if x != nil {
		return x.ResponseBody
	}
	return ""
}

func (x *WebpageCheck) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *WebpageCheck) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *WebpageCheck) GetBeginAt() int64 {
	if x != nil {
		return x.BeginAt
	}
	return 0
}

func (x *WebpageCheck) GetEndAt() int64 {
	if x != nil {
		return x.EndAt
	}
	return 0
}

func (x *WebpageCheck) GetErrs() []string {
	if x != nil {
		return x.Errs
	}
	return nil
}

func (x *WebpageCheck) GetRequestPayloadLen() int32 {
	if x != nil {
		return x.RequestPayloadLen
	}
	return 0
}

func (x *WebpageCheck) GetResponseBodyLen() int32 {
	if x != nil {
		return x.ResponseBodyLen
	}
	return 0
}

func (x *WebpageCheck) GetMustContain() string {
	if x != nil {
		return x.MustContain
	}
	return ""
}

func (x *WebpageCheck) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *WebpageCheck) GetResolvedIp() string {
	if x != nil {
		return x.ResolvedIp
	}
	return ""
}

type RecentWebpageCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	WebpageId string          `protobuf:"bytes,2,opt,name=webpage_id,json=webpageId,proto3" json:"webpage_id,omitempty"`
	Limit     int32           `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *RecentWebpageCheckRequest) Reset() {
	*x = RecentWebpageCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecentWebpageCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecentWebpageCheckRequest) ProtoMessage() {}

func (x *RecentWebpageCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecentWebpageCheckRequest.ProtoReflect.Descriptor instead.
func (*RecentWebpageCheckRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{259}
}

func (x *RecentWebpageCheckRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *RecentWebpageCheckRequest) GetWebpageId() string {
	if x != nil {
		return x.WebpageId
	}
	return ""
}

func (x *RecentWebpageCheckRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type WebpageChecks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx    *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Checks []*WebpageCheck `protobuf:"bytes,2,rep,name=checks,proto3" json:"checks,omitempty"`
}

func (x *WebpageChecks) Reset() {
	*x = WebpageChecks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebpageChecks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebpageChecks) ProtoMessage() {}

func (x *WebpageChecks) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebpageChecks.ProtoReflect.Descriptor instead.
func (*WebpageChecks) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{260}
}

func (x *WebpageChecks) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *WebpageChecks) GetChecks() []*WebpageCheck {
	if x != nil {
		return x.Checks
	}
	return nil
}

type WebpageCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	WebpageId string          `protobuf:"bytes,2,opt,name=webpage_id,json=webpageId,proto3" json:"webpage_id,omitempty"`
	Id        int32           `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *WebpageCheckRequest) Reset() {
	*x = WebpageCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebpageCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebpageCheckRequest) ProtoMessage() {}

func (x *WebpageCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebpageCheckRequest.ProtoReflect.Descriptor instead.
func (*WebpageCheckRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{261}
}

func (x *WebpageCheckRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *WebpageCheckRequest) GetWebpageId() string {
	if x != nil {
		return x.WebpageId
	}
	return ""
}

func (x *WebpageCheckRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type WebpageReportDataSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Points []*WebpageReportDataPoint `protobuf:"bytes,2,rep,name=points,proto3" json:"points,omitempty"`
}

func (x *WebpageReportDataSet) Reset() {
	*x = WebpageReportDataSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebpageReportDataSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebpageReportDataSet) ProtoMessage() {}

func (x *WebpageReportDataSet) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebpageReportDataSet.ProtoReflect.Descriptor instead.
func (*WebpageReportDataSet) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{262}
}

func (x *WebpageReportDataSet) GetPoints() []*WebpageReportDataPoint {
	if x != nil {
		return x.Points
	}
	return nil
}

type WebpageReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	WebpageId string          `protobuf:"bytes,3,opt,name=webpage_id,json=webpageId,proto3" json:"webpage_id,omitempty"`
	Day       int64           `protobuf:"varint,4,opt,name=day,proto3" json:"day,omitempty"`
	Unit      string          `protobuf:"bytes,5,opt,name=unit,proto3" json:"unit,omitempty"` // day, month
	FromDay   int64           `protobuf:"varint,6,opt,name=from_day,json=fromDay,proto3" json:"from_day,omitempty"`
	ToDay     int64           `protobuf:"varint,7,opt,name=to_day,json=toDay,proto3" json:"to_day,omitempty"`
}

func (x *WebpageReportRequest) Reset() {
	*x = WebpageReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebpageReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebpageReportRequest) ProtoMessage() {}

func (x *WebpageReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebpageReportRequest.ProtoReflect.Descriptor instead.
func (*WebpageReportRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{263}
}

func (x *WebpageReportRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *WebpageReportRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *WebpageReportRequest) GetWebpageId() string {
	if x != nil {
		return x.WebpageId
	}
	return ""
}

func (x *WebpageReportRequest) GetDay() int64 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *WebpageReportRequest) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *WebpageReportRequest) GetFromDay() int64 {
	if x != nil {
		return x.FromDay
	}
	return 0
}

func (x *WebpageReportRequest) GetToDay() int64 {
	if x != nil {
		return x.ToDay
	}
	return 0
}

type WebpageReportDataPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Day              int64 `protobuf:"varint,2,opt,name=day,proto3" json:"day,omitempty"`
	TotalUptimeSec   int64 `protobuf:"varint,3,opt,name=total_uptime_sec,json=totalUptimeSec,proto3" json:"total_uptime_sec,omitempty"`
	TotalDowntimeSec int64 `protobuf:"varint,4,opt,name=total_downtime_sec,json=totalDowntimeSec,proto3" json:"total_downtime_sec,omitempty"`
	// float avg_response_time = 5; // sec
	// int64 num_check = 6;
	NumDowntime int64 `protobuf:"varint,7,opt,name=num_downtime,json=numDowntime,proto3" json:"num_downtime,omitempty"` // int64 total_missing_sec = 8;
}

func (x *WebpageReportDataPoint) Reset() {
	*x = WebpageReportDataPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebpageReportDataPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebpageReportDataPoint) ProtoMessage() {}

func (x *WebpageReportDataPoint) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebpageReportDataPoint.ProtoReflect.Descriptor instead.
func (*WebpageReportDataPoint) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{264}
}

func (x *WebpageReportDataPoint) GetDay() int64 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *WebpageReportDataPoint) GetTotalUptimeSec() int64 {
	if x != nil {
		return x.TotalUptimeSec
	}
	return 0
}

func (x *WebpageReportDataPoint) GetTotalDowntimeSec() int64 {
	if x != nil {
		return x.TotalDowntimeSec
	}
	return 0
}

func (x *WebpageReportDataPoint) GetNumDowntime() int64 {
	if x != nil {
		return x.NumDowntime
	}
	return 0
}

type Urls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Urls []string `protobuf:"bytes,2,rep,name=urls,proto3" json:"urls,omitempty"`
}

func (x *Urls) Reset() {
	*x = Urls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Urls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Urls) ProtoMessage() {}

func (x *Urls) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Urls.ProtoReflect.Descriptor instead.
func (*Urls) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{265}
}

func (x *Urls) GetUrls() []string {
	if x != nil {
		return x.Urls
	}
	return nil
}

type LangMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx         *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId   string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Locale      string          `protobuf:"bytes,3,opt,name=locale,proto3" json:"locale,omitempty"`
	Key         string          `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	Message     string          `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	LastMessage string          `protobuf:"bytes,6,opt,name=last_message,json=lastMessage,proto3" json:"last_message,omitempty"`
	Author      string          `protobuf:"bytes,7,opt,name=author,proto3" json:"author,omitempty"`
	Updated     int64           `protobuf:"varint,8,opt,name=updated,proto3" json:"updated,omitempty"`
	PublicState string          `protobuf:"bytes,9,opt,name=public_state,json=publicState,proto3" json:"public_state,omitempty"` // public, private, draft
	FromDefault bool            `protobuf:"varint,10,opt,name=from_default,json=fromDefault,proto3" json:"from_default,omitempty"`
	Category    string          `protobuf:"bytes,11,opt,name=category,proto3" json:"category,omitempty"`
}

func (x *LangMessage) Reset() {
	*x = LangMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LangMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LangMessage) ProtoMessage() {}

func (x *LangMessage) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LangMessage.ProtoReflect.Descriptor instead.
func (*LangMessage) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{266}
}

func (x *LangMessage) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *LangMessage) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *LangMessage) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *LangMessage) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *LangMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *LangMessage) GetLastMessage() string {
	if x != nil {
		return x.LastMessage
	}
	return ""
}

func (x *LangMessage) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *LangMessage) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *LangMessage) GetPublicState() string {
	if x != nil {
		return x.PublicState
	}
	return ""
}

func (x *LangMessage) GetFromDefault() bool {
	if x != nil {
		return x.FromDefault
	}
	return false
}

func (x *LangMessage) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

type Lang struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx          *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId    string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Locale       string          `protobuf:"bytes,3,opt,name=locale,proto3" json:"locale,omitempty"` // vi_VN
	Messages     []*LangMessage  `protobuf:"bytes,4,rep,name=messages,proto3" json:"messages,omitempty"`
	LastModified int64           `protobuf:"varint,5,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"` // ms
}

func (x *Lang) Reset() {
	*x = Lang{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[267]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lang) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lang) ProtoMessage() {}

func (x *Lang) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[267]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lang.ProtoReflect.Descriptor instead.
func (*Lang) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{267}
}

func (x *Lang) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Lang) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Lang) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *Lang) GetMessages() []*LangMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *Lang) GetLastModified() int64 {
	if x != nil {
		return x.LastModified
	}
	return 0
}

type Locale struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx         *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId   string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Locale      string          `protobuf:"bytes,4,opt,name=locale,proto3" json:"locale,omitempty"`
	Key         string          `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
	Message     string          `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	Description string          `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Locale) Reset() {
	*x = Locale{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[268]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Locale) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Locale) ProtoMessage() {}

func (x *Locale) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[268]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Locale.ProtoReflect.Descriptor instead.
func (*Locale) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{268}
}

func (x *Locale) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Locale) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Locale) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *Locale) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Locale) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Locale) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type Changelog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Id        string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Version   string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"` // auto
	Content   string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	CreatedBy string `protobuf:"bytes,6,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	Created   int64  `protobuf:"varint,7,opt,name=created,proto3" json:"created,omitempty"`
	Updated   string `protobuf:"bytes,8,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (x *Changelog) Reset() {
	*x = Changelog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[269]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Changelog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Changelog) ProtoMessage() {}

func (x *Changelog) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[269]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Changelog.ProtoReflect.Descriptor instead.
func (*Changelog) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{269}
}

func (x *Changelog) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Changelog) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Changelog) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Changelog) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Changelog) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *Changelog) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Changelog) GetUpdated() string {
	if x != nil {
		return x.Updated
	}
	return ""
}

type ListChangelogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Anchor    string `protobuf:"bytes,3,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Limit     int32  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ListChangelogsRequest) Reset() {
	*x = ListChangelogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[270]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListChangelogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChangelogsRequest) ProtoMessage() {}

func (x *ListChangelogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[270]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChangelogsRequest.ProtoReflect.Descriptor instead.
func (*ListChangelogsRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{270}
}

func (x *ListChangelogsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ListChangelogsRequest) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *ListChangelogsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ListChangelogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Anchor     string       `protobuf:"bytes,2,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Changelogs []*Changelog `protobuf:"bytes,3,rep,name=changelogs,proto3" json:"changelogs,omitempty"`
}

func (x *ListChangelogsResponse) Reset() {
	*x = ListChangelogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[271]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListChangelogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChangelogsResponse) ProtoMessage() {}

func (x *ListChangelogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[271]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChangelogsResponse.ProtoReflect.Descriptor instead.
func (*ListChangelogsResponse) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{271}
}

func (x *ListChangelogsResponse) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *ListChangelogsResponse) GetChangelogs() []*Changelog {
	if x != nil {
		return x.Changelogs
	}
	return nil
}

type AccountImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Img           *account.Account `protobuf:"bytes,2,opt,name=img,proto3" json:"img,omitempty"`
	Owner         *account.Agent   `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	HeaderVersion string           `protobuf:"bytes,4,opt,name=header_version,json=headerVersion,proto3" json:"header_version,omitempty"`
}

func (x *AccountImage) Reset() {
	*x = AccountImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[272]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountImage) ProtoMessage() {}

func (x *AccountImage) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[272]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountImage.ProtoReflect.Descriptor instead.
func (*AccountImage) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{272}
}

func (x *AccountImage) GetImg() *account.Account {
	if x != nil {
		return x.Img
	}
	return nil
}

func (x *AccountImage) GetOwner() *account.Agent {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *AccountImage) GetHeaderVersion() string {
	if x != nil {
		return x.HeaderVersion
	}
	return ""
}

type UserViews struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Views     []*UserView     `protobuf:"bytes,4,rep,name=views,proto3" json:"views,omitempty"`
}

func (x *UserViews) Reset() {
	*x = UserViews{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[273]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserViews) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserViews) ProtoMessage() {}

func (x *UserViews) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[273]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserViews.ProtoReflect.Descriptor instead.
func (*UserViews) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{273}
}

func (x *UserViews) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *UserViews) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *UserViews) GetViews() []*UserView {
	if x != nil {
		return x.Views
	}
	return nil
}

type UserView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context    `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string             `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Id        string             `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Condition *UserViewCondition `protobuf:"bytes,4,opt,name=condition,proto3" json:"condition,omitempty"`
	CreatedBy string             `protobuf:"bytes,5,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	Created   int64              `protobuf:"varint,6,opt,name=created,proto3" json:"created,omitempty"`
	UpdatedBy string             `protobuf:"bytes,7,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	Updated   int64              `protobuf:"varint,8,opt,name=updated,proto3" json:"updated,omitempty"`
	IsPublic  bool               `protobuf:"varint,9,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
	Name      string             `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Total     int64              `protobuf:"varint,11,opt,name=total,proto3" json:"total,omitempty"`
	// status tic
	LastCalculated int64  `protobuf:"varint,12,opt,name=last_calculated,json=lastCalculated,proto3" json:"last_calculated,omitempty"`
	Offset         int32  `protobuf:"varint,20,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit          int32  `protobuf:"varint,21,opt,name=limit,proto3" json:"limit,omitempty"`
	OrderBy        string `protobuf:"bytes,22,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"` // attr.username asc
}

func (x *UserView) Reset() {
	*x = UserView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[274]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserView) ProtoMessage() {}

func (x *UserView) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[274]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserView.ProtoReflect.Descriptor instead.
func (*UserView) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{274}
}

func (x *UserView) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *UserView) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *UserView) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserView) GetCondition() *UserViewCondition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *UserView) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *UserView) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *UserView) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *UserView) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *UserView) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *UserView) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserView) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UserView) GetLastCalculated() int64 {
	if x != nil {
		return x.LastCalculated
	}
	return 0
}

func (x *UserView) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *UserView) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *UserView) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type UserViewCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context      `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string               `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Key       string               `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"` // id, keyword, lead_owner attr.fullname
	Type      string               `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Text      *TextCondition       `protobuf:"bytes,6,opt,name=text,proto3" json:"text,omitempty"`
	Boolean   *BoolCondition       `protobuf:"bytes,8,opt,name=boolean,proto3" json:"boolean,omitempty"`
	Number    *FloatCondition      `protobuf:"bytes,9,opt,name=number,proto3" json:"number,omitempty"`
	Datetime  *DatetimeCondition   `protobuf:"bytes,10,opt,name=datetime,proto3" json:"datetime,omitempty"`
	All       []*UserViewCondition `protobuf:"bytes,12,rep,name=all,proto3" json:"all,omitempty"` // preferred
	One       []*UserViewCondition `protobuf:"bytes,13,rep,name=one,proto3" json:"one,omitempty"`
}

func (x *UserViewCondition) Reset() {
	*x = UserViewCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[275]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserViewCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserViewCondition) ProtoMessage() {}

func (x *UserViewCondition) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[275]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserViewCondition.ProtoReflect.Descriptor instead.
func (*UserViewCondition) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{275}
}

func (x *UserViewCondition) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *UserViewCondition) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *UserViewCondition) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *UserViewCondition) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UserViewCondition) GetText() *TextCondition {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *UserViewCondition) GetBoolean() *BoolCondition {
	if x != nil {
		return x.Boolean
	}
	return nil
}

func (x *UserViewCondition) GetNumber() *FloatCondition {
	if x != nil {
		return x.Number
	}
	return nil
}

func (x *UserViewCondition) GetDatetime() *DatetimeCondition {
	if x != nil {
		return x.Datetime
	}
	return nil
}

func (x *UserViewCondition) GetAll() []*UserViewCondition {
	if x != nil {
		return x.All
	}
	return nil
}

func (x *UserViewCondition) GetOne() []*UserViewCondition {
	if x != nil {
		return x.One
	}
	return nil
}

type ReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx   *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	From  string          `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	Range string          `protobuf:"bytes,4,opt,name=range,proto3" json:"range,omitempty"`
	Data  []int64         `protobuf:"varint,5,rep,packed,name=data,proto3" json:"data,omitempty"`
}

func (x *ReportResponse) Reset() {
	*x = ReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[276]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportResponse) ProtoMessage() {}

func (x *ReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[276]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportResponse.ProtoReflect.Descriptor instead.
func (*ReportResponse) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{276}
}

func (x *ReportResponse) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ReportResponse) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *ReportResponse) GetRange() string {
	if x != nil {
		return x.Range
	}
	return ""
}

func (x *ReportResponse) GetData() []int64 {
	if x != nil {
		return x.Data
	}
	return nil
}

type AvailibilityReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	AgentId   string          `protobuf:"bytes,3,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	From      string          `protobuf:"bytes,5,opt,name=from,proto3" json:"from,omitempty"` // try date --rfc-3339=seconds date in rfc 333
	// seconds standard. E.g: 2019-03-07T10:42:01+07:00
	Range          string `protobuf:"bytes,8,opt,name=range,proto3" json:"range,omitempty"`
	NumberOfPoints int32  `protobuf:"varint,13,opt,name=number_of_points,json=numberOfPoints,proto3" json:"number_of_points,omitempty"`
}

func (x *AvailibilityReportRequest) Reset() {
	*x = AvailibilityReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[277]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailibilityReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailibilityReportRequest) ProtoMessage() {}

func (x *AvailibilityReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[277]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailibilityReportRequest.ProtoReflect.Descriptor instead.
func (*AvailibilityReportRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{277}
}

func (x *AvailibilityReportRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *AvailibilityReportRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AvailibilityReportRequest) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *AvailibilityReportRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *AvailibilityReportRequest) GetRange() string {
	if x != nil {
		return x.Range
	}
	return ""
}

func (x *AvailibilityReportRequest) GetNumberOfPoints() int32 {
	if x != nil {
		return x.NumberOfPoints
	}
	return 0
}

type FileUrlDownloadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx        *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId  string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Url        string          `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	MaxSize    int64           `protobuf:"varint,4,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`
	TypePrefix string          `protobuf:"bytes,5,opt,name=type_prefix,json=typePrefix,proto3" json:"type_prefix,omitempty"`
	Timeout    int64           `protobuf:"varint,6,opt,name=timeout,proto3" json:"timeout,omitempty"`                     // ms
	UserAgent  string          `protobuf:"bytes,7,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"` // control client user-agent while download
	TypeHint   string          `protobuf:"bytes,8,opt,name=type_hint,json=typeHint,proto3" json:"type_hint,omitempty"`    // must from trusted source
	Extension  string          `protobuf:"bytes,9,opt,name=extension,proto3" json:"extension,omitempty"`                  // xlsx, jped
}

func (x *FileUrlDownloadRequest) Reset() {
	*x = FileUrlDownloadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[278]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileUrlDownloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileUrlDownloadRequest) ProtoMessage() {}

func (x *FileUrlDownloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[278]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileUrlDownloadRequest.ProtoReflect.Descriptor instead.
func (*FileUrlDownloadRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{278}
}

func (x *FileUrlDownloadRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *FileUrlDownloadRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *FileUrlDownloadRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *FileUrlDownloadRequest) GetMaxSize() int64 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

func (x *FileUrlDownloadRequest) GetTypePrefix() string {
	if x != nil {
		return x.TypePrefix
	}
	return ""
}

func (x *FileUrlDownloadRequest) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *FileUrlDownloadRequest) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *FileUrlDownloadRequest) GetTypeHint() string {
	if x != nil {
		return x.TypeHint
	}
	return ""
}

func (x *FileUrlDownloadRequest) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

type PushNoti struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx             *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId       string          `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	UserId          string          `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // to user
	Platform        string          `protobuf:"bytes,5,opt,name=platform,proto3" json:"platform,omitempty"`
	Title           string          `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	Body            string          `protobuf:"bytes,7,opt,name=body,proto3" json:"body,omitempty"`
	ConversationId  string          `protobuf:"bytes,8,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	SenderId        string          `protobuf:"bytes,9,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	SenderType      string          `protobuf:"bytes,10,opt,name=sender_type,json=senderType,proto3" json:"sender_type,omitempty"`
	IconUrl         string          `protobuf:"bytes,11,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	LastPageViewUrl string          `protobuf:"bytes,12,opt,name=last_page_view_url,json=lastPageViewUrl,proto3" json:"last_page_view_url,omitempty"`
	Type            string          `protobuf:"bytes,13,opt,name=type,proto3" json:"type,omitempty"`                            // type of event message_sent ...
	IsPrivate       string          `protobuf:"bytes,14,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"` // conversation is private
	Tos             []*common.By    `protobuf:"bytes,15,rep,name=tos,proto3" json:"tos,omitempty"`
}

func (x *PushNoti) Reset() {
	*x = PushNoti{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[279]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushNoti) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushNoti) ProtoMessage() {}

func (x *PushNoti) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[279]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushNoti.ProtoReflect.Descriptor instead.
func (*PushNoti) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{279}
}

func (x *PushNoti) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *PushNoti) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *PushNoti) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PushNoti) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *PushNoti) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PushNoti) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *PushNoti) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *PushNoti) GetSenderId() string {
	if x != nil {
		return x.SenderId
	}
	return ""
}

func (x *PushNoti) GetSenderType() string {
	if x != nil {
		return x.SenderType
	}
	return ""
}

func (x *PushNoti) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *PushNoti) GetLastPageViewUrl() string {
	if x != nil {
		return x.LastPageViewUrl
	}
	return ""
}

func (x *PushNoti) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PushNoti) GetIsPrivate() string {
	if x != nil {
		return x.IsPrivate
	}
	return ""
}

func (x *PushNoti) GetTos() []*common.By {
	if x != nil {
		return x.Tos
	}
	return nil
}

type InvoiceTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrimaryColor           string      `protobuf:"bytes,3,opt,name=primary_color,json=primaryColor,proto3" json:"primary_color,omitempty"`
	SecondaryColor         string      `protobuf:"bytes,4,opt,name=secondary_color,json=secondaryColor,proto3" json:"secondary_color,omitempty"`
	FontFamily             string      `protobuf:"bytes,5,opt,name=font_family,json=fontFamily,proto3" json:"font_family,omitempty"`
	FontSize               string      `protobuf:"bytes,6,opt,name=font_size,json=fontSize,proto3" json:"font_size,omitempty"`
	NumberFontFamily       string      `protobuf:"bytes,7,opt,name=number_font_family,json=numberFontFamily,proto3" json:"number_font_family,omitempty"`
	NumberFontSize         string      `protobuf:"bytes,8,opt,name=number_font_size,json=numberFontSize,proto3" json:"number_font_size,omitempty"`
	FontColor              string      `protobuf:"bytes,9,opt,name=font_color,json=fontColor,proto3" json:"font_color,omitempty"`
	TermsAndConditions     string      `protobuf:"bytes,15,opt,name=terms_and_conditions,json=termsAndConditions,proto3" json:"terms_and_conditions,omitempty"`
	I18NTermsAndConditions *I18NString `protobuf:"bytes,16,opt,name=i18n_terms_and_conditions,json=i18nTermsAndConditions,proto3" json:"i18n_terms_and_conditions,omitempty"`
	Tagline                string      `protobuf:"bytes,17,opt,name=tagline,proto3" json:"tagline,omitempty"`
	I18NTagline            *I18NString `protobuf:"bytes,18,opt,name=i18n_tagline,json=i18nTagline,proto3" json:"i18n_tagline,omitempty"`
	Signature              string      `protobuf:"bytes,19,opt,name=signature,proto3" json:"signature,omitempty"`
	I18NSignature          *I18NString `protobuf:"bytes,20,opt,name=i18n_signature,json=i18nSignature,proto3" json:"i18n_signature,omitempty"`
}

func (x *InvoiceTemplate) Reset() {
	*x = InvoiceTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[280]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvoiceTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceTemplate) ProtoMessage() {}

func (x *InvoiceTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[280]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceTemplate.ProtoReflect.Descriptor instead.
func (*InvoiceTemplate) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{280}
}

func (x *InvoiceTemplate) GetPrimaryColor() string {
	if x != nil {
		return x.PrimaryColor
	}
	return ""
}

func (x *InvoiceTemplate) GetSecondaryColor() string {
	if x != nil {
		return x.SecondaryColor
	}
	return ""
}

func (x *InvoiceTemplate) GetFontFamily() string {
	if x != nil {
		return x.FontFamily
	}
	return ""
}

func (x *InvoiceTemplate) GetFontSize() string {
	if x != nil {
		return x.FontSize
	}
	return ""
}

func (x *InvoiceTemplate) GetNumberFontFamily() string {
	if x != nil {
		return x.NumberFontFamily
	}
	return ""
}

func (x *InvoiceTemplate) GetNumberFontSize() string {
	if x != nil {
		return x.NumberFontSize
	}
	return ""
}

func (x *InvoiceTemplate) GetFontColor() string {
	if x != nil {
		return x.FontColor
	}
	return ""
}

func (x *InvoiceTemplate) GetTermsAndConditions() string {
	if x != nil {
		return x.TermsAndConditions
	}
	return ""
}

func (x *InvoiceTemplate) GetI18NTermsAndConditions() *I18NString {
	if x != nil {
		return x.I18NTermsAndConditions
	}
	return nil
}

func (x *InvoiceTemplate) GetTagline() string {
	if x != nil {
		return x.Tagline
	}
	return ""
}

func (x *InvoiceTemplate) GetI18NTagline() *I18NString {
	if x != nil {
		return x.I18NTagline
	}
	return nil
}

func (x *InvoiceTemplate) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *InvoiceTemplate) GetI18NSignature() *I18NString {
	if x != nil {
		return x.I18NSignature
	}
	return nil
}

type ShopSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx               *common.Context       `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId         string                `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	OtherCurrencies   []*Currency           `protobuf:"bytes,6,rep,name=other_currencies,json=otherCurrencies,proto3" json:"other_currencies,omitempty"`
	Updated           int64                 `protobuf:"varint,8,opt,name=updated,proto3" json:"updated,omitempty"`
	UpdatedBy         string                `protobuf:"bytes,9,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	Addresses         []*Address            `protobuf:"bytes,18,rep,name=addresses,proto3" json:"addresses,omitempty"`
	Taxes             []*Tax                `protobuf:"bytes,11,rep,name=taxes,proto3" json:"taxes,omitempty"`
	PaymentMethods    []*PaymentMethod      `protobuf:"bytes,12,rep,name=payment_methods,json=paymentMethods,proto3" json:"payment_methods,omitempty"`
	InvoiceTemplate   *InvoiceTemplate      `protobuf:"bytes,13,opt,name=invoice_template,json=invoiceTemplate,proto3" json:"invoice_template,omitempty"`
	DueDateTerm       string                `protobuf:"bytes,14,opt,name=due_date_term,json=dueDateTerm,proto3" json:"due_date_term,omitempty"`
	ShopeeShops       []*ShopeeShop         `protobuf:"bytes,15,rep,name=shopee_shops,json=shopeeShops,proto3" json:"shopee_shops,omitempty"` // read only
	Shippings         []*IntegratedShipping `protobuf:"bytes,16,rep,name=shippings,proto3" json:"shippings,omitempty"`
	ShippingPolicies  []*ShippingPolicy     `protobuf:"bytes,17,rep,name=shipping_policies,json=shippingPolicies,proto3" json:"shipping_policies,omitempty"`
	CancellationCodes []*CancellationCode   `protobuf:"bytes,19,rep,name=cancellation_codes,json=cancellationCodes,proto3" json:"cancellation_codes,omitempty"`
}

func (x *ShopSetting) Reset() {
	*x = ShopSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[281]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShopSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopSetting) ProtoMessage() {}

func (x *ShopSetting) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[281]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopSetting.ProtoReflect.Descriptor instead.
func (*ShopSetting) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{281}
}

func (x *ShopSetting) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ShopSetting) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ShopSetting) GetOtherCurrencies() []*Currency {
	if x != nil {
		return x.OtherCurrencies
	}
	return nil
}

func (x *ShopSetting) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *ShopSetting) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *ShopSetting) GetAddresses() []*Address {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *ShopSetting) GetTaxes() []*Tax {
	if x != nil {
		return x.Taxes
	}
	return nil
}

func (x *ShopSetting) GetPaymentMethods() []*PaymentMethod {
	if x != nil {
		return x.PaymentMethods
	}
	return nil
}

func (x *ShopSetting) GetInvoiceTemplate() *InvoiceTemplate {
	if x != nil {
		return x.InvoiceTemplate
	}
	return nil
}

func (x *ShopSetting) GetDueDateTerm() string {
	if x != nil {
		return x.DueDateTerm
	}
	return ""
}

func (x *ShopSetting) GetShopeeShops() []*ShopeeShop {
	if x != nil {
		return x.ShopeeShops
	}
	return nil
}

func (x *ShopSetting) GetShippings() []*IntegratedShipping {
	if x != nil {
		return x.Shippings
	}
	return nil
}

func (x *ShopSetting) GetShippingPolicies() []*ShippingPolicy {
	if x != nil {
		return x.ShippingPolicies
	}
	return nil
}

func (x *ShopSetting) GetCancellationCodes() []*CancellationCode {
	if x != nil {
		return x.CancellationCodes
	}
	return nil
}

type Addresses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Addresses []*Address      `protobuf:"bytes,3,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (x *Addresses) Reset() {
	*x = Addresses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[282]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Addresses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Addresses) ProtoMessage() {}

func (x *Addresses) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[282]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Addresses.ProtoReflect.Descriptor instead.
func (*Addresses) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{282}
}

func (x *Addresses) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Addresses) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Addresses) GetAddresses() []*Address {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type Currency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Name      string          `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Code      string          `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Symbol    string          `protobuf:"bytes,5,opt,name=symbol,proto3" json:"symbol,omitempty"`
	AutoSync  bool            `protobuf:"varint,6,opt,name=auto_sync,json=autoSync,proto3" json:"auto_sync,omitempty"`
	// one code equal how much base
	// code is VND, base is USD, rate should be 0.000045
	// otherwise, if code is USD, base is VND, rate should be 22000
	Rate      float32             `protobuf:"fixed32,7,opt,name=rate,proto3" json:"rate,omitempty"`
	Enabled   bool                `protobuf:"varint,8,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Updated   int64               `protobuf:"varint,9,opt,name=updated,proto3" json:"updated,omitempty"`
	UpdatedBy string              `protobuf:"bytes,10,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	Logs      []*CurrencyLogEntry `protobuf:"bytes,11,rep,name=logs,proto3" json:"logs,omitempty"`
	Format    string              `protobuf:"bytes,12,opt,name=format,proto3" json:"format,omitempty"`
}

func (x *Currency) Reset() {
	*x = Currency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[283]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Currency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Currency) ProtoMessage() {}

func (x *Currency) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[283]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Currency.ProtoReflect.Descriptor instead.
func (*Currency) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{283}
}

func (x *Currency) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Currency) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Currency) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Currency) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Currency) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Currency) GetAutoSync() bool {
	if x != nil {
		return x.AutoSync
	}
	return false
}

func (x *Currency) GetRate() float32 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *Currency) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Currency) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *Currency) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *Currency) GetLogs() []*CurrencyLogEntry {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *Currency) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

type CurrencyLogEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string  `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Updated   int64   `protobuf:"varint,4,opt,name=updated,proto3" json:"updated,omitempty"`
	Rate      float32 `protobuf:"fixed32,5,opt,name=rate,proto3" json:"rate,omitempty"`
	UpdatedBy string  `protobuf:"bytes,6,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
}

func (x *CurrencyLogEntry) Reset() {
	*x = CurrencyLogEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[284]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyLogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyLogEntry) ProtoMessage() {}

func (x *CurrencyLogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[284]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyLogEntry.ProtoReflect.Descriptor instead.
func (*CurrencyLogEntry) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{284}
}

func (x *CurrencyLogEntry) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CurrencyLogEntry) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *CurrencyLogEntry) GetRate() float32 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *CurrencyLogEntry) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

type ProductCollections struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx                *common.Context      `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	ProductCollections []*ProductCollection `protobuf:"bytes,2,rep,name=product_collections,json=productCollections,proto3" json:"product_collections,omitempty"`
	Anchor             string               `protobuf:"bytes,3,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Total              int64                `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ProductCollections) Reset() {
	*x = ProductCollections{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[285]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductCollections) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductCollections) ProtoMessage() {}

func (x *ProductCollections) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[285]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductCollections.ProtoReflect.Descriptor instead.
func (*ProductCollections) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{285}
}

func (x *ProductCollections) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ProductCollections) GetProductCollections() []*ProductCollection {
	if x != nil {
		return x.ProductCollections
	}
	return nil
}

func (x *ProductCollections) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *ProductCollections) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ProductCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Id        string          `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"` // use
	Name      string          `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Visiblity string          `protobuf:"bytes,5,opt,name=visiblity,proto3" json:"visiblity,omitempty"` // public || unpublished
	Code      string          `protobuf:"bytes,6,opt,name=code,proto3" json:"code,omitempty"`
	ItemIds   []string        `protobuf:"bytes,7,rep,name=item_ids,json=itemIds,proto3" json:"item_ids,omitempty"` // product ids
	Created   int64           `protobuf:"varint,11,opt,name=created,proto3" json:"created,omitempty"`
	CreatedBy string          `protobuf:"bytes,12,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	Updated   int64           `protobuf:"varint,13,opt,name=updated,proto3" json:"updated,omitempty"`
	UpdatedBy string          `protobuf:"bytes,14,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
}

func (x *ProductCollection) Reset() {
	*x = ProductCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[286]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductCollection) ProtoMessage() {}

func (x *ProductCollection) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[286]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductCollection.ProtoReflect.Descriptor instead.
func (*ProductCollection) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{286}
}

func (x *ProductCollection) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ProductCollection) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ProductCollection) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProductCollection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductCollection) GetVisiblity() string {
	if x != nil {
		return x.Visiblity
	}
	return ""
}

func (x *ProductCollection) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ProductCollection) GetItemIds() []string {
	if x != nil {
		return x.ItemIds
	}
	return nil
}

func (x *ProductCollection) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *ProductCollection) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *ProductCollection) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *ProductCollection) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

type PriceRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeedId    string  `protobuf:"bytes,4,opt,name=feed_id,json=feedId,proto3" json:"feed_id,omitempty"`
	Price     float32 `protobuf:"fixed32,5,opt,name=price,proto3" json:"price,omitempty"`
	FpvPrice  int64   `protobuf:"varint,6,opt,name=fpv_price,json=fpvPrice,proto3" json:"fpv_price,omitempty"`
	Currency  string  `protobuf:"bytes,8,opt,name=currency,proto3" json:"currency,omitempty"`
	FromCount int64   `protobuf:"varint,9,opt,name=from_count,json=fromCount,proto3" json:"from_count,omitempty"`
	ToCount   int64   `protobuf:"varint,10,opt,name=to_count,json=toCount,proto3" json:"to_count,omitempty"`
}

func (x *PriceRule) Reset() {
	*x = PriceRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[287]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceRule) ProtoMessage() {}

func (x *PriceRule) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[287]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceRule.ProtoReflect.Descriptor instead.
func (*PriceRule) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{287}
}

func (x *PriceRule) GetFeedId() string {
	if x != nil {
		return x.FeedId
	}
	return ""
}

func (x *PriceRule) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *PriceRule) GetFpvPrice() int64 {
	if x != nil {
		return x.FpvPrice
	}
	return 0
}

func (x *PriceRule) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *PriceRule) GetFromCount() int64 {
	if x != nil {
		return x.FromCount
	}
	return 0
}

func (x *PriceRule) GetToCount() int64 {
	if x != nil {
		return x.ToCount
	}
	return 0
}

type InventoryProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx          *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId    string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Id           string          `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"` // generated
	RefProduct   *Product        `protobuf:"bytes,4,opt,name=ref_product,json=refProduct,proto3" json:"ref_product,omitempty"`
	SerialNumber string          `protobuf:"bytes,8,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	Barcode      string          `protobuf:"bytes,9,opt,name=barcode,proto3" json:"barcode,omitempty"`
	OrderId      string          `protobuf:"bytes,10,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	Location     string          `protobuf:"bytes,11,opt,name=location,proto3" json:"location,omitempty"` // sold, wearhouse49, store424
	Props        []*KV           `protobuf:"bytes,14,rep,name=props,proto3" json:"props,omitempty"`       // Color:red, Size: XXS, Scent:Fruity CPU:i5 Storage:128GB
	Created      int64           `protobuf:"varint,20,opt,name=created,proto3" json:"created,omitempty"`
	Updated      int64           `protobuf:"varint,21,opt,name=updated,proto3" json:"updated,omitempty"`
	CreatedBy    string          `protobuf:"bytes,22,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	UpdatedBy    string          `protobuf:"bytes,23,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	SoldCurrency string          `protobuf:"bytes,24,opt,name=sold_currency,json=soldCurrency,proto3" json:"sold_currency,omitempty"`
	SoldPrice    float32         `protobuf:"fixed32,25,opt,name=sold_price,json=soldPrice,proto3" json:"sold_price,omitempty"`
	FpvSoldPrice int64           `protobuf:"varint,26,opt,name=fpv_sold_price,json=fpvSoldPrice,proto3" json:"fpv_sold_price,omitempty"`
	ExpiryDate   int64           `protobuf:"varint,30,opt,name=expiry_date,json=expiryDate,proto3" json:"expiry_date,omitempty"`
}

func (x *InventoryProduct) Reset() {
	*x = InventoryProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[288]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InventoryProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryProduct) ProtoMessage() {}

func (x *InventoryProduct) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[288]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryProduct.ProtoReflect.Descriptor instead.
func (*InventoryProduct) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{288}
}

func (x *InventoryProduct) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *InventoryProduct) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *InventoryProduct) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InventoryProduct) GetRefProduct() *Product {
	if x != nil {
		return x.RefProduct
	}
	return nil
}

func (x *InventoryProduct) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *InventoryProduct) GetBarcode() string {
	if x != nil {
		return x.Barcode
	}
	return ""
}

func (x *InventoryProduct) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *InventoryProduct) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *InventoryProduct) GetProps() []*KV {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *InventoryProduct) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *InventoryProduct) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *InventoryProduct) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *InventoryProduct) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *InventoryProduct) GetSoldCurrency() string {
	if x != nil {
		return x.SoldCurrency
	}
	return ""
}

func (x *InventoryProduct) GetSoldPrice() float32 {
	if x != nil {
		return x.SoldPrice
	}
	return 0
}

func (x *InventoryProduct) GetFpvSoldPrice() int64 {
	if x != nil {
		return x.FpvSoldPrice
	}
	return 0
}

func (x *InventoryProduct) GetExpiryDate() int64 {
	if x != nil {
		return x.ExpiryDate
	}
	return 0
}

type OrderItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId  string   `protobuf:"bytes,3,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	Id       string   `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	Quantity int32    `protobuf:"varint,10,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Product  *Product `protobuf:"bytes,11,opt,name=product,proto3" json:"product,omitempty"` // copy
	Note     string   `protobuf:"bytes,15,opt,name=note,proto3" json:"note,omitempty"`
	//  equal quantity*product.price - discount
	Total    float32 `protobuf:"fixed32,16,opt,name=total,proto3" json:"total,omitempty"`
	FpvTotal int64   `protobuf:"varint,17,opt,name=fpv_total,json=fpvTotal,proto3" json:"fpv_total,omitempty"`
	// discount before tax
	DiscountAmount     float32 `protobuf:"fixed32,20,opt,name=discount_amount,json=discountAmount,proto3" json:"discount_amount,omitempty"`
	FpvDiscountAmount  int64   `protobuf:"varint,21,opt,name=fpv_discount_amount,json=fpvDiscountAmount,proto3" json:"fpv_discount_amount,omitempty"`
	DiscountPercentage int64   `protobuf:"varint,23,opt,name=discount_percentage,json=discountPercentage,proto3" json:"discount_percentage,omitempty"` // 1234 => 12.34% = 0.1234
	PosId              string  `protobuf:"bytes,24,opt,name=pos_id,json=posId,proto3" json:"pos_id,omitempty"`
	Tax                *Tax    `protobuf:"bytes,25,opt,name=tax,proto3" json:"tax,omitempty"`
	DiscountType       string  `protobuf:"bytes,26,opt,name=discount_type,json=discountType,proto3" json:"discount_type,omitempty"` // percentage || amount
	TotalTax           float32 `protobuf:"fixed32,30,opt,name=total_tax,json=totalTax,proto3" json:"total_tax,omitempty"`           // computed, override value
	FpvTotalTax        int64   `protobuf:"varint,31,opt,name=fpv_total_tax,json=fpvTotalTax,proto3" json:"fpv_total_tax,omitempty"` // computed, override value
}

func (x *OrderItem) Reset() {
	*x = OrderItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[289]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderItem) ProtoMessage() {}

func (x *OrderItem) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[289]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderItem.ProtoReflect.Descriptor instead.
func (*OrderItem) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{289}
}

func (x *OrderItem) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *OrderItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OrderItem) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *OrderItem) GetProduct() *Product {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *OrderItem) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *OrderItem) GetTotal() float32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *OrderItem) GetFpvTotal() int64 {
	if x != nil {
		return x.FpvTotal
	}
	return 0
}

func (x *OrderItem) GetDiscountAmount() float32 {
	if x != nil {
		return x.DiscountAmount
	}
	return 0
}

func (x *OrderItem) GetFpvDiscountAmount() int64 {
	if x != nil {
		return x.FpvDiscountAmount
	}
	return 0
}

func (x *OrderItem) GetDiscountPercentage() int64 {
	if x != nil {
		return x.DiscountPercentage
	}
	return 0
}

func (x *OrderItem) GetPosId() string {
	if x != nil {
		return x.PosId
	}
	return ""
}

func (x *OrderItem) GetTax() *Tax {
	if x != nil {
		return x.Tax
	}
	return nil
}

func (x *OrderItem) GetDiscountType() string {
	if x != nil {
		return x.DiscountType
	}
	return ""
}

func (x *OrderItem) GetTotalTax() float32 {
	if x != nil {
		return x.TotalTax
	}
	return 0
}

func (x *OrderItem) GetFpvTotalTax() int64 {
	if x != nil {
		return x.FpvTotalTax
	}
	return 0
}

type GHNAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProvinceID   int64  `protobuf:"varint,2,opt,name=ProvinceID,proto3" json:"ProvinceID,omitempty"`
	ProvinceName string `protobuf:"bytes,3,opt,name=ProvinceName,proto3" json:"ProvinceName,omitempty"`
	DistrictID   int64  `protobuf:"varint,4,opt,name=DistrictID,proto3" json:"DistrictID,omitempty"`
	DistrictName string `protobuf:"bytes,5,opt,name=DistrictName,proto3" json:"DistrictName,omitempty"`
	Code         int64  `protobuf:"varint,6,opt,name=Code,proto3" json:"Code,omitempty"`
	WardName     string `protobuf:"bytes,7,opt,name=WardName,proto3" json:"WardName,omitempty"`
	WardCode     string `protobuf:"bytes,8,opt,name=WardCode,proto3" json:"WardCode,omitempty"`
}

func (x *GHNAddress) Reset() {
	*x = GHNAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[290]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GHNAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GHNAddress) ProtoMessage() {}

func (x *GHNAddress) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[290]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GHNAddress.ProtoReflect.Descriptor instead.
func (*GHNAddress) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{290}
}

func (x *GHNAddress) GetProvinceID() int64 {
	if x != nil {
		return x.ProvinceID
	}
	return 0
}

func (x *GHNAddress) GetProvinceName() string {
	if x != nil {
		return x.ProvinceName
	}
	return ""
}

func (x *GHNAddress) GetDistrictID() int64 {
	if x != nil {
		return x.DistrictID
	}
	return 0
}

func (x *GHNAddress) GetDistrictName() string {
	if x != nil {
		return x.DistrictName
	}
	return ""
}

func (x *GHNAddress) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GHNAddress) GetWardName() string {
	if x != nil {
		return x.WardName
	}
	return ""
}

func (x *GHNAddress) GetWardCode() string {
	if x != nil {
		return x.WardCode
	}
	return ""
}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx         *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId   string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	UserId      string          `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Id          string          `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	Fullname    string          `protobuf:"bytes,5,opt,name=fullname,proto3" json:"fullname,omitempty"`
	Email       string          `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	Phone       string          `protobuf:"bytes,7,opt,name=phone,proto3" json:"phone,omitempty"`
	Street      string          `protobuf:"bytes,8,opt,name=street,proto3" json:"street,omitempty"`
	Ward        string          `protobuf:"bytes,9,opt,name=ward,proto3" json:"ward,omitempty"`
	District    string          `protobuf:"bytes,10,opt,name=district,proto3" json:"district,omitempty"`
	Region      string          `protobuf:"bytes,11,opt,name=region,proto3" json:"region,omitempty"` // city
	CountryCode string          `protobuf:"bytes,12,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	Address     string          `protobuf:"bytes,27,opt,name=address,proto3" json:"address,omitempty"`
	FullAddress string          `protobuf:"bytes,13,opt,name=full_address,json=fullAddress,proto3" json:"full_address,omitempty"` // read only
	Created     int64           `protobuf:"varint,14,opt,name=created,proto3" json:"created,omitempty"`
	CreatedBy   string          `protobuf:"bytes,15,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	Updated     int64           `protobuf:"varint,16,opt,name=updated,proto3" json:"updated,omitempty"`
	UpdatedBy   string          `protobuf:"bytes,17,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// use input
	Instruction string  `protobuf:"bytes,18,opt,name=instruction,proto3" json:"instruction,omitempty"`
	Lng         float32 `protobuf:"fixed32,19,opt,name=lng,proto3" json:"lng,omitempty"`
	Lat         float32 `protobuf:"fixed32,20,opt,name=lat,proto3" json:"lat,omitempty"`
	IsDefault   bool    `protobuf:"varint,21,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
	// for U.S
	State                string      `protobuf:"bytes,22,opt,name=state,proto3" json:"state,omitempty"`
	PostalCode           string      `protobuf:"bytes,23,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	City                 string      `protobuf:"bytes,24,opt,name=city,proto3" json:"city,omitempty"`
	Country              string      `protobuf:"bytes,25,opt,name=country,proto3" json:"country,omitempty"`
	Province             string      `protobuf:"bytes,26,opt,name=province,proto3" json:"province,omitempty"`
	Score                float32     `protobuf:"fixed32,29,opt,name=score,proto3" json:"score,omitempty"`
	ProvinceId           string      `protobuf:"bytes,30,opt,name=province_id,json=provinceId,proto3" json:"province_id,omitempty"`
	DistrictId           string      `protobuf:"bytes,31,opt,name=district_id,json=districtId,proto3" json:"district_id,omitempty"`
	WardId               string      `protobuf:"bytes,32,opt,name=ward_id,json=wardId,proto3" json:"ward_id,omitempty"`
	StreetId             string      `protobuf:"bytes,33,opt,name=street_id,json=streetId,proto3" json:"street_id,omitempty"`
	Ghn                  *GHNAddress `protobuf:"bytes,35,opt,name=ghn,proto3" json:"ghn,omitempty"`
	Ghtk                 *Address    `protobuf:"bytes,36,opt,name=ghtk,proto3" json:"ghtk,omitempty"`
	Description          string      `protobuf:"bytes,40,opt,name=description,proto3" json:"description,omitempty"`
	Deleted              int64       `protobuf:"varint,41,opt,name=deleted,proto3" json:"deleted,omitempty"`
	IsWarehouse          bool        `protobuf:"varint,42,opt,name=is_warehouse,json=isWarehouse,proto3" json:"is_warehouse,omitempty"`
	IsPointOfSale        bool        `protobuf:"varint,43,opt,name=is_point_of_sale,json=isPointOfSale,proto3" json:"is_point_of_sale,omitempty"`
	FromShippingProvider string      `protobuf:"bytes,44,opt,name=from_shipping_provider,json=fromShippingProvider,proto3" json:"from_shipping_provider,omitempty"` // ghtk, ghn, ahamove, viettelpost, shipchung, ninjavan, grabexpress, ahamove, hcmpost, vnpost, jntexpress, supership, heyu
	FromShippingShopId   string      `protobuf:"bytes,45,opt,name=from_shipping_shop_id,json=fromShippingShopId,proto3" json:"from_shipping_shop_id,omitempty"`
	LastIntegrated       int64       `protobuf:"varint,46,opt,name=last_integrated,json=lastIntegrated,proto3" json:"last_integrated,omitempty"`
	Title                string      `protobuf:"bytes,47,opt,name=title,proto3" json:"title,omitempty"` // for shop address
	Name                 string      `protobuf:"bytes,48,opt,name=name,proto3" json:"name,omitempty"`   // addrdb
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[291]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[291]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{291}
}

func (x *Address) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Address) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Address) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Address) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Address) GetFullname() string {
	if x != nil {
		return x.Fullname
	}
	return ""
}

func (x *Address) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Address) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *Address) GetStreet() string {
	if x != nil {
		return x.Street
	}
	return ""
}

func (x *Address) GetWard() string {
	if x != nil {
		return x.Ward
	}
	return ""
}

func (x *Address) GetDistrict() string {
	if x != nil {
		return x.District
	}
	return ""
}

func (x *Address) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Address) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *Address) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Address) GetFullAddress() string {
	if x != nil {
		return x.FullAddress
	}
	return ""
}

func (x *Address) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Address) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *Address) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *Address) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *Address) GetInstruction() string {
	if x != nil {
		return x.Instruction
	}
	return ""
}

func (x *Address) GetLng() float32 {
	if x != nil {
		return x.Lng
	}
	return 0
}

func (x *Address) GetLat() float32 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *Address) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *Address) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Address) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *Address) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Address) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Address) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *Address) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Address) GetProvinceId() string {
	if x != nil {
		return x.ProvinceId
	}
	return ""
}

func (x *Address) GetDistrictId() string {
	if x != nil {
		return x.DistrictId
	}
	return ""
}

func (x *Address) GetWardId() string {
	if x != nil {
		return x.WardId
	}
	return ""
}

func (x *Address) GetStreetId() string {
	if x != nil {
		return x.StreetId
	}
	return ""
}

func (x *Address) GetGhn() *GHNAddress {
	if x != nil {
		return x.Ghn
	}
	return nil
}

func (x *Address) GetGhtk() *Address {
	if x != nil {
		return x.Ghtk
	}
	return nil
}

func (x *Address) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Address) GetDeleted() int64 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

func (x *Address) GetIsWarehouse() bool {
	if x != nil {
		return x.IsWarehouse
	}
	return false
}

func (x *Address) GetIsPointOfSale() bool {
	if x != nil {
		return x.IsPointOfSale
	}
	return false
}

func (x *Address) GetFromShippingProvider() string {
	if x != nil {
		return x.FromShippingProvider
	}
	return ""
}

func (x *Address) GetFromShippingShopId() string {
	if x != nil {
		return x.FromShippingShopId
	}
	return ""
}

func (x *Address) GetLastIntegrated() int64 {
	if x != nil {
		return x.LastIntegrated
	}
	return 0
}

func (x *Address) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Address) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GHNOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientOrderCode      string          `protobuf:"bytes,2,opt,name=client_order_code,json=clientOrderCode,proto3" json:"client_order_code,omitempty"`
	ShopId               int64           `protobuf:"varint,3,opt,name=shop_id,json=shopId,proto3" json:"shop_id,omitempty"`
	OrderCode            string          `protobuf:"bytes,4,opt,name=order_code,json=orderCode,proto3" json:"order_code,omitempty"`
	ServiceTypeId        int32           `protobuf:"varint,5,opt,name=service_type_id,json=serviceTypeId,proto3" json:"service_type_id,omitempty"`
	ServiceId            int32           `protobuf:"varint,6,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	PaymentTypeId        int32           `protobuf:"varint,7,opt,name=payment_type_id,json=paymentTypeId,proto3" json:"payment_type_id,omitempty"`
	RequiredNote         string          `protobuf:"bytes,8,opt,name=required_note,json=requiredNote,proto3" json:"required_note,omitempty"`
	PickShift            []int32         `protobuf:"varint,38,rep,packed,name=pick_shift,json=pickShift,proto3" json:"pick_shift,omitempty"`
	ToName               string          `protobuf:"bytes,9,opt,name=to_name,json=toName,proto3" json:"to_name,omitempty"`
	ToPhone              string          `protobuf:"bytes,10,opt,name=to_phone,json=toPhone,proto3" json:"to_phone,omitempty"`
	ToAddress            string          `protobuf:"bytes,11,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	ToWardCode           string          `protobuf:"bytes,12,opt,name=to_ward_code,json=toWardCode,proto3" json:"to_ward_code,omitempty"`
	ToDistrictId         int64           `protobuf:"varint,13,opt,name=to_district_id,json=toDistrictId,proto3" json:"to_district_id,omitempty"`
	PickStationId        int64           `protobuf:"varint,14,opt,name=pick_station_id,json=pickStationId,proto3" json:"pick_station_id,omitempty"`
	FromName             string          `protobuf:"bytes,33,opt,name=from_name,json=fromName,proto3" json:"from_name,omitempty"`
	FromPhone            string          `protobuf:"bytes,34,opt,name=from_phone,json=fromPhone,proto3" json:"from_phone,omitempty"`
	FromAddress          string          `protobuf:"bytes,35,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	FromWardCode         string          `protobuf:"bytes,36,opt,name=from_ward_code,json=fromWardCode,proto3" json:"from_ward_code,omitempty"`
	FromDistrictId       int64           `protobuf:"varint,37,opt,name=from_district_id,json=fromDistrictId,proto3" json:"from_district_id,omitempty"`
	Items                []*GHNOrderItem `protobuf:"bytes,15,rep,name=items,proto3" json:"items,omitempty"`
	Weight               int64           `protobuf:"varint,16,opt,name=weight,proto3" json:"weight,omitempty"`
	Length               int64           `protobuf:"varint,17,opt,name=length,proto3" json:"length,omitempty"`
	Width                int64           `protobuf:"varint,18,opt,name=width,proto3" json:"width,omitempty"`
	Height               int64           `protobuf:"varint,19,opt,name=height,proto3" json:"height,omitempty"`
	CodAmount            int64           `protobuf:"varint,20,opt,name=cod_amount,json=codAmount,proto3" json:"cod_amount,omitempty"`
	InsuranceValue       int64           `protobuf:"varint,21,opt,name=insurance_value,json=insuranceValue,proto3" json:"insurance_value,omitempty"`
	Coupon               string          `protobuf:"bytes,22,opt,name=coupon,proto3" json:"coupon,omitempty"`
	ReturnPhone          string          `protobuf:"bytes,23,opt,name=return_phone,json=returnPhone,proto3" json:"return_phone,omitempty"`
	ReturnAddress        string          `protobuf:"bytes,24,opt,name=return_address,json=returnAddress,proto3" json:"return_address,omitempty"`
	ReturnDistrictId     int64           `protobuf:"varint,25,opt,name=return_district_id,json=returnDistrictId,proto3" json:"return_district_id,omitempty"`
	ReturnWardCode       string          `protobuf:"bytes,26,opt,name=return_ward_code,json=returnWardCode,proto3" json:"return_ward_code,omitempty"`
	Content              string          `protobuf:"bytes,27,opt,name=content,proto3" json:"content,omitempty"`
	Note                 string          `protobuf:"bytes,28,opt,name=note,proto3" json:"note,omitempty"`
	TotalFee             int64           `protobuf:"varint,29,opt,name=total_fee,json=totalFee,proto3" json:"total_fee,omitempty"`
	Total                int64           `protobuf:"varint,32,opt,name=total,proto3" json:"total,omitempty"` // fee
	ExpectedDeliveryTime string          `protobuf:"bytes,30,opt,name=expected_delivery_time,json=expectedDeliveryTime,proto3" json:"expected_delivery_time,omitempty"`
	Status               string          `protobuf:"bytes,31,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GHNOrder) Reset() {
	*x = GHNOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[292]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GHNOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GHNOrder) ProtoMessage() {}

func (x *GHNOrder) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[292]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GHNOrder.ProtoReflect.Descriptor instead.
func (*GHNOrder) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{292}
}

func (x *GHNOrder) GetClientOrderCode() string {
	if x != nil {
		return x.ClientOrderCode
	}
	return ""
}

func (x *GHNOrder) GetShopId() int64 {
	if x != nil {
		return x.ShopId
	}
	return 0
}

func (x *GHNOrder) GetOrderCode() string {
	if x != nil {
		return x.OrderCode
	}
	return ""
}

func (x *GHNOrder) GetServiceTypeId() int32 {
	if x != nil {
		return x.ServiceTypeId
	}
	return 0
}

func (x *GHNOrder) GetServiceId() int32 {
	if x != nil {
		return x.ServiceId
	}
	return 0
}

func (x *GHNOrder) GetPaymentTypeId() int32 {
	if x != nil {
		return x.PaymentTypeId
	}
	return 0
}

func (x *GHNOrder) GetRequiredNote() string {
	if x != nil {
		return x.RequiredNote
	}
	return ""
}

func (x *GHNOrder) GetPickShift() []int32 {
	if x != nil {
		return x.PickShift
	}
	return nil
}

func (x *GHNOrder) GetToName() string {
	if x != nil {
		return x.ToName
	}
	return ""
}

func (x *GHNOrder) GetToPhone() string {
	if x != nil {
		return x.ToPhone
	}
	return ""
}

func (x *GHNOrder) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *GHNOrder) GetToWardCode() string {
	if x != nil {
		return x.ToWardCode
	}
	return ""
}

func (x *GHNOrder) GetToDistrictId() int64 {
	if x != nil {
		return x.ToDistrictId
	}
	return 0
}

func (x *GHNOrder) GetPickStationId() int64 {
	if x != nil {
		return x.PickStationId
	}
	return 0
}

func (x *GHNOrder) GetFromName() string {
	if x != nil {
		return x.FromName
	}
	return ""
}

func (x *GHNOrder) GetFromPhone() string {
	if x != nil {
		return x.FromPhone
	}
	return ""
}

func (x *GHNOrder) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *GHNOrder) GetFromWardCode() string {
	if x != nil {
		return x.FromWardCode
	}
	return ""
}

func (x *GHNOrder) GetFromDistrictId() int64 {
	if x != nil {
		return x.FromDistrictId
	}
	return 0
}

func (x *GHNOrder) GetItems() []*GHNOrderItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *GHNOrder) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *GHNOrder) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *GHNOrder) GetWidth() int64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *GHNOrder) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *GHNOrder) GetCodAmount() int64 {
	if x != nil {
		return x.CodAmount
	}
	return 0
}

func (x *GHNOrder) GetInsuranceValue() int64 {
	if x != nil {
		return x.InsuranceValue
	}
	return 0
}

func (x *GHNOrder) GetCoupon() string {
	if x != nil {
		return x.Coupon
	}
	return ""
}

func (x *GHNOrder) GetReturnPhone() string {
	if x != nil {
		return x.ReturnPhone
	}
	return ""
}

func (x *GHNOrder) GetReturnAddress() string {
	if x != nil {
		return x.ReturnAddress
	}
	return ""
}

func (x *GHNOrder) GetReturnDistrictId() int64 {
	if x != nil {
		return x.ReturnDistrictId
	}
	return 0
}

func (x *GHNOrder) GetReturnWardCode() string {
	if x != nil {
		return x.ReturnWardCode
	}
	return ""
}

func (x *GHNOrder) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *GHNOrder) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *GHNOrder) GetTotalFee() int64 {
	if x != nil {
		return x.TotalFee
	}
	return 0
}

func (x *GHNOrder) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GHNOrder) GetExpectedDeliveryTime() string {
	if x != nil {
		return x.ExpectedDeliveryTime
	}
	return ""
}

func (x *GHNOrder) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// webhook
type GHNOrder2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId       string `protobuf:"bytes,10,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"` // only subiz
	ShopID          int64  `protobuf:"varint,2,opt,name=ShopID,proto3" json:"ShopID,omitempty"`
	ClientOrderCode string `protobuf:"bytes,3,opt,name=ClientOrderCode,proto3" json:"ClientOrderCode,omitempty"`
	OrderCode       string `protobuf:"bytes,4,opt,name=OrderCode,proto3" json:"OrderCode,omitempty"`
	TotalFee        int64  `protobuf:"varint,5,opt,name=TotalFee,proto3" json:"TotalFee,omitempty"`
	Time            string `protobuf:"bytes,6,opt,name=Time,proto3" json:"Time,omitempty"`
	Status          string `protobuf:"bytes,7,opt,name=Status,proto3" json:"Status,omitempty"`
	ShipperName     string `protobuf:"bytes,8,opt,name=ShipperName,proto3" json:"ShipperName,omitempty"`
	ShipperPhone    string `protobuf:"bytes,9,opt,name=ShipperPhone,proto3" json:"ShipperPhone,omitempty"`
}

func (x *GHNOrder2) Reset() {
	*x = GHNOrder2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[293]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GHNOrder2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GHNOrder2) ProtoMessage() {}

func (x *GHNOrder2) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[293]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GHNOrder2.ProtoReflect.Descriptor instead.
func (*GHNOrder2) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{293}
}

func (x *GHNOrder2) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GHNOrder2) GetShopID() int64 {
	if x != nil {
		return x.ShopID
	}
	return 0
}

func (x *GHNOrder2) GetClientOrderCode() string {
	if x != nil {
		return x.ClientOrderCode
	}
	return ""
}

func (x *GHNOrder2) GetOrderCode() string {
	if x != nil {
		return x.OrderCode
	}
	return ""
}

func (x *GHNOrder2) GetTotalFee() int64 {
	if x != nil {
		return x.TotalFee
	}
	return 0
}

func (x *GHNOrder2) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *GHNOrder2) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GHNOrder2) GetShipperName() string {
	if x != nil {
		return x.ShipperName
	}
	return ""
}

func (x *GHNOrder2) GetShipperPhone() string {
	if x != nil {
		return x.ShipperPhone
	}
	return ""
}

type GHNOrderItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Weight   int64  `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	Quantity int32  `protobuf:"varint,3,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Name     string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Code     string `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"`
	Price    int64  `protobuf:"varint,6,opt,name=price,proto3" json:"price,omitempty"`
	Length   int64  `protobuf:"varint,7,opt,name=length,proto3" json:"length,omitempty"`
	Width    int64  `protobuf:"varint,8,opt,name=width,proto3" json:"width,omitempty"`
	Height   int64  `protobuf:"varint,9,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *GHNOrderItem) Reset() {
	*x = GHNOrderItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[294]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GHNOrderItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GHNOrderItem) ProtoMessage() {}

func (x *GHNOrderItem) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[294]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GHNOrderItem.ProtoReflect.Descriptor instead.
func (*GHNOrderItem) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{294}
}

func (x *GHNOrderItem) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *GHNOrderItem) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *GHNOrderItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GHNOrderItem) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GHNOrderItem) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *GHNOrderItem) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *GHNOrderItem) GetWidth() int64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *GHNOrderItem) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

type GHTKOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId            string  `protobuf:"bytes,55,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"` // only subiz
	Id                   string  `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	PartnerId            string  `protobuf:"bytes,3,opt,name=partner_id,json=partnerId,proto3" json:"partner_id,omitempty"` // is id
	Label                string  `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
	LabelId              string  `protobuf:"bytes,5,opt,name=label_id,json=labelId,proto3" json:"label_id,omitempty"` // is label
	StatusId             int32   `protobuf:"varint,6,opt,name=status_id,json=statusId,proto3" json:"status_id,omitempty"`
	Status               int32   `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
	StatusText           string  `protobuf:"bytes,8,opt,name=status_text,json=statusText,proto3" json:"status_text,omitempty"`
	Created              string  `protobuf:"bytes,9,opt,name=created,proto3" json:"created,omitempty"`
	Modified             string  `protobuf:"bytes,10,opt,name=modified,proto3" json:"modified,omitempty"`
	Expired              string  `protobuf:"bytes,11,opt,name=expired,proto3" json:"expired,omitempty"`
	ActionTime           string  `protobuf:"bytes,12,opt,name=action_time,json=actionTime,proto3" json:"action_time,omitempty"`
	ReasonCode           string  `protobuf:"bytes,13,opt,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
	Reason               string  `protobuf:"bytes,14,opt,name=reason,proto3" json:"reason,omitempty"`
	WeightOption         string  `protobuf:"bytes,59,opt,name=weight_option,json=weightOption,proto3" json:"weight_option,omitempty"`
	TotalWeight          float32 `protobuf:"fixed32,60,opt,name=total_weight,json=totalWeight,proto3" json:"total_weight,omitempty"`
	Weight               float32 `protobuf:"fixed32,15,opt,name=weight,proto3" json:"weight,omitempty"`
	Area                 int32   `protobuf:"varint,16,opt,name=area,proto3" json:"area,omitempty"` // goi cuoc tinh fee
	Fee                  int64   `protobuf:"varint,17,opt,name=fee,proto3" json:"fee,omitempty"`
	Value                int64   `protobuf:"varint,18,opt,name=value,proto3" json:"value,omitempty"` // gia tri dong bao hiem
	PickMoney            int64   `protobuf:"varint,19,opt,name=pick_money,json=pickMoney,proto3" json:"pick_money,omitempty"`
	IsFreeship           int32   `protobuf:"varint,20,opt,name=is_freeship,json=isFreeship,proto3" json:"is_freeship,omitempty"`
	Insurance            int64   `protobuf:"varint,21,opt,name=insurance,proto3" json:"insurance,omitempty"`
	InsuranceFee         int64   `protobuf:"varint,22,opt,name=insurance_fee,json=insuranceFee,proto3" json:"insurance_fee,omitempty"`
	ShipMoney            int64   `protobuf:"varint,23,opt,name=ship_money,json=shipMoney,proto3" json:"ship_money,omitempty"`
	ReturnPartPackage    int32   `protobuf:"varint,24,opt,name=return_part_package,json=returnPartPackage,proto3" json:"return_part_package,omitempty"`
	Transport            string  `protobuf:"bytes,25,opt,name=transport,proto3" json:"transport,omitempty"`
	PickOption           string  `protobuf:"bytes,26,opt,name=pick_option,json=pickOption,proto3" json:"pick_option,omitempty"`
	DeliverOption        string  `protobuf:"bytes,27,opt,name=deliver_option,json=deliverOption,proto3" json:"deliver_option,omitempty"`
	PickSession          string  `protobuf:"bytes,28,opt,name=pick_session,json=pickSession,proto3" json:"pick_session,omitempty"`
	EstimatedPickTime    string  `protobuf:"bytes,29,opt,name=estimated_pick_time,json=estimatedPickTime,proto3" json:"estimated_pick_time,omitempty"`
	EstimatedDeliverTime string  `protobuf:"bytes,30,opt,name=estimated_deliver_time,json=estimatedDeliverTime,proto3" json:"estimated_deliver_time,omitempty"`
	DeliverDate          string  `protobuf:"bytes,31,opt,name=deliver_date,json=deliverDate,proto3" json:"deliver_date,omitempty"`
	DeliverWorkShift     int64   `protobuf:"varint,32,opt,name=deliver_work_shift,json=deliverWorkShift,proto3" json:"deliver_work_shift,omitempty"`
	PickWorkShift        int64   `protobuf:"varint,33,opt,name=pick_work_shift,json=pickWorkShift,proto3" json:"pick_work_shift,omitempty"`
	StorageDay           int32   `protobuf:"varint,34,opt,name=storage_day,json=storageDay,proto3" json:"storage_day,omitempty"`
	PickAddressId        string  `protobuf:"bytes,61,opt,name=pick_address_id,json=pickAddressId,proto3" json:"pick_address_id,omitempty"`
	PickName             string  `protobuf:"bytes,35,opt,name=pick_name,json=pickName,proto3" json:"pick_name,omitempty"`
	PickTel              string  `protobuf:"bytes,36,opt,name=pick_tel,json=pickTel,proto3" json:"pick_tel,omitempty"`
	PickEmail            string  `protobuf:"bytes,57,opt,name=pick_email,json=pickEmail,proto3" json:"pick_email,omitempty"`
	PickAddress          string  `protobuf:"bytes,37,opt,name=pick_address,json=pickAddress,proto3" json:"pick_address,omitempty"`
	PickProvince         string  `protobuf:"bytes,38,opt,name=pick_province,json=pickProvince,proto3" json:"pick_province,omitempty"`
	PickDistrict         string  `protobuf:"bytes,39,opt,name=pick_district,json=pickDistrict,proto3" json:"pick_district,omitempty"`
	PickWard             string  `protobuf:"bytes,40,opt,name=pick_ward,json=pickWard,proto3" json:"pick_ward,omitempty"`
	PickStreet           string  `protobuf:"bytes,56,opt,name=pick_street,json=pickStreet,proto3" json:"pick_street,omitempty"`
	PickDate             string  `protobuf:"bytes,41,opt,name=pick_date,json=pickDate,proto3" json:"pick_date,omitempty"`
	Name                 string  `protobuf:"bytes,42,opt,name=name,proto3" json:"name,omitempty"`
	CustomerFullname     string  `protobuf:"bytes,43,opt,name=customer_fullname,json=customerFullname,proto3" json:"customer_fullname,omitempty"` // is name
	Tel                  string  `protobuf:"bytes,44,opt,name=tel,proto3" json:"tel,omitempty"`
	Email                string  `protobuf:"bytes,58,opt,name=email,proto3" json:"email,omitempty"`
	CustomerTel          string  `protobuf:"bytes,45,opt,name=customer_tel,json=customerTel,proto3" json:"customer_tel,omitempty"` // is tell
	Address              string  `protobuf:"bytes,46,opt,name=address,proto3" json:"address,omitempty"`
	Province             string  `protobuf:"bytes,47,opt,name=province,proto3" json:"province,omitempty"`
	District             string  `protobuf:"bytes,48,opt,name=district,proto3" json:"district,omitempty"`
	Ward                 string  `protobuf:"bytes,49,opt,name=ward,proto3" json:"ward,omitempty"`
	Street               string  `protobuf:"bytes,50,opt,name=street,proto3" json:"street,omitempty"`
	Hamlet               string  `protobuf:"bytes,51,opt,name=hamlet,proto3" json:"hamlet,omitempty"`
	Note                 string  `protobuf:"bytes,52,opt,name=note,proto3" json:"note,omitempty"`
	Message              string  `protobuf:"bytes,53,opt,name=message,proto3" json:"message,omitempty"`
	Tags                 []int32 `protobuf:"varint,54,rep,packed,name=tags,proto3" json:"tags,omitempty"`
}

func (x *GHTKOrder) Reset() {
	*x = GHTKOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[295]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GHTKOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GHTKOrder) ProtoMessage() {}

func (x *GHTKOrder) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[295]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GHTKOrder.ProtoReflect.Descriptor instead.
func (*GHTKOrder) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{295}
}

func (x *GHTKOrder) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GHTKOrder) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GHTKOrder) GetPartnerId() string {
	if x != nil {
		return x.PartnerId
	}
	return ""
}

func (x *GHTKOrder) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *GHTKOrder) GetLabelId() string {
	if x != nil {
		return x.LabelId
	}
	return ""
}

func (x *GHTKOrder) GetStatusId() int32 {
	if x != nil {
		return x.StatusId
	}
	return 0
}

func (x *GHTKOrder) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GHTKOrder) GetStatusText() string {
	if x != nil {
		return x.StatusText
	}
	return ""
}

func (x *GHTKOrder) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *GHTKOrder) GetModified() string {
	if x != nil {
		return x.Modified
	}
	return ""
}

func (x *GHTKOrder) GetExpired() string {
	if x != nil {
		return x.Expired
	}
	return ""
}

func (x *GHTKOrder) GetActionTime() string {
	if x != nil {
		return x.ActionTime
	}
	return ""
}

func (x *GHTKOrder) GetReasonCode() string {
	if x != nil {
		return x.ReasonCode
	}
	return ""
}

func (x *GHTKOrder) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *GHTKOrder) GetWeightOption() string {
	if x != nil {
		return x.WeightOption
	}
	return ""
}

func (x *GHTKOrder) GetTotalWeight() float32 {
	if x != nil {
		return x.TotalWeight
	}
	return 0
}

func (x *GHTKOrder) GetWeight() float32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *GHTKOrder) GetArea() int32 {
	if x != nil {
		return x.Area
	}
	return 0
}

func (x *GHTKOrder) GetFee() int64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *GHTKOrder) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *GHTKOrder) GetPickMoney() int64 {
	if x != nil {
		return x.PickMoney
	}
	return 0
}

func (x *GHTKOrder) GetIsFreeship() int32 {
	if x != nil {
		return x.IsFreeship
	}
	return 0
}

func (x *GHTKOrder) GetInsurance() int64 {
	if x != nil {
		return x.Insurance
	}
	return 0
}

func (x *GHTKOrder) GetInsuranceFee() int64 {
	if x != nil {
		return x.InsuranceFee
	}
	return 0
}

func (x *GHTKOrder) GetShipMoney() int64 {
	if x != nil {
		return x.ShipMoney
	}
	return 0
}

func (x *GHTKOrder) GetReturnPartPackage() int32 {
	if x != nil {
		return x.ReturnPartPackage
	}
	return 0
}

func (x *GHTKOrder) GetTransport() string {
	if x != nil {
		return x.Transport
	}
	return ""
}

func (x *GHTKOrder) GetPickOption() string {
	if x != nil {
		return x.PickOption
	}
	return ""
}

func (x *GHTKOrder) GetDeliverOption() string {
	if x != nil {
		return x.DeliverOption
	}
	return ""
}

func (x *GHTKOrder) GetPickSession() string {
	if x != nil {
		return x.PickSession
	}
	return ""
}

func (x *GHTKOrder) GetEstimatedPickTime() string {
	if x != nil {
		return x.EstimatedPickTime
	}
	return ""
}

func (x *GHTKOrder) GetEstimatedDeliverTime() string {
	if x != nil {
		return x.EstimatedDeliverTime
	}
	return ""
}

func (x *GHTKOrder) GetDeliverDate() string {
	if x != nil {
		return x.DeliverDate
	}
	return ""
}

func (x *GHTKOrder) GetDeliverWorkShift() int64 {
	if x != nil {
		return x.DeliverWorkShift
	}
	return 0
}

func (x *GHTKOrder) GetPickWorkShift() int64 {
	if x != nil {
		return x.PickWorkShift
	}
	return 0
}

func (x *GHTKOrder) GetStorageDay() int32 {
	if x != nil {
		return x.StorageDay
	}
	return 0
}

func (x *GHTKOrder) GetPickAddressId() string {
	if x != nil {
		return x.PickAddressId
	}
	return ""
}

func (x *GHTKOrder) GetPickName() string {
	if x != nil {
		return x.PickName
	}
	return ""
}

func (x *GHTKOrder) GetPickTel() string {
	if x != nil {
		return x.PickTel
	}
	return ""
}

func (x *GHTKOrder) GetPickEmail() string {
	if x != nil {
		return x.PickEmail
	}
	return ""
}

func (x *GHTKOrder) GetPickAddress() string {
	if x != nil {
		return x.PickAddress
	}
	return ""
}

func (x *GHTKOrder) GetPickProvince() string {
	if x != nil {
		return x.PickProvince
	}
	return ""
}

func (x *GHTKOrder) GetPickDistrict() string {
	if x != nil {
		return x.PickDistrict
	}
	return ""
}

func (x *GHTKOrder) GetPickWard() string {
	if x != nil {
		return x.PickWard
	}
	return ""
}

func (x *GHTKOrder) GetPickStreet() string {
	if x != nil {
		return x.PickStreet
	}
	return ""
}

func (x *GHTKOrder) GetPickDate() string {
	if x != nil {
		return x.PickDate
	}
	return ""
}

func (x *GHTKOrder) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GHTKOrder) GetCustomerFullname() string {
	if x != nil {
		return x.CustomerFullname
	}
	return ""
}

func (x *GHTKOrder) GetTel() string {
	if x != nil {
		return x.Tel
	}
	return ""
}

func (x *GHTKOrder) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *GHTKOrder) GetCustomerTel() string {
	if x != nil {
		return x.CustomerTel
	}
	return ""
}

func (x *GHTKOrder) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GHTKOrder) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *GHTKOrder) GetDistrict() string {
	if x != nil {
		return x.District
	}
	return ""
}

func (x *GHTKOrder) GetWard() string {
	if x != nil {
		return x.Ward
	}
	return ""
}

func (x *GHTKOrder) GetStreet() string {
	if x != nil {
		return x.Street
	}
	return ""
}

func (x *GHTKOrder) GetHamlet() string {
	if x != nil {
		return x.Hamlet
	}
	return ""
}

func (x *GHTKOrder) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *GHTKOrder) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GHTKOrder) GetTags() []int32 {
	if x != nil {
		return x.Tags
	}
	return nil
}

type ShippingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address       *Address `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	PickupAddress *Address `protobuf:"bytes,4,opt,name=pickup_address,json=pickupAddress,proto3" json:"pickup_address,omitempty"`
	DeliverDate   int64    `protobuf:"varint,6,opt,name=deliver_date,json=deliverDate,proto3" json:"deliver_date,omitempty"` // unix ms
	PickupDate    int64    `protobuf:"varint,7,opt,name=pickup_date,json=pickupDate,proto3" json:"pickup_date,omitempty"`    // unix ms 0 => ASAP
	Fee           float32  `protobuf:"fixed32,10,opt,name=fee,proto3" json:"fee,omitempty"`
	FpvFee        int64    `protobuf:"varint,11,opt,name=fpv_fee,json=fpvFee,proto3" json:"fpv_fee,omitempty"`
	NominalFee    float32  `protobuf:"fixed32,9,opt,name=nominal_fee,json=nominalFee,proto3" json:"nominal_fee,omitempty"`
	FpvNominalFee int64    `protobuf:"varint,12,opt,name=fpv_nominal_fee,json=fpvNominalFee,proto3" json:"fpv_nominal_fee,omitempty"`
	Note          string   `protobuf:"bytes,13,opt,name=note,proto3" json:"note,omitempty"`
	Tax           *Tax     `protobuf:"bytes,16,opt,name=tax,proto3" json:"tax,omitempty"`
	TotalTax      float32  `protobuf:"fixed32,17,opt,name=total_tax,json=totalTax,proto3" json:"total_tax,omitempty"`           // computed, override value
	FpvTotalTax   int64    `protobuf:"varint,18,opt,name=fpv_total_tax,json=fpvTotalTax,proto3" json:"fpv_total_tax,omitempty"` // computed, override value
	Weight        int64    `protobuf:"varint,19,opt,name=weight,proto3" json:"weight,omitempty"`                                // gram
	Length        int64    `protobuf:"varint,20,opt,name=length,proto3" json:"length,omitempty"`                                // cm
	Width         int64    `protobuf:"varint,21,opt,name=width,proto3" json:"width,omitempty"`                                  // cm
	Height        int64    `protobuf:"varint,22,opt,name=height,proto3" json:"height,omitempty"`                                // cm
	// id of shop from shipping provider
	// since agent can using multiple shipping shop account
	ShippingShopId   string  `protobuf:"bytes,24,opt,name=shipping_shop_id,json=shippingShopId,proto3" json:"shipping_shop_id,omitempty"`
	Transport        string  `protobuf:"bytes,25,opt,name=transport,proto3" json:"transport,omitempty"`                                       // road, fly, truck
	ShippingProvider string  `protobuf:"bytes,26,opt,name=shipping_provider,json=shippingProvider,proto3" json:"shipping_provider,omitempty"` // direct, private, ghtk
	Insurance        bool    `protobuf:"varint,29,opt,name=insurance,proto3" json:"insurance,omitempty"`
	InsuranceFee     float32 `protobuf:"fixed32,30,opt,name=insurance_fee,json=insuranceFee,proto3" json:"insurance_fee,omitempty"`
	FpvInsuranceFee  int64   `protobuf:"varint,31,opt,name=fpv_insurance_fee,json=fpvInsuranceFee,proto3" json:"fpv_insurance_fee,omitempty"`
	ShippingCode     string  `protobuf:"bytes,32,opt,name=shipping_code,json=shippingCode,proto3" json:"shipping_code,omitempty"` // van don
	// how much money should shipper collect from the receiver
	// not always equal to fee
	PickAmount    float32 `protobuf:"fixed32,40,opt,name=pick_amount,json=pickAmount,proto3" json:"pick_amount,omitempty"`
	FpvPickAmount int64   `protobuf:"varint,41,opt,name=fpv_pick_amount,json=fpvPickAmount,proto3" json:"fpv_pick_amount,omitempty"`
	// could be -1, 1, 2, -3
	// see https://docs.giaohangtietkiem.vn/?shell#tr-ng-th-i-n-h-ng35
	StatusCode                  string        `protobuf:"bytes,43,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Data                        *ShippingData `protobuf:"bytes,45,opt,name=data,proto3" json:"data,omitempty"`
	IntegratedShippingId        string        `protobuf:"bytes,46,opt,name=integrated_shipping_id,json=integratedShippingId,proto3" json:"integrated_shipping_id,omitempty"`
	IndexIncre                  int32         `protobuf:"varint,48,opt,name=index_incre,json=indexIncre,proto3" json:"index_incre,omitempty"` // only server
	CancelledAt                 int64         `protobuf:"varint,49,opt,name=cancelled_at,json=cancelledAt,proto3" json:"cancelled_at,omitempty"`
	CancelledBy                 string        `protobuf:"bytes,50,opt,name=cancelled_by,json=cancelledBy,proto3" json:"cancelled_by,omitempty"`
	FeePayer                    string        `protobuf:"bytes,51,opt,name=fee_payer,json=feePayer,proto3" json:"fee_payer,omitempty"` // shop, user
	NoAutoCreateBillOnDelivered bool          `protobuf:"varint,52,opt,name=no_auto_create_bill_on_delivered,json=noAutoCreateBillOnDelivered,proto3" json:"no_auto_create_bill_on_delivered,omitempty"`
	BillId                      string        `protobuf:"bytes,53,opt,name=bill_id,json=billId,proto3" json:"bill_id,omitempty"`
	SubmittedAt                 int64         `protobuf:"varint,54,opt,name=submitted_at,json=submittedAt,proto3" json:"submitted_at,omitempty"`
	SubmittedBy                 string        `protobuf:"bytes,55,opt,name=submitted_by,json=submittedBy,proto3" json:"submitted_by,omitempty"`
	PickupAtShop                bool          `protobuf:"varint,56,opt,name=pickup_at_shop,json=pickupAtShop,proto3" json:"pickup_at_shop,omitempty"`
}

func (x *ShippingInfo) Reset() {
	*x = ShippingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[296]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShippingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShippingInfo) ProtoMessage() {}

func (x *ShippingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[296]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShippingInfo.ProtoReflect.Descriptor instead.
func (*ShippingInfo) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{296}
}

func (x *ShippingInfo) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *ShippingInfo) GetPickupAddress() *Address {
	if x != nil {
		return x.PickupAddress
	}
	return nil
}

func (x *ShippingInfo) GetDeliverDate() int64 {
	if x != nil {
		return x.DeliverDate
	}
	return 0
}

func (x *ShippingInfo) GetPickupDate() int64 {
	if x != nil {
		return x.PickupDate
	}
	return 0
}

func (x *ShippingInfo) GetFee() float32 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *ShippingInfo) GetFpvFee() int64 {
	if x != nil {
		return x.FpvFee
	}
	return 0
}

func (x *ShippingInfo) GetNominalFee() float32 {
	if x != nil {
		return x.NominalFee
	}
	return 0
}

func (x *ShippingInfo) GetFpvNominalFee() int64 {
	if x != nil {
		return x.FpvNominalFee
	}
	return 0
}

func (x *ShippingInfo) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *ShippingInfo) GetTax() *Tax {
	if x != nil {
		return x.Tax
	}
	return nil
}

func (x *ShippingInfo) GetTotalTax() float32 {
	if x != nil {
		return x.TotalTax
	}
	return 0
}

func (x *ShippingInfo) GetFpvTotalTax() int64 {
	if x != nil {
		return x.FpvTotalTax
	}
	return 0
}

func (x *ShippingInfo) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *ShippingInfo) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *ShippingInfo) GetWidth() int64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *ShippingInfo) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ShippingInfo) GetShippingShopId() string {
	if x != nil {
		return x.ShippingShopId
	}
	return ""
}

func (x *ShippingInfo) GetTransport() string {
	if x != nil {
		return x.Transport
	}
	return ""
}

func (x *ShippingInfo) GetShippingProvider() string {
	if x != nil {
		return x.ShippingProvider
	}
	return ""
}

func (x *ShippingInfo) GetInsurance() bool {
	if x != nil {
		return x.Insurance
	}
	return false
}

func (x *ShippingInfo) GetInsuranceFee() float32 {
	if x != nil {
		return x.InsuranceFee
	}
	return 0
}

func (x *ShippingInfo) GetFpvInsuranceFee() int64 {
	if x != nil {
		return x.FpvInsuranceFee
	}
	return 0
}

func (x *ShippingInfo) GetShippingCode() string {
	if x != nil {
		return x.ShippingCode
	}
	return ""
}

func (x *ShippingInfo) GetPickAmount() float32 {
	if x != nil {
		return x.PickAmount
	}
	return 0
}

func (x *ShippingInfo) GetFpvPickAmount() int64 {
	if x != nil {
		return x.FpvPickAmount
	}
	return 0
}

func (x *ShippingInfo) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *ShippingInfo) GetData() *ShippingData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ShippingInfo) GetIntegratedShippingId() string {
	if x != nil {
		return x.IntegratedShippingId
	}
	return ""
}

func (x *ShippingInfo) GetIndexIncre() int32 {
	if x != nil {
		return x.IndexIncre
	}
	return 0
}

func (x *ShippingInfo) GetCancelledAt() int64 {
	if x != nil {
		return x.CancelledAt
	}
	return 0
}

func (x *ShippingInfo) GetCancelledBy() string {
	if x != nil {
		return x.CancelledBy
	}
	return ""
}

func (x *ShippingInfo) GetFeePayer() string {
	if x != nil {
		return x.FeePayer
	}
	return ""
}

func (x *ShippingInfo) GetNoAutoCreateBillOnDelivered() bool {
	if x != nil {
		return x.NoAutoCreateBillOnDelivered
	}
	return false
}

func (x *ShippingInfo) GetBillId() string {
	if x != nil {
		return x.BillId
	}
	return ""
}

func (x *ShippingInfo) GetSubmittedAt() int64 {
	if x != nil {
		return x.SubmittedAt
	}
	return 0
}

func (x *ShippingInfo) GetSubmittedBy() string {
	if x != nil {
		return x.SubmittedBy
	}
	return ""
}

func (x *ShippingInfo) GetPickupAtShop() bool {
	if x != nil {
		return x.PickupAtShop
	}
	return false
}

type ShippingData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ghtk *GHTKShippingData `protobuf:"bytes,3,opt,name=ghtk,proto3" json:"ghtk,omitempty"`
	Ghn  *GHNShippingData  `protobuf:"bytes,4,opt,name=ghn,proto3" json:"ghn,omitempty"`
}

func (x *ShippingData) Reset() {
	*x = ShippingData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[297]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShippingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShippingData) ProtoMessage() {}

func (x *ShippingData) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[297]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShippingData.ProtoReflect.Descriptor instead.
func (*ShippingData) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{297}
}

func (x *ShippingData) GetGhtk() *GHTKShippingData {
	if x != nil {
		return x.Ghtk
	}
	return nil
}

func (x *ShippingData) GetGhn() *GHNShippingData {
	if x != nil {
		return x.Ghn
	}
	return nil
}

type GHNShippingData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceTypeId  int32  `protobuf:"varint,2,opt,name=service_type_id,json=serviceTypeId,proto3" json:"service_type_id,omitempty"`
	PaymentTypeId  int32  `protobuf:"varint,3,opt,name=payment_type_id,json=paymentTypeId,proto3" json:"payment_type_id,omitempty"`
	RequiredNote   string `protobuf:"bytes,4,opt,name=required_note,json=requiredNote,proto3" json:"required_note,omitempty"`
	InsuranceValue int64  `protobuf:"varint,5,opt,name=insurance_value,json=insuranceValue,proto3" json:"insurance_value,omitempty"`
	Coupon         string `protobuf:"bytes,6,opt,name=coupon,proto3" json:"coupon,omitempty"`
}

func (x *GHNShippingData) Reset() {
	*x = GHNShippingData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[298]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GHNShippingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GHNShippingData) ProtoMessage() {}

func (x *GHNShippingData) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[298]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GHNShippingData.ProtoReflect.Descriptor instead.
func (*GHNShippingData) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{298}
}

func (x *GHNShippingData) GetServiceTypeId() int32 {
	if x != nil {
		return x.ServiceTypeId
	}
	return 0
}

func (x *GHNShippingData) GetPaymentTypeId() int32 {
	if x != nil {
		return x.PaymentTypeId
	}
	return 0
}

func (x *GHNShippingData) GetRequiredNote() string {
	if x != nil {
		return x.RequiredNote
	}
	return ""
}

func (x *GHNShippingData) GetInsuranceValue() int64 {
	if x != nil {
		return x.InsuranceValue
	}
	return 0
}

func (x *GHNShippingData) GetCoupon() string {
	if x != nil {
		return x.Coupon
	}
	return ""
}

type GHTKShippingData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeliverWorkShift int64    `protobuf:"varint,10,opt,name=deliver_work_shift,json=deliverWorkShift,proto3" json:"deliver_work_shift,omitempty"`
	PickWorkShift    int64    `protobuf:"varint,11,opt,name=pick_work_shift,json=pickWorkShift,proto3" json:"pick_work_shift,omitempty"`
	LabelId          string   `protobuf:"bytes,13,opt,name=label_id,json=labelId,proto3" json:"label_id,omitempty"`
	Expired          string   `protobuf:"bytes,14,opt,name=expired,proto3" json:"expired,omitempty"`
	Value            int64    `protobuf:"varint,15,opt,name=value,proto3" json:"value,omitempty"` // gia tri dong bao hiem
	PickOption       string   `protobuf:"bytes,16,opt,name=pick_option,json=pickOption,proto3" json:"pick_option,omitempty"`
	DeliverOption    string   `protobuf:"bytes,17,opt,name=deliver_option,json=deliverOption,proto3" json:"deliver_option,omitempty"`
	PickSession      string   `protobuf:"bytes,18,opt,name=pick_session,json=pickSession,proto3" json:"pick_session,omitempty"`
	Tags             []string `protobuf:"bytes,19,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *GHTKShippingData) Reset() {
	*x = GHTKShippingData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[299]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GHTKShippingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GHTKShippingData) ProtoMessage() {}

func (x *GHTKShippingData) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[299]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GHTKShippingData.ProtoReflect.Descriptor instead.
func (*GHTKShippingData) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{299}
}

func (x *GHTKShippingData) GetDeliverWorkShift() int64 {
	if x != nil {
		return x.DeliverWorkShift
	}
	return 0
}

func (x *GHTKShippingData) GetPickWorkShift() int64 {
	if x != nil {
		return x.PickWorkShift
	}
	return 0
}

func (x *GHTKShippingData) GetLabelId() string {
	if x != nil {
		return x.LabelId
	}
	return ""
}

func (x *GHTKShippingData) GetExpired() string {
	if x != nil {
		return x.Expired
	}
	return ""
}

func (x *GHTKShippingData) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *GHTKShippingData) GetPickOption() string {
	if x != nil {
		return x.PickOption
	}
	return ""
}

func (x *GHTKShippingData) GetDeliverOption() string {
	if x != nil {
		return x.DeliverOption
	}
	return ""
}

func (x *GHTKShippingData) GetPickSession() string {
	if x != nil {
		return x.PickSession
	}
	return ""
}

func (x *GHTKShippingData) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type ShippingPolicies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx              *common.Context   `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId        string            `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ShippingPolicies []*ShippingPolicy `protobuf:"bytes,5,rep,name=shipping_policies,json=shippingPolicies,proto3" json:"shipping_policies,omitempty"`
}

func (x *ShippingPolicies) Reset() {
	*x = ShippingPolicies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[300]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShippingPolicies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShippingPolicies) ProtoMessage() {}

func (x *ShippingPolicies) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[300]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShippingPolicies.ProtoReflect.Descriptor instead.
func (*ShippingPolicies) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{300}
}

func (x *ShippingPolicies) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ShippingPolicies) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ShippingPolicies) GetShippingPolicies() []*ShippingPolicy {
	if x != nil {
		return x.ShippingPolicies
	}
	return nil
}

type ShippingPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx                *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId          string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Id                 string          `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Name               string          `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	ProductIds         []string        `protobuf:"bytes,5,rep,name=product_ids,json=productIds,proto3" json:"product_ids,omitempty"`
	ProductCollections []string        `protobuf:"bytes,6,rep,name=product_collections,json=productCollections,proto3" json:"product_collections,omitempty"`
	ExcludeProductIds  []string        `protobuf:"bytes,7,rep,name=exclude_product_ids,json=excludeProductIds,proto3" json:"exclude_product_ids,omitempty"`
	CountryCode        string          `protobuf:"bytes,8,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"` // alway vn
	Province           string          `protobuf:"bytes,9,opt,name=province,proto3" json:"province,omitempty"`
	Districts          []string        `protobuf:"bytes,13,rep,name=districts,proto3" json:"districts,omitempty"`
	UseWeight          bool            `protobuf:"varint,10,opt,name=use_weight,json=useWeight,proto3" json:"use_weight,omitempty"`
	WeightGt           int64           `protobuf:"varint,11,opt,name=weight_gt,json=weightGt,proto3" json:"weight_gt,omitempty"` // gram
	WeightLt           int64           `protobuf:"varint,12,opt,name=weight_lt,json=weightLt,proto3" json:"weight_lt,omitempty"` // gram
	UseOrderTotal      bool            `protobuf:"varint,16,opt,name=use_order_total,json=useOrderTotal,proto3" json:"use_order_total,omitempty"`
	OrderTotalLt       float32         `protobuf:"fixed32,17,opt,name=order_total_lt,json=orderTotalLt,proto3" json:"order_total_lt,omitempty"`
	FpvOrderTotalLt    int64           `protobuf:"varint,18,opt,name=fpv_order_total_lt,json=fpvOrderTotalLt,proto3" json:"fpv_order_total_lt,omitempty"` // (readonly from client)
	OrderTotalGt       float32         `protobuf:"fixed32,19,opt,name=order_total_gt,json=orderTotalGt,proto3" json:"order_total_gt,omitempty"`
	FpvOrderTotalGt    int64           `protobuf:"varint,20,opt,name=fpv_order_total_gt,json=fpvOrderTotalGt,proto3" json:"fpv_order_total_gt,omitempty"` // (readonly from client)
	Price              float32         `protobuf:"fixed32,21,opt,name=price,proto3" json:"price,omitempty"`                                               // 0 => freeship
	FpvPrice           int64           `protobuf:"varint,22,opt,name=fpv_price,json=fpvPrice,proto3" json:"fpv_price,omitempty"`                          // (readonly from client)
	Disabled           bool            `protobuf:"varint,23,opt,name=disabled,proto3" json:"disabled,omitempty"`
	Created            int64           `protobuf:"varint,24,opt,name=created,proto3" json:"created,omitempty"`
	Updated            int64           `protobuf:"varint,26,opt,name=updated,proto3" json:"updated,omitempty"`
	CreatedBy          string          `protobuf:"bytes,27,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	UpdatedBy          string          `protobuf:"bytes,28,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
}

func (x *ShippingPolicy) Reset() {
	*x = ShippingPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[301]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShippingPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShippingPolicy) ProtoMessage() {}

func (x *ShippingPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[301]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShippingPolicy.ProtoReflect.Descriptor instead.
func (*ShippingPolicy) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{301}
}

func (x *ShippingPolicy) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ShippingPolicy) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ShippingPolicy) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ShippingPolicy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ShippingPolicy) GetProductIds() []string {
	if x != nil {
		return x.ProductIds
	}
	return nil
}

func (x *ShippingPolicy) GetProductCollections() []string {
	if x != nil {
		return x.ProductCollections
	}
	return nil
}

func (x *ShippingPolicy) GetExcludeProductIds() []string {
	if x != nil {
		return x.ExcludeProductIds
	}
	return nil
}

func (x *ShippingPolicy) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *ShippingPolicy) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *ShippingPolicy) GetDistricts() []string {
	if x != nil {
		return x.Districts
	}
	return nil
}

func (x *ShippingPolicy) GetUseWeight() bool {
	if x != nil {
		return x.UseWeight
	}
	return false
}

func (x *ShippingPolicy) GetWeightGt() int64 {
	if x != nil {
		return x.WeightGt
	}
	return 0
}

func (x *ShippingPolicy) GetWeightLt() int64 {
	if x != nil {
		return x.WeightLt
	}
	return 0
}

func (x *ShippingPolicy) GetUseOrderTotal() bool {
	if x != nil {
		return x.UseOrderTotal
	}
	return false
}

func (x *ShippingPolicy) GetOrderTotalLt() float32 {
	if x != nil {
		return x.OrderTotalLt
	}
	return 0
}

func (x *ShippingPolicy) GetFpvOrderTotalLt() int64 {
	if x != nil {
		return x.FpvOrderTotalLt
	}
	return 0
}

func (x *ShippingPolicy) GetOrderTotalGt() float32 {
	if x != nil {
		return x.OrderTotalGt
	}
	return 0
}

func (x *ShippingPolicy) GetFpvOrderTotalGt() int64 {
	if x != nil {
		return x.FpvOrderTotalGt
	}
	return 0
}

func (x *ShippingPolicy) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ShippingPolicy) GetFpvPrice() int64 {
	if x != nil {
		return x.FpvPrice
	}
	return 0
}

func (x *ShippingPolicy) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *ShippingPolicy) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *ShippingPolicy) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *ShippingPolicy) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *ShippingPolicy) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

type IntegratedShipping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx             *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId       string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Id              string          `protobuf:"bytes,18,opt,name=id,proto3" json:"id,omitempty"`
	Codename        string          `protobuf:"bytes,3,opt,name=codename,proto3" json:"codename,omitempty"` // ghtk, ghn, ahamove, viettelpost, shipchung, ninjavan, grabexpress, ahamove, hcmpost, vnpost, jntexpress, supership, heyu
	ShippingShopId  string          `protobuf:"bytes,4,opt,name=shipping_shop_id,json=shippingShopId,proto3" json:"shipping_shop_id,omitempty"`
	Name            string          `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Phone           string          `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"`
	Email           string          `protobuf:"bytes,7,opt,name=email,proto3" json:"email,omitempty"`
	Password        string          `protobuf:"bytes,8,opt,name=password,proto3" json:"password,omitempty"`
	ApiToken        string          `protobuf:"bytes,9,opt,name=api_token,json=apiToken,proto3" json:"api_token,omitempty"`
	AccessToken     string          `protobuf:"bytes,10,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	RefreshToken    string          `protobuf:"bytes,11,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
	FirstIntegrated int64           `protobuf:"varint,13,opt,name=first_integrated,json=firstIntegrated,proto3" json:"first_integrated,omitempty"`
	Integrated      int64           `protobuf:"varint,14,opt,name=integrated,proto3" json:"integrated,omitempty"`
	IntegratedBy    string          `protobuf:"bytes,17,opt,name=integrated_by,json=integratedBy,proto3" json:"integrated_by,omitempty"`
	LastUsed        int64           `protobuf:"varint,12,opt,name=last_used,json=lastUsed,proto3" json:"last_used,omitempty"`
	FirstError      int64           `protobuf:"varint,15,opt,name=first_error,json=firstError,proto3" json:"first_error,omitempty"`
	ConnectStatus   string          `protobuf:"bytes,16,opt,name=connect_status,json=connectStatus,proto3" json:"connect_status,omitempty"` // connected || disconnected
	GhnClientId     string          `protobuf:"bytes,19,opt,name=ghn_client_id,json=ghnClientId,proto3" json:"ghn_client_id,omitempty"`
	GhnShopId       string          `protobuf:"bytes,20,opt,name=ghn_shop_id,json=ghnShopId,proto3" json:"ghn_shop_id,omitempty"`
	GhnOtp          string          `protobuf:"bytes,22,opt,name=ghn_otp,json=ghnOtp,proto3" json:"ghn_otp,omitempty"`
	Address         *Address        `protobuf:"bytes,21,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *IntegratedShipping) Reset() {
	*x = IntegratedShipping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[302]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegratedShipping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegratedShipping) ProtoMessage() {}

func (x *IntegratedShipping) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[302]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegratedShipping.ProtoReflect.Descriptor instead.
func (*IntegratedShipping) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{302}
}

func (x *IntegratedShipping) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *IntegratedShipping) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *IntegratedShipping) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IntegratedShipping) GetCodename() string {
	if x != nil {
		return x.Codename
	}
	return ""
}

func (x *IntegratedShipping) GetShippingShopId() string {
	if x != nil {
		return x.ShippingShopId
	}
	return ""
}

func (x *IntegratedShipping) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IntegratedShipping) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *IntegratedShipping) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *IntegratedShipping) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *IntegratedShipping) GetApiToken() string {
	if x != nil {
		return x.ApiToken
	}
	return ""
}

func (x *IntegratedShipping) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *IntegratedShipping) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *IntegratedShipping) GetFirstIntegrated() int64 {
	if x != nil {
		return x.FirstIntegrated
	}
	return 0
}

func (x *IntegratedShipping) GetIntegrated() int64 {
	if x != nil {
		return x.Integrated
	}
	return 0
}

func (x *IntegratedShipping) GetIntegratedBy() string {
	if x != nil {
		return x.IntegratedBy
	}
	return ""
}

func (x *IntegratedShipping) GetLastUsed() int64 {
	if x != nil {
		return x.LastUsed
	}
	return 0
}

func (x *IntegratedShipping) GetFirstError() int64 {
	if x != nil {
		return x.FirstError
	}
	return 0
}

func (x *IntegratedShipping) GetConnectStatus() string {
	if x != nil {
		return x.ConnectStatus
	}
	return ""
}

func (x *IntegratedShipping) GetGhnClientId() string {
	if x != nil {
		return x.GhnClientId
	}
	return ""
}

func (x *IntegratedShipping) GetGhnShopId() string {
	if x != nil {
		return x.GhnShopId
	}
	return ""
}

func (x *IntegratedShipping) GetGhnOtp() string {
	if x != nil {
		return x.GhnOtp
	}
	return ""
}

func (x *IntegratedShipping) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

type IntegratedShippings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx                 *common.Context       `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	IntegratedShippings []*IntegratedShipping `protobuf:"bytes,2,rep,name=integrated_shippings,json=integratedShippings,proto3" json:"integrated_shippings,omitempty"`
	Anchor              string                `protobuf:"bytes,3,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Total               int64                 `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *IntegratedShippings) Reset() {
	*x = IntegratedShippings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[303]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegratedShippings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegratedShippings) ProtoMessage() {}

func (x *IntegratedShippings) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[303]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegratedShippings.ProtoReflect.Descriptor instead.
func (*IntegratedShippings) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{303}
}

func (x *IntegratedShippings) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *IntegratedShippings) GetIntegratedShippings() []*IntegratedShipping {
	if x != nil {
		return x.IntegratedShippings
	}
	return nil
}

func (x *IntegratedShippings) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *IntegratedShippings) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type PaymentMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx           *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId     string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Id            string          `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Method        string          `protobuf:"bytes,4,opt,name=method,proto3" json:"method,omitempty"`           // cash, cod ,credit_card, debit_card, momo, bank_transfer
	Description   string          `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"` //  "Thanh toán tiền mặt khi nhận hàng"
	Type          string          `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	State         string          `protobuf:"bytes,7,opt,name=state,proto3" json:"state,omitempty"` // active, inactive, deleted
	IsDefault     bool            `protobuf:"varint,8,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
	FailedMessage string          `protobuf:"bytes,10,opt,name=failed_message,json=failedMessage,proto3" json:"failed_message,omitempty"`
	Charged       int64           `protobuf:"varint,11,opt,name=charged,proto3" json:"charged,omitempty"`
	Created       int64           `protobuf:"varint,12,opt,name=created,proto3" json:"created,omitempty"`
	Updated       int64           `protobuf:"varint,13,opt,name=updated,proto3" json:"updated,omitempty"`
	CreatedBy     string          `protobuf:"bytes,14,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	UpdatedBy     string          `protobuf:"bytes,15,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	BankNumber    string          `protobuf:"bytes,20,opt,name=bank_number,json=bankNumber,proto3" json:"bank_number,omitempty"`
	BankOwner     string          `protobuf:"bytes,22,opt,name=bank_owner,json=bankOwner,proto3" json:"bank_owner,omitempty"`
	BankBranch    string          `protobuf:"bytes,23,opt,name=bank_branch,json=bankBranch,proto3" json:"bank_branch,omitempty"`
	BankName      string          `protobuf:"bytes,24,opt,name=bank_name,json=bankName,proto3" json:"bank_name,omitempty"`
}

func (x *PaymentMethod) Reset() {
	*x = PaymentMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[304]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentMethod) ProtoMessage() {}

func (x *PaymentMethod) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[304]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentMethod.ProtoReflect.Descriptor instead.
func (*PaymentMethod) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{304}
}

func (x *PaymentMethod) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *PaymentMethod) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *PaymentMethod) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PaymentMethod) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *PaymentMethod) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PaymentMethod) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PaymentMethod) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *PaymentMethod) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *PaymentMethod) GetFailedMessage() string {
	if x != nil {
		return x.FailedMessage
	}
	return ""
}

func (x *PaymentMethod) GetCharged() int64 {
	if x != nil {
		return x.Charged
	}
	return 0
}

func (x *PaymentMethod) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *PaymentMethod) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *PaymentMethod) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *PaymentMethod) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *PaymentMethod) GetBankNumber() string {
	if x != nil {
		return x.BankNumber
	}
	return ""
}

func (x *PaymentMethod) GetBankOwner() string {
	if x != nil {
		return x.BankOwner
	}
	return ""
}

func (x *PaymentMethod) GetBankBranch() string {
	if x != nil {
		return x.BankBranch
	}
	return ""
}

func (x *PaymentMethod) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

type PaymentMethods struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx            *common.Context  `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId      string           `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	PaymentMethods []*PaymentMethod `protobuf:"bytes,3,rep,name=payment_methods,json=paymentMethods,proto3" json:"payment_methods,omitempty"`
}

func (x *PaymentMethods) Reset() {
	*x = PaymentMethods{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[305]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentMethods) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentMethods) ProtoMessage() {}

func (x *PaymentMethods) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[305]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentMethods.ProtoReflect.Descriptor instead.
func (*PaymentMethods) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{305}
}

func (x *PaymentMethods) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *PaymentMethods) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *PaymentMethods) GetPaymentMethods() []*PaymentMethod {
	if x != nil {
		return x.PaymentMethods
	}
	return nil
}

type OrderMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId           string   `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Status              string   `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`                                        // only list orders
	PaymentStatus       string   `protobuf:"bytes,4,opt,name=payment_status,json=paymentStatus,proto3" json:"payment_status,omitempty"`     // only list orders
	ShippingStatus      string   `protobuf:"bytes,22,opt,name=shipping_status,json=shippingStatus,proto3" json:"shipping_status,omitempty"` // only list orders
	PaymentMethod       string   `protobuf:"bytes,5,opt,name=payment_method,json=paymentMethod,proto3" json:"payment_method,omitempty"`
	InvoiceHour         int64    `protobuf:"varint,6,opt,name=invoice_hour,json=invoiceHour,proto3" json:"invoice_hour,omitempty"`
	InvoiceDate         string   `protobuf:"bytes,7,opt,name=invoice_date,json=invoiceDate,proto3" json:"invoice_date,omitempty"` // derived
	PaidHour            int64    `protobuf:"varint,8,opt,name=paid_hour,json=paidHour,proto3" json:"paid_hour,omitempty"`
	PaidDate            string   `protobuf:"bytes,9,opt,name=paid_date,json=paidDate,proto3" json:"paid_date,omitempty"` // derived
	FpvTotal            int64    `protobuf:"varint,10,opt,name=fpv_total,json=fpvTotal,proto3" json:"fpv_total,omitempty"`
	FpvPaymentMade      int64    `protobuf:"varint,11,opt,name=fpv_payment_made,json=fpvPaymentMade,proto3" json:"fpv_payment_made,omitempty"`
	PosId               string   `protobuf:"bytes,12,opt,name=pos_id,json=posId,proto3" json:"pos_id,omitempty"`
	Channel             string   `protobuf:"bytes,13,opt,name=channel,proto3" json:"channel,omitempty"`
	ChannelTouchpoint   string   `protobuf:"bytes,14,opt,name=channel_touchpoint,json=channelTouchpoint,proto3" json:"channel_touchpoint,omitempty"`
	Salesperson         string   `protobuf:"bytes,15,opt,name=salesperson,proto3" json:"salesperson,omitempty"`
	ProductIdBits       int64    `protobuf:"varint,16,opt,name=product_id_bits,json=productIdBits,proto3" json:"product_id_bits,omitempty"`         // only system
	ProductIdStrings    string   `protobuf:"bytes,17,opt,name=product_id_strings,json=productIdStrings,proto3" json:"product_id_strings,omitempty"` // only system
	ProductIds          []string `protobuf:"bytes,18,rep,name=product_ids,json=productIds,proto3" json:"product_ids,omitempty"`
	ProductId           string   `protobuf:"bytes,19,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"` // derived
	CreatedHour         int64    `protobuf:"varint,20,opt,name=created_hour,json=createdHour,proto3" json:"created_hour,omitempty"`
	CreatedDate         string   `protobuf:"bytes,21,opt,name=created_date,json=createdDate,proto3" json:"created_date,omitempty"` // derived
	CancellationCode    string   `protobuf:"bytes,23,opt,name=cancellation_code,json=cancellationCode,proto3" json:"cancellation_code,omitempty"`
	ReturningCount      int64    `protobuf:"varint,69,opt,name=returning_count,json=returningCount,proto3" json:"returning_count,omitempty"` // user paid more than 1
	PaidCount           int64    `protobuf:"varint,66,opt,name=paid_count,json=paidCount,proto3" json:"paid_count,omitempty"`
	FpvPaymentMadeSum   int64    `protobuf:"varint,68,opt,name=fpv_payment_made_sum,json=fpvPaymentMadeSum,proto3" json:"fpv_payment_made_sum,omitempty"` // derived
	OrderCount          int64    `protobuf:"varint,65,opt,name=order_count,json=orderCount,proto3" json:"order_count,omitempty"`
	FpvTotalSum         int64    `protobuf:"varint,67,opt,name=fpv_total_sum,json=fpvTotalSum,proto3" json:"fpv_total_sum,omitempty"` // derived
	CanceledCount       int64    `protobuf:"varint,70,opt,name=canceled_count,json=canceledCount,proto3" json:"canceled_count,omitempty"`
	CanceledFpvTotalSum int64    `protobuf:"varint,71,opt,name=canceled_fpv_total_sum,json=canceledFpvTotalSum,proto3" json:"canceled_fpv_total_sum,omitempty"` // derived
	ClosedCount         int64    `protobuf:"varint,72,opt,name=closed_count,json=closedCount,proto3" json:"closed_count,omitempty"`
	ClosedFpvTotalSum   int64    `protobuf:"varint,73,opt,name=closed_fpv_total_sum,json=closedFpvTotalSum,proto3" json:"closed_fpv_total_sum,omitempty"` // derived
	OpenCount           int64    `protobuf:"varint,74,opt,name=open_count,json=openCount,proto3" json:"open_count,omitempty"`
	OpenFpvTotalSum     int64    `protobuf:"varint,75,opt,name=open_fpv_total_sum,json=openFpvTotalSum,proto3" json:"open_fpv_total_sum,omitempty"` // derived
}

func (x *OrderMetric) Reset() {
	*x = OrderMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[306]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderMetric) ProtoMessage() {}

func (x *OrderMetric) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[306]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderMetric.ProtoReflect.Descriptor instead.
func (*OrderMetric) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{306}
}

func (x *OrderMetric) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *OrderMetric) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *OrderMetric) GetPaymentStatus() string {
	if x != nil {
		return x.PaymentStatus
	}
	return ""
}

func (x *OrderMetric) GetShippingStatus() string {
	if x != nil {
		return x.ShippingStatus
	}
	return ""
}

func (x *OrderMetric) GetPaymentMethod() string {
	if x != nil {
		return x.PaymentMethod
	}
	return ""
}

func (x *OrderMetric) GetInvoiceHour() int64 {
	if x != nil {
		return x.InvoiceHour
	}
	return 0
}

func (x *OrderMetric) GetInvoiceDate() string {
	if x != nil {
		return x.InvoiceDate
	}
	return ""
}

func (x *OrderMetric) GetPaidHour() int64 {
	if x != nil {
		return x.PaidHour
	}
	return 0
}

func (x *OrderMetric) GetPaidDate() string {
	if x != nil {
		return x.PaidDate
	}
	return ""
}

func (x *OrderMetric) GetFpvTotal() int64 {
	if x != nil {
		return x.FpvTotal
	}
	return 0
}

func (x *OrderMetric) GetFpvPaymentMade() int64 {
	if x != nil {
		return x.FpvPaymentMade
	}
	return 0
}

func (x *OrderMetric) GetPosId() string {
	if x != nil {
		return x.PosId
	}
	return ""
}

func (x *OrderMetric) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *OrderMetric) GetChannelTouchpoint() string {
	if x != nil {
		return x.ChannelTouchpoint
	}
	return ""
}

func (x *OrderMetric) GetSalesperson() string {
	if x != nil {
		return x.Salesperson
	}
	return ""
}

func (x *OrderMetric) GetProductIdBits() int64 {
	if x != nil {
		return x.ProductIdBits
	}
	return 0
}

func (x *OrderMetric) GetProductIdStrings() string {
	if x != nil {
		return x.ProductIdStrings
	}
	return ""
}

func (x *OrderMetric) GetProductIds() []string {
	if x != nil {
		return x.ProductIds
	}
	return nil
}

func (x *OrderMetric) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *OrderMetric) GetCreatedHour() int64 {
	if x != nil {
		return x.CreatedHour
	}
	return 0
}

func (x *OrderMetric) GetCreatedDate() string {
	if x != nil {
		return x.CreatedDate
	}
	return ""
}

func (x *OrderMetric) GetCancellationCode() string {
	if x != nil {
		return x.CancellationCode
	}
	return ""
}

func (x *OrderMetric) GetReturningCount() int64 {
	if x != nil {
		return x.ReturningCount
	}
	return 0
}

func (x *OrderMetric) GetPaidCount() int64 {
	if x != nil {
		return x.PaidCount
	}
	return 0
}

func (x *OrderMetric) GetFpvPaymentMadeSum() int64 {
	if x != nil {
		return x.FpvPaymentMadeSum
	}
	return 0
}

func (x *OrderMetric) GetOrderCount() int64 {
	if x != nil {
		return x.OrderCount
	}
	return 0
}

func (x *OrderMetric) GetFpvTotalSum() int64 {
	if x != nil {
		return x.FpvTotalSum
	}
	return 0
}

func (x *OrderMetric) GetCanceledCount() int64 {
	if x != nil {
		return x.CanceledCount
	}
	return 0
}

func (x *OrderMetric) GetCanceledFpvTotalSum() int64 {
	if x != nil {
		return x.CanceledFpvTotalSum
	}
	return 0
}

func (x *OrderMetric) GetClosedCount() int64 {
	if x != nil {
		return x.ClosedCount
	}
	return 0
}

func (x *OrderMetric) GetClosedFpvTotalSum() int64 {
	if x != nil {
		return x.ClosedFpvTotalSum
	}
	return 0
}

func (x *OrderMetric) GetOpenCount() int64 {
	if x != nil {
		return x.OpenCount
	}
	return 0
}

func (x *OrderMetric) GetOpenFpvTotalSum() int64 {
	if x != nil {
		return x.OpenFpvTotalSum
	}
	return 0
}

type OrderMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dim                string                 `protobuf:"bytes,2,opt,name=dim,proto3" json:"dim,omitempty"`
	Tz                 int32                  `protobuf:"varint,3,opt,name=tz,proto3" json:"tz,omitempty"`
	AccountId          string                 `protobuf:"bytes,10,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	InvoiceHourFrom    int64                  `protobuf:"varint,11,opt,name=invoice_hour_from,json=invoiceHourFrom,proto3" json:"invoice_hour_from,omitempty"`
	InvoiceHourTo      int64                  `protobuf:"varint,12,opt,name=invoice_hour_to,json=invoiceHourTo,proto3" json:"invoice_hour_to,omitempty"`
	PaidHourFrom       int64                  `protobuf:"varint,13,opt,name=paid_hour_from,json=paidHourFrom,proto3" json:"paid_hour_from,omitempty"`
	PaidHourTo         int64                  `protobuf:"varint,14,opt,name=paid_hour_to,json=paidHourTo,proto3" json:"paid_hour_to,omitempty"`
	Channels           []string               `protobuf:"bytes,15,rep,name=channels,proto3" json:"channels,omitempty"`
	NotChannels        []string               `protobuf:"bytes,16,rep,name=not_channels,json=notChannels,proto3" json:"not_channels,omitempty"`
	ChannelTouchpoints []string               `protobuf:"bytes,17,rep,name=channel_touchpoints,json=channelTouchpoints,proto3" json:"channel_touchpoints,omitempty"`
	ProductIds         []string               `protobuf:"bytes,18,rep,name=product_ids,json=productIds,proto3" json:"product_ids,omitempty"` // and
	Salesperson        []string               `protobuf:"bytes,19,rep,name=salesperson,proto3" json:"salesperson,omitempty"`                 // and, agent ids
	PosIds             []string               `protobuf:"bytes,20,rep,name=pos_ids,json=posIds,proto3" json:"pos_ids,omitempty"`
	BusinessHours      *account.BusinessHours `protobuf:"bytes,23,opt,name=business_hours,json=businessHours,proto3" json:"business_hours,omitempty"`
	NotBusinessHours   *account.BusinessHours `protobuf:"bytes,24,opt,name=not_business_hours,json=notBusinessHours,proto3" json:"not_business_hours,omitempty"`
	CreatedHourFrom    int64                  `protobuf:"varint,25,opt,name=created_hour_from,json=createdHourFrom,proto3" json:"created_hour_from,omitempty"`
	CreatedHourTo      int64                  `protobuf:"varint,26,opt,name=created_hour_to,json=createdHourTo,proto3" json:"created_hour_to,omitempty"`
}

func (x *OrderMetricsRequest) Reset() {
	*x = OrderMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[307]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderMetricsRequest) ProtoMessage() {}

func (x *OrderMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[307]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderMetricsRequest.ProtoReflect.Descriptor instead.
func (*OrderMetricsRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{307}
}

func (x *OrderMetricsRequest) GetDim() string {
	if x != nil {
		return x.Dim
	}
	return ""
}

func (x *OrderMetricsRequest) GetTz() int32 {
	if x != nil {
		return x.Tz
	}
	return 0
}

func (x *OrderMetricsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *OrderMetricsRequest) GetInvoiceHourFrom() int64 {
	if x != nil {
		return x.InvoiceHourFrom
	}
	return 0
}

func (x *OrderMetricsRequest) GetInvoiceHourTo() int64 {
	if x != nil {
		return x.InvoiceHourTo
	}
	return 0
}

func (x *OrderMetricsRequest) GetPaidHourFrom() int64 {
	if x != nil {
		return x.PaidHourFrom
	}
	return 0
}

func (x *OrderMetricsRequest) GetPaidHourTo() int64 {
	if x != nil {
		return x.PaidHourTo
	}
	return 0
}

func (x *OrderMetricsRequest) GetChannels() []string {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *OrderMetricsRequest) GetNotChannels() []string {
	if x != nil {
		return x.NotChannels
	}
	return nil
}

func (x *OrderMetricsRequest) GetChannelTouchpoints() []string {
	if x != nil {
		return x.ChannelTouchpoints
	}
	return nil
}

func (x *OrderMetricsRequest) GetProductIds() []string {
	if x != nil {
		return x.ProductIds
	}
	return nil
}

func (x *OrderMetricsRequest) GetSalesperson() []string {
	if x != nil {
		return x.Salesperson
	}
	return nil
}

func (x *OrderMetricsRequest) GetPosIds() []string {
	if x != nil {
		return x.PosIds
	}
	return nil
}

func (x *OrderMetricsRequest) GetBusinessHours() *account.BusinessHours {
	if x != nil {
		return x.BusinessHours
	}
	return nil
}

func (x *OrderMetricsRequest) GetNotBusinessHours() *account.BusinessHours {
	if x != nil {
		return x.NotBusinessHours
	}
	return nil
}

func (x *OrderMetricsRequest) GetCreatedHourFrom() int64 {
	if x != nil {
		return x.CreatedHourFrom
	}
	return 0
}

func (x *OrderMetricsRequest) GetCreatedHourTo() int64 {
	if x != nil {
		return x.CreatedHourTo
	}
	return 0
}

type DeleteDraftOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PointTo int64 `protobuf:"varint,3,opt,name=point_to,json=pointTo,proto3" json:"point_to,omitempty"` // exclude
}

func (x *DeleteDraftOrdersRequest) Reset() {
	*x = DeleteDraftOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[308]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDraftOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDraftOrdersRequest) ProtoMessage() {}

func (x *DeleteDraftOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[308]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDraftOrdersRequest.ProtoReflect.Descriptor instead.
func (*DeleteDraftOrdersRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{308}
}

func (x *DeleteDraftOrdersRequest) GetPointTo() int64 {
	if x != nil {
		return x.PointTo
	}
	return 0
}

type Orders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx           *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Metrics       []*OrderMetric  `protobuf:"bytes,3,rep,name=metrics,proto3" json:"metrics,omitempty"`
	Orders        []*Order        `protobuf:"bytes,4,rep,name=orders,proto3" json:"orders,omitempty"`
	Anchor        string          `protobuf:"bytes,5,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Total         int64           `protobuf:"varint,6,opt,name=total,proto3" json:"total,omitempty"`
	FpvTotalValue int64           `protobuf:"varint,7,opt,name=fpv_total_value,json=fpvTotalValue,proto3" json:"fpv_total_value,omitempty"` // sum of all order total (money)
}

func (x *Orders) Reset() {
	*x = Orders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[309]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Orders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Orders) ProtoMessage() {}

func (x *Orders) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[309]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Orders.ProtoReflect.Descriptor instead.
func (*Orders) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{309}
}

func (x *Orders) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Orders) GetMetrics() []*OrderMetric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *Orders) GetOrders() []*Order {
	if x != nil {
		return x.Orders
	}
	return nil
}

func (x *Orders) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *Orders) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Orders) GetFpvTotalValue() int64 {
	if x != nil {
		return x.FpvTotalValue
	}
	return 0
}

type OrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx                 *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId           string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	UserId              string          `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // list order by user
	Status              string          `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`               // list order by status
	CreatedHourFrom     int64           `protobuf:"varint,5,opt,name=created_hour_from,json=createdHourFrom,proto3" json:"created_hour_from,omitempty"`
	CreatedHourTo       int64           `protobuf:"varint,6,opt,name=created_hour_to,json=createdHourTo,proto3" json:"created_hour_to,omitempty"`
	DueDateHourFrom     int64           `protobuf:"varint,20,opt,name=due_date_hour_from,json=dueDateHourFrom,proto3" json:"due_date_hour_from,omitempty"`
	DueDateHourTo       int64           `protobuf:"varint,21,opt,name=due_date_hour_to,json=dueDateHourTo,proto3" json:"due_date_hour_to,omitempty"`
	InvoiceDateHourFrom int64           `protobuf:"varint,22,opt,name=invoice_date_hour_from,json=invoiceDateHourFrom,proto3" json:"invoice_date_hour_from,omitempty"`
	InvoiceDateHourTo   int64           `protobuf:"varint,23,opt,name=invoice_date_hour_to,json=invoiceDateHourTo,proto3" json:"invoice_date_hour_to,omitempty"`
	IncludeDeleted      bool            `protobuf:"varint,7,opt,name=include_deleted,json=includeDeleted,proto3" json:"include_deleted,omitempty"`
	Limit               int32           `protobuf:"varint,8,opt,name=limit,proto3" json:"limit,omitempty"`
	Anchor              string          `protobuf:"bytes,9,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Offset              int32           `protobuf:"varint,18,opt,name=offset,proto3" json:"offset,omitempty"`
	Dim                 string          `protobuf:"bytes,17,opt,name=dim,proto3" json:"dim,omitempty"`
	OrderBy             string          `protobuf:"bytes,19,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	Ids                 []string        `protobuf:"bytes,10,rep,name=ids,proto3" json:"ids,omitempty"`
	Modifieds           []int64         `protobuf:"varint,11,rep,packed,name=modifieds,proto3" json:"modifieds,omitempty"`
	Query               string          `protobuf:"bytes,12,opt,name=query,proto3" json:"query,omitempty"`
	IsDraft             bool            `protobuf:"varint,13,opt,name=is_draft,json=isDraft,proto3" json:"is_draft,omitempty"`
	PaymentStatus       string          `protobuf:"bytes,14,opt,name=payment_status,json=paymentStatus,proto3" json:"payment_status,omitempty"`
	PosIds              []string        `protobuf:"bytes,15,rep,name=pos_ids,json=posIds,proto3" json:"pos_ids,omitempty"`
	Salesperson         []string        `protobuf:"bytes,16,rep,name=salesperson,proto3" json:"salesperson,omitempty"` // agent ids
	Statuses            []string        `protobuf:"bytes,24,rep,name=statuses,proto3" json:"statuses,omitempty"`
	NotStatuses         []string        `protobuf:"bytes,25,rep,name=not_statuses,json=notStatuses,proto3" json:"not_statuses,omitempty"`
	ShippingStatuses    []string        `protobuf:"bytes,26,rep,name=shipping_statuses,json=shippingStatuses,proto3" json:"shipping_statuses,omitempty"`
	NotShippingStatuses []string        `protobuf:"bytes,27,rep,name=not_shipping_statuses,json=notShippingStatuses,proto3" json:"not_shipping_statuses,omitempty"`
	Pipeline            string          `protobuf:"bytes,30,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	PipelineStage       string          `protobuf:"bytes,31,opt,name=pipeline_stage,json=pipelineStage,proto3" json:"pipeline_stage,omitempty"`
	AssignedAgentId     string          `protobuf:"bytes,32,opt,name=assigned_agent_id,json=assignedAgentId,proto3" json:"assigned_agent_id,omitempty"`
}

func (x *OrdersRequest) Reset() {
	*x = OrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[310]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrdersRequest) ProtoMessage() {}

func (x *OrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[310]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrdersRequest.ProtoReflect.Descriptor instead.
func (*OrdersRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{310}
}

func (x *OrdersRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *OrdersRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *OrdersRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *OrdersRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *OrdersRequest) GetCreatedHourFrom() int64 {
	if x != nil {
		return x.CreatedHourFrom
	}
	return 0
}

func (x *OrdersRequest) GetCreatedHourTo() int64 {
	if x != nil {
		return x.CreatedHourTo
	}
	return 0
}

func (x *OrdersRequest) GetDueDateHourFrom() int64 {
	if x != nil {
		return x.DueDateHourFrom
	}
	return 0
}

func (x *OrdersRequest) GetDueDateHourTo() int64 {
	if x != nil {
		return x.DueDateHourTo
	}
	return 0
}

func (x *OrdersRequest) GetInvoiceDateHourFrom() int64 {
	if x != nil {
		return x.InvoiceDateHourFrom
	}
	return 0
}

func (x *OrdersRequest) GetInvoiceDateHourTo() int64 {
	if x != nil {
		return x.InvoiceDateHourTo
	}
	return 0
}

func (x *OrdersRequest) GetIncludeDeleted() bool {
	if x != nil {
		return x.IncludeDeleted
	}
	return false
}

func (x *OrdersRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *OrdersRequest) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *OrdersRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *OrdersRequest) GetDim() string {
	if x != nil {
		return x.Dim
	}
	return ""
}

func (x *OrdersRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *OrdersRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *OrdersRequest) GetModifieds() []int64 {
	if x != nil {
		return x.Modifieds
	}
	return nil
}

func (x *OrdersRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *OrdersRequest) GetIsDraft() bool {
	if x != nil {
		return x.IsDraft
	}
	return false
}

func (x *OrdersRequest) GetPaymentStatus() string {
	if x != nil {
		return x.PaymentStatus
	}
	return ""
}

func (x *OrdersRequest) GetPosIds() []string {
	if x != nil {
		return x.PosIds
	}
	return nil
}

func (x *OrdersRequest) GetSalesperson() []string {
	if x != nil {
		return x.Salesperson
	}
	return nil
}

func (x *OrdersRequest) GetStatuses() []string {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *OrdersRequest) GetNotStatuses() []string {
	if x != nil {
		return x.NotStatuses
	}
	return nil
}

func (x *OrdersRequest) GetShippingStatuses() []string {
	if x != nil {
		return x.ShippingStatuses
	}
	return nil
}

func (x *OrdersRequest) GetNotShippingStatuses() []string {
	if x != nil {
		return x.NotShippingStatuses
	}
	return nil
}

func (x *OrdersRequest) GetPipeline() string {
	if x != nil {
		return x.Pipeline
	}
	return ""
}

func (x *OrdersRequest) GetPipelineStage() string {
	if x != nil {
		return x.PipelineStage
	}
	return ""
}

func (x *OrdersRequest) GetAssignedAgentId() string {
	if x != nil {
		return x.AssignedAgentId
	}
	return ""
}

type DownloadOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx                *common.Context  `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId          string           `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Order              *Order           `protobuf:"bytes,3,opt,name=order,proto3" json:"order,omitempty"`
	Template           *InvoiceTemplate `protobuf:"bytes,4,opt,name=template,proto3" json:"template,omitempty"`
	Locale             string           `protobuf:"bytes,5,opt,name=locale,proto3" json:"locale,omitempty"`
	ContentDisposition string           `protobuf:"bytes,6,opt,name=content_disposition,json=contentDisposition,proto3" json:"content_disposition,omitempty"` // inline (for printing) || attachment (download)
}

func (x *DownloadOrderRequest) Reset() {
	*x = DownloadOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[311]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadOrderRequest) ProtoMessage() {}

func (x *DownloadOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[311]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadOrderRequest.ProtoReflect.Descriptor instead.
func (*DownloadOrderRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{311}
}

func (x *DownloadOrderRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *DownloadOrderRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *DownloadOrderRequest) GetOrder() *Order {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *DownloadOrderRequest) GetTemplate() *InvoiceTemplate {
	if x != nil {
		return x.Template
	}
	return nil
}

func (x *DownloadOrderRequest) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *DownloadOrderRequest) GetContentDisposition() string {
	if x != nil {
		return x.ContentDisposition
	}
	return ""
}

type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx           *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId     string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Id            string          `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Number        string          `protobuf:"bytes,4,opt,name=number,proto3" json:"number,omitempty"`
	Shipping      *ShippingInfo   `protobuf:"bytes,5,opt,name=shipping,proto3" json:"shipping,omitempty"`
	PaymentMethod *PaymentMethod  `protobuf:"bytes,6,opt,name=payment_method,json=paymentMethod,proto3" json:"payment_method,omitempty"`
	Note          string          `protobuf:"bytes,7,opt,name=note,proto3" json:"note,omitempty"`
	IssueDate     int64           `protobuf:"varint,62,opt,name=issue_date,json=issueDate,proto3" json:"issue_date,omitempty"`
	DueDate       int64           `protobuf:"varint,8,opt,name=due_date,json=dueDate,proto3" json:"due_date,omitempty"`
	DueDateTerm   string          `protobuf:"bytes,9,opt,name=due_date_term,json=dueDateTerm,proto3" json:"due_date_term,omitempty"` // net30 net7
	// new; closed; canceled
	//  (see OrderStatusCode)
	Status         string `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	Closed         int64  `protobuf:"varint,14,opt,name=closed,proto3" json:"closed,omitempty"` // close or canceled time
	ShippingStatus string `protobuf:"bytes,73,opt,name=shipping_status,json=shippingStatus,proto3" json:"shipping_status,omitempty"`
	// unpaid, paid, // computed using total and payment_made
	PaymentStatus    string       `protobuf:"bytes,11,opt,name=payment_status,json=paymentStatus,proto3" json:"payment_status,omitempty"`
	Created          int64        `protobuf:"varint,12,opt,name=created,proto3" json:"created,omitempty"`
	CreatedBy        string       `protobuf:"bytes,13,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	Updated          int64        `protobuf:"varint,18,opt,name=updated,proto3" json:"updated,omitempty"`
	UpdatedBy        string       `protobuf:"bytes,19,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	Items            []*OrderItem `protobuf:"bytes,20,rep,name=items,proto3" json:"items,omitempty"`
	Subtotal         float32      `protobuf:"fixed32,21,opt,name=subtotal,proto3" json:"subtotal,omitempty"`                                    // computed, override value
	FpvSubtotal      int64        `protobuf:"varint,22,opt,name=fpv_subtotal,json=fpvSubtotal,proto3" json:"fpv_subtotal,omitempty"`            // computed, override value
	Total            float32      `protobuf:"fixed32,25,opt,name=total,proto3" json:"total,omitempty"`                                          // computed, override value
	FpvTotal         int64        `protobuf:"varint,26,opt,name=fpv_total,json=fpvTotal,proto3" json:"fpv_total,omitempty"`                     // computed, override value
	PaymentMade      float32      `protobuf:"fixed32,30,opt,name=payment_made,json=paymentMade,proto3" json:"payment_made,omitempty"`           // computed, override value
	FpvPaymentMade   int64        `protobuf:"varint,31,opt,name=fpv_payment_made,json=fpvPaymentMade,proto3" json:"fpv_payment_made,omitempty"` // computed, override value
	CancellationNote string       `protobuf:"bytes,34,opt,name=cancellation_note,json=cancellationNote,proto3" json:"cancellation_note,omitempty"`
	CancellationCode string       `protobuf:"bytes,35,opt,name=cancellation_code,json=cancellationCode,proto3" json:"cancellation_code,omitempty"` // typing_error, user_rejected
	CancelledAt      int64        `protobuf:"varint,60,opt,name=cancelled_at,json=cancelledAt,proto3" json:"cancelled_at,omitempty"`
	CancelledBy      string       `protobuf:"bytes,61,opt,name=cancelled_by,json=cancelledBy,proto3" json:"cancelled_by,omitempty"`
	Currency         string       `protobuf:"bytes,36,opt,name=currency,proto3" json:"currency,omitempty"` // empty => base currency
	Deposit          float32      `protobuf:"fixed32,37,opt,name=deposit,proto3" json:"deposit,omitempty"`
	FpvDeposit       int64        `protobuf:"varint,38,opt,name=fpv_deposit,json=fpvDeposit,proto3" json:"fpv_deposit,omitempty"`
	// discount: discount after tax
	// to discount before tax, use discount in item
	DiscountAmount        float32           `protobuf:"fixed32,40,opt,name=discount_amount,json=discountAmount,proto3" json:"discount_amount,omitempty"`
	FpvDiscountAmount     int64             `protobuf:"varint,41,opt,name=fpv_discount_amount,json=fpvDiscountAmount,proto3" json:"fpv_discount_amount,omitempty"`
	DiscountPercentage    int64             `protobuf:"varint,43,opt,name=discount_percentage,json=discountPercentage,proto3" json:"discount_percentage,omitempty"` // 1234 => 12.34% = 0.1234
	DiscountType          string            `protobuf:"bytes,51,opt,name=discount_type,json=discountType,proto3" json:"discount_type,omitempty"`                    // amount || percentage
	PosId                 string            `protobuf:"bytes,44,opt,name=pos_id,json=posId,proto3" json:"pos_id,omitempty"`
	Channel               string            `protobuf:"bytes,45,opt,name=channel,proto3" json:"channel,omitempty"` // messenger, zalo
	ChannelTouchpoint     string            `protobuf:"bytes,46,opt,name=channel_touchpoint,json=channelTouchpoint,proto3" json:"channel_touchpoint,omitempty"`
	RelatedConversations  []string          `protobuf:"bytes,47,rep,name=related_conversations,json=relatedConversations,proto3" json:"related_conversations,omitempty"`
	Salesperson           string            `protobuf:"bytes,48,opt,name=salesperson,proto3" json:"salesperson,omitempty"`
	User                  *User             `protobuf:"bytes,50,opt,name=user,proto3" json:"user,omitempty"` // keep session and attribute
	AdjustmentDescription string            `protobuf:"bytes,54,opt,name=adjustment_description,json=adjustmentDescription,proto3" json:"adjustment_description,omitempty"`
	Adjustment            float32           `protobuf:"fixed32,55,opt,name=adjustment,proto3" json:"adjustment,omitempty"`
	FpvAdjustment         int64             `protobuf:"varint,56,opt,name=fpv_adjustment,json=fpvAdjustment,proto3" json:"fpv_adjustment,omitempty"`
	Fields                map[string]string `protobuf:"bytes,58,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IsDraft               bool              `protobuf:"varint,59,opt,name=is_draft,json=isDraft,proto3" json:"is_draft,omitempty"`
	TermAndCondition      string            `protobuf:"bytes,63,opt,name=term_and_condition,json=termAndCondition,proto3" json:"term_and_condition,omitempty"`
	TotalTax              float32           `protobuf:"fixed32,65,opt,name=total_tax,json=totalTax,proto3" json:"total_tax,omitempty"`           // computed, override value
	FpvTotalTax           int64             `protobuf:"varint,66,opt,name=fpv_total_tax,json=fpvTotalTax,proto3" json:"fpv_total_tax,omitempty"` // computed, override value
	// account currency /order currency  (E.g: order currency: VND, acc currency: USD, => currency_rate = 1/20k = 0.00005)
	CurrencyRate     float32               `protobuf:"fixed32,67,opt,name=currency_rate,json=currencyRate,proto3" json:"currency_rate,omitempty"`
	PaidAt           int64                 `protobuf:"varint,68,opt,name=paid_at,json=paidAt,proto3" json:"paid_at,omitempty"` // complete paid
	FirstPaidOrderId string                `protobuf:"bytes,69,opt,name=first_paid_order_id,json=firstPaidOrderId,proto3" json:"first_paid_order_id,omitempty"`
	UserConfirmation string                `protobuf:"bytes,70,opt,name=user_confirmation,json=userConfirmation,proto3" json:"user_confirmation,omitempty"` // confirmed || rejected
	UserConfirmed    int64                 `protobuf:"varint,84,opt,name=user_confirmed,json=userConfirmed,proto3" json:"user_confirmed,omitempty"`         // ms
	TotalDiscount    float32               `protobuf:"fixed32,71,opt,name=total_discount,json=totalDiscount,proto3" json:"total_discount,omitempty"`
	FpvTotalDiscount int64                 `protobuf:"varint,72,opt,name=fpv_total_discount,json=fpvTotalDiscount,proto3" json:"fpv_total_discount,omitempty"`
	Agents           []*OrderAgent         `protobuf:"bytes,75,rep,name=agents,proto3" json:"agents,omitempty"` // read only from client
	Pipeline         string                `protobuf:"bytes,80,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	PipelineStage    string                `protobuf:"bytes,81,opt,name=pipeline_stage,json=pipelineStage,proto3" json:"pipeline_stage,omitempty"`
	Assigned         int64                 `protobuf:"varint,82,opt,name=assigned,proto3" json:"assigned,omitempty"`
	Stages           []*OrderPipelineStage `protobuf:"bytes,83,rep,name=stages,proto3" json:"stages,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[312]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[312]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{312}
}

func (x *Order) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Order) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Order) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Order) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *Order) GetShipping() *ShippingInfo {
	if x != nil {
		return x.Shipping
	}
	return nil
}

func (x *Order) GetPaymentMethod() *PaymentMethod {
	if x != nil {
		return x.PaymentMethod
	}
	return nil
}

func (x *Order) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *Order) GetIssueDate() int64 {
	if x != nil {
		return x.IssueDate
	}
	return 0
}

func (x *Order) GetDueDate() int64 {
	if x != nil {
		return x.DueDate
	}
	return 0
}

func (x *Order) GetDueDateTerm() string {
	if x != nil {
		return x.DueDateTerm
	}
	return ""
}

func (x *Order) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Order) GetClosed() int64 {
	if x != nil {
		return x.Closed
	}
	return 0
}

func (x *Order) GetShippingStatus() string {
	if x != nil {
		return x.ShippingStatus
	}
	return ""
}

func (x *Order) GetPaymentStatus() string {
	if x != nil {
		return x.PaymentStatus
	}
	return ""
}

func (x *Order) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Order) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *Order) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *Order) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *Order) GetItems() []*OrderItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *Order) GetSubtotal() float32 {
	if x != nil {
		return x.Subtotal
	}
	return 0
}

func (x *Order) GetFpvSubtotal() int64 {
	if x != nil {
		return x.FpvSubtotal
	}
	return 0
}

func (x *Order) GetTotal() float32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Order) GetFpvTotal() int64 {
	if x != nil {
		return x.FpvTotal
	}
	return 0
}

func (x *Order) GetPaymentMade() float32 {
	if x != nil {
		return x.PaymentMade
	}
	return 0
}

func (x *Order) GetFpvPaymentMade() int64 {
	if x != nil {
		return x.FpvPaymentMade
	}
	return 0
}

func (x *Order) GetCancellationNote() string {
	if x != nil {
		return x.CancellationNote
	}
	return ""
}

func (x *Order) GetCancellationCode() string {
	if x != nil {
		return x.CancellationCode
	}
	return ""
}

func (x *Order) GetCancelledAt() int64 {
	if x != nil {
		return x.CancelledAt
	}
	return 0
}

func (x *Order) GetCancelledBy() string {
	if x != nil {
		return x.CancelledBy
	}
	return ""
}

func (x *Order) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Order) GetDeposit() float32 {
	if x != nil {
		return x.Deposit
	}
	return 0
}

func (x *Order) GetFpvDeposit() int64 {
	if x != nil {
		return x.FpvDeposit
	}
	return 0
}

func (x *Order) GetDiscountAmount() float32 {
	if x != nil {
		return x.DiscountAmount
	}
	return 0
}

func (x *Order) GetFpvDiscountAmount() int64 {
	if x != nil {
		return x.FpvDiscountAmount
	}
	return 0
}

func (x *Order) GetDiscountPercentage() int64 {
	if x != nil {
		return x.DiscountPercentage
	}
	return 0
}

func (x *Order) GetDiscountType() string {
	if x != nil {
		return x.DiscountType
	}
	return ""
}

func (x *Order) GetPosId() string {
	if x != nil {
		return x.PosId
	}
	return ""
}

func (x *Order) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *Order) GetChannelTouchpoint() string {
	if x != nil {
		return x.ChannelTouchpoint
	}
	return ""
}

func (x *Order) GetRelatedConversations() []string {
	if x != nil {
		return x.RelatedConversations
	}
	return nil
}

func (x *Order) GetSalesperson() string {
	if x != nil {
		return x.Salesperson
	}
	return ""
}

func (x *Order) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Order) GetAdjustmentDescription() string {
	if x != nil {
		return x.AdjustmentDescription
	}
	return ""
}

func (x *Order) GetAdjustment() float32 {
	if x != nil {
		return x.Adjustment
	}
	return 0
}

func (x *Order) GetFpvAdjustment() int64 {
	if x != nil {
		return x.FpvAdjustment
	}
	return 0
}

func (x *Order) GetFields() map[string]string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Order) GetIsDraft() bool {
	if x != nil {
		return x.IsDraft
	}
	return false
}

func (x *Order) GetTermAndCondition() string {
	if x != nil {
		return x.TermAndCondition
	}
	return ""
}

func (x *Order) GetTotalTax() float32 {
	if x != nil {
		return x.TotalTax
	}
	return 0
}

func (x *Order) GetFpvTotalTax() int64 {
	if x != nil {
		return x.FpvTotalTax
	}
	return 0
}

func (x *Order) GetCurrencyRate() float32 {
	if x != nil {
		return x.CurrencyRate
	}
	return 0
}

func (x *Order) GetPaidAt() int64 {
	if x != nil {
		return x.PaidAt
	}
	return 0
}

func (x *Order) GetFirstPaidOrderId() string {
	if x != nil {
		return x.FirstPaidOrderId
	}
	return ""
}

func (x *Order) GetUserConfirmation() string {
	if x != nil {
		return x.UserConfirmation
	}
	return ""
}

func (x *Order) GetUserConfirmed() int64 {
	if x != nil {
		return x.UserConfirmed
	}
	return 0
}

func (x *Order) GetTotalDiscount() float32 {
	if x != nil {
		return x.TotalDiscount
	}
	return 0
}

func (x *Order) GetFpvTotalDiscount() int64 {
	if x != nil {
		return x.FpvTotalDiscount
	}
	return 0
}

func (x *Order) GetAgents() []*OrderAgent {
	if x != nil {
		return x.Agents
	}
	return nil
}

func (x *Order) GetPipeline() string {
	if x != nil {
		return x.Pipeline
	}
	return ""
}

func (x *Order) GetPipelineStage() string {
	if x != nil {
		return x.PipelineStage
	}
	return ""
}

func (x *Order) GetAssigned() int64 {
	if x != nil {
		return x.Assigned
	}
	return 0
}

func (x *Order) GetStages() []*OrderPipelineStage {
	if x != nil {
		return x.Stages
	}
	return nil
}

type OrderPipelineStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx        *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId  string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	OrderId    string          `protobuf:"bytes,3,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	Pipeline   string          `protobuf:"bytes,4,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	Stage      string          `protobuf:"bytes,5,opt,name=stage,proto3" json:"stage,omitempty"`
	Assigned   int64           `protobuf:"varint,6,opt,name=assigned,proto3" json:"assigned,omitempty"`
	Tasks      []*Task         `protobuf:"bytes,7,rep,name=tasks,proto3" json:"tasks,omitempty"`
	Duration   int64           `protobuf:"varint,8,opt,name=duration,proto3" json:"duration,omitempty"` // sec // calculated using log
	AgentId    string          `protobuf:"bytes,9,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	AssignedBy string          `protobuf:"bytes,10,opt,name=assigned_by,json=assignedBy,proto3" json:"assigned_by,omitempty"`
	Updated    int64           `protobuf:"varint,11,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (x *OrderPipelineStage) Reset() {
	*x = OrderPipelineStage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[313]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderPipelineStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderPipelineStage) ProtoMessage() {}

func (x *OrderPipelineStage) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[313]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderPipelineStage.ProtoReflect.Descriptor instead.
func (*OrderPipelineStage) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{313}
}

func (x *OrderPipelineStage) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *OrderPipelineStage) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *OrderPipelineStage) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *OrderPipelineStage) GetPipeline() string {
	if x != nil {
		return x.Pipeline
	}
	return ""
}

func (x *OrderPipelineStage) GetStage() string {
	if x != nil {
		return x.Stage
	}
	return ""
}

func (x *OrderPipelineStage) GetAssigned() int64 {
	if x != nil {
		return x.Assigned
	}
	return 0
}

func (x *OrderPipelineStage) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *OrderPipelineStage) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *OrderPipelineStage) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *OrderPipelineStage) GetAssignedBy() string {
	if x != nil {
		return x.AssignedBy
	}
	return ""
}

func (x *OrderPipelineStage) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

type OrderAgent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	OrderId   string          `protobuf:"bytes,3,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	Id        string          `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	NotiMuted int64           `protobuf:"varint,5,opt,name=noti_muted,json=notiMuted,proto3" json:"noti_muted,omitempty"`
	Seen      int64           `protobuf:"varint,6,opt,name=seen,proto3" json:"seen,omitempty"`
	Commented int64           `protobuf:"varint,7,opt,name=commented,proto3" json:"commented,omitempty"`
}

func (x *OrderAgent) Reset() {
	*x = OrderAgent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[314]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderAgent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderAgent) ProtoMessage() {}

func (x *OrderAgent) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[314]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderAgent.ProtoReflect.Descriptor instead.
func (*OrderAgent) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{314}
}

func (x *OrderAgent) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *OrderAgent) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *OrderAgent) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *OrderAgent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OrderAgent) GetNotiMuted() int64 {
	if x != nil {
		return x.NotiMuted
	}
	return 0
}

func (x *OrderAgent) GetSeen() int64 {
	if x != nil {
		return x.Seen
	}
	return 0
}

func (x *OrderAgent) GetCommented() int64 {
	if x != nil {
		return x.Commented
	}
	return 0
}

type Bill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx         *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId   string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Id          string          `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	OrderId     string          `protobuf:"bytes,4,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	UserId      string          `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	By          string          `protobuf:"bytes,6,opt,name=by,proto3" json:"by,omitempty"`
	Created     int64           `protobuf:"varint,7,opt,name=created,proto3" json:"created,omitempty"`
	Method      string          `protobuf:"bytes,8,opt,name=method,proto3" json:"method,omitempty"` // manually
	Amount      float32         `protobuf:"fixed32,12,opt,name=amount,proto3" json:"amount,omitempty"`
	FpvAmount   int64           `protobuf:"varint,13,opt,name=fpv_amount,json=fpvAmount,proto3" json:"fpv_amount,omitempty"`
	Description string          `protobuf:"bytes,21,opt,name=description,proto3" json:"description,omitempty"`
	PictureUrl  string          `protobuf:"bytes,22,opt,name=picture_url,json=pictureUrl,proto3" json:"picture_url,omitempty"`
}

func (x *Bill) Reset() {
	*x = Bill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[315]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bill) ProtoMessage() {}

func (x *Bill) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[315]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bill.ProtoReflect.Descriptor instead.
func (*Bill) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{315}
}

func (x *Bill) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Bill) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Bill) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Bill) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *Bill) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Bill) GetBy() string {
	if x != nil {
		return x.By
	}
	return ""
}

func (x *Bill) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Bill) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *Bill) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Bill) GetFpvAmount() int64 {
	if x != nil {
		return x.FpvAmount
	}
	return 0
}

func (x *Bill) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Bill) GetPictureUrl() string {
	if x != nil {
		return x.PictureUrl
	}
	return ""
}

type CancellationCodes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx               *common.Context     `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId         string              `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	CancellationCodes []*CancellationCode `protobuf:"bytes,5,rep,name=cancellation_codes,json=cancellationCodes,proto3" json:"cancellation_codes,omitempty"`
}

func (x *CancellationCodes) Reset() {
	*x = CancellationCodes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[316]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancellationCodes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancellationCodes) ProtoMessage() {}

func (x *CancellationCodes) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[316]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancellationCodes.ProtoReflect.Descriptor instead.
func (*CancellationCodes) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{316}
}

func (x *CancellationCodes) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *CancellationCodes) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CancellationCodes) GetCancellationCodes() []*CancellationCode {
	if x != nil {
		return x.CancellationCodes
	}
	return nil
}

type CancellationCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// no_cancel = 0; // or empty string
	// price_too_high = 1;
	// customer_rejected = 2;
	// failed_delivery = 3;
	// out_of_stock = 4;
	// customer_wouldnt_response = 5;
	// went_with_another_option = 7;
	// went_with_a_competitor = 8;
	// bad_timming = 9;
	// other = 100;
	Code      string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Label     string `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
	Created   int64  `protobuf:"varint,5,opt,name=created,proto3" json:"created,omitempty"`
	CreatedBy string `protobuf:"bytes,6,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	Updated   int64  `protobuf:"varint,7,opt,name=updated,proto3" json:"updated,omitempty"`
	UpdatedBy string `protobuf:"bytes,8,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	Archived  int64  `protobuf:"varint,9,opt,name=archived,proto3" json:"archived,omitempty"`
	LastUsed  int64  `protobuf:"varint,10,opt,name=last_used,json=lastUsed,proto3" json:"last_used,omitempty"`
}

func (x *CancellationCode) Reset() {
	*x = CancellationCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[317]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancellationCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancellationCode) ProtoMessage() {}

func (x *CancellationCode) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[317]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancellationCode.ProtoReflect.Descriptor instead.
func (*CancellationCode) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{317}
}

func (x *CancellationCode) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *CancellationCode) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CancellationCode) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CancellationCode) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *CancellationCode) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *CancellationCode) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *CancellationCode) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *CancellationCode) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *CancellationCode) GetArchived() int64 {
	if x != nil {
		return x.Archived
	}
	return 0
}

func (x *CancellationCode) GetLastUsed() int64 {
	if x != nil {
		return x.LastUsed
	}
	return 0
}

type OrderPipelineUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx               *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId         string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	OrderId           string          `protobuf:"bytes,5,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	PipelineFrom      string          `protobuf:"bytes,6,opt,name=pipeline_from,json=pipelineFrom,proto3" json:"pipeline_from,omitempty"`
	PipelineStageFrom string          `protobuf:"bytes,7,opt,name=pipeline_stage_from,json=pipelineStageFrom,proto3" json:"pipeline_stage_from,omitempty"`
	PipelineTo        string          `protobuf:"bytes,8,opt,name=pipeline_to,json=pipelineTo,proto3" json:"pipeline_to,omitempty"`
	PipelineStageTo   string          `protobuf:"bytes,9,opt,name=pipeline_stage_to,json=pipelineStageTo,proto3" json:"pipeline_stage_to,omitempty"`
}

func (x *OrderPipelineUpdated) Reset() {
	*x = OrderPipelineUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[318]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderPipelineUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderPipelineUpdated) ProtoMessage() {}

func (x *OrderPipelineUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[318]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderPipelineUpdated.ProtoReflect.Descriptor instead.
func (*OrderPipelineUpdated) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{318}
}

func (x *OrderPipelineUpdated) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *OrderPipelineUpdated) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *OrderPipelineUpdated) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *OrderPipelineUpdated) GetPipelineFrom() string {
	if x != nil {
		return x.PipelineFrom
	}
	return ""
}

func (x *OrderPipelineUpdated) GetPipelineStageFrom() string {
	if x != nil {
		return x.PipelineStageFrom
	}
	return ""
}

func (x *OrderPipelineUpdated) GetPipelineTo() string {
	if x != nil {
		return x.PipelineTo
	}
	return ""
}

func (x *OrderPipelineUpdated) GetPipelineStageTo() string {
	if x != nil {
		return x.PipelineStageTo
	}
	return ""
}

type OrderStatusUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx        *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId  string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	OrderId    string          `protobuf:"bytes,5,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	StatusFrom string          `protobuf:"bytes,6,opt,name=status_from,json=statusFrom,proto3" json:"status_from,omitempty"`
	StatusTo   string          `protobuf:"bytes,7,opt,name=status_to,json=statusTo,proto3" json:"status_to,omitempty"`
}

func (x *OrderStatusUpdated) Reset() {
	*x = OrderStatusUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[319]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderStatusUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderStatusUpdated) ProtoMessage() {}

func (x *OrderStatusUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[319]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderStatusUpdated.ProtoReflect.Descriptor instead.
func (*OrderStatusUpdated) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{319}
}

func (x *OrderStatusUpdated) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *OrderStatusUpdated) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *OrderStatusUpdated) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *OrderStatusUpdated) GetStatusFrom() string {
	if x != nil {
		return x.StatusFrom
	}
	return ""
}

func (x *OrderStatusUpdated) GetStatusTo() string {
	if x != nil {
		return x.StatusTo
	}
	return ""
}

type OrderHistoryEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event      *Event `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"` // 1 core
	RefComment *Event `protobuf:"bytes,3,opt,name=ref_comment,json=refComment,proto3" json:"ref_comment,omitempty"`
	OrderId    string `protobuf:"bytes,4,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (x *OrderHistoryEntry) Reset() {
	*x = OrderHistoryEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[320]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderHistoryEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderHistoryEntry) ProtoMessage() {}

func (x *OrderHistoryEntry) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[320]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderHistoryEntry.ProtoReflect.Descriptor instead.
func (*OrderHistoryEntry) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{320}
}

func (x *OrderHistoryEntry) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *OrderHistoryEntry) GetRefComment() *Event {
	if x != nil {
		return x.RefComment
	}
	return nil
}

func (x *OrderHistoryEntry) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

type OrderHistoryEntries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx          *common.Context      `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Entries      []*OrderHistoryEntry `protobuf:"bytes,4,rep,name=entries,proto3" json:"entries,omitempty"`
	Total        int64                `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Anchor       string               `protobuf:"bytes,3,opt,name=anchor,proto3" json:"anchor,omitempty"`
	LastModified int64                `protobuf:"varint,5,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
}

func (x *OrderHistoryEntries) Reset() {
	*x = OrderHistoryEntries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[321]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderHistoryEntries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderHistoryEntries) ProtoMessage() {}

func (x *OrderHistoryEntries) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[321]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderHistoryEntries.ProtoReflect.Descriptor instead.
func (*OrderHistoryEntries) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{321}
}

func (x *OrderHistoryEntries) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *OrderHistoryEntries) GetEntries() []*OrderHistoryEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *OrderHistoryEntries) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *OrderHistoryEntries) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *OrderHistoryEntries) GetLastModified() int64 {
	if x != nil {
		return x.LastModified
	}
	return 0
}

type Product struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx                           *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId                     string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	OtherVariants                 []*Product      `protobuf:"bytes,4,rep,name=other_variants,json=otherVariants,proto3" json:"other_variants,omitempty"`       // [2] [3]
	Id                            string          `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`                                                  // generated
	ProductGroupId                string          `protobuf:"bytes,5,opt,name=product_group_id,json=productGroupId,proto3" json:"product_group_id,omitempty"`  // iphone-6-plus
	LeftProductId                 string          `protobuf:"bytes,56,opt,name=left_product_id,json=leftProductId,proto3" json:"left_product_id,omitempty"`    // only server
	RightProductId                string          `protobuf:"bytes,57,opt,name=right_product_id,json=rightProductId,proto3" json:"right_product_id,omitempty"` // only server
	Title                         string          `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`                                            // deprecated // should be use for name
	Url                           string          `protobuf:"bytes,7,opt,name=url,proto3" json:"url,omitempty"`                                                // (shared)
	Handle                        string          `protobuf:"bytes,8,opt,name=handle,proto3" json:"handle,omitempty"`                                          // (shared) iphone-6-plus-128G
	Name                          string          `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	I18NName                      *I18NString     `protobuf:"bytes,10,opt,name=i18n_name,json=i18nName,proto3" json:"i18n_name,omitempty"`                                                                      // (shared) apple Iphone 6 plus
	Description                   string          `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`                                                                                // (shared)
	I18NDescription               *I18NString     `protobuf:"bytes,12,opt,name=i18n_description,json=i18nDescription,proto3" json:"i18n_description,omitempty"`                                                 // (shared) server generated
	I18NLongDescriptionQuillDelta *I18NString     `protobuf:"bytes,13,opt,name=i18n_long_description_quill_delta,json=i18nLongDescriptionQuillDelta,proto3" json:"i18n_long_description_quill_delta,omitempty"` // (shared)
	LongDescription               string          `protobuf:"bytes,15,opt,name=long_description,json=longDescription,proto3" json:"long_description,omitempty"`                                                 // (shared)
	Props                         []*KV           `protobuf:"bytes,14,rep,name=props,proto3" json:"props,omitempty"`                                                                                            // future replacement for props
	MobileUrl                     string          `protobuf:"bytes,17,opt,name=mobile_url,json=mobileUrl,proto3" json:"mobile_url,omitempty"`                                                                   // (shared)
	// repeated KV metadata = 13;
	// accessory.watch
	Category  string           `protobuf:"bytes,16,opt,name=category,proto3" json:"category,omitempty"` // (shared)
	Brand     string           `protobuf:"bytes,18,opt,name=brand,proto3" json:"brand,omitempty"`       // (shared) brand name: apple, luis vuiton
	Options   []*ProductOption `protobuf:"bytes,19,rep,name=options,proto3" json:"options,omitempty"`   // (shared)
	Created   int64            `protobuf:"varint,20,opt,name=created,proto3" json:"created,omitempty"`
	Updated   int64            `protobuf:"varint,21,opt,name=updated,proto3" json:"updated,omitempty"`
	CreatedBy string           `protobuf:"bytes,22,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	UpdatedBy string           `protobuf:"bytes,23,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// google: Manufacturer part number (MPN) is a series of numbers and letters that the manufacturer assigned to this product, in 70 characters or less.
	Mpn              string   `protobuf:"bytes,26,opt,name=mpn,proto3" json:"mpn,omitempty"` // (shared)
	Image            string   `protobuf:"bytes,30,opt,name=image,proto3" json:"image,omitempty"`
	Images           []string `protobuf:"bytes,31,rep,name=images,proto3" json:"images,omitempty"`                                             // (shared)
	AdditionalImages []string `protobuf:"bytes,32,rep,name=additional_images,json=additionalImages,proto3" json:"additional_images,omitempty"` // (shared)
	Videos           []string `protobuf:"bytes,33,rep,name=videos,proto3" json:"videos,omitempty"`                                             // (shared)
	AdditionalVideos []string `protobuf:"bytes,34,rep,name=additional_videos,json=additionalVideos,proto3" json:"additional_videos,omitempty"` // (shared)
	Note             string   `protobuf:"bytes,35,opt,name=note,proto3" json:"note,omitempty"`                                                 // (shared)
	// shipping
	RequiresShipping bool                `protobuf:"varint,36,opt,name=requires_shipping,json=requiresShipping,proto3" json:"requires_shipping,omitempty"`
	DaysToShip       int64               `protobuf:"varint,37,opt,name=days_to_ship,json=daysToShip,proto3" json:"days_to_ship,omitempty"`
	DimensionWidth   float32             `protobuf:"fixed32,38,opt,name=dimension_width,json=dimensionWidth,proto3" json:"dimension_width,omitempty"`
	DimensionHeight  float32             `protobuf:"fixed32,39,opt,name=dimension_height,json=dimensionHeight,proto3" json:"dimension_height,omitempty"`
	DimensionLength  float32             `protobuf:"fixed32,40,opt,name=dimension_length,json=dimensionLength,proto3" json:"dimension_length,omitempty"`
	Weight           float32             `protobuf:"fixed32,41,opt,name=weight,proto3" json:"weight,omitempty"`
	WeightUnit       string              `protobuf:"bytes,42,opt,name=weight_unit,json=weightUnit,proto3" json:"weight_unit,omitempty"` // g, kg
	Grams            float32             `protobuf:"fixed32,43,opt,name=grams,proto3" json:"grams,omitempty"`
	AllowPreorder    bool                `protobuf:"varint,44,opt,name=allow_preorder,json=allowPreorder,proto3" json:"allow_preorder,omitempty"`
	Condition        string              `protobuf:"bytes,47,opt,name=condition,proto3" json:"condition,omitempty"`   // (shared) new, refurbished, used
	Visibility       string              `protobuf:"bytes,48,opt,name=visibility,proto3" json:"visibility,omitempty"` // (shared) published, staging, hidden, deleted
	Sku              string              `protobuf:"bytes,49,opt,name=sku,proto3" json:"sku,omitempty"`
	Barcode          string              `protobuf:"bytes,50,opt,name=barcode,proto3" json:"barcode,omitempty"`
	Price            float32             `protobuf:"fixed32,51,opt,name=price,proto3" json:"price,omitempty"`
	FpvPrice         int64               `protobuf:"varint,52,opt,name=fpv_price,json=fpvPrice,proto3" json:"fpv_price,omitempty"`      // (readonly from client)
	PriceRules       []*PriceRule        `protobuf:"bytes,54,rep,name=price_rules,json=priceRules,proto3" json:"price_rules,omitempty"` // (shared)
	Stock            int64               `protobuf:"varint,60,opt,name=stock,proto3" json:"stock,omitempty"`                            //
	SourceId         string              `protobuf:"bytes,61,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	HasInventory     bool                `protobuf:"varint,62,opt,name=has_inventory,json=hasInventory,proto3" json:"has_inventory,omitempty"` // share
	Inventories      []*ProductInventory `protobuf:"bytes,63,rep,name=inventories,proto3" json:"inventories,omitempty"`
	Tax              *Tax                `protobuf:"bytes,64,opt,name=tax,proto3" json:"tax,omitempty"` // (shared)
	Currency         string              `protobuf:"bytes,65,opt,name=currency,proto3" json:"currency,omitempty"`
	Buttons          []*MessageButton    `protobuf:"bytes,66,rep,name=buttons,proto3" json:"buttons,omitempty"`                                           // for message attachment
	ViewDurationSec  int64               `protobuf:"varint,67,opt,name=view_duration_sec,json=viewDurationSec,proto3" json:"view_duration_sec,omitempty"` // for event content_view only
}

func (x *Product) Reset() {
	*x = Product{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[322]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product) ProtoMessage() {}

func (x *Product) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[322]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product.ProtoReflect.Descriptor instead.
func (*Product) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{322}
}

func (x *Product) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Product) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Product) GetOtherVariants() []*Product {
	if x != nil {
		return x.OtherVariants
	}
	return nil
}

func (x *Product) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Product) GetProductGroupId() string {
	if x != nil {
		return x.ProductGroupId
	}
	return ""
}

func (x *Product) GetLeftProductId() string {
	if x != nil {
		return x.LeftProductId
	}
	return ""
}

func (x *Product) GetRightProductId() string {
	if x != nil {
		return x.RightProductId
	}
	return ""
}

func (x *Product) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Product) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Product) GetHandle() string {
	if x != nil {
		return x.Handle
	}
	return ""
}

func (x *Product) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Product) GetI18NName() *I18NString {
	if x != nil {
		return x.I18NName
	}
	return nil
}

func (x *Product) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Product) GetI18NDescription() *I18NString {
	if x != nil {
		return x.I18NDescription
	}
	return nil
}

func (x *Product) GetI18NLongDescriptionQuillDelta() *I18NString {
	if x != nil {
		return x.I18NLongDescriptionQuillDelta
	}
	return nil
}

func (x *Product) GetLongDescription() string {
	if x != nil {
		return x.LongDescription
	}
	return ""
}

func (x *Product) GetProps() []*KV {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *Product) GetMobileUrl() string {
	if x != nil {
		return x.MobileUrl
	}
	return ""
}

func (x *Product) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Product) GetBrand() string {
	if x != nil {
		return x.Brand
	}
	return ""
}

func (x *Product) GetOptions() []*ProductOption {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Product) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Product) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *Product) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *Product) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *Product) GetMpn() string {
	if x != nil {
		return x.Mpn
	}
	return ""
}

func (x *Product) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Product) GetImages() []string {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *Product) GetAdditionalImages() []string {
	if x != nil {
		return x.AdditionalImages
	}
	return nil
}

func (x *Product) GetVideos() []string {
	if x != nil {
		return x.Videos
	}
	return nil
}

func (x *Product) GetAdditionalVideos() []string {
	if x != nil {
		return x.AdditionalVideos
	}
	return nil
}

func (x *Product) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *Product) GetRequiresShipping() bool {
	if x != nil {
		return x.RequiresShipping
	}
	return false
}

func (x *Product) GetDaysToShip() int64 {
	if x != nil {
		return x.DaysToShip
	}
	return 0
}

func (x *Product) GetDimensionWidth() float32 {
	if x != nil {
		return x.DimensionWidth
	}
	return 0
}

func (x *Product) GetDimensionHeight() float32 {
	if x != nil {
		return x.DimensionHeight
	}
	return 0
}

func (x *Product) GetDimensionLength() float32 {
	if x != nil {
		return x.DimensionLength
	}
	return 0
}

func (x *Product) GetWeight() float32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Product) GetWeightUnit() string {
	if x != nil {
		return x.WeightUnit
	}
	return ""
}

func (x *Product) GetGrams() float32 {
	if x != nil {
		return x.Grams
	}
	return 0
}

func (x *Product) GetAllowPreorder() bool {
	if x != nil {
		return x.AllowPreorder
	}
	return false
}

func (x *Product) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *Product) GetVisibility() string {
	if x != nil {
		return x.Visibility
	}
	return ""
}

func (x *Product) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *Product) GetBarcode() string {
	if x != nil {
		return x.Barcode
	}
	return ""
}

func (x *Product) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Product) GetFpvPrice() int64 {
	if x != nil {
		return x.FpvPrice
	}
	return 0
}

func (x *Product) GetPriceRules() []*PriceRule {
	if x != nil {
		return x.PriceRules
	}
	return nil
}

func (x *Product) GetStock() int64 {
	if x != nil {
		return x.Stock
	}
	return 0
}

func (x *Product) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *Product) GetHasInventory() bool {
	if x != nil {
		return x.HasInventory
	}
	return false
}

func (x *Product) GetInventories() []*ProductInventory {
	if x != nil {
		return x.Inventories
	}
	return nil
}

func (x *Product) GetTax() *Tax {
	if x != nil {
		return x.Tax
	}
	return nil
}

func (x *Product) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Product) GetButtons() []*MessageButton {
	if x != nil {
		return x.Buttons
	}
	return nil
}

func (x *Product) GetViewDurationSec() int64 {
	if x != nil {
		return x.ViewDurationSec
	}
	return 0
}

type ProductInventory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PosId    string  `protobuf:"bytes,4,opt,name=pos_id,json=posId,proto3" json:"pos_id,omitempty"`
	Barcode  string  `protobuf:"bytes,5,opt,name=barcode,proto3" json:"barcode,omitempty"`
	Price    float32 `protobuf:"fixed32,6,opt,name=price,proto3" json:"price,omitempty"`
	FpvPrice int64   `protobuf:"varint,7,opt,name=fpv_price,json=fpvPrice,proto3" json:"fpv_price,omitempty"`
	Stock    int64   `protobuf:"varint,9,opt,name=stock,proto3" json:"stock,omitempty"` //
	Currency string  `protobuf:"bytes,10,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *ProductInventory) Reset() {
	*x = ProductInventory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[323]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductInventory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductInventory) ProtoMessage() {}

func (x *ProductInventory) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[323]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductInventory.ProtoReflect.Descriptor instead.
func (*ProductInventory) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{323}
}

func (x *ProductInventory) GetPosId() string {
	if x != nil {
		return x.PosId
	}
	return ""
}

func (x *ProductInventory) GetBarcode() string {
	if x != nil {
		return x.Barcode
	}
	return ""
}

func (x *ProductInventory) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ProductInventory) GetFpvPrice() int64 {
	if x != nil {
		return x.FpvPrice
	}
	return 0
}

func (x *ProductInventory) GetStock() int64 {
	if x != nil {
		return x.Stock
	}
	return 0
}

func (x *ProductInventory) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type ProductOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         string   `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Name        string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Values      []string `protobuf:"bytes,5,rep,name=values,proto3" json:"values,omitempty"`
	IsMandatory bool     `protobuf:"varint,6,opt,name=is_mandatory,json=isMandatory,proto3" json:"is_mandatory,omitempty"`
}

func (x *ProductOption) Reset() {
	*x = ProductOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[324]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductOption) ProtoMessage() {}

func (x *ProductOption) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[324]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductOption.ProtoReflect.Descriptor instead.
func (*ProductOption) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{324}
}

func (x *ProductOption) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ProductOption) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductOption) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *ProductOption) GetIsMandatory() bool {
	if x != nil {
		return x.IsMandatory
	}
	return false
}

type Products struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx      *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Products []*Product      `protobuf:"bytes,2,rep,name=products,proto3" json:"products,omitempty"`
	Anchor   string          `protobuf:"bytes,3,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Total    int64           `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *Products) Reset() {
	*x = Products{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[325]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Products) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Products) ProtoMessage() {}

func (x *Products) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[325]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Products.ProtoReflect.Descriptor instead.
func (*Products) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{325}
}

func (x *Products) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Products) GetProducts() []*Product {
	if x != nil {
		return x.Products
	}
	return nil
}

func (x *Products) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *Products) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GoogleSheetProductFeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *GoogleSheetProductFeed) Reset() {
	*x = GoogleSheetProductFeed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[326]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleSheetProductFeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleSheetProductFeed) ProtoMessage() {}

func (x *GoogleSheetProductFeed) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[326]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleSheetProductFeed.ProtoReflect.Descriptor instead.
func (*GoogleSheetProductFeed) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{326}
}

func (x *GoogleSheetProductFeed) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type WebsiteProductFeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format     string `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"` // jsonld, rdfa, microdata
	WebsiteUrl string `protobuf:"bytes,3,opt,name=website_url,json=websiteUrl,proto3" json:"website_url,omitempty"`
}

func (x *WebsiteProductFeed) Reset() {
	*x = WebsiteProductFeed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[327]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebsiteProductFeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebsiteProductFeed) ProtoMessage() {}

func (x *WebsiteProductFeed) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[327]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebsiteProductFeed.ProtoReflect.Descriptor instead.
func (*WebsiteProductFeed) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{327}
}

func (x *WebsiteProductFeed) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *WebsiteProductFeed) GetWebsiteUrl() string {
	if x != nil {
		return x.WebsiteUrl
	}
	return ""
}

type ShopeeProductFeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken string `protobuf:"bytes,4,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
}

func (x *ShopeeProductFeed) Reset() {
	*x = ShopeeProductFeed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[328]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShopeeProductFeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopeeProductFeed) ProtoMessage() {}

func (x *ShopeeProductFeed) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[328]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopeeProductFeed.ProtoReflect.Descriptor instead.
func (*ShopeeProductFeed) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{328}
}

func (x *ShopeeProductFeed) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

type ProductFeeds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx          *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId    string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ProductFeeds []*ProductFeed  `protobuf:"bytes,4,rep,name=product_feeds,json=productFeeds,proto3" json:"product_feeds,omitempty"`
}

func (x *ProductFeeds) Reset() {
	*x = ProductFeeds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[329]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductFeeds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductFeeds) ProtoMessage() {}

func (x *ProductFeeds) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[329]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductFeeds.ProtoReflect.Descriptor instead.
func (*ProductFeeds) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{329}
}

func (x *ProductFeeds) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ProductFeeds) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ProductFeeds) GetProductFeeds() []*ProductFeed {
	if x != nil {
		return x.ProductFeeds
	}
	return nil
}

type ProductFeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Id        string          `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Type      string          `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"` // google sheet, shopee, website json ld
	// google sheet
	Shopee            *ShopeeProductFeed      `protobuf:"bytes,5,opt,name=shopee,proto3" json:"shopee,omitempty"`
	Website           *WebsiteProductFeed     `protobuf:"bytes,6,opt,name=website,proto3" json:"website,omitempty"`
	GoogleSheet       *GoogleSheetProductFeed `protobuf:"bytes,7,opt,name=google_sheet,json=googleSheet,proto3" json:"google_sheet,omitempty"`
	Created           int64                   `protobuf:"varint,20,opt,name=created,proto3" json:"created,omitempty"`
	CreatedBy         string                  `protobuf:"bytes,21,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	Updated           int64                   `protobuf:"varint,22,opt,name=updated,proto3" json:"updated,omitempty"`
	UpdatedBy         string                  `protobuf:"bytes,23,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	LastFetched       int64                   `protobuf:"varint,24,opt,name=last_fetched,json=lastFetched,proto3" json:"last_fetched,omitempty"`
	LastFetchDuration int64                   `protobuf:"varint,25,opt,name=last_fetch_duration,json=lastFetchDuration,proto3" json:"last_fetch_duration,omitempty"`
	LastFetchError    string                  `protobuf:"bytes,26,opt,name=last_fetch_error,json=lastFetchError,proto3" json:"last_fetch_error,omitempty"`
	LastFetchStatus   string                  `protobuf:"bytes,27,opt,name=last_fetch_status,json=lastFetchStatus,proto3" json:"last_fetch_status,omitempty"` // success, failed
	LastSucessFetched int64                   `protobuf:"varint,30,opt,name=last_sucess_fetched,json=lastSucessFetched,proto3" json:"last_sucess_fetched,omitempty"`
	Disabled          int64                   `protobuf:"varint,31,opt,name=disabled,proto3" json:"disabled,omitempty"`
}

func (x *ProductFeed) Reset() {
	*x = ProductFeed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[330]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductFeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductFeed) ProtoMessage() {}

func (x *ProductFeed) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[330]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductFeed.ProtoReflect.Descriptor instead.
func (*ProductFeed) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{330}
}

func (x *ProductFeed) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ProductFeed) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ProductFeed) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProductFeed) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ProductFeed) GetShopee() *ShopeeProductFeed {
	if x != nil {
		return x.Shopee
	}
	return nil
}

func (x *ProductFeed) GetWebsite() *WebsiteProductFeed {
	if x != nil {
		return x.Website
	}
	return nil
}

func (x *ProductFeed) GetGoogleSheet() *GoogleSheetProductFeed {
	if x != nil {
		return x.GoogleSheet
	}
	return nil
}

func (x *ProductFeed) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *ProductFeed) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *ProductFeed) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *ProductFeed) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *ProductFeed) GetLastFetched() int64 {
	if x != nil {
		return x.LastFetched
	}
	return 0
}

func (x *ProductFeed) GetLastFetchDuration() int64 {
	if x != nil {
		return x.LastFetchDuration
	}
	return 0
}

func (x *ProductFeed) GetLastFetchError() string {
	if x != nil {
		return x.LastFetchError
	}
	return ""
}

func (x *ProductFeed) GetLastFetchStatus() string {
	if x != nil {
		return x.LastFetchStatus
	}
	return ""
}

func (x *ProductFeed) GetLastSucessFetched() int64 {
	if x != nil {
		return x.LastSucessFetched
	}
	return 0
}

func (x *ProductFeed) GetDisabled() int64 {
	if x != nil {
		return x.Disabled
	}
	return 0
}

type ProductsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Query     string          `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	Limit     int32           `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"` // 200
	Anchor    string          `protobuf:"bytes,5,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Offset    int32           `protobuf:"varint,16,opt,name=offset,proto3" json:"offset,omitempty"`
	PriceGte  int64           `protobuf:"varint,6,opt,name=price_gte,json=priceGte,proto3" json:"price_gte,omitempty"`
	PriceLte  int64           `protobuf:"varint,7,opt,name=price_lte,json=priceLte,proto3" json:"price_lte,omitempty"`
	// [{key: 'colors', value:'red,blue', {key:'size', value:'xxl'}]
	// returns all variants which color is (red OR blue) AND size is xxl
	Props                []*KV    `protobuf:"bytes,8,rep,name=props,proto3" json:"props,omitempty"`
	Availability         string   `protobuf:"bytes,9,opt,name=availability,proto3" json:"availability,omitempty"` // instock, out_of_stock
	Category             string   `protobuf:"bytes,10,opt,name=category,proto3" json:"category,omitempty"`
	Visibility           string   `protobuf:"bytes,11,opt,name=visibility,proto3" json:"visibility,omitempty"` // published or hidden
	Ids                  []string `protobuf:"bytes,12,rep,name=ids,proto3" json:"ids,omitempty"`
	LastModifieds        []int64  `protobuf:"varint,14,rep,packed,name=last_modifieds,json=lastModifieds,proto3" json:"last_modifieds,omitempty"` // ms
	ProductCollectionIds []string `protobuf:"bytes,15,rep,name=product_collection_ids,json=productCollectionIds,proto3" json:"product_collection_ids,omitempty"`
	IncludeDeleted       bool     `protobuf:"varint,17,opt,name=include_deleted,json=includeDeleted,proto3" json:"include_deleted,omitempty"`
	Sku                  string   `protobuf:"bytes,18,opt,name=sku,proto3" json:"sku,omitempty"`
	Url                  string   `protobuf:"bytes,19,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *ProductsRequest) Reset() {
	*x = ProductsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[331]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductsRequest) ProtoMessage() {}

func (x *ProductsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[331]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductsRequest.ProtoReflect.Descriptor instead.
func (*ProductsRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{331}
}

func (x *ProductsRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ProductsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ProductsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ProductsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ProductsRequest) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *ProductsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ProductsRequest) GetPriceGte() int64 {
	if x != nil {
		return x.PriceGte
	}
	return 0
}

func (x *ProductsRequest) GetPriceLte() int64 {
	if x != nil {
		return x.PriceLte
	}
	return 0
}

func (x *ProductsRequest) GetProps() []*KV {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *ProductsRequest) GetAvailability() string {
	if x != nil {
		return x.Availability
	}
	return ""
}

func (x *ProductsRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *ProductsRequest) GetVisibility() string {
	if x != nil {
		return x.Visibility
	}
	return ""
}

func (x *ProductsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ProductsRequest) GetLastModifieds() []int64 {
	if x != nil {
		return x.LastModifieds
	}
	return nil
}

func (x *ProductsRequest) GetProductCollectionIds() []string {
	if x != nil {
		return x.ProductCollectionIds
	}
	return nil
}

func (x *ProductsRequest) GetIncludeDeleted() bool {
	if x != nil {
		return x.IncludeDeleted
	}
	return false
}

func (x *ProductsRequest) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *ProductsRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type KV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value   string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	KeyId   int64  `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	ValueId int64  `protobuf:"varint,5,opt,name=value_id,json=valueId,proto3" json:"value_id,omitempty"`
	Kvs     []*KV  `protobuf:"bytes,6,rep,name=kvs,proto3" json:"kvs,omitempty"`
}

func (x *KV) Reset() {
	*x = KV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[332]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KV) ProtoMessage() {}

func (x *KV) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[332]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KV.ProtoReflect.Descriptor instead.
func (*KV) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{332}
}

func (x *KV) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KV) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *KV) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *KV) GetValueId() int64 {
	if x != nil {
		return x.ValueId
	}
	return 0
}

func (x *KV) GetKvs() []*KV {
	if x != nil {
		return x.Kvs
	}
	return nil
}

type ProductCategories struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx            *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId      string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Categories     []string        `protobuf:"bytes,4,rep,name=categories,proto3" json:"categories,omitempty"`
	ProductNumbers []int64         `protobuf:"varint,7,rep,packed,name=product_numbers,json=productNumbers,proto3" json:"product_numbers,omitempty"`
	Anchor         string          `protobuf:"bytes,5,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Total          int64           `protobuf:"varint,6,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ProductCategories) Reset() {
	*x = ProductCategories{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[333]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductCategories) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductCategories) ProtoMessage() {}

func (x *ProductCategories) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[333]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductCategories.ProtoReflect.Descriptor instead.
func (*ProductCategories) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{333}
}

func (x *ProductCategories) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ProductCategories) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ProductCategories) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *ProductCategories) GetProductNumbers() []int64 {
	if x != nil {
		return x.ProductNumbers
	}
	return nil
}

func (x *ProductCategories) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *ProductCategories) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ProductProps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Props     []*KV           `protobuf:"bytes,3,rep,name=props,proto3" json:"props,omitempty"`
	Anchor    string          `protobuf:"bytes,5,opt,name=anchor,proto3" json:"anchor,omitempty"`
}

func (x *ProductProps) Reset() {
	*x = ProductProps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[334]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductProps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductProps) ProtoMessage() {}

func (x *ProductProps) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[334]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductProps.ProtoReflect.Descriptor instead.
func (*ProductProps) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{334}
}

func (x *ProductProps) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ProductProps) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ProductProps) GetProps() []*KV {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *ProductProps) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

type Tax struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx        *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId  string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Id         string          `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	Name       string          `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	I18NName   *I18NString     `protobuf:"bytes,5,opt,name=i18n_name,json=i18nName,proto3" json:"i18n_name,omitempty"`
	Percentage int64           `protobuf:"varint,6,opt,name=percentage,proto3" json:"percentage,omitempty"` // x10000 e.g: 20% => 2000
	// group, tax, compound
	Type      string `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
	IsDefault bool   `protobuf:"varint,8,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
	Created   int64  `protobuf:"varint,12,opt,name=created,proto3" json:"created,omitempty"`
	CreatedBy string `protobuf:"bytes,13,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	Updated   int64  `protobuf:"varint,14,opt,name=updated,proto3" json:"updated,omitempty"`
	UpdatedBy string `protobuf:"bytes,15,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	Hidden    bool   `protobuf:"varint,17,opt,name=hidden,proto3" json:"hidden,omitempty"`
}

func (x *Tax) Reset() {
	*x = Tax{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[335]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tax) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tax) ProtoMessage() {}

func (x *Tax) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[335]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tax.ProtoReflect.Descriptor instead.
func (*Tax) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{335}
}

func (x *Tax) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Tax) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Tax) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Tax) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tax) GetI18NName() *I18NString {
	if x != nil {
		return x.I18NName
	}
	return nil
}

func (x *Tax) GetPercentage() int64 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

func (x *Tax) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Tax) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *Tax) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Tax) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *Tax) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *Tax) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *Tax) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

type Taxes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Taxes     []*Tax          `protobuf:"bytes,3,rep,name=taxes,proto3" json:"taxes,omitempty"`
}

func (x *Taxes) Reset() {
	*x = Taxes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[336]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Taxes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Taxes) ProtoMessage() {}

func (x *Taxes) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[336]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Taxes.ProtoReflect.Descriptor instead.
func (*Taxes) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{336}
}

func (x *Taxes) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Taxes) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Taxes) GetTaxes() []*Tax {
	if x != nil {
		return x.Taxes
	}
	return nil
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Debug       string `protobuf:"bytes,3,opt,name=debug,proto3" json:"debug,omitempty"`
	Class       int32  `protobuf:"varint,4,opt,name=class,proto3" json:"class,omitempty"`
	Stack       string `protobuf:"bytes,5,opt,name=stack,proto3" json:"stack,omitempty"`
	Created     int64  `protobuf:"varint,6,opt,name=created,proto3" json:"created,omitempty"` // ms
	Code        string `protobuf:"bytes,7,opt,name=code,proto3" json:"code,omitempty"`
	Root        string `protobuf:"bytes,8,opt,name=root,proto3" json:"root,omitempty"`
	RequestId   string `protobuf:"bytes,9,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[337]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[337]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{337}
}

func (x *Error) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Error) GetDebug() string {
	if x != nil {
		return x.Debug
	}
	return ""
}

func (x *Error) GetClass() int32 {
	if x != nil {
		return x.Class
	}
	return 0
}

func (x *Error) GetStack() string {
	if x != nil {
		return x.Stack
	}
	return ""
}

func (x *Error) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Error) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Error) GetRoot() string {
	if x != nil {
		return x.Root
	}
	return ""
}

func (x *Error) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type ShopeeShop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx                 *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId           string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ShopId              int64           `protobuf:"varint,3,opt,name=shop_id,json=shopId,proto3" json:"shop_id,omitempty"`
	ShopLogo            string          `protobuf:"bytes,4,opt,name=shop_logo,json=shopLogo,proto3" json:"shop_logo,omitempty"`
	Description         string          `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	ShopName            string          `protobuf:"bytes,6,opt,name=shop_name,json=shopName,proto3" json:"shop_name,omitempty"`
	Region              string          `protobuf:"bytes,7,opt,name=region,proto3" json:"region,omitempty"` // VN
	NumUnlistedProducts int64           `protobuf:"varint,8,opt,name=num_unlisted_products,json=numUnlistedProducts,proto3" json:"num_unlisted_products,omitempty"`
	NumNormalProducts   int64           `protobuf:"varint,9,opt,name=num_normal_products,json=numNormalProducts,proto3" json:"num_normal_products,omitempty"`
	LastSuccessCalled   int64           `protobuf:"varint,11,opt,name=last_success_called,json=lastSuccessCalled,proto3" json:"last_success_called,omitempty"`
	LastCalled          int64           `protobuf:"varint,12,opt,name=last_called,json=lastCalled,proto3" json:"last_called,omitempty"`
	Authorized          int64           `protobuf:"varint,13,opt,name=authorized,proto3" json:"authorized,omitempty"`
	AuthorizedBy        string          `protobuf:"bytes,14,opt,name=authorized_by,json=authorizedBy,proto3" json:"authorized_by,omitempty"`
	Status              string          `protobuf:"bytes,15,opt,name=status,proto3" json:"status,omitempty"`                                                   // normal, failed, deleted
	LastProfileSynced   int64           `protobuf:"varint,17,opt,name=last_profile_synced,json=lastProfileSynced,proto3" json:"last_profile_synced,omitempty"` // last sync profile
}

func (x *ShopeeShop) Reset() {
	*x = ShopeeShop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[338]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShopeeShop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopeeShop) ProtoMessage() {}

func (x *ShopeeShop) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[338]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopeeShop.ProtoReflect.Descriptor instead.
func (*ShopeeShop) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{338}
}

func (x *ShopeeShop) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ShopeeShop) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ShopeeShop) GetShopId() int64 {
	if x != nil {
		return x.ShopId
	}
	return 0
}

func (x *ShopeeShop) GetShopLogo() string {
	if x != nil {
		return x.ShopLogo
	}
	return ""
}

func (x *ShopeeShop) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ShopeeShop) GetShopName() string {
	if x != nil {
		return x.ShopName
	}
	return ""
}

func (x *ShopeeShop) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ShopeeShop) GetNumUnlistedProducts() int64 {
	if x != nil {
		return x.NumUnlistedProducts
	}
	return 0
}

func (x *ShopeeShop) GetNumNormalProducts() int64 {
	if x != nil {
		return x.NumNormalProducts
	}
	return 0
}

func (x *ShopeeShop) GetLastSuccessCalled() int64 {
	if x != nil {
		return x.LastSuccessCalled
	}
	return 0
}

func (x *ShopeeShop) GetLastCalled() int64 {
	if x != nil {
		return x.LastCalled
	}
	return 0
}

func (x *ShopeeShop) GetAuthorized() int64 {
	if x != nil {
		return x.Authorized
	}
	return 0
}

func (x *ShopeeShop) GetAuthorizedBy() string {
	if x != nil {
		return x.AuthorizedBy
	}
	return ""
}

func (x *ShopeeShop) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ShopeeShop) GetLastProfileSynced() int64 {
	if x != nil {
		return x.LastProfileSynced
	}
	return 0
}

type AuthorizeShopeeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx           *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId     string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Code          string          `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	ShopId        int64           `protobuf:"varint,4,opt,name=shop_id,json=shopId,proto3" json:"shop_id,omitempty"`
	MainAccountId string          `protobuf:"bytes,5,opt,name=main_account_id,json=mainAccountId,proto3" json:"main_account_id,omitempty"`
}

func (x *AuthorizeShopeeRequest) Reset() {
	*x = AuthorizeShopeeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[339]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizeShopeeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizeShopeeRequest) ProtoMessage() {}

func (x *AuthorizeShopeeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[339]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizeShopeeRequest.ProtoReflect.Descriptor instead.
func (*AuthorizeShopeeRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{339}
}

func (x *AuthorizeShopeeRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *AuthorizeShopeeRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AuthorizeShopeeRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *AuthorizeShopeeRequest) GetShopId() int64 {
	if x != nil {
		return x.ShopId
	}
	return 0
}

func (x *AuthorizeShopeeRequest) GetMainAccountId() string {
	if x != nil {
		return x.MainAccountId
	}
	return ""
}

type ShopeeSyncProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ShopId    int64           `protobuf:"varint,3,opt,name=shop_id,json=shopId,proto3" json:"shop_id,omitempty"`
	Offset    int64           `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	PageSize  int64           `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Status    string          `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	Mode      string          `protobuf:"bytes,8,opt,name=mode,proto3" json:"mode,omitempty"` // override, append only
}

func (x *ShopeeSyncProductRequest) Reset() {
	*x = ShopeeSyncProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[340]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShopeeSyncProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopeeSyncProductRequest) ProtoMessage() {}

func (x *ShopeeSyncProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[340]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopeeSyncProductRequest.ProtoReflect.Descriptor instead.
func (*ShopeeSyncProductRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{340}
}

func (x *ShopeeSyncProductRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ShopeeSyncProductRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ShopeeSyncProductRequest) GetShopId() int64 {
	if x != nil {
		return x.ShopId
	}
	return 0
}

func (x *ShopeeSyncProductRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ShopeeSyncProductRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ShopeeSyncProductRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ShopeeSyncProductRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

type ShopeeSyncProductResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx         *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId   string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ShopId      int64           `protobuf:"varint,3,opt,name=shop_id,json=shopId,proto3" json:"shop_id,omitempty"`
	ErrorCode   string          `protobuf:"bytes,4,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	HasNextPage bool            `protobuf:"varint,6,opt,name=has_next_page,json=hasNextPage,proto3" json:"has_next_page,omitempty"`
	NextOffset  int64           `protobuf:"varint,7,opt,name=next_offset,json=nextOffset,proto3" json:"next_offset,omitempty"`
	Total       int64           `protobuf:"varint,8,opt,name=total,proto3" json:"total,omitempty"`
	NumSuccess  int64           `protobuf:"varint,9,opt,name=num_success,json=numSuccess,proto3" json:"num_success,omitempty"`
}

func (x *ShopeeSyncProductResponse) Reset() {
	*x = ShopeeSyncProductResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[341]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShopeeSyncProductResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopeeSyncProductResponse) ProtoMessage() {}

func (x *ShopeeSyncProductResponse) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[341]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopeeSyncProductResponse.ProtoReflect.Descriptor instead.
func (*ShopeeSyncProductResponse) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{341}
}

func (x *ShopeeSyncProductResponse) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ShopeeSyncProductResponse) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ShopeeSyncProductResponse) GetShopId() int64 {
	if x != nil {
		return x.ShopId
	}
	return 0
}

func (x *ShopeeSyncProductResponse) GetErrorCode() string {
	if x != nil {
		return x.ErrorCode
	}
	return ""
}

func (x *ShopeeSyncProductResponse) GetHasNextPage() bool {
	if x != nil {
		return x.HasNextPage
	}
	return false
}

func (x *ShopeeSyncProductResponse) GetNextOffset() int64 {
	if x != nil {
		return x.NextOffset
	}
	return 0
}

func (x *ShopeeSyncProductResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ShopeeSyncProductResponse) GetNumSuccess() int64 {
	if x != nil {
		return x.NumSuccess
	}
	return 0
}

type AddressAutocompleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Keyword   string          `protobuf:"bytes,3,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Language  string          `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	Countries []string        `protobuf:"bytes,5,rep,name=countries,proto3" json:"countries,omitempty"`
}

func (x *AddressAutocompleteRequest) Reset() {
	*x = AddressAutocompleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[342]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressAutocompleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressAutocompleteRequest) ProtoMessage() {}

func (x *AddressAutocompleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[342]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressAutocompleteRequest.ProtoReflect.Descriptor instead.
func (*AddressAutocompleteRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{342}
}

func (x *AddressAutocompleteRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *AddressAutocompleteRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AddressAutocompleteRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *AddressAutocompleteRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *AddressAutocompleteRequest) GetCountries() []string {
	if x != nil {
		return x.Countries
	}
	return nil
}

type AddressAutocompleteResponses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context                `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string                         `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Responses []*AddressAutocompleteResponse `protobuf:"bytes,4,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *AddressAutocompleteResponses) Reset() {
	*x = AddressAutocompleteResponses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[343]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressAutocompleteResponses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressAutocompleteResponses) ProtoMessage() {}

func (x *AddressAutocompleteResponses) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[343]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressAutocompleteResponses.ProtoReflect.Descriptor instead.
func (*AddressAutocompleteResponses) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{343}
}

func (x *AddressAutocompleteResponses) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *AddressAutocompleteResponses) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AddressAutocompleteResponses) GetResponses() []*AddressAutocompleteResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type AddressAutocompleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx               *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId         string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Description       string          `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	PlaceId           string          `protobuf:"bytes,5,opt,name=place_id,json=placeId,proto3" json:"place_id,omitempty"`
	Reference         string          `protobuf:"bytes,6,opt,name=reference,proto3" json:"reference,omitempty"`
	MatchedSubstrings []*Substring    `protobuf:"bytes,7,rep,name=matched_substrings,json=matchedSubstrings,proto3" json:"matched_substrings,omitempty"`
}

func (x *AddressAutocompleteResponse) Reset() {
	*x = AddressAutocompleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[344]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressAutocompleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressAutocompleteResponse) ProtoMessage() {}

func (x *AddressAutocompleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[344]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressAutocompleteResponse.ProtoReflect.Descriptor instead.
func (*AddressAutocompleteResponse) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{344}
}

func (x *AddressAutocompleteResponse) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *AddressAutocompleteResponse) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AddressAutocompleteResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddressAutocompleteResponse) GetPlaceId() string {
	if x != nil {
		return x.PlaceId
	}
	return ""
}

func (x *AddressAutocompleteResponse) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *AddressAutocompleteResponse) GetMatchedSubstrings() []*Substring {
	if x != nil {
		return x.MatchedSubstrings
	}
	return nil
}

type Substring struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int32 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Length int32 `protobuf:"varint,4,opt,name=length,proto3" json:"length,omitempty"`
}

func (x *Substring) Reset() {
	*x = Substring{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[345]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Substring) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Substring) ProtoMessage() {}

func (x *Substring) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[345]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Substring.ProtoReflect.Descriptor instead.
func (*Substring) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{345}
}

func (x *Substring) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *Substring) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

type RateLimitSyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx         *common.Context    `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId   string             `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	NewEntities []*RateLimitEntity `protobuf:"bytes,4,rep,name=new_entities,json=newEntities,proto3" json:"new_entities,omitempty"`
}

func (x *RateLimitSyncRequest) Reset() {
	*x = RateLimitSyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[346]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimitSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitSyncRequest) ProtoMessage() {}

func (x *RateLimitSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[346]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitSyncRequest.ProtoReflect.Descriptor instead.
func (*RateLimitSyncRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{346}
}

func (x *RateLimitSyncRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *RateLimitSyncRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *RateLimitSyncRequest) GetNewEntities() []*RateLimitEntity {
	if x != nil {
		return x.NewEntities
	}
	return nil
}

type RateLimitSyncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context    `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string             `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Entities  []*RateLimitEntity `protobuf:"bytes,4,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (x *RateLimitSyncResponse) Reset() {
	*x = RateLimitSyncResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[347]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimitSyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitSyncResponse) ProtoMessage() {}

func (x *RateLimitSyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[347]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitSyncResponse.ProtoReflect.Descriptor instead.
func (*RateLimitSyncResponse) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{347}
}

func (x *RateLimitSyncResponse) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *RateLimitSyncResponse) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *RateLimitSyncResponse) GetEntities() []*RateLimitEntity {
	if x != nil {
		return x.Entities
	}
	return nil
}

type RateLimitEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configkey string             `protobuf:"bytes,2,opt,name=configkey,proto3" json:"configkey,omitempty"`
	WindowSec int64              `protobuf:"varint,3,opt,name=window_sec,json=windowSec,proto3" json:"window_sec,omitempty"`
	Capacity  int64              `protobuf:"varint,5,opt,name=capacity,proto3" json:"capacity,omitempty"`
	Windows   []*RateLimitWindow `protobuf:"bytes,6,rep,name=windows,proto3" json:"windows,omitempty"`
}

func (x *RateLimitEntity) Reset() {
	*x = RateLimitEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[348]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimitEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitEntity) ProtoMessage() {}

func (x *RateLimitEntity) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[348]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitEntity.ProtoReflect.Descriptor instead.
func (*RateLimitEntity) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{348}
}

func (x *RateLimitEntity) GetConfigkey() string {
	if x != nil {
		return x.Configkey
	}
	return ""
}

func (x *RateLimitEntity) GetWindowSec() int64 {
	if x != nil {
		return x.WindowSec
	}
	return 0
}

func (x *RateLimitEntity) GetCapacity() int64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *RateLimitEntity) GetWindows() []*RateLimitWindow {
	if x != nil {
		return x.Windows
	}
	return nil
}

type RateLimitWindow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key       string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Timestamp int64  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Usage     int64  `protobuf:"varint,5,opt,name=usage,proto3" json:"usage,omitempty"`
}

func (x *RateLimitWindow) Reset() {
	*x = RateLimitWindow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[349]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimitWindow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitWindow) ProtoMessage() {}

func (x *RateLimitWindow) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[349]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitWindow.ProtoReflect.Descriptor instead.
func (*RateLimitWindow) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{349}
}

func (x *RateLimitWindow) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *RateLimitWindow) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RateLimitWindow) GetUsage() int64 {
	if x != nil {
		return x.Usage
	}
	return 0
}

type CompactedUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx                       *common.Context       `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId                 string                `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Id                        string                `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Created                   int64                 `protobuf:"varint,4,opt,name=created,proto3" json:"created,omitempty"`
	Modified                  int64                 `protobuf:"varint,5,opt,name=modified,proto3" json:"modified,omitempty"`
	Updated                   int64                 `protobuf:"varint,6,opt,name=updated,proto3" json:"updated,omitempty"`
	FirstChannelTouchpoint    string                `protobuf:"bytes,7,opt,name=first_channel_touchpoint,json=firstChannelTouchpoint,proto3" json:"first_channel_touchpoint,omitempty"`
	LatestChannelTouchpoint   string                `protobuf:"bytes,8,opt,name=latest_channelTouchpoint,json=latestChannelTouchpoint,proto3" json:"latest_channelTouchpoint,omitempty"`
	LatestChannel             string                `protobuf:"bytes,9,opt,name=latest_channel,json=latestChannel,proto3" json:"latest_channel,omitempty"`
	Interacted                int64                 `protobuf:"varint,11,opt,name=interacted,proto3" json:"interacted,omitempty"`
	Seen                      int64                 `protobuf:"varint,12,opt,name=seen,proto3" json:"seen,omitempty"`
	Fullname                  *CompactedAttribute   `protobuf:"bytes,13,opt,name=fullname,proto3" json:"fullname,omitempty"`
	Phone                     *CompactedAttribute   `protobuf:"bytes,14,opt,name=phone,proto3" json:"phone,omitempty"`
	Email                     *CompactedAttribute   `protobuf:"bytes,15,opt,name=email,proto3" json:"email,omitempty"`
	LatestSessionId           string                `protobuf:"bytes,16,opt,name=latest_session_id,json=latestSessionId,proto3" json:"latest_session_id,omitempty"`
	LeadOwners                []string              `protobuf:"bytes,17,rep,name=lead_owners,json=leadOwners,proto3" json:"lead_owners,omitempty"`
	FirstInteract             string                `protobuf:"bytes,18,opt,name=first_interact,json=firstInteract,proto3" json:"first_interact,omitempty"`
	TraceCountryName          string                `protobuf:"bytes,19,opt,name=trace_country_name,json=traceCountryName,proto3" json:"trace_country_name,omitempty"`
	ChannelSource             string                `protobuf:"bytes,20,opt,name=channel_source,json=channelSource,proto3" json:"channel_source,omitempty"`
	LatestCampaignName        string                `protobuf:"bytes,21,opt,name=latest_campaign_name,json=latestCampaignName,proto3" json:"latest_campaign_name,omitempty"`
	TraceCountryCode          string                `protobuf:"bytes,22,opt,name=trace_country_code,json=traceCountryCode,proto3" json:"trace_country_code,omitempty"`
	LatestSessionSource       string                `protobuf:"bytes,23,opt,name=latest_session_source,json=latestSessionSource,proto3" json:"latest_session_source,omitempty"`
	FirstSessionReferer       string                `protobuf:"bytes,24,opt,name=first_session_referer,json=firstSessionReferer,proto3" json:"first_session_referer,omitempty"`
	LatestSessionReferer      string                `protobuf:"bytes,25,opt,name=latest_session_referer,json=latestSessionReferer,proto3" json:"latest_session_referer,omitempty"`
	TraceCityName             string                `protobuf:"bytes,26,opt,name=trace_city_name,json=traceCityName,proto3" json:"trace_city_name,omitempty"`
	LastMessageSent           int64                 `protobuf:"varint,27,opt,name=last_message_sent,json=lastMessageSent,proto3" json:"last_message_sent,omitempty"`
	TotalSessions             int64                 `protobuf:"varint,28,opt,name=total_sessions,json=totalSessions,proto3" json:"total_sessions,omitempty"`
	LatestSessionTrackingLink string                `protobuf:"bytes,29,opt,name=latest_session_tracking_link,json=latestSessionTrackingLink,proto3" json:"latest_session_tracking_link,omitempty"`
	FirstSessionTrackingLink  string                `protobuf:"bytes,30,opt,name=first_session_tracking_link,json=firstSessionTrackingLink,proto3" json:"first_session_tracking_link,omitempty"`
	Attributes                []*CompactedAttribute `protobuf:"bytes,31,rep,name=attributes,proto3" json:"attributes,omitempty"`
	IsLead                    bool                  `protobuf:"varint,32,opt,name=is_lead,json=isLead,proto3" json:"is_lead,omitempty"`
	Labels                    []*UserLabel          `protobuf:"bytes,33,rep,name=labels,proto3" json:"labels,omitempty"`
	Session                   *UserSession          `protobuf:"bytes,34,opt,name=session,proto3" json:"session,omitempty"`
	PrimaryId                 string                `protobuf:"bytes,49,opt,name=primary_id,json=primaryId,proto3" json:"primary_id,omitempty"`
	SecondaryIds              []string              `protobuf:"bytes,50,rep,name=secondary_ids,json=secondaryIds,proto3" json:"secondary_ids,omitempty"`
	ProfileId                 string                `protobuf:"bytes,52,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
	ProfileChannelSource      string                `protobuf:"bytes,53,opt,name=profile_channel_source,json=profileChannelSource,proto3" json:"profile_channel_source,omitempty"`
	ProfileChannel            string                `protobuf:"bytes,54,opt,name=profile_channel,json=profileChannel,proto3" json:"profile_channel,omitempty"`
}

func (x *CompactedUser) Reset() {
	*x = CompactedUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[350]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompactedUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompactedUser) ProtoMessage() {}

func (x *CompactedUser) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[350]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompactedUser.ProtoReflect.Descriptor instead.
func (*CompactedUser) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{350}
}

func (x *CompactedUser) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *CompactedUser) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CompactedUser) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CompactedUser) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *CompactedUser) GetModified() int64 {
	if x != nil {
		return x.Modified
	}
	return 0
}

func (x *CompactedUser) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *CompactedUser) GetFirstChannelTouchpoint() string {
	if x != nil {
		return x.FirstChannelTouchpoint
	}
	return ""
}

func (x *CompactedUser) GetLatestChannelTouchpoint() string {
	if x != nil {
		return x.LatestChannelTouchpoint
	}
	return ""
}

func (x *CompactedUser) GetLatestChannel() string {
	if x != nil {
		return x.LatestChannel
	}
	return ""
}

func (x *CompactedUser) GetInteracted() int64 {
	if x != nil {
		return x.Interacted
	}
	return 0
}

func (x *CompactedUser) GetSeen() int64 {
	if x != nil {
		return x.Seen
	}
	return 0
}

func (x *CompactedUser) GetFullname() *CompactedAttribute {
	if x != nil {
		return x.Fullname
	}
	return nil
}

func (x *CompactedUser) GetPhone() *CompactedAttribute {
	if x != nil {
		return x.Phone
	}
	return nil
}

func (x *CompactedUser) GetEmail() *CompactedAttribute {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *CompactedUser) GetLatestSessionId() string {
	if x != nil {
		return x.LatestSessionId
	}
	return ""
}

func (x *CompactedUser) GetLeadOwners() []string {
	if x != nil {
		return x.LeadOwners
	}
	return nil
}

func (x *CompactedUser) GetFirstInteract() string {
	if x != nil {
		return x.FirstInteract
	}
	return ""
}

func (x *CompactedUser) GetTraceCountryName() string {
	if x != nil {
		return x.TraceCountryName
	}
	return ""
}

func (x *CompactedUser) GetChannelSource() string {
	if x != nil {
		return x.ChannelSource
	}
	return ""
}

func (x *CompactedUser) GetLatestCampaignName() string {
	if x != nil {
		return x.LatestCampaignName
	}
	return ""
}

func (x *CompactedUser) GetTraceCountryCode() string {
	if x != nil {
		return x.TraceCountryCode
	}
	return ""
}

func (x *CompactedUser) GetLatestSessionSource() string {
	if x != nil {
		return x.LatestSessionSource
	}
	return ""
}

func (x *CompactedUser) GetFirstSessionReferer() string {
	if x != nil {
		return x.FirstSessionReferer
	}
	return ""
}

func (x *CompactedUser) GetLatestSessionReferer() string {
	if x != nil {
		return x.LatestSessionReferer
	}
	return ""
}

func (x *CompactedUser) GetTraceCityName() string {
	if x != nil {
		return x.TraceCityName
	}
	return ""
}

func (x *CompactedUser) GetLastMessageSent() int64 {
	if x != nil {
		return x.LastMessageSent
	}
	return 0
}

func (x *CompactedUser) GetTotalSessions() int64 {
	if x != nil {
		return x.TotalSessions
	}
	return 0
}

func (x *CompactedUser) GetLatestSessionTrackingLink() string {
	if x != nil {
		return x.LatestSessionTrackingLink
	}
	return ""
}

func (x *CompactedUser) GetFirstSessionTrackingLink() string {
	if x != nil {
		return x.FirstSessionTrackingLink
	}
	return ""
}

func (x *CompactedUser) GetAttributes() []*CompactedAttribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *CompactedUser) GetIsLead() bool {
	if x != nil {
		return x.IsLead
	}
	return false
}

func (x *CompactedUser) GetLabels() []*UserLabel {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CompactedUser) GetSession() *UserSession {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *CompactedUser) GetPrimaryId() string {
	if x != nil {
		return x.PrimaryId
	}
	return ""
}

func (x *CompactedUser) GetSecondaryIds() []string {
	if x != nil {
		return x.SecondaryIds
	}
	return nil
}

func (x *CompactedUser) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

func (x *CompactedUser) GetProfileChannelSource() string {
	if x != nil {
		return x.ProfileChannelSource
	}
	return ""
}

func (x *CompactedUser) GetProfileChannel() string {
	if x != nil {
		return x.ProfileChannel
	}
	return ""
}

type CompactedUsers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users     []*CompactedUser `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	Errors    []*Error         `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	Signature string           `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	Hit       int64            `protobuf:"varint,4,opt,name=hit,proto3" json:"hit,omitempty"`
	Total     int64            `protobuf:"varint,5,opt,name=total,proto3" json:"total,omitempty"`
	EndOffset int32            `protobuf:"varint,7,opt,name=end_offset,json=endOffset,proto3" json:"end_offset,omitempty"`
}

func (x *CompactedUsers) Reset() {
	*x = CompactedUsers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[351]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompactedUsers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompactedUsers) ProtoMessage() {}

func (x *CompactedUsers) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[351]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompactedUsers.ProtoReflect.Descriptor instead.
func (*CompactedUsers) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{351}
}

func (x *CompactedUsers) GetUsers() []*CompactedUser {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *CompactedUsers) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *CompactedUsers) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *CompactedUsers) GetHit() int64 {
	if x != nil {
		return x.Hit
	}
	return 0
}

func (x *CompactedUsers) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *CompactedUsers) GetEndOffset() int32 {
	if x != nil {
		return x.EndOffset
	}
	return 0
}

// memory efficient attribute
type CompactedAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value       string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"` // text or datetime or bool or number json encoded list
	Modified    int64    `protobuf:"varint,3,opt,name=modified,proto3" json:"modified,omitempty"`
	By          string   `protobuf:"bytes,5,opt,name=by,proto3" json:"by,omitempty"` // required
	OtherValues []string `protobuf:"bytes,6,rep,name=other_values,json=otherValues,proto3" json:"other_values,omitempty"`
}

func (x *CompactedAttribute) Reset() {
	*x = CompactedAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[352]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompactedAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompactedAttribute) ProtoMessage() {}

func (x *CompactedAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[352]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompactedAttribute.ProtoReflect.Descriptor instead.
func (*CompactedAttribute) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{352}
}

func (x *CompactedAttribute) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *CompactedAttribute) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *CompactedAttribute) GetModified() int64 {
	if x != nil {
		return x.Modified
	}
	return 0
}

func (x *CompactedAttribute) GetBy() string {
	if x != nil {
		return x.By
	}
	return ""
}

func (x *CompactedAttribute) GetOtherValues() []string {
	if x != nil {
		return x.OtherValues
	}
	return nil
}

type PipelineStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"` // gen by client
	Created      int64  `protobuf:"varint,5,opt,name=created,proto3" json:"created,omitempty"`
	CreatedBy    string `protobuf:"bytes,6,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	Name         string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Description  string `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	IsClosed     bool   `protobuf:"varint,9,opt,name=is_closed,json=isClosed,proto3" json:"is_closed,omitempty"` // order auto confirmed when move to this stage
	Probability  int64  `protobuf:"varint,10,opt,name=probability,proto3" json:"probability,omitempty"`          // * 100 100 => won 0 => lost
	RottenDays   int64  `protobuf:"varint,11,opt,name=rotten_days,json=rottenDays,proto3" json:"rotten_days,omitempty"`
	AutomationId string `protobuf:"bytes,13,opt,name=automation_id,json=automationId,proto3" json:"automation_id,omitempty"` // bot_id
	Updated      int64  `protobuf:"varint,14,opt,name=updated,proto3" json:"updated,omitempty"`
	UpdatedBy    string `protobuf:"bytes,15,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// auto-assign to agent
	Routes []*PipelineRule `protobuf:"bytes,17,rep,name=routes,proto3" json:"routes,omitempty"`
	Tasks  []*Task         `protobuf:"bytes,18,rep,name=tasks,proto3" json:"tasks,omitempty"`
}

func (x *PipelineStage) Reset() {
	*x = PipelineStage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[353]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineStage) ProtoMessage() {}

func (x *PipelineStage) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[353]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineStage.ProtoReflect.Descriptor instead.
func (*PipelineStage) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{353}
}

func (x *PipelineStage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PipelineStage) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *PipelineStage) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *PipelineStage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PipelineStage) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PipelineStage) GetIsClosed() bool {
	if x != nil {
		return x.IsClosed
	}
	return false
}

func (x *PipelineStage) GetProbability() int64 {
	if x != nil {
		return x.Probability
	}
	return 0
}

func (x *PipelineStage) GetRottenDays() int64 {
	if x != nil {
		return x.RottenDays
	}
	return 0
}

func (x *PipelineStage) GetAutomationId() string {
	if x != nil {
		return x.AutomationId
	}
	return ""
}

func (x *PipelineStage) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *PipelineStage) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *PipelineStage) GetRoutes() []*PipelineRule {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *PipelineStage) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type PipelineRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx        *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId  string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Id         string          `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Priority   int32           `protobuf:"varint,4,opt,name=priority,proto3" json:"priority,omitempty"`
	AssignType string          `protobuf:"bytes,5,opt,name=assign_type,json=assignType,proto3" json:"assign_type,omitempty"`
	AssignTos  []string        `protobuf:"bytes,6,rep,name=assign_tos,json=assignTos,proto3" json:"assign_tos,omitempty"`
	Enabled    bool            `protobuf:"varint,8,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Updated    int64           `protobuf:"varint,9,opt,name=updated,proto3" json:"updated,omitempty"`
	UpdatedBy  string          `protobuf:"bytes,10,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// and
	Conditions []*BotCondition `protobuf:"bytes,11,rep,name=conditions,proto3" json:"conditions,omitempty"`
}

func (x *PipelineRule) Reset() {
	*x = PipelineRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[354]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineRule) ProtoMessage() {}

func (x *PipelineRule) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[354]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineRule.ProtoReflect.Descriptor instead.
func (*PipelineRule) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{354}
}

func (x *PipelineRule) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *PipelineRule) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *PipelineRule) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PipelineRule) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *PipelineRule) GetAssignType() string {
	if x != nil {
		return x.AssignType
	}
	return ""
}

func (x *PipelineRule) GetAssignTos() []string {
	if x != nil {
		return x.AssignTos
	}
	return nil
}

func (x *PipelineRule) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *PipelineRule) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *PipelineRule) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *PipelineRule) GetConditions() []*BotCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

type Pipelines struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Pipelines []*Pipeline     `protobuf:"bytes,3,rep,name=pipelines,proto3" json:"pipelines,omitempty"`
	Anchor    string          `protobuf:"bytes,4,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Total     int64           `protobuf:"varint,5,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *Pipelines) Reset() {
	*x = Pipelines{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[355]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pipelines) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pipelines) ProtoMessage() {}

func (x *Pipelines) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[355]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pipelines.ProtoReflect.Descriptor instead.
func (*Pipelines) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{355}
}

func (x *Pipelines) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Pipelines) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Pipelines) GetPipelines() []*Pipeline {
	if x != nil {
		return x.Pipelines
	}
	return nil
}

func (x *Pipelines) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *Pipelines) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type Pipeline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context  `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string           `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Id        string           `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Name      string           `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Stages    []*PipelineStage `protobuf:"bytes,5,rep,name=stages,proto3" json:"stages,omitempty"`
	Created   int64            `protobuf:"varint,6,opt,name=created,proto3" json:"created,omitempty"`
	CreatedBy string           `protobuf:"bytes,7,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	Updated   int64            `protobuf:"varint,8,opt,name=updated,proto3" json:"updated,omitempty"`
	UpdatedBy string           `protobuf:"bytes,9,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
}

func (x *Pipeline) Reset() {
	*x = Pipeline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[356]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pipeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pipeline) ProtoMessage() {}

func (x *Pipeline) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[356]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pipeline.ProtoReflect.Descriptor instead.
func (*Pipeline) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{356}
}

func (x *Pipeline) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Pipeline) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Pipeline) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Pipeline) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Pipeline) GetStages() []*PipelineStage {
	if x != nil {
		return x.Stages
	}
	return nil
}

func (x *Pipeline) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Pipeline) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *Pipeline) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *Pipeline) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

type TasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx                     *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId               string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	AssociatedTickets       []string        `protobuf:"bytes,4,rep,name=associated_tickets,json=associatedTickets,proto3" json:"associated_tickets,omitempty"`
	AssociatedUsers         []string        `protobuf:"bytes,5,rep,name=associated_users,json=associatedUsers,proto3" json:"associated_users,omitempty"`
	AssociatedOrders        []string        `protobuf:"bytes,7,rep,name=associated_orders,json=associatedOrders,proto3" json:"associated_orders,omitempty"`
	AssociatedConversations []string        `protobuf:"bytes,9,rep,name=associated_conversations,json=associatedConversations,proto3" json:"associated_conversations,omitempty"`
	CreatedHourFrom         int64           `protobuf:"varint,10,opt,name=created_hour_from,json=createdHourFrom,proto3" json:"created_hour_from,omitempty"`
	CreatedHourTo           int64           `protobuf:"varint,11,opt,name=created_hour_to,json=createdHourTo,proto3" json:"created_hour_to,omitempty"`
	DueDateHourFrom         int64           `protobuf:"varint,12,opt,name=due_date_hour_from,json=dueDateHourFrom,proto3" json:"due_date_hour_from,omitempty"`
	DueDateHourTo           int64           `protobuf:"varint,13,opt,name=due_date_hour_to,json=dueDateHourTo,proto3" json:"due_date_hour_to,omitempty"`
	AssignedTo              string          `protobuf:"bytes,14,opt,name=assigned_to,json=assignedTo,proto3" json:"assigned_to,omitempty"`
	Priority                int64           `protobuf:"varint,15,opt,name=priority,proto3" json:"priority,omitempty"`
	Limit                   int32           `protobuf:"varint,20,opt,name=limit,proto3" json:"limit,omitempty"`
	Anchor                  string          `protobuf:"bytes,21,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Offset                  int32           `protobuf:"varint,22,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *TasksRequest) Reset() {
	*x = TasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[357]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TasksRequest) ProtoMessage() {}

func (x *TasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[357]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TasksRequest.ProtoReflect.Descriptor instead.
func (*TasksRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{357}
}

func (x *TasksRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *TasksRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *TasksRequest) GetAssociatedTickets() []string {
	if x != nil {
		return x.AssociatedTickets
	}
	return nil
}

func (x *TasksRequest) GetAssociatedUsers() []string {
	if x != nil {
		return x.AssociatedUsers
	}
	return nil
}

func (x *TasksRequest) GetAssociatedOrders() []string {
	if x != nil {
		return x.AssociatedOrders
	}
	return nil
}

func (x *TasksRequest) GetAssociatedConversations() []string {
	if x != nil {
		return x.AssociatedConversations
	}
	return nil
}

func (x *TasksRequest) GetCreatedHourFrom() int64 {
	if x != nil {
		return x.CreatedHourFrom
	}
	return 0
}

func (x *TasksRequest) GetCreatedHourTo() int64 {
	if x != nil {
		return x.CreatedHourTo
	}
	return 0
}

func (x *TasksRequest) GetDueDateHourFrom() int64 {
	if x != nil {
		return x.DueDateHourFrom
	}
	return 0
}

func (x *TasksRequest) GetDueDateHourTo() int64 {
	if x != nil {
		return x.DueDateHourTo
	}
	return 0
}

func (x *TasksRequest) GetAssignedTo() string {
	if x != nil {
		return x.AssignedTo
	}
	return ""
}

func (x *TasksRequest) GetPriority() int64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *TasksRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TasksRequest) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *TasksRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type Tasks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Tasks     []*Task         `protobuf:"bytes,3,rep,name=tasks,proto3" json:"tasks,omitempty"`
	Anchor    string          `protobuf:"bytes,4,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Total     int64           `protobuf:"varint,5,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *Tasks) Reset() {
	*x = Tasks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[358]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tasks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tasks) ProtoMessage() {}

func (x *Tasks) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[358]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tasks.ProtoReflect.Descriptor instead.
func (*Tasks) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{358}
}

func (x *Tasks) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Tasks) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Tasks) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *Tasks) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *Tasks) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx                               *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId                         string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Id                                string          `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	CreatedBy                         string          `protobuf:"bytes,5,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"` // agent id or pipeline stage id
	Created                           int64           `protobuf:"varint,6,opt,name=created,proto3" json:"created,omitempty"`
	CreatedByType                     string          `protobuf:"bytes,7,opt,name=created_by_type,json=createdByType,proto3" json:"created_by_type,omitempty"` // agent, automation
	CreatedByPipeline                 string          `protobuf:"bytes,8,opt,name=created_by_pipeline,json=createdByPipeline,proto3" json:"created_by_pipeline,omitempty"`
	CreatedByPipelineStage            string          `protobuf:"bytes,9,opt,name=created_by_pipeline_stage,json=createdByPipelineStage,proto3" json:"created_by_pipeline_stage,omitempty"`
	CreatedByPipelineAutomationAction string          `protobuf:"bytes,10,opt,name=created_by_pipeline_automation_action,json=createdByPipelineAutomationAction,proto3" json:"created_by_pipeline_automation_action,omitempty"`
	UpdatedBy                         string          `protobuf:"bytes,11,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	Updated                           int64           `protobuf:"varint,12,opt,name=updated,proto3" json:"updated,omitempty"`
	DueDate                           int64           `protobuf:"varint,13,opt,name=due_date,json=dueDate,proto3" json:"due_date,omitempty"`
	Reminder                          int64           `protobuf:"varint,14,opt,name=reminder,proto3" json:"reminder,omitempty"`                      // 86400: 1 day before
	Type                              string          `protobuf:"bytes,15,opt,name=type,proto3" json:"type,omitempty"`                               // todo, email, call
	Priority                          int64           `protobuf:"varint,16,opt,name=priority,proto3" json:"priority,omitempty"`                      // dont use string, so its easier for backend to sort by this field. 0=low, 1=normal, 2=high, 3=urgent
	AssignedTo                        string          `protobuf:"bytes,17,opt,name=assigned_to,json=assignedTo,proto3" json:"assigned_to,omitempty"` // empty == unassigned
	Title                             string          `protobuf:"bytes,18,opt,name=title,proto3" json:"title,omitempty"`
	TitleQuillDelta                   string          `protobuf:"bytes,19,opt,name=title_quill_delta,json=titleQuillDelta,proto3" json:"title_quill_delta,omitempty"`
	Description                       string          `protobuf:"bytes,20,opt,name=description,proto3" json:"description,omitempty"`
	DescriptionQuillDelta             string          `protobuf:"bytes,21,opt,name=description_quill_delta,json=descriptionQuillDelta,proto3" json:"description_quill_delta,omitempty"` // for template
	Pinned                            int64           `protobuf:"varint,22,opt,name=pinned,proto3" json:"pinned,omitempty"`                                                             // always list first
	Status                            string          `protobuf:"bytes,23,opt,name=status,proto3" json:"status,omitempty"`                                                              // open, close, rejected
	Closed                            int64           `protobuf:"varint,24,opt,name=closed,proto3" json:"closed,omitempty"`                                                             // just store closed timestamp, so when needed, we have the data to calculate task duration
	AssociatedTickets                 []string        `protobuf:"bytes,25,rep,name=associated_tickets,json=associatedTickets,proto3" json:"associated_tickets,omitempty"`
	AssociatedUsers                   []string        `protobuf:"bytes,26,rep,name=associated_users,json=associatedUsers,proto3" json:"associated_users,omitempty"`
	AssociatedOrders                  []string        `protobuf:"bytes,27,rep,name=associated_orders,json=associatedOrders,proto3" json:"associated_orders,omitempty"`
	AssociatedConversations           []string        `protobuf:"bytes,28,rep,name=associated_conversations,json=associatedConversations,proto3" json:"associated_conversations,omitempty"`
	Watchers                          []string        `protobuf:"bytes,30,rep,name=watchers,proto3" json:"watchers,omitempty"` // (from JIRA) agents that follow the task, get notified
	// extra data
	// ...
	DataEmail *Event `protobuf:"bytes,40,opt,name=data_email,json=dataEmail,proto3" json:"data_email,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[359]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[359]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{359}
}

func (x *Task) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *Task) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Task) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Task) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *Task) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Task) GetCreatedByType() string {
	if x != nil {
		return x.CreatedByType
	}
	return ""
}

func (x *Task) GetCreatedByPipeline() string {
	if x != nil {
		return x.CreatedByPipeline
	}
	return ""
}

func (x *Task) GetCreatedByPipelineStage() string {
	if x != nil {
		return x.CreatedByPipelineStage
	}
	return ""
}

func (x *Task) GetCreatedByPipelineAutomationAction() string {
	if x != nil {
		return x.CreatedByPipelineAutomationAction
	}
	return ""
}

func (x *Task) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *Task) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *Task) GetDueDate() int64 {
	if x != nil {
		return x.DueDate
	}
	return 0
}

func (x *Task) GetReminder() int64 {
	if x != nil {
		return x.Reminder
	}
	return 0
}

func (x *Task) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Task) GetPriority() int64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *Task) GetAssignedTo() string {
	if x != nil {
		return x.AssignedTo
	}
	return ""
}

func (x *Task) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Task) GetTitleQuillDelta() string {
	if x != nil {
		return x.TitleQuillDelta
	}
	return ""
}

func (x *Task) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Task) GetDescriptionQuillDelta() string {
	if x != nil {
		return x.DescriptionQuillDelta
	}
	return ""
}

func (x *Task) GetPinned() int64 {
	if x != nil {
		return x.Pinned
	}
	return 0
}

func (x *Task) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Task) GetClosed() int64 {
	if x != nil {
		return x.Closed
	}
	return 0
}

func (x *Task) GetAssociatedTickets() []string {
	if x != nil {
		return x.AssociatedTickets
	}
	return nil
}

func (x *Task) GetAssociatedUsers() []string {
	if x != nil {
		return x.AssociatedUsers
	}
	return nil
}

func (x *Task) GetAssociatedOrders() []string {
	if x != nil {
		return x.AssociatedOrders
	}
	return nil
}

func (x *Task) GetAssociatedConversations() []string {
	if x != nil {
		return x.AssociatedConversations
	}
	return nil
}

func (x *Task) GetWatchers() []string {
	if x != nil {
		return x.Watchers
	}
	return nil
}

func (x *Task) GetDataEmail() *Event {
	if x != nil {
		return x.DataEmail
	}
	return nil
}

type TaskHistoryEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event      *Event `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"` // 1 core
	RefComment *Event `protobuf:"bytes,3,opt,name=ref_comment,json=refComment,proto3" json:"ref_comment,omitempty"`
	TaskId     string `protobuf:"bytes,4,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *TaskHistoryEntry) Reset() {
	*x = TaskHistoryEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[360]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskHistoryEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskHistoryEntry) ProtoMessage() {}

func (x *TaskHistoryEntry) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[360]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskHistoryEntry.ProtoReflect.Descriptor instead.
func (*TaskHistoryEntry) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{360}
}

func (x *TaskHistoryEntry) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *TaskHistoryEntry) GetRefComment() *Event {
	if x != nil {
		return x.RefComment
	}
	return nil
}

func (x *TaskHistoryEntry) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type TaskHistoryEntries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx          *common.Context     `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Entries      []*TaskHistoryEntry `protobuf:"bytes,4,rep,name=entries,proto3" json:"entries,omitempty"`
	Total        int64               `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Anchor       string              `protobuf:"bytes,3,opt,name=anchor,proto3" json:"anchor,omitempty"`
	LastModified int64               `protobuf:"varint,5,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
}

func (x *TaskHistoryEntries) Reset() {
	*x = TaskHistoryEntries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[361]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskHistoryEntries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskHistoryEntries) ProtoMessage() {}

func (x *TaskHistoryEntries) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[361]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskHistoryEntries.ProtoReflect.Descriptor instead.
func (*TaskHistoryEntries) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{361}
}

func (x *TaskHistoryEntries) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *TaskHistoryEntries) GetEntries() []*TaskHistoryEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *TaskHistoryEntries) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TaskHistoryEntries) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *TaskHistoryEntries) GetLastModified() int64 {
	if x != nil {
		return x.LastModified
	}
	return 0
}

type AgentGroups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx    *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Groups []*AgentGroup   `protobuf:"bytes,2,rep,name=Groups,proto3" json:"Groups,omitempty"`
}

func (x *AgentGroups) Reset() {
	*x = AgentGroups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[362]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentGroups) ProtoMessage() {}

func (x *AgentGroups) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[362]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentGroups.ProtoReflect.Descriptor instead.
func (*AgentGroups) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{362}
}

func (x *AgentGroups) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *AgentGroups) GetGroups() []*AgentGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

type AgentGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx                      *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Id                       string          `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	AccountId                string          `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Name                     string          `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Created                  int64           `protobuf:"varint,6,opt,name=created,proto3" json:"created,omitempty"`
	Modified                 int64           `protobuf:"varint,8,opt,name=modified,proto3" json:"modified,omitempty"`
	CreatedBy                string          `protobuf:"bytes,9,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	AgentIds                 []string        `protobuf:"bytes,10,rep,name=agent_ids,json=agentIds,proto3" json:"agent_ids,omitempty"`
	RingMostRecentAgentFirst bool            `protobuf:"varint,12,opt,name=ring_most_recent_agent_first,json=ringMostRecentAgentFirst,proto3" json:"ring_most_recent_agent_first,omitempty"`
	RingMostIdleFirst        bool            `protobuf:"varint,13,opt,name=ring_most_idle_first,json=ringMostIdleFirst,proto3" json:"ring_most_idle_first,omitempty"`
	RingRandomly             bool            `protobuf:"varint,14,opt,name=ring_randomly,json=ringRandomly,proto3" json:"ring_randomly,omitempty"`
	ReceiveIncommingCalls    []string        `protobuf:"bytes,15,rep,name=receive_incomming_calls,json=receiveIncommingCalls,proto3" json:"receive_incomming_calls,omitempty"` // agent that must handle incomming calls
	Updated                  int64           `protobuf:"varint,16,opt,name=updated,proto3" json:"updated,omitempty"`
	UpdatedBy                string          `protobuf:"bytes,17,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	LogoUrl                  string          `protobuf:"bytes,18,opt,name=logo_url,json=logoUrl,proto3" json:"logo_url,omitempty"`
}

func (x *AgentGroup) Reset() {
	*x = AgentGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[363]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentGroup) ProtoMessage() {}

func (x *AgentGroup) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[363]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentGroup.ProtoReflect.Descriptor instead.
func (*AgentGroup) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{363}
}

func (x *AgentGroup) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *AgentGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AgentGroup) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AgentGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AgentGroup) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *AgentGroup) GetModified() int64 {
	if x != nil {
		return x.Modified
	}
	return 0
}

func (x *AgentGroup) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *AgentGroup) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *AgentGroup) GetRingMostRecentAgentFirst() bool {
	if x != nil {
		return x.RingMostRecentAgentFirst
	}
	return false
}

func (x *AgentGroup) GetRingMostIdleFirst() bool {
	if x != nil {
		return x.RingMostIdleFirst
	}
	return false
}

func (x *AgentGroup) GetRingRandomly() bool {
	if x != nil {
		return x.RingRandomly
	}
	return false
}

func (x *AgentGroup) GetReceiveIncommingCalls() []string {
	if x != nil {
		return x.ReceiveIncommingCalls
	}
	return nil
}

func (x *AgentGroup) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *AgentGroup) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *AgentGroup) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

type DocIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx        *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId  string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Collection string          `protobuf:"bytes,3,opt,name=collection,proto3" json:"collection,omitempty"`
	DocumentId string          `protobuf:"bytes,4,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	Part       string          `protobuf:"bytes,5,opt,name=part,proto3" json:"part,omitempty"`
	Content    string          `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`
	IsName     bool            `protobuf:"varint,7,opt,name=is_name,json=isName,proto3" json:"is_name,omitempty"` // hint for better name search
	IsId       bool            `protobuf:"varint,10,opt,name=is_id,json=isId,proto3" json:"is_id,omitempty"`      // hint for not indexing using tokenize
	Day        int64           `protobuf:"varint,8,opt,name=day,proto3" json:"day,omitempty"`                     // unix day for doc, used to order more recent document
	Owners     []string        `protobuf:"bytes,9,rep,name=owners,proto3" json:"owners,omitempty"`
}

func (x *DocIndexRequest) Reset() {
	*x = DocIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[364]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocIndexRequest) ProtoMessage() {}

func (x *DocIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[364]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocIndexRequest.ProtoReflect.Descriptor instead.
func (*DocIndexRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{364}
}

func (x *DocIndexRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *DocIndexRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *DocIndexRequest) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

func (x *DocIndexRequest) GetDocumentId() string {
	if x != nil {
		return x.DocumentId
	}
	return ""
}

func (x *DocIndexRequest) GetPart() string {
	if x != nil {
		return x.Part
	}
	return ""
}

func (x *DocIndexRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *DocIndexRequest) GetIsName() bool {
	if x != nil {
		return x.IsName
	}
	return false
}

func (x *DocIndexRequest) GetIsId() bool {
	if x != nil {
		return x.IsId
	}
	return false
}

func (x *DocIndexRequest) GetDay() int64 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *DocIndexRequest) GetOwners() []string {
	if x != nil {
		return x.Owners
	}
	return nil
}

type DocSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx           *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId     string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Collection    string          `protobuf:"bytes,3,opt,name=collection,proto3" json:"collection,omitempty"`
	Query         string          `protobuf:"bytes,5,opt,name=query,proto3" json:"query,omitempty"`
	Anchor        string          `protobuf:"bytes,6,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Limit         int64           `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	IncludeParts  []string        `protobuf:"bytes,8,rep,name=include_parts,json=includeParts,proto3" json:"include_parts,omitempty"` // only include those parts
	DocDistinct   bool            `protobuf:"varint,9,opt,name=doc_distinct,json=docDistinct,proto3" json:"doc_distinct,omitempty"`   // distinct document
	IncludeOwners []string        `protobuf:"bytes,10,rep,name=include_owners,json=includeOwners,proto3" json:"include_owners,omitempty"`
}

func (x *DocSearchRequest) Reset() {
	*x = DocSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[365]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocSearchRequest) ProtoMessage() {}

func (x *DocSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[365]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocSearchRequest.ProtoReflect.Descriptor instead.
func (*DocSearchRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{365}
}

func (x *DocSearchRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *DocSearchRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *DocSearchRequest) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

func (x *DocSearchRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *DocSearchRequest) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *DocSearchRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *DocSearchRequest) GetIncludeParts() []string {
	if x != nil {
		return x.IncludeParts
	}
	return nil
}

func (x *DocSearchRequest) GetDocDistinct() bool {
	if x != nil {
		return x.DocDistinct
	}
	return false
}

func (x *DocSearchRequest) GetIncludeOwners() []string {
	if x != nil {
		return x.IncludeOwners
	}
	return nil
}

type DocHit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentId    string `protobuf:"bytes,3,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	Part          string `protobuf:"bytes,4,opt,name=part,proto3" json:"part,omitempty"`
	AvatarUrl     string `protobuf:"bytes,5,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	Name          string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Updated       int64  `protobuf:"varint,7,opt,name=updated,proto3" json:"updated,omitempty"`
	Description   string `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	IntegrationId string `protobuf:"bytes,9,opt,name=integration_id,json=integrationId,proto3" json:"integration_id,omitempty"` // for convo
	Phone         string `protobuf:"bytes,10,opt,name=phone,proto3" json:"phone,omitempty"`
	Email         string `protobuf:"bytes,11,opt,name=email,proto3" json:"email,omitempty"`
	UserId        string `protobuf:"bytes,12,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // for convo
}

func (x *DocHit) Reset() {
	*x = DocHit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[366]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocHit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocHit) ProtoMessage() {}

func (x *DocHit) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[366]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocHit.ProtoReflect.Descriptor instead.
func (*DocHit) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{366}
}

func (x *DocHit) GetDocumentId() string {
	if x != nil {
		return x.DocumentId
	}
	return ""
}

func (x *DocHit) GetPart() string {
	if x != nil {
		return x.Part
	}
	return ""
}

func (x *DocHit) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *DocHit) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DocHit) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *DocHit) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DocHit) GetIntegrationId() string {
	if x != nil {
		return x.IntegrationId
	}
	return ""
}

func (x *DocHit) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *DocHit) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *DocHit) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type DocSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx    *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Hits   []*DocHit       `protobuf:"bytes,4,rep,name=hits,proto3" json:"hits,omitempty"`
	Anchor string          `protobuf:"bytes,5,opt,name=anchor,proto3" json:"anchor,omitempty"`
}

func (x *DocSearchResponse) Reset() {
	*x = DocSearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[367]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocSearchResponse) ProtoMessage() {}

func (x *DocSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[367]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocSearchResponse.ProtoReflect.Descriptor instead.
func (*DocSearchResponse) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{367}
}

func (x *DocSearchResponse) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *DocSearchResponse) GetHits() []*DocHit {
	if x != nil {
		return x.Hits
	}
	return nil
}

func (x *DocSearchResponse) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

type AccessToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken  string `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	TokenType    string `protobuf:"bytes,3,opt,name=token_type,json=tokenType,proto3" json:"token_type,omitempty"`
	ExpiresIn    int32  `protobuf:"varint,5,opt,name=expires_in,json=expiresIn,proto3" json:"expires_in,omitempty"`
	RefreshToken string `protobuf:"bytes,6,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
}

func (x *AccessToken) Reset() {
	*x = AccessToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[368]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessToken) ProtoMessage() {}

func (x *AccessToken) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[368]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessToken.ProtoReflect.Descriptor instead.
func (*AccessToken) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{368}
}

func (x *AccessToken) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *AccessToken) GetTokenType() string {
	if x != nil {
		return x.TokenType
	}
	return ""
}

func (x *AccessToken) GetExpiresIn() int32 {
	if x != nil {
		return x.ExpiresIn
	}
	return 0
}

func (x *AccessToken) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

type ZaloCodeChallenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx           *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	State         string          `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"` // verifier, zalo sucks
	CodeChallenge string          `protobuf:"bytes,6,opt,name=code_challenge,json=codeChallenge,proto3" json:"code_challenge,omitempty"`
}

func (x *ZaloCodeChallenge) Reset() {
	*x = ZaloCodeChallenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[369]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZaloCodeChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZaloCodeChallenge) ProtoMessage() {}

func (x *ZaloCodeChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[369]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZaloCodeChallenge.ProtoReflect.Descriptor instead.
func (*ZaloCodeChallenge) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{369}
}

func (x *ZaloCodeChallenge) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ZaloCodeChallenge) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *ZaloCodeChallenge) GetCodeChallenge() string {
	if x != nil {
		return x.CodeChallenge
	}
	return ""
}

type ConversationModal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx               *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId         string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Id                string          `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Key               string          `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	Description       string          `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Url               string          `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	Size              string          `protobuf:"bytes,7,opt,name=size,proto3" json:"size,omitempty"` // sm, md, lg
	Secret            string          `protobuf:"bytes,10,opt,name=secret,proto3" json:"secret,omitempty"`
	Created           int64           `protobuf:"varint,11,opt,name=created,proto3" json:"created,omitempty"`
	CreatedBy         string          `protobuf:"bytes,12,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	Updated           int64           `protobuf:"varint,13,opt,name=updated,proto3" json:"updated,omitempty"`
	UpdatedBy         string          `protobuf:"bytes,14,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	Disabled          int64           `protobuf:"varint,15,opt,name=disabled,proto3" json:"disabled,omitempty"`
	LastUsed          int64           `protobuf:"varint,16,opt,name=last_used,json=lastUsed,proto3" json:"last_used,omitempty"`
	LastUsedBy        string          `protobuf:"bytes,17,opt,name=last_used_by,json=lastUsedBy,proto3" json:"last_used_by,omitempty"`
	PreviewPictureUrl string          `protobuf:"bytes,18,opt,name=preview_picture_url,json=previewPictureUrl,proto3" json:"preview_picture_url,omitempty"`
	PreviewPictureAt  int64           `protobuf:"varint,19,opt,name=preview_picture_at,json=previewPictureAt,proto3" json:"preview_picture_at,omitempty"`
}

func (x *ConversationModal) Reset() {
	*x = ConversationModal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[370]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationModal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationModal) ProtoMessage() {}

func (x *ConversationModal) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[370]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationModal.ProtoReflect.Descriptor instead.
func (*ConversationModal) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{370}
}

func (x *ConversationModal) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ConversationModal) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ConversationModal) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ConversationModal) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ConversationModal) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ConversationModal) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ConversationModal) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *ConversationModal) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *ConversationModal) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *ConversationModal) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *ConversationModal) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *ConversationModal) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *ConversationModal) GetDisabled() int64 {
	if x != nil {
		return x.Disabled
	}
	return 0
}

func (x *ConversationModal) GetLastUsed() int64 {
	if x != nil {
		return x.LastUsed
	}
	return 0
}

func (x *ConversationModal) GetLastUsedBy() string {
	if x != nil {
		return x.LastUsedBy
	}
	return ""
}

func (x *ConversationModal) GetPreviewPictureUrl() string {
	if x != nil {
		return x.PreviewPictureUrl
	}
	return ""
}

func (x *ConversationModal) GetPreviewPictureAt() int64 {
	if x != nil {
		return x.PreviewPictureAt
	}
	return 0
}

type ConversationModals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx                *common.Context      `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId          string               `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ConversationModals []*ConversationModal `protobuf:"bytes,3,rep,name=conversation_modals,json=conversationModals,proto3" json:"conversation_modals,omitempty"`
}

func (x *ConversationModals) Reset() {
	*x = ConversationModals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[371]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationModals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationModals) ProtoMessage() {}

func (x *ConversationModals) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[371]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationModals.ProtoReflect.Descriptor instead.
func (*ConversationModals) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{371}
}

func (x *ConversationModals) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ConversationModals) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ConversationModals) GetConversationModals() []*ConversationModal {
	if x != nil {
		return x.ConversationModals
	}
	return nil
}

type ConversationModalPickRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx                 *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId           string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ConversationId      string          `protobuf:"bytes,3,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	AgentId             string          `protobuf:"bytes,4,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	ConversationModalId string          `protobuf:"bytes,6,opt,name=conversation_modal_id,json=conversationModalId,proto3" json:"conversation_modal_id,omitempty"`
	Text                string          `protobuf:"bytes,7,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *ConversationModalPickRequest) Reset() {
	*x = ConversationModalPickRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[372]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationModalPickRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationModalPickRequest) ProtoMessage() {}

func (x *ConversationModalPickRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[372]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationModalPickRequest.ProtoReflect.Descriptor instead.
func (*ConversationModalPickRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{372}
}

func (x *ConversationModalPickRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ConversationModalPickRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ConversationModalPickRequest) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *ConversationModalPickRequest) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *ConversationModalPickRequest) GetConversationModalId() string {
	if x != nil {
		return x.ConversationModalId
	}
	return ""
}

func (x *ConversationModalPickRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type ConversationModalPicked struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx                 *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId           string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ConversationModalId string          `protobuf:"bytes,3,opt,name=conversation_modal_id,json=conversationModalId,proto3" json:"conversation_modal_id,omitempty"`
	Url                 string          `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	Size                string          `protobuf:"bytes,6,opt,name=size,proto3" json:"size,omitempty"`
	ViewId              string          `protobuf:"bytes,7,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
}

func (x *ConversationModalPicked) Reset() {
	*x = ConversationModalPicked{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[373]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationModalPicked) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationModalPicked) ProtoMessage() {}

func (x *ConversationModalPicked) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[373]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationModalPicked.ProtoReflect.Descriptor instead.
func (*ConversationModalPicked) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{373}
}

func (x *ConversationModalPicked) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *ConversationModalPicked) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ConversationModalPicked) GetConversationModalId() string {
	if x != nil {
		return x.ConversationModalId
	}
	return ""
}

func (x *ConversationModalPicked) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ConversationModalPicked) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *ConversationModalPicked) GetViewId() string {
	if x != nil {
		return x.ViewId
	}
	return ""
}

type EmailBlocks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx         *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId   string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	EmailBlocks []*EmailBlock   `protobuf:"bytes,3,rep,name=email_blocks,json=emailBlocks,proto3" json:"email_blocks,omitempty"`
	Anchor      string          `protobuf:"bytes,4,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Total       int64           `protobuf:"varint,5,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *EmailBlocks) Reset() {
	*x = EmailBlocks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[374]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailBlocks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailBlocks) ProtoMessage() {}

func (x *EmailBlocks) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[374]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailBlocks.ProtoReflect.Descriptor instead.
func (*EmailBlocks) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{374}
}

func (x *EmailBlocks) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *EmailBlocks) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *EmailBlocks) GetEmailBlocks() []*EmailBlock {
	if x != nil {
		return x.EmailBlocks
	}
	return nil
}

func (x *EmailBlocks) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *EmailBlocks) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type EmailBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Id        string          `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Created   int64           `protobuf:"varint,4,opt,name=created,proto3" json:"created,omitempty"`
	CreatedBy string          `protobuf:"bytes,5,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
}

func (x *EmailBlock) Reset() {
	*x = EmailBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[375]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailBlock) ProtoMessage() {}

func (x *EmailBlock) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[375]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailBlock.ProtoReflect.Descriptor instead.
func (*EmailBlock) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{375}
}

func (x *EmailBlock) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *EmailBlock) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *EmailBlock) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EmailBlock) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *EmailBlock) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

type HourEventMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int64 `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *HourEventMeta) Reset() {
	*x = HourEventMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[376]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HourEventMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HourEventMeta) ProtoMessage() {}

func (x *HourEventMeta) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[376]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HourEventMeta.ProtoReflect.Descriptor instead.
func (*HourEventMeta) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{376}
}

func (x *HourEventMeta) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type FacebookPageRegister struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx             *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId       string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	AccessToken     string          `protobuf:"bytes,6,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	PageIds         []string        `protobuf:"bytes,7,rep,name=page_ids,json=pageIds,proto3" json:"page_ids,omitempty"`
	IsInstagram     bool            `protobuf:"varint,12,opt,name=is_instagram,json=isInstagram,proto3" json:"is_instagram,omitempty"`
	ReceiveComments []string        `protobuf:"bytes,13,rep,name=receive_comments,json=receiveComments,proto3" json:"receive_comments,omitempty"` // page id that receive comment
}

func (x *FacebookPageRegister) Reset() {
	*x = FacebookPageRegister{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[377]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FacebookPageRegister) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FacebookPageRegister) ProtoMessage() {}

func (x *FacebookPageRegister) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[377]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FacebookPageRegister.ProtoReflect.Descriptor instead.
func (*FacebookPageRegister) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{377}
}

func (x *FacebookPageRegister) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *FacebookPageRegister) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *FacebookPageRegister) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *FacebookPageRegister) GetPageIds() []string {
	if x != nil {
		return x.PageIds
	}
	return nil
}

func (x *FacebookPageRegister) GetIsInstagram() bool {
	if x != nil {
		return x.IsInstagram
	}
	return false
}

func (x *FacebookPageRegister) GetReceiveComments() []string {
	if x != nil {
		return x.ReceiveComments
	}
	return nil
}

type CallDriverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx             *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId       string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Action          string          `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"` // dial, hangup, wait-for-key, call, call-status, register-device, unregister-device
	ConversationId  string          `protobuf:"bytes,4,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	RequestId       string          `protobuf:"bytes,5,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Devices         []string        `protobuf:"bytes,6,rep,name=devices,proto3" json:"devices,omitempty"`
	DelaySecs       []int64         `protobuf:"varint,7,rep,packed,name=delay_secs,json=delaySecs,proto3" json:"delay_secs,omitempty"`
	RingSecs        []int64         `protobuf:"varint,8,rep,packed,name=ring_secs,json=ringSecs,proto3" json:"ring_secs,omitempty"`
	TimeoutSec      int64           `protobuf:"varint,9,opt,name=timeout_sec,json=timeoutSec,proto3" json:"timeout_sec,omitempty"`
	EnableRecording bool            `protobuf:"varint,10,opt,name=enable_recording,json=enableRecording,proto3" json:"enable_recording,omitempty"`
	AudioMessage    string          `protobuf:"bytes,11,opt,name=audio_message,json=audioMessage,proto3" json:"audio_message,omitempty"` // url
	// string debug_message = 12;
	MissedMessage string `protobuf:"bytes,13,opt,name=missed_message,json=missedMessage,proto3" json:"missed_message,omitempty"` // url
	// make outgoing call
	CallDevice  string       `protobuf:"bytes,15,opt,name=call_device,json=callDevice,proto3" json:"call_device,omitempty"`
	ToNumber    string       `protobuf:"bytes,16,opt,name=to_number,json=toNumber,proto3" json:"to_number,omitempty"`
	FromNumber  string       `protobuf:"bytes,17,opt,name=from_number,json=fromNumber,proto3" json:"from_number,omitempty"`
	SipProvider string       `protobuf:"bytes,19,opt,name=sip_provider,json=sipProvider,proto3" json:"sip_provider,omitempty"`
	PhoneDevice *PhoneDevice `protobuf:"bytes,18,opt,name=phone_device,json=phoneDevice,proto3" json:"phone_device,omitempty"` // register-device || unregister-device
}

func (x *CallDriverRequest) Reset() {
	*x = CallDriverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[378]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallDriverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallDriverRequest) ProtoMessage() {}

func (x *CallDriverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[378]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallDriverRequest.ProtoReflect.Descriptor instead.
func (*CallDriverRequest) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{378}
}

func (x *CallDriverRequest) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *CallDriverRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CallDriverRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *CallDriverRequest) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *CallDriverRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CallDriverRequest) GetDevices() []string {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *CallDriverRequest) GetDelaySecs() []int64 {
	if x != nil {
		return x.DelaySecs
	}
	return nil
}

func (x *CallDriverRequest) GetRingSecs() []int64 {
	if x != nil {
		return x.RingSecs
	}
	return nil
}

func (x *CallDriverRequest) GetTimeoutSec() int64 {
	if x != nil {
		return x.TimeoutSec
	}
	return 0
}

func (x *CallDriverRequest) GetEnableRecording() bool {
	if x != nil {
		return x.EnableRecording
	}
	return false
}

func (x *CallDriverRequest) GetAudioMessage() string {
	if x != nil {
		return x.AudioMessage
	}
	return ""
}

func (x *CallDriverRequest) GetMissedMessage() string {
	if x != nil {
		return x.MissedMessage
	}
	return ""
}

func (x *CallDriverRequest) GetCallDevice() string {
	if x != nil {
		return x.CallDevice
	}
	return ""
}

func (x *CallDriverRequest) GetToNumber() string {
	if x != nil {
		return x.ToNumber
	}
	return ""
}

func (x *CallDriverRequest) GetFromNumber() string {
	if x != nil {
		return x.FromNumber
	}
	return ""
}

func (x *CallDriverRequest) GetSipProvider() string {
	if x != nil {
		return x.SipProvider
	}
	return ""
}

func (x *CallDriverRequest) GetPhoneDevice() *PhoneDevice {
	if x != nil {
		return x.PhoneDevice
	}
	return nil
}

type CallDriverResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId   string       `protobuf:"bytes,6,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	PhoneDevice *PhoneDevice `protobuf:"bytes,12,opt,name=phone_device,json=phoneDevice,proto3" json:"phone_device,omitempty"`
	Call        *CallInfo    `protobuf:"bytes,11,opt,name=call,proto3" json:"call,omitempty"` // for get-call-status
}

func (x *CallDriverResponse) Reset() {
	*x = CallDriverResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[379]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallDriverResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallDriverResponse) ProtoMessage() {}

func (x *CallDriverResponse) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[379]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallDriverResponse.ProtoReflect.Descriptor instead.
func (*CallDriverResponse) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{379}
}

func (x *CallDriverResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CallDriverResponse) GetPhoneDevice() *PhoneDevice {
	if x != nil {
		return x.PhoneDevice
	}
	return nil
}

func (x *CallDriverResponse) GetCall() *CallInfo {
	if x != nil {
		return x.Call
	}
	return nil
}

type BlockedNumbers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx            *common.Context  `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId      string           `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	BlockedNumbers []*BlockedNumber `protobuf:"bytes,3,rep,name=blocked_numbers,json=blockedNumbers,proto3" json:"blocked_numbers,omitempty"`
}

func (x *BlockedNumbers) Reset() {
	*x = BlockedNumbers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[380]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockedNumbers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockedNumbers) ProtoMessage() {}

func (x *BlockedNumbers) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[380]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockedNumbers.ProtoReflect.Descriptor instead.
func (*BlockedNumbers) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{380}
}

func (x *BlockedNumbers) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *BlockedNumbers) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *BlockedNumbers) GetBlockedNumbers() []*BlockedNumber {
	if x != nil {
		return x.BlockedNumbers
	}
	return nil
}

type BlockedNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx       *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	AccountId string          `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// the number that dont want to receive call from blocked number
	SourceNumber string `protobuf:"bytes,3,opt,name=source_number,json=sourceNumber,proto3" json:"source_number,omitempty"`
	// the blocked number
	Number  string `protobuf:"bytes,5,opt,name=number,proto3" json:"number,omitempty"`
	By      string `protobuf:"bytes,6,opt,name=by,proto3" json:"by,omitempty"`            // agent id that blocked the number
	Blocked int64  `protobuf:"varint,7,opt,name=blocked,proto3" json:"blocked,omitempty"` // the day that blocked
}

func (x *BlockedNumber) Reset() {
	*x = BlockedNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[381]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockedNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockedNumber) ProtoMessage() {}

func (x *BlockedNumber) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[381]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockedNumber.ProtoReflect.Descriptor instead.
func (*BlockedNumber) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{381}
}

func (x *BlockedNumber) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *BlockedNumber) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *BlockedNumber) GetSourceNumber() string {
	if x != nil {
		return x.SourceNumber
	}
	return ""
}

func (x *BlockedNumber) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *BlockedNumber) GetBy() string {
	if x != nil {
		return x.By
	}
	return ""
}

func (x *BlockedNumber) GetBlocked() int64 {
	if x != nil {
		return x.Blocked
	}
	return 0
}

type TextToSpeech struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text     string               `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Speeches []*TTSVoiceSelection `protobuf:"bytes,3,rep,name=speeches,proto3" json:"speeches,omitempty"`
}

func (x *TextToSpeech) Reset() {
	*x = TextToSpeech{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[382]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextToSpeech) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextToSpeech) ProtoMessage() {}

func (x *TextToSpeech) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[382]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextToSpeech.ProtoReflect.Descriptor instead.
func (*TextToSpeech) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{382}
}

func (x *TextToSpeech) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *TextToSpeech) GetSpeeches() []*TTSVoiceSelection {
	if x != nil {
		return x.Speeches
	}
	return nil
}

type TTSVoiceSelection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text            string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"` // derived
	LanguageCode    string `protobuf:"bytes,3,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`
	SsmlGender      int32  `protobuf:"varint,4,opt,name=ssml_gender,json=ssmlGender,proto3" json:"ssml_gender,omitempty"`
	Name            string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	FileMp3Url      string `protobuf:"bytes,6,opt,name=file_mp3_url,json=fileMp3Url,proto3" json:"file_mp3_url,omitempty"`
	BackgroundMusic string `protobuf:"bytes,7,opt,name=background_music,json=backgroundMusic,proto3" json:"background_music,omitempty"` // calm, fresh, soothing, optimistic, happy, inspire
}

func (x *TTSVoiceSelection) Reset() {
	*x = TTSVoiceSelection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[383]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TTSVoiceSelection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TTSVoiceSelection) ProtoMessage() {}

func (x *TTSVoiceSelection) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[383]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TTSVoiceSelection.ProtoReflect.Descriptor instead.
func (*TTSVoiceSelection) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{383}
}

func (x *TTSVoiceSelection) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *TTSVoiceSelection) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

func (x *TTSVoiceSelection) GetSsmlGender() int32 {
	if x != nil {
		return x.SsmlGender
	}
	return 0
}

func (x *TTSVoiceSelection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TTSVoiceSelection) GetFileMp3Url() string {
	if x != nil {
		return x.FileMp3Url
	}
	return ""
}

func (x *TTSVoiceSelection) GetBackgroundMusic() string {
	if x != nil {
		return x.BackgroundMusic
	}
	return ""
}

type BusinessHour struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Weekday *string `protobuf:"bytes,4,opt,name=weekday,proto3,oneof" json:"weekday,omitempty"` // empty
	// or
	StartTime *int64  `protobuf:"varint,5,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`
	EndTime   *int64  `protobuf:"varint,6,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
	Name      *string `protobuf:"bytes,7,opt,name=name,proto3,oneof" json:"name,omitempty"`
}

func (x *BusinessHour) Reset() {
	*x = BusinessHour{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[384]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessHour) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessHour) ProtoMessage() {}

func (x *BusinessHour) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[384]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessHour.ProtoReflect.Descriptor instead.
func (*BusinessHour) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{384}
}

func (x *BusinessHour) GetWeekday() string {
	if x != nil && x.Weekday != nil {
		return *x.Weekday
	}
	return ""
}

func (x *BusinessHour) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *BusinessHour) GetEndTime() int64 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *BusinessHour) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type BusinessHours struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctx        *common.Context `protobuf:"bytes,1,opt,name=ctx,proto3,oneof" json:"ctx,omitempty"`
	AccountId  *string         `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3,oneof" json:"account_id,omitempty"`
	Id         *string         `protobuf:"bytes,3,opt,name=id,proto3,oneof" json:"id,omitempty"` // global, xyz
	Timezone   string          `protobuf:"bytes,4,opt,name=timezone,proto3" json:"timezone,omitempty"`
	WeekDays   []*BusinessHour `protobuf:"bytes,5,rep,name=week_days,json=weekDays,proto3" json:"week_days,omitempty"`
	ExtraHours []*BusinessHour `protobuf:"bytes,6,rep,name=extra_hours,json=extraHours,proto3" json:"extra_hours,omitempty"`
	Holidays   []*BusinessHour `protobuf:"bytes,7,rep,name=holidays,proto3" json:"holidays,omitempty"`
}

func (x *BusinessHours) Reset() {
	*x = BusinessHours{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[385]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessHours) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessHours) ProtoMessage() {}

func (x *BusinessHours) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[385]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessHours.ProtoReflect.Descriptor instead.
func (*BusinessHours) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{385}
}

func (x *BusinessHours) GetCtx() *common.Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

func (x *BusinessHours) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *BusinessHours) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *BusinessHours) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *BusinessHours) GetWeekDays() []*BusinessHour {
	if x != nil {
		return x.WeekDays
	}
	return nil
}

func (x *BusinessHours) GetExtraHours() []*BusinessHour {
	if x != nil {
		return x.ExtraHours
	}
	return nil
}

func (x *BusinessHours) GetHolidays() []*BusinessHour {
	if x != nil {
		return x.Holidays
	}
	return nil
}

type Event_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account      *account.Account  `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Agent        *account.Agent    `protobuf:"bytes,2,opt,name=agent,proto3" json:"agent,omitempty"`
	Message      *Message          `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Conversation *Conversation     `protobuf:"bytes,4,opt,name=conversation,proto3" json:"conversation,omitempty"`
	Product      *Product          `protobuf:"bytes,6,opt,name=product,proto3" json:"product,omitempty"`
	Topic        *Topic            `protobuf:"bytes,7,opt,name=topic,proto3" json:"topic,omitempty"`
	Presence     *account.Presence `protobuf:"bytes,8,opt,name=presence,proto3" json:"presence,omitempty"`
	User         *User             `protobuf:"bytes,10,opt,name=user,proto3" json:"user,omitempty"`
	UnreadTopic  *UnreadTopic      `protobuf:"bytes,11,opt,name=unread_topic,json=unreadTopic,proto3" json:"unread_topic,omitempty"` // todo: remove
	Notification *Notification     `protobuf:"bytes,14,opt,name=notification,proto3" json:"notification,omitempty"`
	AgentGroup   *AgentGroup       `protobuf:"bytes,18,opt,name=agent_group,json=agentGroup,proto3" json:"agent_group,omitempty"`
	Note         *Note             `protobuf:"bytes,23,opt,name=note,proto3" json:"note,omitempty"`
	// Ticket ticket = 24;
	// Automation automation = 25;
	Event *Event `protobuf:"bytes,26,opt,name=event,proto3" json:"event,omitempty"`
	// AutomationEvent automation_event = 30;
	// notibox.Notibox notibox = 32;
	NotificationSetting *noti5.Setting       `protobuf:"bytes,34,opt,name=notification_setting,json=notificationSetting,proto3" json:"notification_setting,omitempty"`
	Rule                *Rule                `protobuf:"bytes,36,opt,name=rule,proto3" json:"rule,omitempty"`
	UserAttribute       *AttributeDefinition `protobuf:"bytes,37,opt,name=user_attribute,json=userAttribute,proto3" json:"user_attribute,omitempty"`
	Tag                 *Tag                 `protobuf:"bytes,38,opt,name=tag,proto3" json:"tag,omitempty"`
	TotalUser           *UserMetric          `protobuf:"bytes,39,opt,name=total_user,json=totalUser,proto3" json:"total_user,omitempty"`
	Bot                 *Bot                 `protobuf:"bytes,40,opt,name=bot,proto3" json:"bot,omitempty"`
	BotRunResponse      *BotRunResponse      `protobuf:"bytes,41,opt,name=bot_run_response,json=botRunResponse,proto3" json:"bot_run_response,omitempty"`
	Integration         *Integration         `protobuf:"bytes,42,opt,name=integration,proto3" json:"integration,omitempty"`
	BotTerminated       *BotTerminated       `protobuf:"bytes,43,opt,name=bot_terminated,json=botTerminated,proto3" json:"bot_terminated,omitempty"`
	Webhook             *Webhook             `protobuf:"bytes,44,opt,name=webhook,proto3" json:"webhook,omitempty"`
	UserAlias           *UserAlias           `protobuf:"bytes,45,opt,name=user_alias,json=userAlias,proto3" json:"user_alias,omitempty"`
	Conversion          *Conversion          `protobuf:"bytes,47,opt,name=conversion,proto3" json:"conversion,omitempty"`
	// CompactedNoties compacted_noties = 51;
	Site                   *Site                   `protobuf:"bytes,52,opt,name=site,proto3" json:"site,omitempty"`
	WebpageCheck           *WebpageCheck           `protobuf:"bytes,53,opt,name=webpage_check,json=webpageCheck,proto3" json:"webpage_check,omitempty"`
	LanguageMessage        *LangMessage            `protobuf:"bytes,54,opt,name=language_message,json=languageMessage,proto3" json:"language_message,omitempty"`
	Label                  *Label                  `protobuf:"bytes,55,opt,name=label,proto3" json:"label,omitempty"`
	UserView               *UserView               `protobuf:"bytes,56,opt,name=user_view,json=userView,proto3" json:"user_view,omitempty"`
	LoginSession           *LoginSession           `protobuf:"bytes,57,opt,name=login_session,json=loginSession,proto3" json:"login_session,omitempty"`
	ProductFeed            *ProductFeed            `protobuf:"bytes,58,opt,name=product_feed,json=productFeed,proto3" json:"product_feed,omitempty"`
	ProductCollection      *ProductCollection      `protobuf:"bytes,59,opt,name=product_collection,json=productCollection,proto3" json:"product_collection,omitempty"`
	Order                  *Order                  `protobuf:"bytes,60,opt,name=order,proto3" json:"order,omitempty"`
	Currency               *Currency               `protobuf:"bytes,61,opt,name=currency,proto3" json:"currency,omitempty"`
	ShopSetting            *ShopSetting            `protobuf:"bytes,62,opt,name=shop_setting,json=shopSetting,proto3" json:"shop_setting,omitempty"`
	ShippingAddress        *Address                `protobuf:"bytes,63,opt,name=shipping_address,json=shippingAddress,proto3" json:"shipping_address,omitempty"`
	OrderStatus            *OrderStatusUpdated     `protobuf:"bytes,65,opt,name=order_status,json=orderStatus,proto3" json:"order_status,omitempty"`
	Bill                   *Bill                   `protobuf:"bytes,66,opt,name=bill,proto3" json:"bill,omitempty"`
	OrderFrom              *Order                  `protobuf:"bytes,67,opt,name=order_from,json=orderFrom,proto3" json:"order_from,omitempty"`
	Current                *Event                  `protobuf:"bytes,68,opt,name=current,proto3" json:"current,omitempty"`
	OrderHistoryEntry      *OrderHistoryEntry      `protobuf:"bytes,69,opt,name=order_history_entry,json=orderHistoryEntry,proto3" json:"order_history_entry,omitempty"`
	UserOrderConfirmation  *UserOrderConfirmation  `protobuf:"bytes,70,opt,name=user_order_confirmation,json=userOrderConfirmation,proto3" json:"user_order_confirmation,omitempty"`
	Pipeline               *Pipeline               `protobuf:"bytes,71,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	OrderPipelineUpdated   *OrderPipelineUpdated   `protobuf:"bytes,72,opt,name=order_pipeline_updated,json=orderPipelineUpdated,proto3" json:"order_pipeline_updated,omitempty"`
	Task                   *Task                   `protobuf:"bytes,73,opt,name=task,proto3" json:"task,omitempty"`
	TaskHistoryEntry       *TaskHistoryEntry       `protobuf:"bytes,74,opt,name=task_history_entry,json=taskHistoryEntry,proto3" json:"task_history_entry,omitempty"`
	OrderPipelineStage     *OrderPipelineStage     `protobuf:"bytes,75,opt,name=order_pipeline_stage,json=orderPipelineStage,proto3" json:"order_pipeline_stage,omitempty"`
	ConversationModal      *ConversationModal      `protobuf:"bytes,76,opt,name=conversation_modal,json=conversationModal,proto3" json:"conversation_modal,omitempty"`
	ConversationAutomation *ConversationAutomation `protobuf:"bytes,77,opt,name=conversation_automation,json=conversationAutomation,proto3" json:"conversation_automation,omitempty"`
	PhoneDevice            *PhoneDevice            `protobuf:"bytes,78,opt,name=phone_device,json=phoneDevice,proto3" json:"phone_device,omitempty"`
	CallSetting            *CallSetting            `protobuf:"bytes,79,opt,name=call_setting,json=callSetting,proto3" json:"call_setting,omitempty"`
	BlockedNumber          *BlockedNumber          `protobuf:"bytes,91,opt,name=blocked_number,json=blockedNumber,proto3" json:"blocked_number,omitempty"`
	CallInfo               *CallInfo               `protobuf:"bytes,92,opt,name=call_info,json=callInfo,proto3" json:"call_info,omitempty"`
	CallRequest            *CallDriverRequest      `protobuf:"bytes,93,opt,name=call_request,json=callRequest,proto3" json:"call_request,omitempty"` // only use for wait-for-key in call channel
	GreetingAudio          *GreetingAudio          `protobuf:"bytes,94,opt,name=greeting_audio,json=greetingAudio,proto3" json:"greeting_audio,omitempty"`
}

func (x *Event_Data) Reset() {
	*x = Event_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[386]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event_Data) ProtoMessage() {}

func (x *Event_Data) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[386]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event_Data.ProtoReflect.Descriptor instead.
func (*Event_Data) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{64, 0}
}

func (x *Event_Data) GetAccount() *account.Account {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *Event_Data) GetAgent() *account.Agent {
	if x != nil {
		return x.Agent
	}
	return nil
}

func (x *Event_Data) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *Event_Data) GetConversation() *Conversation {
	if x != nil {
		return x.Conversation
	}
	return nil
}

func (x *Event_Data) GetProduct() *Product {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *Event_Data) GetTopic() *Topic {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *Event_Data) GetPresence() *account.Presence {
	if x != nil {
		return x.Presence
	}
	return nil
}

func (x *Event_Data) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Event_Data) GetUnreadTopic() *UnreadTopic {
	if x != nil {
		return x.UnreadTopic
	}
	return nil
}

func (x *Event_Data) GetNotification() *Notification {
	if x != nil {
		return x.Notification
	}
	return nil
}

func (x *Event_Data) GetAgentGroup() *AgentGroup {
	if x != nil {
		return x.AgentGroup
	}
	return nil
}

func (x *Event_Data) GetNote() *Note {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *Event_Data) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *Event_Data) GetNotificationSetting() *noti5.Setting {
	if x != nil {
		return x.NotificationSetting
	}
	return nil
}

func (x *Event_Data) GetRule() *Rule {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *Event_Data) GetUserAttribute() *AttributeDefinition {
	if x != nil {
		return x.UserAttribute
	}
	return nil
}

func (x *Event_Data) GetTag() *Tag {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *Event_Data) GetTotalUser() *UserMetric {
	if x != nil {
		return x.TotalUser
	}
	return nil
}

func (x *Event_Data) GetBot() *Bot {
	if x != nil {
		return x.Bot
	}
	return nil
}

func (x *Event_Data) GetBotRunResponse() *BotRunResponse {
	if x != nil {
		return x.BotRunResponse
	}
	return nil
}

func (x *Event_Data) GetIntegration() *Integration {
	if x != nil {
		return x.Integration
	}
	return nil
}

func (x *Event_Data) GetBotTerminated() *BotTerminated {
	if x != nil {
		return x.BotTerminated
	}
	return nil
}

func (x *Event_Data) GetWebhook() *Webhook {
	if x != nil {
		return x.Webhook
	}
	return nil
}

func (x *Event_Data) GetUserAlias() *UserAlias {
	if x != nil {
		return x.UserAlias
	}
	return nil
}

func (x *Event_Data) GetConversion() *Conversion {
	if x != nil {
		return x.Conversion
	}
	return nil
}

func (x *Event_Data) GetSite() *Site {
	if x != nil {
		return x.Site
	}
	return nil
}

func (x *Event_Data) GetWebpageCheck() *WebpageCheck {
	if x != nil {
		return x.WebpageCheck
	}
	return nil
}

func (x *Event_Data) GetLanguageMessage() *LangMessage {
	if x != nil {
		return x.LanguageMessage
	}
	return nil
}

func (x *Event_Data) GetLabel() *Label {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *Event_Data) GetUserView() *UserView {
	if x != nil {
		return x.UserView
	}
	return nil
}

func (x *Event_Data) GetLoginSession() *LoginSession {
	if x != nil {
		return x.LoginSession
	}
	return nil
}

func (x *Event_Data) GetProductFeed() *ProductFeed {
	if x != nil {
		return x.ProductFeed
	}
	return nil
}

func (x *Event_Data) GetProductCollection() *ProductCollection {
	if x != nil {
		return x.ProductCollection
	}
	return nil
}

func (x *Event_Data) GetOrder() *Order {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *Event_Data) GetCurrency() *Currency {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *Event_Data) GetShopSetting() *ShopSetting {
	if x != nil {
		return x.ShopSetting
	}
	return nil
}

func (x *Event_Data) GetShippingAddress() *Address {
	if x != nil {
		return x.ShippingAddress
	}
	return nil
}

func (x *Event_Data) GetOrderStatus() *OrderStatusUpdated {
	if x != nil {
		return x.OrderStatus
	}
	return nil
}

func (x *Event_Data) GetBill() *Bill {
	if x != nil {
		return x.Bill
	}
	return nil
}

func (x *Event_Data) GetOrderFrom() *Order {
	if x != nil {
		return x.OrderFrom
	}
	return nil
}

func (x *Event_Data) GetCurrent() *Event {
	if x != nil {
		return x.Current
	}
	return nil
}

func (x *Event_Data) GetOrderHistoryEntry() *OrderHistoryEntry {
	if x != nil {
		return x.OrderHistoryEntry
	}
	return nil
}

func (x *Event_Data) GetUserOrderConfirmation() *UserOrderConfirmation {
	if x != nil {
		return x.UserOrderConfirmation
	}
	return nil
}

func (x *Event_Data) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

func (x *Event_Data) GetOrderPipelineUpdated() *OrderPipelineUpdated {
	if x != nil {
		return x.OrderPipelineUpdated
	}
	return nil
}

func (x *Event_Data) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *Event_Data) GetTaskHistoryEntry() *TaskHistoryEntry {
	if x != nil {
		return x.TaskHistoryEntry
	}
	return nil
}

func (x *Event_Data) GetOrderPipelineStage() *OrderPipelineStage {
	if x != nil {
		return x.OrderPipelineStage
	}
	return nil
}

func (x *Event_Data) GetConversationModal() *ConversationModal {
	if x != nil {
		return x.ConversationModal
	}
	return nil
}

func (x *Event_Data) GetConversationAutomation() *ConversationAutomation {
	if x != nil {
		return x.ConversationAutomation
	}
	return nil
}

func (x *Event_Data) GetPhoneDevice() *PhoneDevice {
	if x != nil {
		return x.PhoneDevice
	}
	return nil
}

func (x *Event_Data) GetCallSetting() *CallSetting {
	if x != nil {
		return x.CallSetting
	}
	return nil
}

func (x *Event_Data) GetBlockedNumber() *BlockedNumber {
	if x != nil {
		return x.BlockedNumber
	}
	return nil
}

func (x *Event_Data) GetCallInfo() *CallInfo {
	if x != nil {
		return x.CallInfo
	}
	return nil
}

func (x *Event_Data) GetCallRequest() *CallDriverRequest {
	if x != nil {
		return x.CallRequest
	}
	return nil
}

func (x *Event_Data) GetGreetingAudio() *GreetingAudio {
	if x != nil {
		return x.GreetingAudio
	}
	return nil
}

type ContactComponent_ContactButton struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled  bool                      `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Type     string                    `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Zalo     *ZaloContactComponent     `protobuf:"bytes,4,opt,name=zalo,proto3" json:"zalo,omitempty"`
	Facebook *FacebookContactComponent `protobuf:"bytes,5,opt,name=facebook,proto3" json:"facebook,omitempty"`
	Call     *CallContactComponent     `protobuf:"bytes,6,opt,name=call,proto3" json:"call,omitempty"`
	Chat     *ChatContactComponent     `protobuf:"bytes,7,opt,name=chat,proto3" json:"chat,omitempty"`
	Map      *MapContactComponent      `protobuf:"bytes,8,opt,name=map,proto3" json:"map,omitempty"`
}

func (x *ContactComponent_ContactButton) Reset() {
	*x = ContactComponent_ContactButton{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[387]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactComponent_ContactButton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactComponent_ContactButton) ProtoMessage() {}

func (x *ContactComponent_ContactButton) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[387]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactComponent_ContactButton.ProtoReflect.Descriptor instead.
func (*ContactComponent_ContactButton) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{175, 0}
}

func (x *ContactComponent_ContactButton) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ContactComponent_ContactButton) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ContactComponent_ContactButton) GetZalo() *ZaloContactComponent {
	if x != nil {
		return x.Zalo
	}
	return nil
}

func (x *ContactComponent_ContactButton) GetFacebook() *FacebookContactComponent {
	if x != nil {
		return x.Facebook
	}
	return nil
}

func (x *ContactComponent_ContactButton) GetCall() *CallContactComponent {
	if x != nil {
		return x.Call
	}
	return nil
}

func (x *ContactComponent_ContactButton) GetChat() *ChatContactComponent {
	if x != nil {
		return x.Chat
	}
	return nil
}

func (x *ContactComponent_ContactButton) GetMap() *MapContactComponent {
	if x != nil {
		return x.Map
	}
	return nil
}

type CallContactComponent_Hotline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number   string `protobuf:"bytes,2,opt,name=number,proto3" json:"number,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ImageUrl string `protobuf:"bytes,4,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
}

func (x *CallContactComponent_Hotline) Reset() {
	*x = CallContactComponent_Hotline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[388]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallContactComponent_Hotline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallContactComponent_Hotline) ProtoMessage() {}

func (x *CallContactComponent_Hotline) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[388]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallContactComponent_Hotline.ProtoReflect.Descriptor instead.
func (*CallContactComponent_Hotline) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{178, 0}
}

func (x *CallContactComponent_Hotline) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *CallContactComponent_Hotline) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CallContactComponent_Hotline) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

type MapContactComponent_Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Latitude    float32 `protobuf:"fixed32,3,opt,name=latitude,proto3" json:"latitude,omitempty"`   // filled
	Longitude   float32 `protobuf:"fixed32,4,opt,name=longitude,proto3" json:"longitude,omitempty"` // filled
	PhoneNumber string  `protobuf:"bytes,5,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
}

func (x *MapContactComponent_Location) Reset() {
	*x = MapContactComponent_Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[389]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapContactComponent_Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapContactComponent_Location) ProtoMessage() {}

func (x *MapContactComponent_Location) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[389]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapContactComponent_Location.ProtoReflect.Descriptor instead.
func (*MapContactComponent_Location) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{180, 0}
}

func (x *MapContactComponent_Location) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MapContactComponent_Location) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *MapContactComponent_Location) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *MapContactComponent_Location) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

type WebPluginFormField_WebPluginFormFieldOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label     string      `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	I18NLabel *I18NString `protobuf:"bytes,4,opt,name=i18n_label,json=i18nLabel,proto3" json:"i18n_label,omitempty"`
	Value     string      `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *WebPluginFormField_WebPluginFormFieldOption) Reset() {
	*x = WebPluginFormField_WebPluginFormFieldOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[390]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebPluginFormField_WebPluginFormFieldOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebPluginFormField_WebPluginFormFieldOption) ProtoMessage() {}

func (x *WebPluginFormField_WebPluginFormFieldOption) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[390]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebPluginFormField_WebPluginFormFieldOption.ProtoReflect.Descriptor instead.
func (*WebPluginFormField_WebPluginFormFieldOption) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{182, 0}
}

func (x *WebPluginFormField_WebPluginFormFieldOption) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *WebPluginFormField_WebPluginFormFieldOption) GetI18NLabel() *I18NString {
	if x != nil {
		return x.I18NLabel
	}
	return nil
}

func (x *WebPluginFormField_WebPluginFormFieldOption) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_header_proto protoreflect.FileDescriptor

var file_header_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x65, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2a, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x21, 0x0a,
	0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78,
	0x22, 0xcc, 0x01, 0x0a, 0x02, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22,
	0xce, 0x01, 0x0a, 0x03, 0x49, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0xff, 0x01, 0x0a, 0x0d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x1b, 0x0a,
	0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e,
	0x72, 0x65, 0x61, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x6e, 0x72, 0x65,
	0x61, 0x64, 0x22, 0xd3, 0x02, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x52, 0x65, 0x61,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0xb8, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73,
	0x74, 0x4e, 0x6f, 0x74, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03,
	0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x22, 0xb8, 0x03, 0x0a, 0x09, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x09,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x09, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x14, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x62, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x62, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x40, 0x0a, 0x03,
	0x4f, 0x70, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x70, 0x75, 0x73, 0x68, 0x10, 0x05, 0x22, 0x7c,
	0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x63,
	0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x22, 0x8a, 0x01, 0x0a,
	0x0c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x21, 0x0a,
	0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x38, 0x0a, 0x0d, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0c, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0xd7, 0x04, 0x0a, 0x0b, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x24, 0x0a, 0x0e, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x69, 0x6e, 0x64, 0x54, 0x6f, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x36, 0x0a, 0x17, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0x8a, 0x01, 0x0a, 0x0c, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0d, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x22, 0x90, 0x07, 0x0a, 0x0b, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03,
	0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x10, 0x67, 0x72,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x47, 0x72,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x0f, 0x67, 0x72, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x0e,
	0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x47, 0x72,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x0d, 0x6d, 0x69, 0x73,
	0x73, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x67, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x72, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x6f,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x54,
	0x6f, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x48,
	0x6f, 0x75, 0x72, 0x12, 0x49, 0x0a, 0x15, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f,
	0x68, 0x6f, 0x75, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x13, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x48, 0x6f, 0x75, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x12,
	0x38, 0x0a, 0x0c, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x47,
	0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x0b, 0x6d, 0x65,
	0x6e, 0x75, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x6e,
	0x75, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x65, 0x6e, 0x75, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x53, 0x65, 0x63, 0x12, 0x33, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x61,
	0x6c, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4b, 0x0a, 0x16, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x47, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52,
	0x14, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x66, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6d, 0x65, 0x6e, 0x75, 0x46, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x29, 0x0a, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x22, 0xb7, 0x01, 0x0a, 0x11, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x54, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x3a, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x47, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52,
	0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb2, 0x04,
	0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x65, 0x73, 0x12, 0x31, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x73, 0x18, 0x29, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x64, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x2a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x18, 0x2b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x65, 0x61, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x31, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x32, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49, 0x64,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x3f, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x12,
	0x6c, 0x61, 0x73, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x69,
	0x65, 0x77, 0x22, 0xf3, 0x01, 0x0a, 0x0a, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x22, 0x0a,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4b, 0x56, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x65,
	0x64, 0x50, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x22, 0xae, 0x01, 0x0a, 0x11, 0x53, 0x68, 0x69,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x21,
	0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74,
	0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x12, 0x73, 0x68, 0x69,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x11, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x41, 0x0a, 0x09, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02,
	0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x62, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x61, 0x74, 0x22, 0xcf, 0x02, 0x0a,
	0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x71,
	0x0a, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x22, 0xb7, 0x01, 0x0a, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x05, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12,
	0x25, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x68, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x83, 0x01, 0x0a, 0x0f,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x65, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x64,
	0x69, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x22, 0x4a, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0x7c, 0x0a,
	0x1b, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x69, 0x31, 0x38, 0x6e, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x49, 0x31, 0x38, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x69, 0x31, 0x38, 0x6e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0xa9, 0x07, 0x0a, 0x13,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x0a, 0x69,
	0x31, 0x38, 0x6e, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x31, 0x38, 0x6e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x09, 0x69, 0x31, 0x38, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x79,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x44, 0x61, 0x74, 0x65, 0x4f, 0x6e,
	0x6c, 0x79, 0x12, 0x39, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x26,
	0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x64, 0x69,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x73,
	0x65, 0x72, 0x45, 0x64, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e,
	0x6c, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64,
	0x6f, 0x6e, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x40, 0x0a, 0x0d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x08, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x10,
	0x03, 0x22, 0x34, 0x0a, 0x0d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x0a, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x10, 0x02, 0x22, 0x76, 0x0a, 0x14, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63,
	0x74, 0x78, 0x12, 0x3b, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22,
	0x36, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x22, 0xdc, 0x01, 0x0a, 0x04, 0x4e, 0x6f, 0x74, 0x65,
	0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03,
	0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x22, 0x66, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12,
	0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63,
	0x74, 0x78, 0x12, 0x22, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52,
	0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x22, 0xfb,
	0x01, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x63,
	0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x85, 0x01, 0x0a,
	0x0b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03,
	0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x22, 0x6d, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x5f, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x71, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x65,
	0x71, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x6e, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x67, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x67, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x22, 0x48, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x65, 0x71, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x02, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x22, 0x2c, 0x0a, 0x08, 0x49, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22,
	0x1c, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0xa8, 0x02,
	0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x73,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x73, 0x70, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x74, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6c, 0x6f,
	0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f,
	0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x62, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x5b, 0x0a, 0x0e,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x3c, 0x0a, 0x04, 0x50, 0x61, 0x67,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xd2, 0x04, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79,
	0x12, 0x28, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0a, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x0a, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52,
	0x09, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0c, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x26, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x33, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x6e, 0x53, 0x69, 0x74, 0x65, 0x22, 0xe2, 0x01, 0x0a,
	0x03, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x62, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0xa1, 0x01, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x75, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x45, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0xc7, 0x01, 0x0a,
	0x17, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x26, 0x0a, 0x0f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x74, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x48, 0x6f,
	0x75, 0x72, 0x54, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x7a, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x74, 0x7a, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x64, 0x69, 0x6d, 0x22, 0x99, 0x03, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a,
	0x09, 0x68, 0x61, 0x76, 0x65, 0x5f, 0x62, 0x65, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x68, 0x61, 0x76, 0x65, 0x42, 0x65, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2d, 0x0a,
	0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x69, 0x72, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x65, 0x6e, 0x5f,
	0x68, 0x6f, 0x75, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x65, 0x6e,
	0x48, 0x6f, 0x75, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x41, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x42, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x3b, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x12, 0x2c, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22,
	0x80, 0x05, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x46, 0x72, 0x6f,
	0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x75,
	0x72, 0x5f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x54, 0x6f, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65, 0x65,
	0x6e, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x73, 0x65, 0x65, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x12,
	0x20, 0x0a, 0x0c, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x74, 0x6f, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x54,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x75,
	0x63, 0x68, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f,
	0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x6e, 0x6f, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x3d, 0x0a,
	0x0e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x52, 0x0d, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x44, 0x0a, 0x12,
	0x6e, 0x6f, 0x74, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x75,
	0x72, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x75, 0x72, 0x73,
	0x52, 0x10, 0x6e, 0x6f, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x75,
	0x72, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x7a, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x74, 0x7a, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x64, 0x69, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0xf5, 0x05, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x2e, 0x0a, 0x13, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x34, 0x0a, 0x16, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x14, 0x66, 0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x61, 0x67, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x74, 0x61, 0x67, 0x42, 0x69, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x67, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61,
	0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x61, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x28,
	0x0a, 0x10, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x6f,
	0x75, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x53, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x41,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x42, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x26, 0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x43, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x44, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x75, 0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x45, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4b, 0x0a, 0x13, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x07,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x93, 0x06, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x46, 0x72, 0x6f,
	0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x75,
	0x72, 0x5f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x54, 0x6f, 0x12, 0x31, 0x0a, 0x15, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x53, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x2d, 0x0a, 0x13,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x6f, 0x75, 0x72,
	0x5f, 0x74, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x53, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x54, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x75,
	0x63, 0x68, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x67, 0x74, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x75, 0x6d, 0x47, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x3d, 0x0a, 0x0e, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x52, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x44, 0x0a, 0x12, 0x6e, 0x6f, 0x74, 0x5f, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x52, 0x10, 0x6e, 0x6f, 0x74,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x74, 0x7a, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x74, 0x7a, 0x12, 0x10, 0x0a,
	0x03, 0x64, 0x69, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x6d, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xe9, 0x03,
	0x0a, 0x0b, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x41,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x42, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x43, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x66, 0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x44, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x66, 0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x67,
	0x72, 0x65, 0x61, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x45, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x67, 0x72, 0x65, 0x61, 0x74, 0x52, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x6f, 0x74,
	0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x46, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x47, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3d, 0x0a, 0x0c, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x2d, 0x0a, 0x07, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52,
	0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x8b, 0x03, 0x0a, 0x13, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x74, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x75,
	0x72, 0x54, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x6e, 0x6f, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12,
	0x3d, 0x0a, 0x0e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x75, 0x72,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x52,
	0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x44,
	0x0a, 0x12, 0x6e, 0x6f, 0x74, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x68,
	0x6f, 0x75, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x75,
	0x72, 0x73, 0x52, 0x10, 0x6e, 0x6f, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x48,
	0x6f, 0x75, 0x72, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x7a, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x74, 0x7a, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x64, 0x69, 0x6d, 0x22, 0x8a, 0x01, 0x0a, 0x0c, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x76, 0x65, 0x5f, 0x62,
	0x65, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61, 0x76, 0x65, 0x42,
	0x65, 0x65, 0x6e, 0x22, 0xa2, 0x01, 0x0a, 0x0e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x68,
	0x61, 0x76, 0x65, 0x5f, 0x62, 0x65, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x68, 0x61, 0x76, 0x65, 0x42, 0x65, 0x65, 0x6e, 0x22, 0x92, 0x01, 0x0a, 0x0a, 0x50, 0x61, 0x67,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x75, 0x6d,
	0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x76, 0x65, 0x5f, 0x62, 0x65, 0x65, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61, 0x76, 0x65, 0x42, 0x65, 0x65, 0x6e, 0x22, 0xfd, 0x01,
	0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x12, 0x33,
	0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x52, 0x0b, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d,
	0x0a, 0x08, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x50, 0x61, 0x67, 0x65, 0x22, 0x4c, 0x0a,
	0x0d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x3b,
	0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0d, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x54, 0x0a, 0x0f, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x41,
	0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x22, 0x44, 0x0a, 0x0b, 0x50, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x12, 0x35, 0x0a, 0x0c, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0b, 0x70, 0x61, 0x67, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x69, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x6e, 0x69,
	0x78, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x6e, 0x69,
	0x78, 0x44, 0x61, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x73, 0x75, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x69, 0x67, 0x68,
	0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x68, 0x69, 0x67, 0x68, 0x65,
	0x73, 0x74, 0x22, 0x56, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x43, 0x55, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x04, 0x63, 0x63, 0x75, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x63, 0x63, 0x75, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x06, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x25, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x23, 0x0a,
	0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x22, 0x9f, 0x1a, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x03,
	0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x02, 0x62, 0x79, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x79, 0x52, 0x02,
	0x62, 0x79, 0x12, 0x32, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x54, 0x6f, 0x75, 0x63, 0x68, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0a, 0x74, 0x6f, 0x75, 0x63,
	0x68, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xb3,
	0x17, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x2d,
	0x0a, 0x08, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12,
	0x36, 0x0a, 0x0c, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55,
	0x6e, 0x72, 0x65, 0x61, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x0b, 0x75, 0x6e, 0x72, 0x65,
	0x61, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x38, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x33, 0x0a, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0a, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x20, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4e, 0x6f,
	0x74, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a,
	0x14, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6e, 0x6f,
	0x74, 0x69, 0x35, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x13, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x20, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75,
	0x6c, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x67,
	0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x31, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x09, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x03, 0x62, 0x6f, 0x74, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x74, 0x52, 0x03, 0x62, 0x6f, 0x74, 0x12, 0x40, 0x0a, 0x10, 0x62, 0x6f, 0x74, 0x5f, 0x72,
	0x75, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x74, 0x52, 0x75,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x62, 0x6f, 0x74, 0x52, 0x75,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3c, 0x0a, 0x0e, 0x62, 0x6f, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x52,
	0x0d, 0x62, 0x6f, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x29,
	0x0a, 0x07, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x52, 0x07, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x30, 0x0a, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6c, 0x69, 0x61, 0x73,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x32, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x20, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x52, 0x04, 0x73, 0x69, 0x74,
	0x65, 0x12, 0x39, 0x0a, 0x0d, 0x77, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x57, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x0c,
	0x77, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x3e, 0x0a, 0x10,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x4c, 0x61, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x2d, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x38,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77,
	0x12, 0x39, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x18, 0x3a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x46, 0x65, 0x65, 0x64, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46,
	0x65, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x2c, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x3d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x36, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x53, 0x68, 0x6f, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x73, 0x68, 0x6f,
	0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x10, 0x73, 0x68, 0x69, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x3f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x04, 0x62, 0x69, 0x6c, 0x6c, 0x18, 0x42, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x52,
	0x04, 0x62, 0x69, 0x6c, 0x6c, 0x12, 0x2c, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x46,
	0x72, 0x6f, 0x6d, 0x12, 0x27, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x44,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x13,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x55, 0x0a, 0x17, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x75, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c,
	0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x52, 0x0a, 0x16,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x14, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x20, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61,
	0x73, 0x6b, 0x12, 0x46, 0x0a, 0x12, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x74, 0x61, 0x73, 0x6b, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x4c, 0x0a, 0x14, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x52, 0x12, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x18, 0x4c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x61, 0x6c, 0x52,
	0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64,
	0x61, 0x6c, 0x12, 0x57, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x4d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x4e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0b,
	0x63, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x3c, 0x0a, 0x0e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x5b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0d, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x09, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08,
	0x63, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x6c,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0e, 0x67, 0x72, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x0d, 0x67, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x22, 0x40, 0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xf1, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03,
	0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x22, 0xad, 0x01, 0x0a, 0x09, 0x55,
	0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0xb7, 0x02, 0x0a, 0x05, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e,
	0x72, 0x65, 0x61, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x6e, 0x72, 0x65,
	0x61, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x08, 0x62, 0x79, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x62, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73,
	0x52, 0x65, 0x61, 0x64, 0x22, 0xea, 0x01, 0x0a, 0x0b, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x12, 0x28, 0x0a, 0x08, 0x62, 0x79, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x62, 0x79, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x22, 0xaa, 0x0b, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x0c,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x0b, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x73, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x73, 0x70, 0x12, 0x25,
	0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x72, 0x6f,
	0x77, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x20, 0x0a, 0x0c, 0x67, 0x61, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x61, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x61, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64,
	0x73, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x64, 0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x35, 0x0a, 0x09, 0x63,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x09, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x12, 0x31,
	0x0a, 0x14, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x13, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x69, 0x65, 0x77,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x65, 0x77, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x56, 0x69, 0x65, 0x77, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x64,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6c, 0x65,
	0x61, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x4f, 0x6e, 0x53, 0x69, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x55, 0x72,
	0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x3e, 0x0a,
	0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x10, 0x03, 0x22, 0x20, 0x0a,
	0x0a, 0x41, 0x64, 0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x0e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x61, 0x64, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x10, 0x00, 0x22,
	0x4d, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x69,
	0x6e, 0x67, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x63, 0x10,
	0x02, 0x12, 0x0a, 0x0a, 0x06, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x10, 0x03, 0x12, 0x0f, 0x0a,
	0x0b, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x10, 0x04, 0x22, 0xef,
	0x04, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63,
	0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x1f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x32, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54,
	0x6f, 0x75, 0x63, 0x68, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0a, 0x74, 0x6f, 0x75, 0x63, 0x68,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x22, 0x6f, 0x0a, 0x10, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0x65, 0x0a, 0x11, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x28,
	0x0a, 0x10, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0xb3, 0x04, 0x0a, 0x0d, 0x42, 0x6f, 0x74,
	0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06,
	0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6f,
	0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x33, 0x0a, 0x0f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x4b, 0x56, 0x52, 0x0e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x03, 0x62, 0x6f,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x74, 0x52, 0x03, 0x62, 0x6f, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x6f, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x6f, 0x74, 0x52, 0x75, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x28, 0x0a, 0x10, 0x62, 0x6f, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x6f, 0x74, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61,
	0x6e, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x22, 0x8a,
	0x02, 0x0a, 0x0e, 0x42, 0x6f, 0x74, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x62, 0x6f,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x65, 0x63,
	0x42, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x62, 0x6f,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65,
	0x78, 0x65, 0x63, 0x42, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xcd, 0x08, 0x0a, 0x04,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x6f, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x13, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x45, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45,
	0x0a, 0x11, 0x74, 0x69, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x54, 0x69, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x68, 0x61,
	0x73, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x75, 0x73, 0x65, 0x72, 0x48, 0x61, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x47, 0x0a, 0x0f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x6f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x77, 0x68, 0x65,
	0x6e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0e, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x0c, 0x0a, 0x01, 0x76, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x76, 0x12,
	0x20, 0x0a, 0x0b, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x18,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x73, 0x22, 0xd7, 0x02, 0x0a, 0x0e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x12, 0x0e, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x73, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x10, 0x03,
	0x12, 0x0f, 0x0a, 0x0b, 0x6d, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x10,
	0x04, 0x12, 0x19, 0x0a, 0x15, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x5f,
	0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x73, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x6c, 0x6c, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x5f,
	0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x10, 0x0b, 0x12, 0x19, 0x0a, 0x15, 0x6c, 0x65,
	0x61, 0x73, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x73, 0x10, 0x0c, 0x12, 0x1b, 0x0a, 0x17, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x5f, 0x77,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x10, 0x0d, 0x12, 0x0e, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x6e,
	0x10, 0x0e, 0x12, 0x15, 0x0a, 0x11, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x6e,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x10, 0x0f, 0x12, 0x17, 0x0a, 0x13, 0x6c, 0x65, 0x61,
	0x73, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x10, 0x10, 0x12, 0x07, 0x0a, 0x03, 0x62, 0x6f, 0x74, 0x10, 0x0a, 0x22, 0x7f, 0x0a, 0x10, 0x54,
	0x69, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x75, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x48, 0x6f, 0x75, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x6f, 0x66, 0x5f,
	0x77, 0x65, 0x65, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x79, 0x73,
	0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c,
	0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x73, 0x22, 0xfa, 0x02, 0x0a,
	0x10, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x43, 0x0a, 0x10, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x6f,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x54, 0x6f,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x46, 0x72, 0x6f,
	0x6d, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x11, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x73, 0x22, 0x4e, 0x0a, 0x05, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x22, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0xc3, 0x01, 0x0a, 0x0b, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x75, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x1b,
	0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x22,
	0xf4, 0x05, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x56, 0x69, 0x65, 0x77, 0x55,
	0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x12, 0x29, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x42, 0x79, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x17, 0x0a,
	0x07, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x6c, 0x65, 0x66, 0x74, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x73, 0x65, 0x65, 0x6e, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x73, 0x65, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74,
	0x53, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6d, 0x75, 0x74, 0x65, 0x64,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x12,
	0x29, 0x0a, 0x10, 0x6f, 0x66, 0x66, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6f, 0x66, 0x66, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74,
	0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x3b, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x10, 0x03, 0x22, 0xec, 0x03, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68,
	0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x64,
	0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x74, 0x6f, 0x75, 0x63, 0x68, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xfd, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x22, 0x5f, 0x0a, 0x05, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x87, 0x0c, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0a,
	0x74, 0x6f, 0x75, 0x63, 0x68, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x0c, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x4a, 0x0a, 0x1a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x11, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x74,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x62, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x42, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x73, 0x65, 0x63, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x53, 0x65, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49,
	0x64, 0x12, 0x34, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x6f,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0a, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x22, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x4b, 0x56, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x07, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x75, 0x74, 0x65, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6d, 0x75, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x65, 0x61, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x72, 0x65, 0x61, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x2f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x30, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x6f,
	0x75, 0x63, 0x68, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c,
	0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x73, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x04,
	0x63, 0x61, 0x6c, 0x6c, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x63, 0x61,
	0x6c, 0x6c, 0x12, 0x3c, 0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0xea, 0x04, 0x0a, 0x08, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a,
	0x17, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x65,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4d, 0x69, 0x73, 0x73, 0x65,
	0x64, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x61, 0x6e, 0x67, 0x75,
	0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x61,
	0x6e, 0x67, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x0d,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x22, 0x88, 0x01,
	0x0a, 0x06, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x6f, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xed, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x3a, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0xa0, 0x06, 0x0a, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x34, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4b,
	0x56, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x70, 0x6f, 0x6e, 0x67, 0x73, 0x18, 0x11, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6e, 0x67, 0x52, 0x05, 0x70, 0x6f, 0x6e, 0x67, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x69, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x69, 0x6c, 0x6c, 0x44, 0x65, 0x6c, 0x74, 0x61,
	0x12, 0x3c, 0x0a, 0x10, 0x69, 0x31, 0x38, 0x6e, 0x5f, 0x71, 0x75, 0x69, 0x6c, 0x6c, 0x5f, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x49, 0x31, 0x38, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0e,
	0x69, 0x31, 0x38, 0x6e, 0x51, 0x75, 0x69, 0x6c, 0x6c, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70,
	0x69, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x64, 0x65, 0x6d,
	0x70, 0x6f, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x53, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6f, 0x73, 0x18,
	0x1f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x74, 0x6f, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x22, 0x34, 0x0a, 0x0e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e,
	0x6b, 0x22, 0x98, 0x03, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6e,
	0x67, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x63, 0x6b, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x61, 0x63, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x8a, 0x02, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x05, 0x0a, 0x01, 0x6e, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x6e,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x10, 0x03, 0x12,
	0x0a, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x6c,
	0x69, 0x6b, 0x65, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x6c, 0x6f, 0x76, 0x65, 0x10, 0x06, 0x12,
	0x08, 0x0a, 0x04, 0x68, 0x61, 0x68, 0x61, 0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x77, 0x6f, 0x77,
	0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x73, 0x61, 0x64, 0x10, 0x09, 0x12, 0x09, 0x0a, 0x05, 0x61,
	0x6e, 0x67, 0x72, 0x79, 0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x5f, 0x6c, 0x6f, 0x76, 0x65, 0x10, 0x0c, 0x12, 0x0e, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x5f, 0x77, 0x6f, 0x77, 0x10, 0x0d, 0x12, 0x0f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x5f, 0x68, 0x61, 0x68, 0x61, 0x10, 0x0e, 0x12, 0x0e, 0x0a, 0x0a, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x5f, 0x73, 0x61, 0x64, 0x10, 0x0f, 0x12, 0x10, 0x0a, 0x0c, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x5f, 0x61, 0x6e, 0x67, 0x72, 0x79, 0x10, 0x10, 0x12, 0x08, 0x0a, 0x04, 0x68,
	0x69, 0x64, 0x65, 0x10, 0x11, 0x12, 0x0f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f,
	0x68, 0x69, 0x64, 0x65, 0x10, 0x12, 0x12, 0x08, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x10, 0x13,
	0x12, 0x0a, 0x0a, 0x06, 0x75, 0x6e, 0x73, 0x65, 0x65, 0x6e, 0x10, 0x14, 0x22, 0xc6, 0x03, 0x0a,
	0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x65, 0x62, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x65, 0x62, 0x76, 0x69,
	0x65, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x69, 0x31, 0x38, 0x6e, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x49, 0x31, 0x38, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09,
	0x69, 0x31, 0x38, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x0a, 0x42, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x75, 0x72, 0x6c, 0x5f, 0x62, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x74, 0x62, 0x61, 0x63,
	0x6b, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x63, 0x61,
	0x6c, 0x6c, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x10, 0x05, 0x12, 0x24, 0x0a, 0x20, 0x77,
	0x69, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f,
	0x70, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x10,
	0x06, 0x12, 0x22, 0x0a, 0x1e, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x73, 0x6b, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x62, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x10, 0x07, 0x22, 0x4c, 0x0a, 0x13, 0x41, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x22, 0x8d, 0x02, 0x0a, 0x0d, 0x41, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x22, 0x7b, 0x0a, 0x09, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x10,
	0x03, 0x12, 0x0a, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x04, 0x12, 0x08, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x07,
	0x12, 0x08, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x10, 0x09, 0x22, 0xd2, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3c, 0x0a,
	0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x0d, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x07, 0x62,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x52, 0x07, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x0a,
	0x69, 0x31, 0x38, 0x6e, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x31, 0x38, 0x6e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x69, 0x31, 0x38, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x37, 0x0a, 0x0d, 0x69, 0x31, 0x38, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x49, 0x31, 0x38, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x69, 0x31, 0x38, 0x6e,
	0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0xb6, 0x07, 0x0a, 0x0a, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x69, 0x6d, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x69, 0x6d, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x69, 0x63, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x65, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x07, 0x62, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x08, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41,
	0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x73,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x43, 0x0a, 0x0f, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x0d, 0x61, 0x73, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x04, 0x66, 0x6f,
	0x72, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x04, 0x66,
	0x6f, 0x72, 0x6d, 0x12, 0x3a, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x12,
	0x37, 0x0a, 0x0d, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73,
	0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x0c, 0x71, 0x75, 0x69, 0x63,
	0x6b, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6c, 0x6f,
	0x63, 0x6b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x62,
	0x61, 0x63, 0x6b, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x08, 0x70, 0x6f, 0x73,
	0x74, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x23, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x33, 0x0a, 0x0b, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x0a,
	0x71, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x20, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c,
	0x65, 0x22, 0xaf, 0x01, 0x0a, 0x0a, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c,
	0x12, 0x31, 0x0a, 0x0a, 0x69, 0x31, 0x38, 0x6e, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x31,
	0x38, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x69, 0x31, 0x38, 0x6e, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x30, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x55, 0x72, 0x6c,
	0x22, 0x83, 0x01, 0x0a, 0x11, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x30,
	0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xa0, 0x02, 0x0a, 0x10, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65,
	0x64, 0x22, 0x46, 0x0a, 0x09, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07,
	0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x10, 0x04, 0x22, 0xf5, 0x01, 0x0a, 0x03, 0x54, 0x61,
	0x67, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x03, 0x63, 0x74, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x64, 0x22, 0x46, 0x0a, 0x0c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0xfa, 0x02, 0x0a, 0x08, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x29, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x69, 0x63, 0x6b,
	0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x50, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x22, 0x9b, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x79, 0x22, 0x8c, 0x01, 0x0a, 0x09, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x2e, 0x0a, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x09, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x22, 0x4a, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x63,
	0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1f,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22,
	0x55, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x74, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0xf6, 0x01, 0x0a, 0x0b, 0x42, 0x6f, 0x74, 0x50, 0x6f,
	0x73, 0x74, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x6f,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6f, 0x74, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x69, 0x31, 0x38, 0x6e, 0x5f, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x49, 0x31, 0x38, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x69,
	0x31, 0x38, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x89, 0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03,
	0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x37, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xf2, 0x05, 0x0a, 0x0b,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x03, 0x63,
	0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x50,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63,
	0x61, 0x6c, 0x6c, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18,
	0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x22, 0x3c, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x03,
	0x22, 0x87, 0x01, 0x0a, 0x0a, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63,
	0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xae, 0x03, 0x0a, 0x0d, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03,
	0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x75, 0x73, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x5f, 0x74, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x54, 0x6f, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4f, 0x6e,
	0x4e, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xc3, 0x01, 0x0a, 0x17,
	0x45, 0x6e, 0x64, 0x63, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x74,
	0x5f, 0x6d, 0x69, 0x64, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x61, 0x74, 0x4d, 0x69, 0x64, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x6d, 0x69, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4d, 0x69, 0x6e, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x22, 0xdd, 0x02, 0x0a, 0x0e, 0x45, 0x6e, 0x64, 0x63, 0x68, 0x61, 0x74, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x64, 0x63,
	0x68, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x64, 0x63, 0x68, 0x61, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x0d, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x18,
	0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x5f, 0x74, 0x6f, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11,
	0x73, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x6f,
	0x73, 0x22, 0xb6, 0x01, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a,
	0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x59, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xfa, 0x05, 0x0a, 0x16, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x54, 0x61, 0x67, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x73, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x73, 0x74,
	0x53, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x12, 0x34, 0x0a, 0x17, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x61, 0x66, 0x74, 0x65, 0x72, 0x4c, 0x61,
	0x73, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x07,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x72, 0x75, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x61,
	0x73, 0x74, 0x52, 0x75, 0x6e, 0x41, 0x74, 0x22, 0xfc, 0x01, 0x0a, 0x07, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x61, 0x72, 0x65, 0x61, 0x5f,
	0x63, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x63, 0x73, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x61, 0x72, 0x65, 0x61,
	0x43, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x43, 0x73, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x31, 0x0a, 0x14, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x13, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x69,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x65, 0x63, 0x12, 0x2c, 0x0a, 0x12,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73,
	0x65, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x61, 0x66, 0x74, 0x65, 0x72, 0x50,
	0x61, 0x67, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x65, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xcf, 0x09, 0x0a, 0x0c, 0x42, 0x6f, 0x74, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65,
	0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x72, 0x6c,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x55, 0x72, 0x6c, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x56, 0x69,
	0x73, 0x69, 0x74, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x2f, 0x0a, 0x14, 0x68, 0x61, 0x73, 0x5f,
	0x6e, 0x6f, 0x74, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x73,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x68, 0x61, 0x73, 0x4e, 0x6f, 0x74, 0x56, 0x69,
	0x73, 0x69, 0x74, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x46, 0x0a, 0x11, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x75, 0x72, 0x12,
	0x20, 0x0a, 0x0c, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18,
	0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x79, 0x73, 0x4f, 0x66, 0x57, 0x65, 0x65,
	0x6b, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x6f, 0x66, 0x5f,
	0x64, 0x61, 0x79, 0x18, 0x16, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x73, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x12, 0x32, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x18,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x2b,
	0x0a, 0x11, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x69, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x56, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x11, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x73, 0x41, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67,
	0x73, 0x12, 0x3a, 0x0a, 0x19, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x1e,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x73, 0x12, 0x28, 0x0a,
	0x10, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x43, 0x0a, 0x1e, 0x68, 0x61, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1b, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x31, 0x0a, 0x06,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x61, 0x64, 0x73,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x63, 0x10, 0x02, 0x22,
	0x31, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x10, 0x02, 0x22, 0x54, 0x0a, 0x07, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x12, 0x07, 0x0a,
	0x03, 0x61, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x66, 0x69, 0x72, 0x65, 0x66, 0x6f, 0x78, 0x10, 0x02, 0x12,
	0x08, 0x0a, 0x04, 0x65, 0x64, 0x67, 0x65, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x69, 0x65, 0x10,
	0x04, 0x12, 0x0a, 0x0a, 0x06, 0x73, 0x61, 0x66, 0x61, 0x72, 0x69, 0x10, 0x05, 0x12, 0x09, 0x0a,
	0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x10, 0x06, 0x22, 0xae, 0x03, 0x0a, 0x0e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x73, 0x12, 0x2e,
	0x0a, 0x13, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x73, 0x12, 0x17,
	0x0a, 0x07, 0x70, 0x6f, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x6f, 0x73, 0x49, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x6f, 0x73, 0x49, 0x64, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12,
	0x2d, 0x0a, 0x12, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x2c,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x35, 0x0a, 0x08,
	0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x68, 0x69, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x12, 0x44, 0x0a, 0x10, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73,
	0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x22, 0x5c, 0x0a, 0x16, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x6d, 0x0a, 0x05, 0x53, 0x69, 0x74, 0x65, 0x73,
	0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03,
	0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x05, 0x73, 0x69, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x69, 0x74, 0x65, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x17, 0x56, 0x69, 0x73, 0x69, 0x74,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x64, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x22, 0xdf, 0x03, 0x0a, 0x04, 0x53, 0x69, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x27, 0x0a,
	0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x55, 0x72, 0x69, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x6f, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x6f, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x36, 0x0a, 0x17, 0x64,
	0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f,
	0x6f, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x64, 0x65,
	0x73, 0x6b, 0x74, 0x6f, 0x70, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x6f, 0x74,
	0x55, 0x72, 0x6c, 0x22, 0xfe, 0x07, 0x0a, 0x03, 0x42, 0x6f, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63,
	0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x6f, 0x62,
	0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f,
	0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x2b, 0x0a, 0x08, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x08, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x73, 0x12, 0x45, 0x0a, 0x14, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x74, 0x6c, 0x79, 0x52, 0x13, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69, 0x76, 0x65, 0x46,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62,
	0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x6c, 0x61, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x62, 0x6f, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x62, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x19, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x37, 0x5f,
	0x64, 0x61, 0x79, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4c, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x4c, 0x61, 0x73, 0x74, 0x37, 0x44, 0x61, 0x79, 0x73,
	0x12, 0x37, 0x0a, 0x19, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x5f, 0x69,
	0x6e, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x37, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x14, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x49, 0x6e,
	0x4c, 0x61, 0x73, 0x74, 0x37, 0x44, 0x61, 0x79, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x69, 0x74,
	0x65, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x73, 0x69, 0x74, 0x65, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x65, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x22, 0x4a, 0x0a, 0x04, 0x42, 0x6f, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x03,
	0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12,
	0x1f, 0x0a, 0x04, 0x62, 0x6f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x74, 0x52, 0x04, 0x62, 0x6f, 0x74, 0x73,
	0x22, 0x3a, 0x0a, 0x0d, 0x4e, 0x65, 0x78, 0x74, 0x42, 0x6f, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x29, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe0, 0x06, 0x0a,
	0x09, 0x42, 0x6f, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x6f, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6f, 0x74, 0x49, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x6e, 0x65, 0x78, 0x74, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x78,
	0x74, 0x42, 0x6f, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x6e, 0x65, 0x78, 0x74,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x6a, 0x75, 0x6d, 0x70, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4a, 0x75, 0x6d, 0x70, 0x52, 0x04, 0x6a, 0x75, 0x6d, 0x70, 0x12, 0x33, 0x0a,
	0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x6e, 0x64, 0x48, 0x74, 0x74, 0x70, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x48, 0x74,
	0x74, 0x70, 0x12, 0x3c, 0x0a, 0x0c, 0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2d, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x63, 0x12, 0x51, 0x0a, 0x13,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x4c, 0x0a, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x10, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x3f, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x39, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x52, 0x0a, 0x14, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x12, 0x73, 0x65, 0x6e,
	0x64, 0x43, 0x68, 0x61, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22,
	0x34, 0x0a, 0x10, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x20, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0xe8, 0x01, 0x0a, 0x12, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x16,
	0x77, 0x61, 0x69, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x77, 0x61,
	0x69, 0x74, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2b, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x3a,
	0x0a, 0x10, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x4f, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x73, 0x0a, 0x18, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68,
	0x61, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x74, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x54, 0x6f, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x18, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x67, 0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x6e, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x6e, 0x74, 0x61, 0x67, 0x49, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x64, 0x5f,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4b, 0x56, 0x52,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x51, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4a, 0x75, 0x6d, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x74, 0x6f, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x16, 0x0a, 0x14, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x22, 0x7f, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64,
	0x48, 0x74, 0x74, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x22,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4b, 0x56, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x69, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x74,
	0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x69, 0x6c, 0x6c, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x22, 0xe3, 0x04, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73,
	0x6b, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x16, 0x77, 0x61, 0x69,
	0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x77, 0x61, 0x69, 0x74, 0x46,
	0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b,
	0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4f,
	0x70, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73,
	0x61, 0x76, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x61, 0x76, 0x65, 0x54, 0x6f, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67,
	0x65, 0x78, 0x12, 0x48, 0x0a, 0x21, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x69, 0x66, 0x5f, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x73,
	0x6b, 0x69, 0x70, 0x49, 0x66, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x41, 0x6c,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x0e,
	0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72,
	0x65, 0x73, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2c, 0x0a,
	0x12, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x75, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x65, 0x74, 0x72, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x75,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x4f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x22, 0x62, 0x0a, 0x10, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x25, 0x0a,
	0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x04,
	0x61, 0x74, 0x74, 0x72, 0x12, 0x27, 0x0a, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x22, 0x55, 0x0a,
	0x16, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x22, 0xcc, 0x01, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12,
	0x2e, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x65, 0x61, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x7a, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x64, 0x61, 0x79, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x64, 0x61, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x61, 0x79, 0x5f,
	0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x64, 0x61, 0x79, 0x54, 0x6f, 0x22,
	0x3d, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0xbd,
	0x01, 0x0a, 0x0c, 0x42, 0x6f, 0x74, 0x72, 0x75, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12,
	0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x62, 0x6f, 0x74, 0x72, 0x75, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6f, 0x74, 0x72, 0x75, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0xc2,
	0x01, 0x0a, 0x14, 0x42, 0x6f, 0x74, 0x72, 0x75, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x7a, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x74, 0x7a, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x74, 0x6f, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x75,
	0x72, 0x54, 0x6f, 0x22, 0x3f, 0x0a, 0x0d, 0x42, 0x6f, 0x74, 0x72, 0x75, 0x6e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x74, 0x72, 0x75, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x07, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72,
	0x75, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x72, 0x75, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x75, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x68, 0x6f, 0x75, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x17,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x75, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x7a, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x74, 0x7a, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x74, 0x6f, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x75,
	0x72, 0x54, 0x6f, 0x22, 0x45, 0x0a, 0x10, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x75, 0x6e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x75, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0xfe, 0x01, 0x0a, 0x12, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x46,
	0x72, 0x6f, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68,
	0x6f, 0x75, 0x72, 0x5f, 0x74, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x54, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x61, 0x79,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x64, 0x61, 0x79,
	0x46, 0x72, 0x6f, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x64, 0x61, 0x79, 0x54, 0x6f, 0x22, 0x58, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x73, 0x22, 0x7d, 0x0a, 0x0a, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x74, 0x6c, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6f, 0x6e, 0x63, 0x65,
	0x50, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x6e, 0x63, 0x65, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x6f, 0x6e, 0x63, 0x65, 0x50, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x65,
	0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x53, 0x65, 0x63, 0x22, 0x8a, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d,
	0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a,
	0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78,
	0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x22, 0x72, 0x0a, 0x0a, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x25, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x22, 0xec, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69,
	0x6d, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x6c, 0x65,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x0e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x0a,
	0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x20, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x2d, 0x0a, 0x13,
	0x69, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x68,
	0x6f, 0x75, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x49, 0x6e, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x75, 0x72, 0x22, 0x97, 0x05, 0x0a, 0x11,
	0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x03, 0x63, 0x74, 0x78, 0x12, 0x2a, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x26, 0x0a, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x52, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x3e, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x04, 0x62, 0x6f, 0x74, 0x73, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x74, 0x52, 0x04, 0x62, 0x6f, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x07, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x69, 0x73, 0x49, 0x6e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x75,
	0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x73, 0x22, 0xd5, 0x02, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x57, 0x65, 0x62, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x52, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x04, 0x62, 0x6f,
	0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x74, 0x52, 0x04, 0x62, 0x6f, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52,
	0x07, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x3e, 0x0a,
	0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73,
	0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0e, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x22, 0x32, 0x0a,
	0x0a, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x22, 0x93, 0x01, 0x0a, 0x0c, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x6c, 0x69,
	0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x6c,
	0x69, 0x6e, 0x6b, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x73, 0x22, 0x24, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x12, 0x08, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x10, 0x01, 0x22, 0xa8, 0x09, 0x0a, 0x0d, 0x57, 0x69, 0x64, 0x67,
	0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x77,
	0x69, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x52, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x69, 0x73, 0x49, 0x6e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x75,
	0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x69, 0x64, 0x67,
	0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x23,
	0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x0c, 0x6f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x69, 0x64, 0x67, 0x65,
	0x74, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x0b, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x12, 0x35, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x0b, 0x70, 0x72,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x3f, 0x0a, 0x0e, 0x64, 0x65, 0x73,
	0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x69, 0x64, 0x67, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x74, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x0d, 0x64, 0x65, 0x73,
	0x6b, 0x74, 0x6f, 0x70, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0d, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x69, 0x64, 0x67, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x74, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x0c, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x08, 0x67, 0x72, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x47, 0x72, 0x65, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x08, 0x67, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x6f, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x07, 0x63, 0x61, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x49, 0x31, 0x38, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x63, 0x61,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x49, 0x31, 0x38, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x74, 0x61, 0x67, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x7a, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x7a, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26, 0x0a, 0x0f,
	0x68, 0x69, 0x64, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x69, 0x7a, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x69, 0x64, 0x65, 0x53, 0x75, 0x62, 0x69, 0x7a,
	0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x68, 0x69, 0x64, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x22, 0x20, 0x0a, 0x0a, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x08,
	0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x69, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x66, 0x75, 0x6c, 0x6c,
	0x10, 0x01, 0x22, 0xbe, 0x03, 0x0a, 0x0b, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12,
	0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x31, 0x0a, 0x0a, 0x69, 0x31, 0x38, 0x6e, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49,
	0x31, 0x38, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x69, 0x31, 0x38, 0x6e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x3d, 0x0a, 0x10, 0x69, 0x31, 0x38, 0x6e, 0x5f, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x31, 0x38, 0x6e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x0f, 0x69, 0x31, 0x38, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x22, 0x31, 0x0a, 0x0b, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x86, 0x05, 0x0a, 0x0a, 0x57, 0x69, 0x64, 0x67, 0x65,
	0x74, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57,
	0x69, 0x64, 0x67, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x1d, 0x65, 0x6e, 0x64, 0x5f, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a,
	0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x66, 0x74, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x77, 0x68, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x68, 0x65, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x3c, 0x0a, 0x10, 0x69, 0x31, 0x38, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x49, 0x31, 0x38, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x69,
	0x31, 0x38, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x31, 0x0a,
	0x0a, 0x69, 0x31, 0x38, 0x6e, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x31, 0x38, 0x6e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x69, 0x31, 0x38, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x42, 0x0a, 0x13, 0x69, 0x31, 0x38, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x31, 0x38, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x11, 0x69, 0x31, 0x38, 0x6e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x22, 0x39, 0x0a, 0x04, 0x57, 0x68, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x12,
	0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x62,
	0x75, 0x73, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x10, 0x01, 0x22,
	0xb2, 0x03, 0x0a, 0x10, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x42, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x78,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x58, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x59, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x62,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x62,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0x25, 0x0a,
	0x0e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x08, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x10, 0x01, 0x22, 0x8f, 0x01, 0x0a, 0x0e, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x47,
	0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x08, 0x67, 0x72, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x49, 0x31, 0x38, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x67, 0x72,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x86, 0x02, 0x0a, 0x14, 0x43, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x2e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x22,
	0x7b, 0x0a, 0x0a, 0x57, 0x65, 0x62, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x21, 0x0a,
	0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x2b, 0x0a, 0x07, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x52, 0x07, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x22, 0xea, 0x09, 0x0a,
	0x09, 0x57, 0x65, 0x62, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x49,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x08, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x18, 0x13,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x08, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x12,
	0x45, 0x0a, 0x14, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x6c,
	0x79, 0x52, 0x13, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69, 0x76, 0x65, 0x46, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x6f, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x6f, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x61, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65,
	0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x73,
	0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x78, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x69, 0x64, 0x67, 0x65,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f,
	0x78, 0x12, 0x23, 0x0a, 0x05, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x52,
	0x05, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x12, 0x32, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x31, 0x0a, 0x0c, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x52,
	0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a,
	0x17, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x32, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x12, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x33, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x31, 0x0a, 0x14, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69,
	0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x55, 0x72, 0x6c, 0x22, 0xb3, 0x01, 0x0a, 0x0d, 0x54, 0x65,
	0x78, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x74, 0x6d, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x74, 0x6d, 0x6c, 0x12,
	0x2f, 0x0a, 0x09, 0x69, 0x31, 0x38, 0x6e, 0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x31, 0x38, 0x6e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x69, 0x31, 0x38, 0x6e, 0x48, 0x74, 0x6d, 0x6c,
	0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x69, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x69, 0x6c, 0x6c, 0x44, 0x65, 0x6c, 0x74,
	0x61, 0x12, 0x3c, 0x0a, 0x10, 0x69, 0x31, 0x38, 0x6e, 0x5f, 0x71, 0x75, 0x69, 0x6c, 0x6c, 0x5f,
	0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x31, 0x38, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x0e, 0x69, 0x31, 0x38, 0x6e, 0x51, 0x75, 0x69, 0x6c, 0x6c, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x22,
	0x0f, 0x0a, 0x0d, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x22, 0x22, 0x0a, 0x0e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x22, 0x64, 0x0a, 0x0d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x30, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x9e, 0x02, 0x0a, 0x0c, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x63,
	0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xbe, 0x06, 0x0a, 0x05,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x30, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x5f, 0x71, 0x75, 0x69, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x51, 0x75, 0x69, 0x6c, 0x6c, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x12, 0x47, 0x0a, 0x16, 0x69, 0x31, 0x38, 0x6e, 0x5f, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x5f, 0x71, 0x75, 0x69, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x31,
	0x38, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x13, 0x69, 0x31, 0x38, 0x6e, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x51, 0x75, 0x69, 0x6c, 0x6c, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x2e, 0x0a,
	0x0b, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x52, 0x0a, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x30, 0x0a,
	0x14, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x71, 0x75, 0x69, 0x6c, 0x6c, 0x5f, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x51, 0x75, 0x69, 0x6c, 0x6c, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x12,
	0x4d, 0x0a, 0x19, 0x69, 0x31, 0x38, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x71, 0x75, 0x69, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x18, 0x17, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x31, 0x38, 0x6e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x16, 0x69, 0x31, 0x38, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x51, 0x75, 0x69, 0x6c, 0x6c, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x12, 0x32,
	0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x61, 0x62, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x54, 0x61, 0x62, 0x12, 0x25, 0x0a,
	0x0e, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x55, 0x72, 0x6c, 0x12, 0x38, 0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x0f, 0x62,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x32,
	0x0a, 0x0d, 0x73, 0x75, 0x62, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x74, 0x65, 0x78, 0x74, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x12, 0x30, 0x0a, 0x0c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x22, 0xf5, 0x03, 0x0a,
	0x10, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x40, 0x0a, 0x07, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x07, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x73, 0x1a, 0xc0, 0x02, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x42, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x30, 0x0a, 0x04, 0x7a, 0x61, 0x6c, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x5a, 0x61, 0x6c, 0x6f, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x7a,
	0x61, 0x6c, 0x6f, 0x12, 0x3c, 0x0a, 0x08, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x46,
	0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x12, 0x30, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x63,
	0x61, 0x6c, 0x6c, 0x12, 0x30, 0x0a, 0x04, 0x63, 0x68, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52,
	0x04, 0x63, 0x68, 0x61, 0x74, 0x12, 0x2d, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x70, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52,
	0x03, 0x6d, 0x61, 0x70, 0x22, 0x6c, 0x0a, 0x18, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b,
	0x55, 0x72, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x22, 0x4a, 0x0a, 0x14, 0x5a, 0x61, 0x6c, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x7a, 0x61,
	0x6c, 0x6f, 0x5f, 0x6f, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x7a, 0x61, 0x6c, 0x6f, 0x4f, 0x61, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0xaa,
	0x02, 0x0a, 0x14, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x08, 0x68, 0x6f, 0x74, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x6f, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x08, 0x68, 0x6f, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63,
	0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x74, 0x68, 0x61, 0x6e, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x68, 0x61, 0x6e, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x1a, 0x52, 0x0a, 0x07, 0x48, 0x6f, 0x74, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x16, 0x0a, 0x14, 0x43,
	0x68, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x22, 0xec, 0x01, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x42, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4d, 0x61,
	0x70, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x7b, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x22, 0xc3, 0x02, 0x0a, 0x12, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x69, 0x78, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x76, 0x69, 0x73, 0x69, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x5f, 0x64, 0x61, 0x69, 0x6c,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x5f, 0x77,
	0x65, 0x65, 0x6b, 0x6c, 0x79, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x4d, 0x69, 0x6e,
	0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x6c,
	0x79, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x57, 0x65, 0x65,
	0x6b, 0x64, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x22, 0xd8, 0x04, 0x0a, 0x12, 0x57, 0x65, 0x62,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x71, 0x75, 0x69, 0x6c, 0x6c,
	0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x51, 0x75, 0x69, 0x6c, 0x6c, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x31, 0x0a, 0x0a, 0x69, 0x31, 0x38, 0x6e, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x49, 0x31, 0x38, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x69, 0x31, 0x38,
	0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x69, 0x7a, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x2e,
	0x57, 0x65, 0x62, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x10, 0x69, 0x31, 0x38, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x31, 0x38, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x0f, 0x69, 0x31, 0x38, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x79, 0x0a, 0x18, 0x57, 0x65, 0x62, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x31, 0x0a, 0x0a, 0x69, 0x31,
	0x38, 0x6e, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x31, 0x38, 0x6e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x09, 0x69, 0x31, 0x38, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x43, 0x0a, 0x0d, 0x57, 0x65, 0x62, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x46, 0x6f, 0x72, 0x6d, 0x12, 0x32, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x65,
	0x62, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xc2, 0x03, 0x0a, 0x10, 0x42, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x42, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x65, 0x78, 0x74, 0x12, 0x3e, 0x0a,
	0x11, 0x69, 0x31, 0x38, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x49, 0x31, 0x38, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x69, 0x31,
	0x38, 0x6e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2b, 0x0a,
	0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x11, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50,
	0x6f, 0x70, 0x75, 0x70, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x54, 0x65, 0x78, 0x74, 0x12, 0x42, 0x0a, 0x13, 0x69, 0x31, 0x38,
	0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x49, 0x31, 0x38, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x69, 0x31, 0x38, 0x6e,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x54, 0x65, 0x78, 0x74, 0x22, 0xd8, 0x04,
	0x0a, 0x12, 0x57, 0x65, 0x62, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x30, 0x0a,
	0x0c, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x52, 0x0b, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12,
	0x29, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x62, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x12, 0x38,
	0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x64, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x29, 0x0a, 0x04, 0x66, 0x6f, 0x72, 0x6d,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x57, 0x65, 0x62, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x04, 0x66,
	0x6f, 0x72, 0x6d, 0x12, 0x29, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x2c,
	0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x04,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x6c, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x42,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52,
	0x0d, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x12, 0x48,
	0x0a, 0x0f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x22, 0x2b, 0x0a, 0x17, 0x46, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x62, 0x0a, 0x16, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x42,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x7a,
	0x61, 0x6c, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x61, 0x6c, 0x6f, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x22, 0xef, 0x02, 0x0a, 0x05, 0x50, 0x6f,
	0x70, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f,
	0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x68,
	0x6f, 0x77, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x78,
	0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x66,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x6e,
	0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6e, 0x74, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x6e, 0x74,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x70, 0x61, 0x63, 0x65, 0x72, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70, 0x61, 0x63, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x68, 0x65,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x70, 0x75, 0x70,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x22, 0x56, 0x0a, 0x0d, 0x4c,
	0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x71, 0x75, 0x69, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x71, 0x75, 0x69, 0x6c, 0x6c, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x22, 0xb4, 0x0d, 0x0a, 0x05, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x23, 0x0a,
	0x05, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x05, 0x68, 0x6f, 0x76,
	0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x64,
	0x69, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x6e, 0x74, 0x5f,
	0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f,
	0x6e, 0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1e,
	0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x78, 0x74, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x12, 0x25, 0x0a,
	0x0e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x6f, 0x6e, 0x74, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x6e, 0x74, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61,
	0x78, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x61, 0x78, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x66,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x6f, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x64,
	0x64, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x64, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4c, 0x65, 0x66, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x70,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x54, 0x6f,
	0x70, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x62, 0x6f, 0x74, 0x74,
	0x6f, 0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x66, 0x69, 0x74,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x74, 0x6f, 0x70, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x6f, 0x70, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6c, 0x75,
	0x72, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6c, 0x75, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x67, 0x72, 0x61, 0x79, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x67, 0x72, 0x61, 0x79, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f,
	0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x76,
	0x65, 0x72, 0x6c, 0x61, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79,
	0x5f, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x6c, 0x65, 0x78, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x6c,
	0x65, 0x78, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x6c, 0x65, 0x78, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x6c, 0x65, 0x78,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6c, 0x65,
	0x78, 0x5f, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x66, 0x6c, 0x65, 0x78, 0x53, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6c,
	0x69, 0x67, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6a,
	0x75, 0x73, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x2c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x7a, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x7a, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x12, 0x1f, 0x0a,
	0x0b, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x3e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x70, 0x18, 0x3f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x12, 0x21, 0x0a,
	0x0c, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x40, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x78, 0x5f,
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0x42, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6f,
	0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x18, 0x43, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x78, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x58, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x79,
	0x18, 0x45, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x59, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x68, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x68, 0x69, 0x74, 0x65, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x18, 0x47, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x48, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x9f, 0x02, 0x0a, 0x09, 0x50,
	0x6f, 0x70, 0x75, 0x70, 0x50, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x0c, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x0b,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x42, 0x0a, 0x10, 0x62,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x0f,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x22, 0xf9, 0x02, 0x0a,
	0x0a, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x03, 0x63,
	0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x26, 0x0a, 0x06, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x79, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x62, 0x79, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x65,
	0x62, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xfe, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74,
	0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x6f, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74,
	0x6f, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x65,
	0x62, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x7e, 0x0a, 0x0b, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x34, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x22, 0x80, 0x04, 0x0a, 0x0a, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x26, 0x0a, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x79, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x65, 0x65, 0x6b,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x77, 0x65, 0x65, 0x6b, 0x12, 0x29, 0x0a, 0x10,
	0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x65, 0x62, 0x5f, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x77, 0x65, 0x62, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x8e, 0x02, 0x0a,
	0x12, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x65, 0x62, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x26, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x10, 0x0a, 0x0c, 0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x22, 0xbd, 0x01,
	0x0a, 0x12, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x56, 0x0a,
	0x11, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x17, 0x0a, 0x07,
	0x6e, 0x65, 0x77, 0x5f, 0x74, 0x61, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6e,
	0x65, 0x77, 0x54, 0x61, 0x62, 0x22, 0xe3, 0x02, 0x0a, 0x0f, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x6f,
	0x70, 0x75, 0x70, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x6e, 0x74, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x6f, 0x6e, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x6e, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x0f,
	0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x22,
	0x91, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x75,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x22, 0xf2, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x6f, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x74, 0x6f, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x74, 0x7a, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x74, 0x7a, 0x22, 0x1a, 0x0a, 0x05,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x10, 0x01, 0x22, 0x95, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x10, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x10,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x72, 0x0a, 0x0f, 0x57, 0x65, 0x62, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0xf6, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x57,
	0x65, 0x62, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63,
	0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x65, 0x62, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x68, 0x6f,
	0x75, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x48, 0x6f,
	0x75, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x6f, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x7a, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x74,
	0x7a, 0x22, 0x1a, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x68, 0x6f,
	0x75, 0x72, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x10, 0x01, 0x22, 0x85, 0x01,
	0x0a, 0x17, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x65, 0x62, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x07, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0xf4, 0x01, 0x0a, 0x1a, 0x57, 0x65, 0x62, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77,
	0x65, 0x62, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x75, 0x6e,
	0x69, 0x78, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x75, 0x6e, 0x69, 0x78, 0x44, 0x61, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1e,
	0x0a, 0x0b, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x78, 0x44, 0x61, 0x79, 0x54, 0x6f, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x3f, 0x0a, 0x13,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x22, 0x67, 0x0a,
	0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x92, 0x01, 0x0a, 0x0e, 0x47, 0x72, 0x65, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0f, 0x67,
	0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x47, 0x72,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x0e, 0x67, 0x72, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x73, 0x22, 0xf8, 0x01, 0x0a, 0x0d,
	0x47, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x21, 0x0a,
	0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x20, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x87, 0x02, 0x0a, 0x0d, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d,
	0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x55, 0x72,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x55, 0x72, 0x6c,
	0x22, 0x62, 0x0a, 0x0e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x2d, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x06, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x22, 0x56, 0x0a, 0x07, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63,
	0x74, 0x78, 0x12, 0x28, 0x0a, 0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xe5, 0x06, 0x0a,
	0x06, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x55, 0x72, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x55, 0x72, 0x69, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x69, 0x6e, 0x67, 0x55, 0x72, 0x69, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x6e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x75, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x55,
	0x72, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x62, 0x6f,
	0x74, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x62, 0x6f, 0x74, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x4a, 0x6f, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x30, 0x0a,
	0x14, 0x62, 0x6f, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x75, 0x6c,
	0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x62, 0x6f, 0x74,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x62, 0x6f, 0x74, 0x49,
	0x73, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x22, 0x27, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x62,
	0x6f, 0x74, 0x10, 0x03, 0x22, 0x5a, 0x0a, 0x08, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73,
	0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03,
	0x63, 0x74, 0x78, 0x12, 0x2b, 0x0a, 0x08, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x08, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73,
	0x22, 0x5b, 0x0a, 0x0d, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0xac, 0x06,
	0x0a, 0x07, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x52, 0x09, 0x6f, 0x6c, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x69, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x43, 0x0a, 0x1f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x69,
	0x6e, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x37, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x1a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x4c, 0x61, 0x73, 0x74, 0x37, 0x44, 0x61, 0x79, 0x73, 0x12,
	0x50, 0x0a, 0x26, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x37, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x4c, 0x61, 0x73, 0x74, 0x37, 0x44, 0x61, 0x79,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x61, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61,
	0x73, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x74, 0x12, 0x37, 0x0a, 0x18,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x61, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15,
	0x6c, 0x61, 0x73, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x41, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x5f, 0x61, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x65,
	0x78, 0x74, 0x52, 0x65, 0x74, 0x72, 0x79, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x69,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x30, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x00, 0x12,
	0x11, 0x0a, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x5f, 0x73, 0x6c, 0x65, 0x65, 0x70,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x64, 0x65, 0x61, 0x64, 0x10, 0x02, 0x22, 0x6f, 0x0a, 0x11,
	0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x03, 0x63, 0x74, 0x78, 0x12, 0x37, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0xab, 0x04,
	0x0a, 0x0f, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x35, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4b, 0x56, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x35, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4b, 0x56, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x41, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x65,
	0x72, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x65, 0x72, 0x72, 0x73, 0x12,
	0x2e, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x12,
	0x2a, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79,
	0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x4c, 0x65, 0x6e, 0x22, 0x74, 0x0a, 0x1a, 0x52,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a,
	0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0x63, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xe7, 0x01, 0x0a, 0x0e, 0x57, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x68,
	0x75, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x68, 0x75, 0x62,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x22, 0xe3, 0x01, 0x0a, 0x11, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xe3, 0x02, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03,
	0x63, 0x74, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x02, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x63, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x02, 0x63, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x63, 0x63, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x03, 0x62, 0x63, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x1a, 0x39, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x53, 0x0a, 0x0f,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x22, 0xe3, 0x02, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03,
	0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x64, 0x35,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69,
	0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x66, 0x75, 0x6c, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69,
	0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x0d, 0x50, 0x72, 0x65, 0x73,
	0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x22, 0x5f, 0x0a, 0x0b,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63,
	0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xe5, 0x04,
	0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2f,
	0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x77, 0x61, 0x76, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x57, 0x61, 0x76, 0x65,
	0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c,
	0x55, 0x72, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c,
	0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x68,
	0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x27, 0x0a, 0x0f,
	0x74, 0x68, 0x75, 0x6d, 0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x68, 0x75, 0x6d, 0x6e, 0x61, 0x69, 0x6c, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x96, 0x02, 0x0a, 0x0d, 0x42, 0x6f, 0x74, 0x54, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x6f, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6f, 0x74, 0x49, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x55, 0x0a, 0x0e, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x03, 0x12, 0x09, 0x0a,
	0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x73, 0x65, 0x6c, 0x66, 0x10, 0x06, 0x22, 0x89,
	0x01, 0x0a, 0x0b, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x50, 0x12, 0x21,
	0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74,
	0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x62, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x62, 0x79, 0x22, 0x91, 0x01, 0x0a, 0x0a, 0x42,
	0x61, 0x6e, 0x6e, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x62, 0x79, 0x22, 0x64,
	0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63,
	0x74, 0x78, 0x12, 0x30, 0x0a, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0xfa, 0x04, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x26, 0x0a,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x73,
	0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x12, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x74, 0x6c,
	0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x74, 0x6c, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x22, 0x95, 0x02, 0x0a, 0x0f, 0x53, 0x63, 0x72, 0x79, 0x70, 0x74, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x4e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x01, 0x4e, 0x12, 0x0c, 0x0a, 0x01, 0x50, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x01, 0x50, 0x12, 0x0c, 0x0a, 0x01, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6b, 0x6c, 0x65, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x64, 0x6b, 0x6c, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0xfe, 0x02, 0x0a, 0x0d, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63,
	0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6f, 0x6e, 0x6c, 0x79, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x15, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x0c, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x63, 0x0a, 0x09, 0x46,
	0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x69, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x69, 0x6c, 0x6c, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c,
	0x22, 0xd8, 0x02, 0x0a, 0x10, 0x46, 0x62, 0x46, 0x61, 0x6e, 0x70, 0x61, 0x67, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x61, 0x6e, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x61, 0x6e,
	0x70, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x17, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x46, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x15, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x5b, 0x0a, 0x1d, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x1a, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0x6c, 0x0a, 0x11, 0x46,
	0x62, 0x46, 0x61, 0x6e, 0x70, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03,
	0x63, 0x74, 0x78, 0x12, 0x34, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x46,
	0x62, 0x46, 0x61, 0x6e, 0x70, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xd8, 0x06, 0x0a, 0x10, 0x46, 0x62,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x6f,
	0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x75, 0x74,
	0x6f, 0x4c, 0x69, 0x6b, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x68, 0x69,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x75, 0x74, 0x6f, 0x48, 0x69,
	0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x2d, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x62, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x12,
	0x29, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x72, 0x0a, 0x38, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x5f,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6f, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x30, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x7a,
	0x0a, 0x33, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x5f, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6f, 0x72, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x2c, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x4f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x57, 0x0a, 0x29, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x5f,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x24, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x5f, 0x0a, 0x24, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x66,
	0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x4b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68,
	0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x68,
	0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x73, 0x22, 0x5b, 0x0a, 0x0b, 0x48, 0x69, 0x64, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x6f, 0x6e, 0x74, 0x5f, 0x68,
	0x69, 0x64, 0x65, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x10, 0x02, 0x22, 0x5e, 0x0a, 0x0d, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b,
	0x50, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x2a, 0x0a, 0x05, 0x70, 0x6f, 0x73, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x05, 0x70,
	0x6f, 0x73, 0x74, 0x73, 0x22, 0x34, 0x0a, 0x20, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b,
	0x50, 0x6f, 0x73, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x72, 0x63, 0x22, 0x75, 0x0a, 0x1b, 0x46, 0x61,
	0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x3e, 0x0a, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x22, 0xb1, 0x01, 0x0a, 0x16, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x50, 0x6f,
	0x73, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x05,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x50, 0x6f, 0x73,
	0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x4d, 0x0a, 0x17, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x6d, 0x6e, 0x74, 0x73,
	0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b,
	0x50, 0x6f, 0x73, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x22, 0x0a, 0x10, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b,
	0x50, 0x6f, 0x73, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x6b, 0x0a, 0x0f, 0x46, 0x62, 0x46, 0x61,
	0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x50, 0x6f, 0x73, 0x74, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x46,
	0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x22, 0x44, 0x0a, 0x14, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x22, 0x48, 0x0a, 0x0e, 0x46,
	0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a,
	0x07, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x07, 0x63, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x73, 0x22, 0xa9, 0x02, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x67,
	0x72, 0x61, 0x6d, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x65, 0x72,
	0x6d, 0x61, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x65,
	0x72, 0x6d, 0x61, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0xe6, 0x03, 0x0a, 0x0c, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x50, 0x6f,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x50, 0x6f, 0x73,
	0x74, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x68,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x48,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x65, 0x72, 0x6d,
	0x61, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x6e, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x75, 0x6c, 0x6c, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x41, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x50, 0x6f,
	0x73, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x6d, 0x6e, 0x74, 0x73, 0x52, 0x0b, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xd8, 0x01, 0x0a, 0x15, 0x55,
	0x73, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xf5, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x4d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x8d, 0x05,
	0x0a, 0x07, 0x57, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x22,
	0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x61, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x24, 0x0a, 0x07, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x4b, 0x56, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x75, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x57, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x66, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66,
	0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x22, 0x26, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x06,
	0x0a, 0x02, 0x75, 0x70, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x64, 0x6f, 0x77, 0x6e, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x22, 0x5a, 0x0a,
	0x08, 0x57, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x2b, 0x0a, 0x08,
	0x77, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x52,
	0x08, 0x77, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x73, 0x22, 0x98, 0x05, 0x0a, 0x0c, 0x57, 0x65,
	0x62, 0x70, 0x61, 0x67, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x77, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x77, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x33, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4b, 0x56, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x35, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4b, 0x56, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x65, 0x67, 0x69,
	0x6e, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x65, 0x67, 0x69,
	0x6e, 0x41, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x72,
	0x72, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x65, 0x72, 0x72, 0x73, 0x12, 0x2e,
	0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x12, 0x2a,
	0x0a, 0x11, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f,
	0x6c, 0x65, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x4c, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x75,
	0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6d, 0x75, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f,
	0x69, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x64, 0x49, 0x70, 0x22, 0x73, 0x0a, 0x19, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x57, 0x65,
	0x62, 0x70, 0x61, 0x67, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x65, 0x62, 0x70, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x60, 0x0a, 0x0d, 0x57, 0x65, 0x62,
	0x70, 0x61, 0x67, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x2c, 0x0a,
	0x06, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x06, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x22, 0x67, 0x0a, 0x13, 0x57,
	0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x65, 0x62, 0x70, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x4e, 0x0a, 0x14, 0x57, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x12, 0x36, 0x0a, 0x06,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x22, 0xcf, 0x01, 0x0a, 0x14, 0x57, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x77, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x64, 0x61, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x61, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x79, 0x12,
	0x15, 0x0a, 0x06, 0x74, 0x6f, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x44, 0x61, 0x79, 0x22, 0xa5, 0x01, 0x0a, 0x16, 0x57, 0x65, 0x62, 0x70, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x64, 0x61, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x2c, 0x0a,
	0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x44, 0x6f, 0x77, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x6e,
	0x75, 0x6d, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x44, 0x6f, 0x77, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x1a,
	0x0a, 0x04, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x22, 0xca, 0x02, 0x0a, 0x0b, 0x4c,
	0x61, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x66, 0x72, 0x6f, 0x6d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0xb6, 0x01, 0x0a, 0x04, 0x4c, 0x61, 0x6e, 0x67,
	0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03,
	0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x22, 0xb0, 0x01, 0x0a, 0x06, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x63,
	0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xc1, 0x01, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x6f,
	0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x64, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x63, 0x0a,
	0x16, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12,
	0x31, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x6f,
	0x67, 0x73, 0x22, 0x7f, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x22, 0x0a, 0x03, 0x69, 0x6d, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x03, 0x69, 0x6d, 0x67, 0x12, 0x24, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x75, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x73,
	0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03,
	0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56,
	0x69, 0x65, 0x77, 0x52, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x22, 0xc0, 0x03, 0x0a, 0x08, 0x55,
	0x73, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0x98, 0x03,
	0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x2e, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2b,
	0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x2b, 0x0a, 0x03, 0x6f,
	0x6e, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x03, 0x6f, 0x6e, 0x65, 0x22, 0x71, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf3, 0x01, 0x0a, 0x19,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x66, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x25, 0x0a, 0x05, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x64, 0x61, 0x79, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x10,
	0x02, 0x22, 0x9c, 0x02, 0x0a, 0x16, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03,
	0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x68, 0x69,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x48, 0x69,
	0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0xab, 0x03, 0x0a, 0x08, 0x50, 0x75, 0x73, 0x68, 0x4e, 0x6f, 0x74, 0x69, 0x12, 0x21, 0x0a,
	0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c,
	0x12, 0x2b, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x61,
	0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x56, 0x69, 0x65, 0x77, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x12, 0x1c, 0x0a, 0x03, 0x74, 0x6f, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x79, 0x52, 0x03, 0x74, 0x6f, 0x73, 0x22, 0xbf,
	0x04, 0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x6e, 0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x66, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x46, 0x6f, 0x6e, 0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x28, 0x0a, 0x10,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x6f,
	0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x6f, 0x6e, 0x74,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x5f, 0x61,
	0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4d, 0x0a, 0x19, 0x69, 0x31, 0x38, 0x6e, 0x5f,
	0x74, 0x65, 0x72, 0x6d, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x49, 0x31, 0x38, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x16,
	0x69, 0x31, 0x38, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x35, 0x0a, 0x0c, 0x69, 0x31, 0x38, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x49, 0x31, 0x38, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x69, 0x31, 0x38, 0x6e,
	0x54, 0x61, 0x67, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x39, 0x0a, 0x0e, 0x69, 0x31, 0x38, 0x6e, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x31, 0x38, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x0d, 0x69, 0x31, 0x38, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x22, 0xbe, 0x05, 0x0a, 0x0b, 0x53, 0x68, 0x6f, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03,
	0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x3b, 0x0a, 0x10, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0f,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x2d, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x74, 0x61, 0x78, 0x65, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x54, 0x61, 0x78, 0x52, 0x05, 0x74, 0x61, 0x78, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x42, 0x0a, 0x10, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x22,
	0x0a, 0x0d, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x72, 0x6d, 0x12, 0x35, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x70, 0x65, 0x65, 0x5f, 0x73, 0x68, 0x6f,
	0x70, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x65, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x52, 0x0b, 0x73, 0x68,
	0x6f, 0x70, 0x65, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x68, 0x69,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x43, 0x0a, 0x11, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x10, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x12, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x13,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x11,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x73, 0x22, 0x7c, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x21,
	0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74,
	0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x2d, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22,
	0xd6, 0x02, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x21, 0x0a, 0x03,
	0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1b,
	0x0a, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x2c, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x6f, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0xb1, 0x01, 0x0a, 0x12, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03,
	0x63, 0x74, 0x78, 0x12, 0x4a, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xb8, 0x02,
	0x0a, 0x11, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x69,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0xad, 0x01, 0x0a, 0x09, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x65, 0x65, 0x64, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x70, 0x76, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x70, 0x76, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x74, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xab, 0x04, 0x0a, 0x10, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x21, 0x0a,
	0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x30, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x4b, 0x56, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x6c, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x73, 0x6f, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x66, 0x70, 0x76, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x70, 0x76, 0x53, 0x6f, 0x6c, 0x64,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x22, 0xea, 0x03, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x70, 0x76, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x70, 0x76, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x27, 0x0a,
	0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x70, 0x76, 0x5f, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x66, 0x70, 0x76, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x12, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x73, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x03, 0x74, 0x61, 0x78, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x78, 0x52, 0x03, 0x74, 0x61, 0x78, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x78, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x78, 0x12,
	0x22, 0x0a, 0x0d, 0x66, 0x70, 0x76, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x78,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x70, 0x76, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x54, 0x61, 0x78, 0x22, 0xe0, 0x01, 0x0a, 0x0a, 0x47, 0x48, 0x4e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x57, 0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x57, 0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x57, 0x61,
	0x72, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x57, 0x61,
	0x72, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xf1, 0x09, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x77, 0x61, 0x72, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x77, 0x61, 0x72,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x75, 0x6c, 0x6c, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6e, 0x67,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6c, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6c,
	0x61, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x03, 0x67,
	0x68, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x47, 0x48, 0x4e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x03, 0x67, 0x68,
	0x6e, 0x12, 0x23, 0x0a, 0x04, 0x67, 0x68, 0x74, 0x6b, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x04, 0x67, 0x68, 0x74, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x57, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x69, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x66, 0x53, 0x61, 0x6c, 0x65, 0x12, 0x34,
	0x0a, 0x16, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x66, 0x72, 0x6f, 0x6d, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x15, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x68, 0x69,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x2d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x30,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xce, 0x09, 0x0a, 0x08, 0x47,
	0x48, 0x4e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x18, 0x26, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x09, 0x70, 0x69, 0x63, 0x6b, 0x53, 0x68, 0x69, 0x66, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x5f, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x57, 0x61, 0x72, 0x64, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x69, 0x63,
	0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x70, 0x69, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x24, 0x0a, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61,
	0x72, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x47, 0x48, 0x4e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f,
	0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x6f, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x73,
	0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x57, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x34, 0x0a,
	0x16, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x98, 0x02, 0x0a, 0x09,
	0x47, 0x48, 0x4e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x32, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x68, 0x6f, 0x70,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x44,
	0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x46, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x46, 0x65, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x53, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x68, 0x69, 0x70, 0x70, 0x65,
	0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x0c, 0x47, 0x48, 0x4e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22,
	0xac, 0x0e, 0x0a, 0x09, 0x47, 0x48, 0x54, 0x4b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x37, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x3b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x61, 0x72, 0x65, 0x61, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61,
	0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x66,
	0x65, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x69, 0x63, 0x6b,
	0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x69,
	0x63, 0x6b, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x72,
	0x65, 0x65, 0x73, 0x68, 0x69, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x73,
	0x46, 0x72, 0x65, 0x65, 0x73, 0x68, 0x69, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x75,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x73,
	0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x69,
	0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x65, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x68, 0x69, 0x70, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x73, 0x68, 0x69, 0x70, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x50,
	0x61, 0x72, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x69, 0x63, 0x6b,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x69, 0x63, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x69, 0x63, 0x6b, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x50, 0x69, 0x63, 0x6b, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x68, 0x69, 0x66, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x69,
	0x63, 0x6b, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x69, 0x63, 0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x68, 0x69,
	0x66, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61,
	0x79, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x44, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x69,
	0x63, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x69, 0x63, 0x6b,
	0x5f, 0x74, 0x65, 0x6c, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x69, 0x63, 0x6b,
	0x54, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x69, 0x63, 0x6b, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x69, 0x63, 0x6b, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x69,
	0x63, 0x6b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x69,
	0x63, 0x6b, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x69, 0x63, 0x6b, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x77, 0x61, 0x72, 0x64, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x69, 0x63, 0x6b, 0x57, 0x61, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x69, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x18, 0x38, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x69, 0x63, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x69, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b,
	0x0a, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x46, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x65, 0x6c, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x65, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x74, 0x65, 0x6c, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x54, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x2f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x61, 0x72, 0x64,
	0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x77, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x72, 0x65, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x6d, 0x6c, 0x65, 0x74, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x61, 0x6d, 0x6c, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x36, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x9e,
	0x0a, 0x0a, 0x0c, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x29, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x0e, 0x70, 0x69,
	0x63, 0x6b, 0x75, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x0d, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x69, 0x63, 0x6b,
	0x75, 0x70, 0x44, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x70, 0x76, 0x5f,
	0x66, 0x65, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x70, 0x76, 0x46, 0x65,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x65, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x46,
	0x65, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x70, 0x76, 0x5f, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x66, 0x70, 0x76,
	0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x1d,
	0x0a, 0x03, 0x74, 0x61, 0x78, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x78, 0x52, 0x03, 0x74, 0x61, 0x78, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x78, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x78, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x70,
	0x76, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x78, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x66, 0x70, 0x76, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x78, 0x12, 0x16,
	0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x14,
	0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x28, 0x0a, 0x10,
	0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x53, 0x68, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x65, 0x65,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x46, 0x65, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x70, 0x76, 0x5f, 0x69, 0x6e, 0x73, 0x75,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x66, 0x70, 0x76, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x65, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x70, 0x69, 0x63, 0x6b,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x70, 0x76, 0x5f, 0x70, 0x69,
	0x63, 0x6b, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x66, 0x70, 0x76, 0x50, 0x69, 0x63, 0x6b, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x18, 0x30,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x63, 0x72, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x31, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x61,
	0x79, 0x65, 0x72, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x65, 0x65, 0x50, 0x61,
	0x79, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x20, 0x6e, 0x6f, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x6f, 0x6e, 0x5f, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x6e,
	0x6f, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x4f,
	0x6e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x69,
	0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x69, 0x6c,
	0x6c, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x69, 0x63,
	0x6b, 0x75, 0x70, 0x5f, 0x61, 0x74, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x18, 0x38, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x41, 0x74, 0x53, 0x68, 0x6f, 0x70, 0x22,
	0x67, 0x0a, 0x0c, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x2c, 0x0a, 0x04, 0x67, 0x68, 0x74, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x47, 0x48, 0x54, 0x4b, 0x53, 0x68, 0x69, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x67, 0x68, 0x74, 0x6b, 0x12, 0x29, 0x0a,
	0x03, 0x67, 0x68, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x47, 0x48, 0x4e, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x03, 0x67, 0x68, 0x6e, 0x22, 0xc7, 0x01, 0x0a, 0x0f, 0x47, 0x48, 0x4e,
	0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x4e, 0x6f, 0x74,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x75,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x22, 0xb2, 0x02, 0x0a, 0x10, 0x47, 0x48, 0x54, 0x4b, 0x53, 0x68, 0x69, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b,
	0x53, 0x68, 0x69, 0x66, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x70, 0x69, 0x63, 0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x68, 0x69, 0x66, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x69, 0x63, 0x6b,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x69, 0x63, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x69, 0x63, 0x6b, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x10, 0x53, 0x68, 0x69, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x03,
	0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x43,
	0x0a, 0x11, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x10, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x22, 0xbd, 0x06, 0x0a, 0x0e, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x73, 0x12, 0x2f, 0x0a,
	0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e,
	0x0a, 0x13, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x67, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x47, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x6c, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x4c, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75,
	0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x74, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x4c, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x66, 0x70, 0x76, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x66, 0x70, 0x76, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x74, 0x12,
	0x24, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x67,
	0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x47, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x66, 0x70, 0x76, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x66, 0x70, 0x76, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x47, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x70, 0x76, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x70, 0x76,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x22, 0xca, 0x05, 0x0a, 0x12, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6f, 0x64, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6f, 0x64, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x68, 0x69, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x68, 0x6f, 0x70,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x61, 0x70, 0x69, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x61, 0x70, 0x69, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x67, 0x68, 0x6e, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x67, 0x68, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b,
	0x67, 0x68, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x67, 0x68, 0x6e, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x67, 0x68, 0x6e, 0x5f, 0x6f, 0x74, 0x70, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67,
	0x68, 0x6e, 0x4f, 0x74, 0x70, 0x12, 0x29, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x22, 0xb5, 0x01, 0x0a, 0x13, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x53,
	0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x4d, 0x0a, 0x14, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x53, 0x68, 0x69,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68,
	0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xb6, 0x04, 0x0a, 0x0d, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x1f, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10,
	0x01, 0x22, 0x92, 0x01, 0x0a, 0x0e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x22, 0xc7, 0x09, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73,
	0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f,
	0x68, 0x6f, 0x75, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x69, 0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x61, 0x69, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x69, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x69, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x70, 0x76, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x70, 0x76, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x70, 0x76, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x61, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x66, 0x70, 0x76,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x70,
	0x6f, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x73,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2d, 0x0a, 0x12,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x61, 0x6c, 0x65, 0x73, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x26, 0x0a,
	0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x62, 0x69, 0x74, 0x73,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x64, 0x42, 0x69, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68,
	0x6f, 0x75, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x45, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x42, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f,
	0x0a, 0x14, 0x66, 0x70, 0x76, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61,
	0x64, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x44, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x66, 0x70,
	0x76, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x64, 0x65, 0x53, 0x75, 0x6d, 0x12,
	0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x41,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x22, 0x0a, 0x0d, 0x66, 0x70, 0x76, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75,
	0x6d, 0x18, 0x43, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x70, 0x76, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x53, 0x75, 0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x46, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x66, 0x70, 0x76, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x47, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x65, 0x64, 0x46, 0x70, 0x76, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x6d,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x48, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x66, 0x70,
	0x76, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x49, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x46, 0x70, 0x76, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x53, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x66, 0x70, 0x76, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x46, 0x70, 0x76, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x6d,
	0x22, 0x97, 0x05, 0x0a, 0x13, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x7a,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x74, 0x7a, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x48, 0x6f, 0x75,
	0x72, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x74, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x54, 0x6f, 0x12, 0x24, 0x0a,
	0x0e, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x61, 0x69, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x46,
	0x72, 0x6f, 0x6d, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72,
	0x5f, 0x74, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x69, 0x64, 0x48,
	0x6f, 0x75, 0x72, 0x54, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x74, 0x6f, 0x75, 0x63, 0x68, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x61, 0x6c,
	0x65, 0x73, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x73, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x49, 0x64,
	0x73, 0x12, 0x3d, 0x0a, 0x0e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f,
	0x75, 0x72, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x75, 0x72,
	0x73, 0x52, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x75, 0x72, 0x73,
	0x12, 0x44, 0x0a, 0x12, 0x6e, 0x6f, 0x74, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x48,
	0x6f, 0x75, 0x72, 0x73, 0x52, 0x10, 0x6e, 0x6f, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x46, 0x72,
	0x6f, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x6f,
	0x75, 0x72, 0x5f, 0x74, 0x6f, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x54, 0x6f, 0x22, 0x35, 0x0a, 0x18, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x44, 0x72, 0x61, 0x66, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54,
	0x6f, 0x22, 0xd7, 0x01, 0x0a, 0x06, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x03,
	0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12,
	0x2d, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x25,
	0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x70, 0x76, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x66, 0x70,
	0x76, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x80, 0x08, 0x0a, 0x0d,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2a, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x26, 0x0a, 0x0f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x74, 0x6f, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x48, 0x6f,
	0x75, 0x72, 0x54, 0x6f, 0x12, 0x2b, 0x0a, 0x12, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x64, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x46, 0x72, 0x6f,
	0x6d, 0x12, 0x27, 0x0a, 0x10, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x6f,
	0x75, 0x72, 0x5f, 0x74, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x75, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x54, 0x6f, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x12,
	0x2f, 0x0a, 0x14, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x68, 0x6f, 0x75, 0x72, 0x5f, 0x74, 0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x54, 0x6f,
	0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x64, 0x69, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69,
	0x6d, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x64, 0x72, 0x61, 0x66, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x44, 0x72, 0x61, 0x66, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x49, 0x64, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6e,
	0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x2b,
	0x0a, 0x11, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x73, 0x68, 0x69, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6e,
	0x6f, 0x74, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x65, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x6e, 0x6f, 0x74, 0x53,
	0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xfb,
	0x01, 0x0a, 0x14, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x33,
	0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf7, 0x11, 0x0a,
	0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x30, 0x0a, 0x08, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x69, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x12, 0x3c, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x64, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22,
	0x0a, 0x0d, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x72, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x49, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x68, 0x69,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x14, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x73, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x70, 0x76,
	0x5f, 0x73, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x66, 0x70, 0x76, 0x53, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x70, 0x76, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x70, 0x76, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x64, 0x65, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61,
	0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x70, 0x76, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6d, 0x61, 0x64, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x66, 0x70,
	0x76, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x11,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74,
	0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x6c, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x41, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x70, 0x76, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x70, 0x76, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13,
	0x66, 0x70, 0x76, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x66, 0x70, 0x76, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x13,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x2c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x73, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74,
	0x6f, 0x75, 0x63, 0x68, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x33, 0x0a, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x2f, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x14, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x61, 0x6c, 0x65, 0x73,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x61,
	0x6c, 0x65, 0x73, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x16, 0x61,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x61, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x37, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x70, 0x76, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x38, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x66, 0x70, 0x76, 0x41,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x3a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x73, 0x5f, 0x64, 0x72, 0x61, 0x66, 0x74, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x73, 0x44, 0x72, 0x61, 0x66, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x65, 0x72, 0x6d, 0x5f,
	0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x3f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x65, 0x72, 0x6d, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74,
	0x61, 0x78, 0x18, 0x41, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54,
	0x61, 0x78, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x70, 0x76, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x74, 0x61, 0x78, 0x18, 0x42, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x70, 0x76, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x54, 0x61, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x43, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x61, 0x69, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x44, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61,
	0x69, 0x64, 0x41, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x70, 0x61,
	0x69, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x45, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x69, 0x64, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x25, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x65, 0x64, 0x18, 0x54, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x47, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c,
	0x0a, 0x12, 0x66, 0x70, 0x76, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x48, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x66, 0x70, 0x76, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x06,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x4b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x52, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x51, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x52, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x53, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd5, 0x02, 0x0a, 0x12, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a,
	0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0xca,
	0x01, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f,
	0x74, 0x69, 0x5f, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6e, 0x6f, 0x74, 0x69, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x65,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x65, 0x65, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x22, 0xc8, 0x02, 0x0a, 0x04,
	0x42, 0x69, 0x6c, 0x6c, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x62, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x62, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x70, 0x76, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x70, 0x76, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x69, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x9e, 0x01, 0x0a, 0x11, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x03,
	0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x47,
	0x0a, 0x12, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x11, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xa9, 0x02, 0x0a, 0x10, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x03,
	0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75,
	0x73, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x64, 0x22, 0x95, 0x02, 0x0a, 0x14, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x03,
	0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x2e,
	0x0a, 0x13, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x6f, 0x12,
	0x2a, 0x0a, 0x11, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x22, 0xaf, 0x01, 0x0a, 0x12,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x72, 0x6f, 0x6d,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x6f, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x6f, 0x22, 0x83, 0x01,
	0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x72, 0x65,
	0x66, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x22, 0xc0, 0x01, 0x0a, 0x13, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x63,
	0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x33,
	0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0x9b, 0x0f, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x0d, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x09,
	0x69, 0x31, 0x38, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x31, 0x38, 0x6e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x08, 0x69, 0x31, 0x38, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3d, 0x0a, 0x10, 0x69, 0x31, 0x38, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x49, 0x31, 0x38, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x69,
	0x31, 0x38, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c,
	0x0a, 0x21, 0x69, 0x31, 0x38, 0x6e, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x69, 0x6c, 0x6c, 0x5f, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x49, 0x31, 0x38, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x1d, 0x69,
	0x31, 0x38, 0x6e, 0x4c, 0x6f, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x51, 0x75, 0x69, 0x6c, 0x6c, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x10,
	0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x4b, 0x56, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x2f, 0x0a, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x70, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x70, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x1f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2b, 0x0a,
	0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x6f, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x5f,
	0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x12, 0x20, 0x0a, 0x0c, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x68, 0x69, 0x70,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x61, 0x79, 0x73, 0x54, 0x6f, 0x53, 0x68,
	0x69, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x26, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x64, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x64,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x28, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x67, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x65, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x50,
	0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18, 0x31, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x70, 0x76, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x70, 0x76, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x36, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0a, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x3d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x68,
	0x61, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x3e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x3a, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x3f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x0b, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x03,
	0x74, 0x61, 0x78, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x54, 0x61, 0x78, 0x52, 0x03, 0x74, 0x61, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2f, 0x0a, 0x07, 0x62, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x73, 0x18, 0x42, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52,
	0x07, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x43, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x76, 0x69, 0x65, 0x77, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x63, 0x22, 0xa8, 0x01, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x6f, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x73, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x70, 0x76, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x70, 0x76, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22,
	0x70, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x79, 0x22, 0x88, 0x01, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x21,
	0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74,
	0x78, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x2a, 0x0a, 0x16,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x53, 0x68, 0x65, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x46, 0x65, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x4d, 0x0a, 0x12, 0x57, 0x65, 0x62, 0x73,
	0x69, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x65, 0x65, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74,
	0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x65, 0x62,
	0x73, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x36, 0x0a, 0x11, 0x53, 0x68, 0x6f, 0x70, 0x65,
	0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x65, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x8a, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x65, 0x65, 0x64, 0x73,
	0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03,
	0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x38, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x66, 0x65,
	0x65, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x65, 0x65, 0x64, 0x52, 0x0c,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x65, 0x65, 0x64, 0x73, 0x22, 0x86, 0x05, 0x0a,
	0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x65, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x03,
	0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x6f, 0x70,
	0x65, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x65, 0x65, 0x64, 0x52, 0x06, 0x73,
	0x68, 0x6f, 0x70, 0x65, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x65,
	0x65, 0x64, 0x52, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x73, 0x68, 0x65, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x53, 0x68, 0x65, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x65, 0x65,
	0x64, 0x52, 0x0b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x53, 0x68, 0x65, 0x65, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x65, 0x74, 0x63,
	0x68, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x65, 0x74, 0x63,
	0x68, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c,
	0x61, 0x73, 0x74, 0x46, 0x65, 0x74, 0x63, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2a, 0x0a,
	0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x73, 0x75, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x75, 0x63, 0x65,
	0x73, 0x73, 0x46, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xa7, 0x04, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x67, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x47, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x74,
	0x65, 0x12, 0x20, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4b, 0x56, 0x52, 0x05, 0x70, 0x72,
	0x6f, 0x70, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x6c,
	0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x16,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x6b, 0x75, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22,
	0x7c, 0x0a, 0x02, 0x4b, 0x56, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x15, 0x0a,
	0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b,
	0x65, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x03, 0x6b, 0x76, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4b, 0x56, 0x52, 0x03, 0x6b, 0x76, 0x73, 0x22, 0xcc, 0x01,
	0x0a, 0x11, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x8a, 0x01, 0x0a,
	0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x21, 0x0a,
	0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4b, 0x56, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x22, 0xf9, 0x02, 0x0a, 0x03, 0x54, 0x61,
	0x78, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x69, 0x31, 0x38, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x49, 0x31, 0x38, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x08,
	0x69, 0x31, 0x38, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0x6c, 0x0a, 0x05, 0x54, 0x61, 0x78, 0x65, 0x73, 0x12, 0x21,
	0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74,
	0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x05, 0x74, 0x61, 0x78, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x78, 0x52, 0x05, 0x74, 0x61,
	0x78, 0x65, 0x73, 0x22, 0xcc, 0x01, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72,
	0x6f, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x22, 0x9d, 0x04, 0x0a, 0x0a, 0x53, 0x68, 0x6f, 0x70, 0x65, 0x65, 0x53, 0x68, 0x6f,
	0x70, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x68, 0x6f, 0x70, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x32, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x5f, 0x75, 0x6e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64,
	0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x6e, 0x75, 0x6d, 0x55, 0x6e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x5f, 0x6e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x61,
	0x6c, 0x6c, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x43,
	0x61, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x6e, 0x63,
	0x65, 0x64, 0x22, 0xaf, 0x01, 0x0a, 0x16, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x53, 0x68, 0x6f, 0x70, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f,
	0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0xd6, 0x01, 0x0a, 0x18, 0x53, 0x68, 0x6f, 0x70, 0x65, 0x65, 0x53,
	0x79, 0x6e, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x91, 0x02,
	0x0a, 0x19, 0x53, 0x68, 0x6f, 0x70, 0x65, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x63,
	0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x73, 0x68, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x68, 0x61, 0x73, 0x5f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61,
	0x73, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x6e, 0x65, 0x78, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x22, 0xb2, 0x01, 0x0a, 0x1a, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x75, 0x74,
	0x6f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03,
	0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x1c, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x09, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x75, 0x74,
	0x6f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0xfc, 0x01, 0x0a,
	0x1b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x03,
	0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x12, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x53, 0x75, 0x62, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x3b, 0x0a, 0x09, 0x53,
	0x75, 0x62, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x94, 0x01, 0x0a, 0x14, 0x52, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22,
	0x8e, 0x01, 0x0a, 0x15, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x79, 0x6e,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x08, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x22, 0x9d, 0x01, 0x0a, 0x0f, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6b,
	0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x65,
	0x63, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x31, 0x0a,
	0x07, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73,
	0x22, 0x57, 0x0a, 0x0f, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x22, 0xd0, 0x0c, 0x0a, 0x0d, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x03, 0x63,
	0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a,
	0x18, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74,
	0x6f, 0x75, 0x63, 0x68, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x66, 0x69, 0x72, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x75,
	0x63, 0x68, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x18, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x65,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x65, 0x65, 0x6e, 0x12, 0x36, 0x0a,
	0x08, 0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x08, 0x66, 0x75, 0x6c,
	0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x65, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x65, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x64,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x12, 0x2c, 0x0a,
	0x12, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x74, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72,
	0x12, 0x26, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x43, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x53, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x19, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x3d, 0x0a, 0x1b,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x18, 0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x3a, 0x0a, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6c, 0x65,
	0x61, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x65, 0x61, 0x64,
	0x12, 0x29, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x2d, 0x0a, 0x07, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x32, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49, 0x64, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a,
	0x16, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0xc9, 0x01, 0x0a,
	0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12,
	0x2b, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x68, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64,
	0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65,
	0x6e, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x65, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x62, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x9e, 0x03, 0x0a, 0x0d, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x74, 0x74, 0x65, 0x6e,
	0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x6f, 0x74,
	0x74, 0x65, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x06, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x12, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x22, 0xff, 0x02, 0x0a, 0x0c, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x5f, 0x74, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x54, 0x6f, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x38, 0x0a, 0x0a, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a,
	0x0a, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x10, 0x03, 0x22, 0xab, 0x01, 0x0a, 0x09, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x09,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x91, 0x02, 0x0a, 0x08, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0xbf, 0x04, 0x0a, 0x0c,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03,
	0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2d,
	0x0a, 0x12, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x61, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x29, 0x0a,
	0x10, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x39, 0x0a, 0x18, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2a, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x26, 0x0a, 0x0f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x74, 0x6f, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x48, 0x6f,
	0x75, 0x72, 0x54, 0x6f, 0x12, 0x2b, 0x0a, 0x12, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x64, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x46, 0x72, 0x6f,
	0x6d, 0x12, 0x27, 0x0a, 0x10, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x6f,
	0x75, 0x72, 0x5f, 0x74, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x75, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x54, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x9b, 0x01,
	0x0a, 0x05, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x05, 0x74, 0x61, 0x73,
	0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xa7, 0x08, 0x0a, 0x04,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x50, 0x0a, 0x25, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x21, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x64, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x5f, 0x74, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x54, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x5f, 0x71, 0x75, 0x69, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x51, 0x75, 0x69,
	0x6c, 0x6c, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x69, 0x6c, 0x6c, 0x5f, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x69, 0x6c, 0x6c, 0x44, 0x65, 0x6c, 0x74,
	0x61, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x73, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18,
	0x19, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x1a, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10,
	0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x39, 0x0a, 0x18, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1c, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x17, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x80, 0x01, 0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x2e, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0xbe, 0x01, 0x0a, 0x12, 0x54, 0x61, 0x73,
	0x6b, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63,
	0x74, 0x78, 0x12, 0x32, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x61, 0x73,
	0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0x5c, 0x0a, 0x0b, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x2a, 0x0a, 0x06, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x86, 0x04, 0x0a, 0x0a, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x3e,
	0x0a, 0x1c, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x73, 0x74, 0x52, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x12, 0x2f,
	0x0a, 0x14, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x6c, 0x65,
	0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x72, 0x69,
	0x6e, 0x67, 0x4d, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x6c, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x6c, 0x79,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x6c, 0x79, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f,
	0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x49, 0x6e,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c,
	0x22, 0x9a, 0x02, 0x0a, 0x0f, 0x44, 0x6f, 0x63, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x72, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x13,
	0x0a, 0x05, 0x69, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69,
	0x73, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x22, 0xa7, 0x02,
	0x0a, 0x10, 0x44, 0x6f, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68,
	0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x61, 0x72, 0x74, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x6f, 0x63, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x6f, 0x63, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x22, 0x98, 0x02, 0x0a, 0x06, 0x44, 0x6f, 0x63, 0x48,
	0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x72, 0x0a, 0x11, 0x44, 0x6f, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x22, 0x0a, 0x04, 0x68, 0x69,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x44, 0x6f, 0x63, 0x48, 0x69, 0x74, 0x52, 0x04, 0x68, 0x69, 0x74, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x22, 0x93, 0x01, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x73, 0x0a, 0x11,
	0x5a, 0x61, 0x6c, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x03, 0x63, 0x74, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x22, 0x82, 0x04, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x61,
	0x73, 0x74, 0x55, 0x73, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75,
	0x73, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61,
	0x73, 0x74, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x69,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x69, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x41, 0x74, 0x22, 0xa2, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x61, 0x6c, 0x73, 0x12, 0x21, 0x0a,
	0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x4a, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x61, 0x6c, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x61, 0x6c, 0x73, 0x22, 0xec, 0x01, 0x0a, 0x1c,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x61,
	0x6c, 0x50, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03,
	0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x6f, 0x64, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0xce, 0x01, 0x0a, 0x17, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x61, 0x6c,
	0x50, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x22, 0xb4, 0x01, 0x0a, 0x0b,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x63,
	0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a,
	0x0c, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0b, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0x97, 0x01, 0x0a, 0x0a, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x25, 0x0a, 0x0d,
	0x48, 0x6f, 0x75, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xe4, 0x01, 0x0a, 0x14, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x03,
	0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x49, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x69, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x12,
	0x29, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xdd, 0x04, 0x0a, 0x11, 0x43,
	0x61, 0x6c, 0x6c, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03,
	0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x09, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x63, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08,
	0x72, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x69, 0x73,
	0x73, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x12, 0x36, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0b, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x12, 0x43,
	0x61, 0x6c, 0x6c, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x36, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0b, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x43, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x22, 0x92,
	0x01, 0x0a, 0x0e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x62, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x22, 0x59,
	0x0a, 0x0c, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x54,
	0x53, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x65, 0x73, 0x22, 0xce, 0x01, 0x0a, 0x11, 0x54, 0x54,
	0x53, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x73, 0x6d, 0x6c,
	0x5f, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73,
	0x73, 0x6d, 0x6c, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0c, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x70, 0x33, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x70, 0x33, 0x55, 0x72, 0x6c, 0x12,
	0x29, 0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6d, 0x75,
	0x73, 0x69, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x22, 0xbb, 0x01, 0x0a, 0x0c, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x1d, 0x0a, 0x07, 0x77,
	0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07,
	0x77, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x02, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x77, 0x65, 0x65, 0x6b,
	0x64, 0x61, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc6, 0x02, 0x0a, 0x0d, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x03, 0x63, 0x74,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x03, 0x63, 0x74, 0x78, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x77, 0x65, 0x65, 0x6b, 0x5f,
	0x64, 0x61, 0x79, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x75, 0x72,
	0x52, 0x08, 0x77, 0x65, 0x65, 0x6b, 0x44, 0x61, 0x79, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x48, 0x6f, 0x75, 0x72,
	0x73, 0x12, 0x30, 0x0a, 0x08, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x08, 0x68, 0x6f, 0x6c, 0x69, 0x64,
	0x61, 0x79, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x63, 0x74, 0x78, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69,
	0x64, 0x2a, 0x42, 0x0a, 0x08, 0x48, 0x61, 0x76, 0x65, 0x42, 0x65, 0x65, 0x6e, 0x12, 0x0b, 0x0a,
	0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x72,
	0x65, 0x61, 0x73, 0x65, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x10, 0x03, 0x2a, 0x4e, 0x0a, 0x02, 0x50, 0x4b, 0x12, 0x06, 0x0a, 0x02, 0x69,
	0x64, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x10, 0x02, 0x12,
	0x14, 0x0a, 0x10, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x7a, 0x61, 0x6c, 0x6f, 0x5f, 0x6f, 0x61,
	0x5f, 0x69, 0x64, 0x10, 0x04, 0x2a, 0x8b, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x76, 0x6f, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x75, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x06,
	0x12, 0x09, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x09, 0x12, 0x07, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x10,
	0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x10, 0x0d, 0x12,
	0x15, 0x0a, 0x11, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x10, 0x0f, 0x12, 0x0b, 0x0a, 0x07, 0x64, 0x69, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x10, 0x10, 0x12, 0x0e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x11, 0x2a, 0xaf, 0x02, 0x0a, 0x0e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x6e, 0x6f, 0x74, 0x68, 0x69, 0x6e,
	0x67, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x10, 0x02, 0x12, 0x0b, 0x0a,
	0x07, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x62, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x10, 0x06, 0x12, 0x11,
	0x0a, 0x0d, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x10,
	0x07, 0x12, 0x18, 0x0a, 0x14, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x10, 0x08, 0x12, 0x08, 0x0a, 0x04, 0x66,
	0x6f, 0x72, 0x6d, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x5f, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x65, 0x73, 0x10, 0x0d, 0x12, 0x0b, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x10, 0x0e, 0x12, 0x08, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x10, 0x0f, 0x12, 0x0c,
	0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x62, 0x61, 0x63, 0x6b, 0x10, 0x10, 0x12, 0x13, 0x0a, 0x0f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x10,
	0x11, 0x12, 0x0b, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x10, 0x12, 0x12, 0x0f,
	0x0a, 0x0b, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x10, 0x13, 0x12,
	0x09, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x10, 0x14, 0x12, 0x09, 0x0a, 0x05, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x10, 0x16, 0x2a, 0x44, 0x0a, 0x0b, 0x42, 0x6f, 0x74, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x09, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x10, 0x03, 0x2a, 0xdb, 0x02, 0x0a, 0x0d,
	0x42, 0x6f, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a,
	0x03, 0x6e, 0x69, 0x6c, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x10, 0x02,
	0x12, 0x10, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x6a, 0x75, 0x6d, 0x70, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x77, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0b, 0x12, 0x0c,
	0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0c, 0x12, 0x0f, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x10, 0x0d, 0x12, 0x0a, 0x0a,
	0x06, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x10, 0x0e, 0x12, 0x0d, 0x0a, 0x09, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x10, 0x0f, 0x12, 0x13, 0x0a, 0x0f, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x10, 0x10, 0x12, 0x10, 0x0a,
	0x0c, 0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x12, 0x12,
	0x0b, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x6f, 0x74, 0x10, 0x13, 0x12, 0x16, 0x0a, 0x12,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x10, 0x14, 0x12, 0x10, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x10, 0x15, 0x12, 0x0e, 0x0a, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x10, 0x16, 0x12, 0x11, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x10, 0x17, 0x2a, 0x8c, 0x01, 0x0a, 0x0b, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x73, 0x75, 0x62,
	0x69, 0x7a, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x10, 0x02, 0x12, 0x09, 0x0a,
	0x05, 0x76, 0x69, 0x62, 0x65, 0x72, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x66, 0x61, 0x63, 0x65,
	0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x08,
	0x0a, 0x04, 0x7a, 0x61, 0x6c, 0x6f, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c,
	0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x10,
	0x07, 0x12, 0x15, 0x0a, 0x11, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x08, 0x2a, 0xd6, 0x01, 0x0a, 0x10, 0x53, 0x68, 0x69,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x0a, 0x0a,
	0x06, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x67, 0x68, 0x74, 0x6b, 0x10, 0x02,
	0x12, 0x0d, 0x0a, 0x09, 0x73, 0x68, 0x69, 0x70, 0x63, 0x68, 0x75, 0x6e, 0x67, 0x10, 0x03, 0x12,
	0x0c, 0x0a, 0x08, 0x6e, 0x69, 0x6e, 0x6a, 0x61, 0x76, 0x61, 0x6e, 0x10, 0x04, 0x12, 0x0f, 0x0a,
	0x0b, 0x67, 0x72, 0x61, 0x62, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x10, 0x05, 0x12, 0x0b,
	0x0a, 0x07, 0x61, 0x68, 0x61, 0x6d, 0x6f, 0x76, 0x65, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x68,
	0x63, 0x6d, 0x70, 0x6f, 0x73, 0x74, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x6e, 0x70, 0x6f,
	0x73, 0x74, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x6a, 0x6e, 0x74, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x73, 0x75, 0x70, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x10, 0x0a, 0x12, 0x08, 0x0a, 0x04, 0x68, 0x65, 0x79, 0x75, 0x10, 0x0b, 0x12, 0x0f, 0x0a,
	0x0b, 0x76, 0x69, 0x65, 0x74, 0x74, 0x65, 0x6c, 0x70, 0x6f, 0x73, 0x74, 0x10, 0x0c, 0x12, 0x07,
	0x0a, 0x03, 0x67, 0x68, 0x6e, 0x10, 0x0d, 0x12, 0x08, 0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x10,
	0x14, 0x2a, 0xb3, 0x01, 0x0a, 0x0f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x19, 0x12,
	0x14, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x10, 0x1a, 0x12, 0x15, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x10, 0x1b, 0x12, 0x15, 0x0a, 0x11,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x10, 0x1c, 0x12, 0x10, 0x0a, 0x0c, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x70, 0x69, 0x63,
	0x6b, 0x75, 0x70, 0x10, 0x1d, 0x12, 0x10, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x10, 0x1e, 0x42, 0x19, 0x5a, 0x17, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x75, 0x62, 0x69, 0x7a, 0x2f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_header_proto_rawDescOnce sync.Once
	file_header_proto_rawDescData = file_header_proto_rawDesc
)

func file_header_proto_rawDescGZIP() []byte {
	file_header_proto_rawDescOnce.Do(func() {
		file_header_proto_rawDescData = protoimpl.X.CompressGZIP(file_header_proto_rawDescData)
	})
	return file_header_proto_rawDescData
}

var file_header_proto_enumTypes = make([]protoimpl.EnumInfo, 40)
var file_header_proto_msgTypes = make([]protoimpl.MessageInfo, 393)
var file_header_proto_goTypes = []interface{}{
	(HaveBeen)(0),                                       // 0: header.HaveBeen
	(PK)(0),                                             // 1: header.PK
	(ConvoState)(0),                                     // 2: header.ConvoState
	(AttachmentType)(0),                                 // 3: header.AttachmentType
	(BotCategory)(0),                                    // 4: header.BotCategory
	(BotActionType)(0),                                  // 5: header.BotActionType
	(ChannelType)(0),                                    // 6: header.ChannelType
	(ShippingProvider)(0),                               // 7: header.ShippingProvider
	(OrderStatusCode)(0),                                // 8: header.OrderStatusCode
	(Attribute_Ops)(0),                                  // 9: header.Attribute.Ops
	(AttributeDefinition_AttributeType)(0),              // 10: header.AttributeDefinition.AttributeType
	(AttributeDefinition_AttributeKind)(0),              // 11: header.AttributeDefinition.AttributeKind
	(UserSession_DeviceType)(0),                         // 12: header.UserSession.DeviceType
	(UserSession_AdsNetwork)(0),                         // 13: header.UserSession.AdsNetwork
	(UserSession_Source)(0),                             // 14: header.UserSession.Source
	(Rule_AssignStrategy)(0),                            // 15: header.Rule.AssignStrategy
	(ConversationMember_State)(0),                       // 16: header.ConversationMember.State
	(MessagePong_Type)(0),                               // 17: header.MessagePong.Type
	(MessageButton_ButtonType)(0),                       // 18: header.MessageButton.ButtonType
	(AskInfomation_InputType)(0),                        // 19: header.AskInfomation.InputType
	(MessageFormField_InputType)(0),                     // 20: header.MessageFormField.InputType
	(Integration_State)(0),                              // 21: header.Integration.State
	(BotCondition_Source)(0),                            // 22: header.BotCondition.Source
	(BotCondition_DeviveType)(0),                        // 23: header.BotCondition.DeviveType
	(BotCondition_Browser)(0),                           // 24: header.BotCondition.Browser
	(WidgetHeader_HeaderLayout)(0),                      // 25: header.WidgetHeader.HeaderLayout
	(WidgetSetting_WindowMode)(0),                       // 26: header.WidgetSetting.WindowMode
	(WidgetForm_When)(0),                                // 27: header.WidgetForm.When
	(WidgetChatButton_ButtonPosition)(0),                // 28: header.WidgetChatButton.ButtonPosition
	(UserCampaignStatus_Status)(0),                      // 29: header.UserCampaignStatus.Status
	(ReportCampaignRequest_Range)(0),                    // 30: header.ReportCampaignRequest.Range
	(ReportWebPluginRequest_Range)(0),                   // 31: header.ReportWebPluginRequest.Range
	(Client_Type)(0),                                    // 32: header.Client.Type
	(Webhook_State)(0),                                  // 33: header.Webhook.State
	(BotTerminated_TerminatedCode)(0),                   // 34: header.BotTerminated.TerminatedCode
	(FbCommentSetting_HideComment)(0),                   // 35: header.FbCommentSetting.HideComment
	(Webpage_State)(0),                                  // 36: header.Webpage.State
	(AvailibilityReportRequest_Range)(0),                // 37: header.AvailibilityReportRequest.Range
	(PaymentMethod_State)(0),                            // 38: header.PaymentMethod.State
	(PipelineRule_AssignType)(0),                        // 39: header.PipelineRule.AssignType
	(*Empty)(nil),                                       // 40: header.Empty
	(*Id)(nil),                                          // 41: header.Id
	(*Ids)(nil),                                         // 42: header.Ids
	(*Notifications)(nil),                               // 43: header.Notifications
	(*Notification)(nil),                                // 44: header.Notification
	(*ListNotiRequest)(nil),                             // 45: header.ListNotiRequest
	(*Attribute)(nil),                                   // 46: header.Attribute
	(*UserAlias)(nil),                                   // 47: header.UserAlias
	(*PhoneDevices)(nil),                                // 48: header.PhoneDevices
	(*PhoneDevice)(nil),                                 // 49: header.PhoneDevice
	(*CallSettings)(nil),                                // 50: header.CallSettings
	(*CallSetting)(nil),                                 // 51: header.CallSetting
	(*CallRoutingAction)(nil),                           // 52: header.CallRoutingAction
	(*User)(nil),                                        // 53: header.User
	(*Touchpoint)(nil),                                  // 54: header.Touchpoint
	(*ShippingAddresses)(nil),                           // 55: header.ShippingAddresses
	(*UserLabel)(nil),                                   // 56: header.UserLabel
	(*Label)(nil),                                       // 57: header.Label
	(*Labels)(nil),                                      // 58: header.Labels
	(*Users)(nil),                                       // 59: header.Users
	(*SessionCampaign)(nil),                             // 60: header.SessionCampaign
	(*CreateRequest)(nil),                               // 61: header.CreateRequest
	(*AttributeDefinitionListItem)(nil),                 // 62: header.AttributeDefinitionListItem
	(*AttributeDefinition)(nil),                         // 63: header.AttributeDefinition
	(*AttributeDefinitions)(nil),                        // 64: header.AttributeDefinitions
	(*UserCreateResult)(nil),                            // 65: header.UserCreateResult
	(*Note)(nil),                                        // 66: header.Note
	(*Notes)(nil),                                       // 67: header.Notes
	(*UserNote)(nil),                                    // 68: header.UserNote
	(*UserRequest)(nil),                                 // 69: header.UserRequest
	(*ListNotesRequest)(nil),                            // 70: header.ListNotesRequest
	(*DeleteNoteRequest)(nil),                           // 71: header.DeleteNoteRequest
	(*IntParams)(nil),                                   // 72: header.IntParams
	(*StringParams)(nil),                                // 73: header.StringParams
	(*IdParams)(nil),                                    // 74: header.IdParams
	(*Params)(nil),                                      // 75: header.Params
	(*Location)(nil),                                    // 76: header.Location
	(*Locations)(nil),                                   // 77: header.Locations
	(*LocationParams)(nil),                              // 78: header.LocationParams
	(*Page)(nil),                                        // 79: header.Page
	(*UserInfoParams)(nil),                              // 80: header.UserInfoParams
	(*Key)(nil),                                         // 81: header.Key
	(*UserEventMetric)(nil),                             // 82: header.UserEventMetric
	(*UserEventMetrics)(nil),                            // 83: header.UserEventMetrics
	(*UserEventMetricsRequest)(nil),                     // 84: header.UserEventMetricsRequest
	(*UserMetric)(nil),                                  // 85: header.UserMetric
	(*UserMetrics)(nil),                                 // 86: header.UserMetrics
	(*UserMetricsRequest)(nil),                          // 87: header.UserMetricsRequest
	(*ConversationMetric)(nil),                          // 88: header.ConversationMetric
	(*ConversationMetrics)(nil),                         // 89: header.ConversationMetrics
	(*ConversationMetricsRequest)(nil),                  // 90: header.ConversationMetricsRequest
	(*AgentMetric)(nil),                                 // 91: header.AgentMetric
	(*AgentMetrics)(nil),                                // 92: header.AgentMetrics
	(*AgentMetricsRequest)(nil),                         // 93: header.AgentMetricsRequest
	(*SourceMetric)(nil),                                // 94: header.SourceMetric
	(*LocationMetric)(nil),                              // 95: header.LocationMetric
	(*PageMetric)(nil),                                  // 96: header.PageMetric
	(*UserReport)(nil),                                  // 97: header.UserReport
	(*SourceMetrics)(nil),                               // 98: header.SourceMetrics
	(*LocationMetrics)(nil),                             // 99: header.LocationMetrics
	(*PageMetrics)(nil),                                 // 100: header.PageMetrics
	(*ConcurrentUser)(nil),                              // 101: header.ConcurrentUser
	(*ReportCCU)(nil),                                   // 102: header.ReportCCU
	(*Events)(nil),                                      // 103: header.Events
	(*Event)(nil),                                       // 104: header.Event
	(*EventParams)(nil),                                 // 105: header.EventParams
	(*ListUserEventsRequest)(nil),                       // 106: header.ListUserEventsRequest
	(*UserEvent)(nil),                                   // 107: header.UserEvent
	(*Topic)(nil),                                       // 108: header.Topic
	(*UnreadTopic)(nil),                                 // 109: header.UnreadTopic
	(*UserSession)(nil),                                 // 110: header.UserSession
	(*StartRequest)(nil),                                // 111: header.StartRequest
	(*PresencesRequest)(nil),                            // 112: header.PresencesRequest
	(*PresencesResponse)(nil),                           // 113: header.PresencesResponse
	(*BotRunRequest)(nil),                               // 114: header.BotRunRequest
	(*BotRunResponse)(nil),                              // 115: header.BotRunResponse
	(*Rule)(nil),                                        // 116: header.Rule
	(*TimmingCondition)(nil),                            // 117: header.TimmingCondition
	(*ChannelCondition)(nil),                            // 118: header.ChannelCondition
	(*LocationCondition)(nil),                           // 119: header.LocationCondition
	(*Route)(nil),                                       // 120: header.Route
	(*RouteResult)(nil),                                 // 121: header.RouteResult
	(*ConversationMember)(nil),                          // 122: header.ConversationMember
	(*ListConversationsRequest)(nil),                    // 123: header.ListConversationsRequest
	(*ListConversationEventsRequest)(nil),               // 124: header.ListConversationEventsRequest
	(*Chain)(nil),                                       // 125: header.Chain
	(*Conversation)(nil),                                // 126: header.Conversation
	(*CallInfo)(nil),                                    // 127: header.CallInfo
	(*Rating)(nil),                                      // 128: header.Rating
	(*Conversations)(nil),                               // 129: header.Conversations
	(*Message)(nil),                                     // 130: header.Message
	(*InstagramStory)(nil),                              // 131: header.InstagramStory
	(*MessagePong)(nil),                                 // 132: header.MessagePong
	(*MessageButton)(nil),                               // 133: header.MessageButton
	(*AskInfomationAnswer)(nil),                         // 134: header.AskInfomationAnswer
	(*AskInfomation)(nil),                               // 135: header.AskInfomation
	(*GenericElementTemplate)(nil),                      // 136: header.GenericElementTemplate
	(*Attachment)(nil),                                  // 137: header.Attachment
	(*QuickReply)(nil),                                  // 138: header.QuickReply
	(*MessageForm)(nil),                                 // 139: header.MessageForm
	(*MessageFormSubmit)(nil),                           // 140: header.MessageFormSubmit
	(*MessageFormField)(nil),                            // 141: header.MessageFormField
	(*Tag)(nil),                                         // 142: header.Tag
	(*TemplateData)(nil),                                // 143: header.TemplateData
	(*Template)(nil),                                    // 144: header.Template
	(*SearchTemplate)(nil),                              // 145: header.SearchTemplate
	(*Templates)(nil),                                   // 146: header.Templates
	(*Tags)(nil),                                        // 147: header.Tags
	(*Postback)(nil),                                    // 148: header.Postback
	(*BotPostback)(nil),                                 // 149: header.BotPostback
	(*Integrations)(nil),                                // 150: header.Integrations
	(*Integration)(nil),                                 // 151: header.Integration
	(*TagRequest)(nil),                                  // 152: header.TagRequest
	(*AssignRequest)(nil),                               // 153: header.AssignRequest
	(*EndchatConnectorSetting)(nil),                     // 154: header.EndchatConnectorSetting
	(*EndchatSetting)(nil),                              // 155: header.EndchatSetting
	(*ConversationAutomations)(nil),                     // 156: header.ConversationAutomations
	(*ConversationAutomation)(nil),                      // 157: header.ConversationAutomation
	(*Trigger)(nil),                                     // 158: header.Trigger
	(*BotCondition)(nil),                                // 159: header.BotCondition
	(*OrderCondition)(nil),                              // 160: header.OrderCondition
	(*UserAttributeCondition)(nil),                      // 161: header.UserAttributeCondition
	(*Sites)(nil),                                       // 162: header.Sites
	(*VisitProductSiteRequest)(nil),                     // 163: header.VisitProductSiteRequest
	(*Site)(nil),                                        // 164: header.Site
	(*Bot)(nil),                                         // 165: header.Bot
	(*Bots)(nil),                                        // 166: header.Bots
	(*NextBotAction)(nil),                               // 167: header.NextBotAction
	(*BotAction)(nil),                                   // 168: header.BotAction
	(*ActionCreateTask)(nil),                            // 169: header.ActionCreateTask
	(*ActionConfirmOrder)(nil),                          // 170: header.ActionConfirmOrder
	(*ActionSendChatTranscript)(nil),                    // 171: header.ActionSendChatTranscript
	(*ActionUpdateConversation)(nil),                    // 172: header.ActionUpdateConversation
	(*ActionJump)(nil),                                  // 173: header.ActionJump
	(*ActionSwitchLanguage)(nil),                        // 174: header.ActionSwitchLanguage
	(*ActionSendHttp)(nil),                              // 175: header.ActionSendHttp
	(*ActionAskQuestion)(nil),                           // 176: header.ActionAskQuestion
	(*ActionUpdateUser)(nil),                            // 177: header.ActionUpdateUser
	(*ActionUpdateUserLabels)(nil),                      // 178: header.ActionUpdateUserLabels
	(*Metric)(nil),                                      // 179: header.Metric
	(*ReportBotRequest)(nil),                            // 180: header.ReportBotRequest
	(*ReportBotResponse)(nil),                           // 181: header.ReportBotResponse
	(*BotrunMetric)(nil),                                // 182: header.BotrunMetric
	(*BotrunMetricsRequest)(nil),                        // 183: header.BotrunMetricsRequest
	(*BotrunMetrics)(nil),                               // 184: header.BotrunMetrics
	(*ActionrunMetric)(nil),                             // 185: header.ActionrunMetric
	(*ActionrunMetricsRequest)(nil),                     // 186: header.ActionrunMetricsRequest
	(*ActionrunMetrics)(nil),                            // 187: header.ActionrunMetrics
	(*ListObjectsRequest)(nil),                          // 188: header.ListObjectsRequest
	(*ListObjectsResponse)(nil),                         // 189: header.ListObjectsResponse
	(*Frequently)(nil),                                  // 190: header.Frequently
	(*RealtimeSubscription)(nil),                        // 191: header.RealtimeSubscription
	(*PollResult)(nil),                                  // 192: header.PollResult
	(*RealtimeToken)(nil),                               // 193: header.RealtimeToken
	(*PublishMessage)(nil),                              // 194: header.PublishMessage
	(*WidgetUser)(nil),                                  // 195: header.WidgetUser
	(*WidgetUserSetting)(nil),                           // 196: header.WidgetUserSetting
	(*AccountWeb)(nil),                                  // 197: header.AccountWeb
	(*SocialLink)(nil),                                  // 198: header.SocialLink
	(*WidgetHeader)(nil),                                // 199: header.WidgetHeader
	(*WidgetSetting)(nil),                               // 200: header.WidgetSetting
	(*WidgetField)(nil),                                 // 201: header.WidgetField
	(*WidgetGroup)(nil),                                 // 202: header.WidgetGroup
	(*WidgetForm)(nil),                                  // 203: header.WidgetForm
	(*WidgetChatButton)(nil),                            // 204: header.WidgetChatButton
	(*WidgetGreeting)(nil),                              // 205: header.WidgetGreeting
	(*CampaignNotification)(nil),                        // 206: header.CampaignNotification
	(*WebPlugins)(nil),                                  // 207: header.WebPlugins
	(*WebPlugin)(nil),                                   // 208: header.WebPlugin
	(*TextComponent)(nil),                               // 209: header.TextComponent
	(*LineComponent)(nil),                               // 210: header.LineComponent
	(*ImageComponent)(nil),                              // 211: header.ImageComponent
	(*NotifProfiles)(nil),                               // 212: header.NotifProfiles
	(*NotifProfile)(nil),                                // 213: header.NotifProfile
	(*Notif)(nil),                                       // 214: header.Notif
	(*ContactComponent)(nil),                            // 215: header.ContactComponent
	(*FacebookContactComponent)(nil),                    // 216: header.FacebookContactComponent
	(*ZaloContactComponent)(nil),                        // 217: header.ZaloContactComponent
	(*CallContactComponent)(nil),                        // 218: header.CallContactComponent
	(*ChatContactComponent)(nil),                        // 219: header.ChatContactComponent
	(*MapContactComponent)(nil),                         // 220: header.MapContactComponent
	(*CountdownComponent)(nil),                          // 221: header.CountdownComponent
	(*WebPluginFormField)(nil),                          // 222: header.WebPluginFormField
	(*WebPluginForm)(nil),                               // 223: header.WebPluginForm
	(*ButtonsComponent)(nil),                            // 224: header.ButtonsComponent
	(*WebPluginComponent)(nil),                          // 225: header.WebPluginComponent
	(*FollowFacebookComponent)(nil),                     // 226: header.FollowFacebookComponent
	(*SocialButtonsComponent)(nil),                      // 227: header.SocialButtonsComponent
	(*Popup)(nil),                                       // 228: header.Popup
	(*LinkComponent)(nil),                               // 229: header.LinkComponent
	(*Style)(nil),                                       // 230: header.Style
	(*PopupPage)(nil),                                   // 231: header.PopupPage
	(*Impression)(nil),                                  // 232: header.Impression
	(*ConversionRequest)(nil),                           // 233: header.ConversionRequest
	(*Conversions)(nil),                                 // 234: header.Conversions
	(*Conversion)(nil),                                  // 235: header.Conversion
	(*UserCampaignStatus)(nil),                          // 236: header.UserCampaignStatus
	(*CampaignSubmission)(nil),                          // 237: header.CampaignSubmission
	(*PopupButtonAction)(nil),                           // 238: header.PopupButtonAction
	(*ButtonComponent)(nil),                             // 239: header.ButtonComponent
	(*ImpressionCount)(nil),                             // 240: header.ImpressionCount
	(*ConversionCount)(nil),                             // 241: header.ConversionCount
	(*ReportCampaignRequest)(nil),                       // 242: header.ReportCampaignRequest
	(*ReportCampaignResponse)(nil),                      // 243: header.ReportCampaignResponse
	(*WebPluginMetric)(nil),                             // 244: header.WebPluginMetric
	(*ReportWebPluginRequest)(nil),                      // 245: header.ReportWebPluginRequest
	(*ReportWebPluginResponse)(nil),                     // 246: header.ReportWebPluginResponse
	(*WebPluginConversionRequest)(nil),                  // 247: header.WebPluginConversionRequest
	(*ConversionsExported)(nil),                         // 248: header.ConversionsExported
	(*SearchLocationsRequest)(nil),                      // 249: header.SearchLocationsRequest
	(*GreetingAudios)(nil),                              // 250: header.GreetingAudios
	(*GreetingAudio)(nil),                               // 251: header.GreetingAudio
	(*UploadedImage)(nil),                               // 252: header.UploadedImage
	(*UploadedImages)(nil),                              // 253: header.UploadedImages
	(*Clients)(nil),                                     // 254: header.Clients
	(*Client)(nil),                                      // 255: header.Client
	(*Webhooks)(nil),                                    // 256: header.Webhooks
	(*WebhookSecret)(nil),                               // 257: header.WebhookSecret
	(*Webhook)(nil),                                     // 258: header.Webhook
	(*WebhookDeliveries)(nil),                           // 259: header.WebhookDeliveries
	(*WebhookDelivery)(nil),                             // 260: header.WebhookDelivery
	(*RecentIndexDeliveryRequest)(nil),                  // 261: header.RecentIndexDeliveryRequest
	(*DeliveryRequest)(nil),                             // 262: header.DeliveryRequest
	(*WebhookPayload)(nil),                              // 263: header.WebhookPayload
	(*WebhookTestResult)(nil),                           // 264: header.WebhookTestResult
	(*Email)(nil),                                       // 265: header.Email
	(*EmailAttachment)(nil),                             // 266: header.EmailAttachment
	(*FileHeader)(nil),                                  // 267: header.FileHeader
	(*PresignResult)(nil),                               // 268: header.PresignResult
	(*FileRequest)(nil),                                 // 269: header.FileRequest
	(*File)(nil),                                        // 270: header.File
	(*BotTerminated)(nil),                               // 271: header.BotTerminated
	(*BlacklistIP)(nil),                                 // 272: header.BlacklistIP
	(*BannedUser)(nil),                                  // 273: header.BannedUser
	(*LoginSessions)(nil),                               // 274: header.LoginSessions
	(*LoginSession)(nil),                                // 275: header.LoginSession
	(*ScryptChallenge)(nil),                             // 276: header.ScryptChallenge
	(*SearchRequest)(nil),                               // 277: header.SearchRequest
	(*ExchangeRate)(nil),                                // 278: header.ExchangeRate
	(*FbComment)(nil),                                   // 279: header.FbComment
	(*FbFanpageSetting)(nil),                            // 280: header.FbFanpageSetting
	(*FbFanpageSettings)(nil),                           // 281: header.FbFanpageSettings
	(*FbCommentSetting)(nil),                            // 282: header.FbCommentSetting
	(*FacebookPosts)(nil),                               // 283: header.FacebookPosts
	(*FacebookPostAttachmentMediaImage)(nil),            // 284: header.FacebookPostAttachmentMediaImage
	(*FacebookPostAttachmentMedia)(nil),                 // 285: header.FacebookPostAttachmentMedia
	(*FacebookPostAttachment)(nil),                      // 286: header.FacebookPostAttachment
	(*FacebookPostAttachemnts)(nil),                     // 287: header.FacebookPostAttachemnts
	(*FacebookPostFrom)(nil),                            // 288: header.FacebookPostFrom
	(*FbFacebookPosts)(nil),                             // 289: header.FbFacebookPosts
	(*FacebookPagingCursor)(nil),                        // 290: header.FacebookPagingCursor
	(*FacebookPaging)(nil),                              // 291: header.FacebookPaging
	(*InstagramMedia)(nil),                              // 292: header.InstagramMedia
	(*FacebookPost)(nil),                                // 293: header.FacebookPost
	(*UserOrderConfirmation)(nil),                       // 294: header.UserOrderConfirmation
	(*SessionCookie)(nil),                               // 295: header.SessionCookie
	(*Webpage)(nil),                                     // 296: header.Webpage
	(*Webpages)(nil),                                    // 297: header.Webpages
	(*WebpageCheck)(nil),                                // 298: header.WebpageCheck
	(*RecentWebpageCheckRequest)(nil),                   // 299: header.RecentWebpageCheckRequest
	(*WebpageChecks)(nil),                               // 300: header.WebpageChecks
	(*WebpageCheckRequest)(nil),                         // 301: header.WebpageCheckRequest
	(*WebpageReportDataSet)(nil),                        // 302: header.WebpageReportDataSet
	(*WebpageReportRequest)(nil),                        // 303: header.WebpageReportRequest
	(*WebpageReportDataPoint)(nil),                      // 304: header.WebpageReportDataPoint
	(*Urls)(nil),                                        // 305: header.Urls
	(*LangMessage)(nil),                                 // 306: header.LangMessage
	(*Lang)(nil),                                        // 307: header.Lang
	(*Locale)(nil),                                      // 308: header.Locale
	(*Changelog)(nil),                                   // 309: header.Changelog
	(*ListChangelogsRequest)(nil),                       // 310: header.ListChangelogsRequest
	(*ListChangelogsResponse)(nil),                      // 311: header.ListChangelogsResponse
	(*AccountImage)(nil),                                // 312: header.AccountImage
	(*UserViews)(nil),                                   // 313: header.UserViews
	(*UserView)(nil),                                    // 314: header.UserView
	(*UserViewCondition)(nil),                           // 315: header.UserViewCondition
	(*ReportResponse)(nil),                              // 316: header.ReportResponse
	(*AvailibilityReportRequest)(nil),                   // 317: header.AvailibilityReportRequest
	(*FileUrlDownloadRequest)(nil),                      // 318: header.FileUrlDownloadRequest
	(*PushNoti)(nil),                                    // 319: header.PushNoti
	(*InvoiceTemplate)(nil),                             // 320: header.InvoiceTemplate
	(*ShopSetting)(nil),                                 // 321: header.ShopSetting
	(*Addresses)(nil),                                   // 322: header.Addresses
	(*Currency)(nil),                                    // 323: header.Currency
	(*CurrencyLogEntry)(nil),                            // 324: header.CurrencyLogEntry
	(*ProductCollections)(nil),                          // 325: header.ProductCollections
	(*ProductCollection)(nil),                           // 326: header.ProductCollection
	(*PriceRule)(nil),                                   // 327: header.PriceRule
	(*InventoryProduct)(nil),                            // 328: header.InventoryProduct
	(*OrderItem)(nil),                                   // 329: header.OrderItem
	(*GHNAddress)(nil),                                  // 330: header.GHNAddress
	(*Address)(nil),                                     // 331: header.Address
	(*GHNOrder)(nil),                                    // 332: header.GHNOrder
	(*GHNOrder2)(nil),                                   // 333: header.GHNOrder2
	(*GHNOrderItem)(nil),                                // 334: header.GHNOrderItem
	(*GHTKOrder)(nil),                                   // 335: header.GHTKOrder
	(*ShippingInfo)(nil),                                // 336: header.ShippingInfo
	(*ShippingData)(nil),                                // 337: header.ShippingData
	(*GHNShippingData)(nil),                             // 338: header.GHNShippingData
	(*GHTKShippingData)(nil),                            // 339: header.GHTKShippingData
	(*ShippingPolicies)(nil),                            // 340: header.ShippingPolicies
	(*ShippingPolicy)(nil),                              // 341: header.ShippingPolicy
	(*IntegratedShipping)(nil),                          // 342: header.IntegratedShipping
	(*IntegratedShippings)(nil),                         // 343: header.IntegratedShippings
	(*PaymentMethod)(nil),                               // 344: header.PaymentMethod
	(*PaymentMethods)(nil),                              // 345: header.PaymentMethods
	(*OrderMetric)(nil),                                 // 346: header.OrderMetric
	(*OrderMetricsRequest)(nil),                         // 347: header.OrderMetricsRequest
	(*DeleteDraftOrdersRequest)(nil),                    // 348: header.DeleteDraftOrdersRequest
	(*Orders)(nil),                                      // 349: header.Orders
	(*OrdersRequest)(nil),                               // 350: header.OrdersRequest
	(*DownloadOrderRequest)(nil),                        // 351: header.DownloadOrderRequest
	(*Order)(nil),                                       // 352: header.Order
	(*OrderPipelineStage)(nil),                          // 353: header.OrderPipelineStage
	(*OrderAgent)(nil),                                  // 354: header.OrderAgent
	(*Bill)(nil),                                        // 355: header.Bill
	(*CancellationCodes)(nil),                           // 356: header.CancellationCodes
	(*CancellationCode)(nil),                            // 357: header.CancellationCode
	(*OrderPipelineUpdated)(nil),                        // 358: header.OrderPipelineUpdated
	(*OrderStatusUpdated)(nil),                          // 359: header.OrderStatusUpdated
	(*OrderHistoryEntry)(nil),                           // 360: header.OrderHistoryEntry
	(*OrderHistoryEntries)(nil),                         // 361: header.OrderHistoryEntries
	(*Product)(nil),                                     // 362: header.Product
	(*ProductInventory)(nil),                            // 363: header.ProductInventory
	(*ProductOption)(nil),                               // 364: header.ProductOption
	(*Products)(nil),                                    // 365: header.Products
	(*GoogleSheetProductFeed)(nil),                      // 366: header.GoogleSheetProductFeed
	(*WebsiteProductFeed)(nil),                          // 367: header.WebsiteProductFeed
	(*ShopeeProductFeed)(nil),                           // 368: header.ShopeeProductFeed
	(*ProductFeeds)(nil),                                // 369: header.ProductFeeds
	(*ProductFeed)(nil),                                 // 370: header.ProductFeed
	(*ProductsRequest)(nil),                             // 371: header.ProductsRequest
	(*KV)(nil),                                          // 372: header.KV
	(*ProductCategories)(nil),                           // 373: header.ProductCategories
	(*ProductProps)(nil),                                // 374: header.ProductProps
	(*Tax)(nil),                                         // 375: header.Tax
	(*Taxes)(nil),                                       // 376: header.Taxes
	(*Error)(nil),                                       // 377: header.Error
	(*ShopeeShop)(nil),                                  // 378: header.ShopeeShop
	(*AuthorizeShopeeRequest)(nil),                      // 379: header.AuthorizeShopeeRequest
	(*ShopeeSyncProductRequest)(nil),                    // 380: header.ShopeeSyncProductRequest
	(*ShopeeSyncProductResponse)(nil),                   // 381: header.ShopeeSyncProductResponse
	(*AddressAutocompleteRequest)(nil),                  // 382: header.AddressAutocompleteRequest
	(*AddressAutocompleteResponses)(nil),                // 383: header.AddressAutocompleteResponses
	(*AddressAutocompleteResponse)(nil),                 // 384: header.AddressAutocompleteResponse
	(*Substring)(nil),                                   // 385: header.Substring
	(*RateLimitSyncRequest)(nil),                        // 386: header.RateLimitSyncRequest
	(*RateLimitSyncResponse)(nil),                       // 387: header.RateLimitSyncResponse
	(*RateLimitEntity)(nil),                             // 388: header.RateLimitEntity
	(*RateLimitWindow)(nil),                             // 389: header.RateLimitWindow
	(*CompactedUser)(nil),                               // 390: header.CompactedUser
	(*CompactedUsers)(nil),                              // 391: header.CompactedUsers
	(*CompactedAttribute)(nil),                          // 392: header.CompactedAttribute
	(*PipelineStage)(nil),                               // 393: header.PipelineStage
	(*PipelineRule)(nil),                                // 394: header.PipelineRule
	(*Pipelines)(nil),                                   // 395: header.Pipelines
	(*Pipeline)(nil),                                    // 396: header.Pipeline
	(*TasksRequest)(nil),                                // 397: header.TasksRequest
	(*Tasks)(nil),                                       // 398: header.Tasks
	(*Task)(nil),                                        // 399: header.Task
	(*TaskHistoryEntry)(nil),                            // 400: header.TaskHistoryEntry
	(*TaskHistoryEntries)(nil),                          // 401: header.TaskHistoryEntries
	(*AgentGroups)(nil),                                 // 402: header.AgentGroups
	(*AgentGroup)(nil),                                  // 403: header.AgentGroup
	(*DocIndexRequest)(nil),                             // 404: header.DocIndexRequest
	(*DocSearchRequest)(nil),                            // 405: header.DocSearchRequest
	(*DocHit)(nil),                                      // 406: header.DocHit
	(*DocSearchResponse)(nil),                           // 407: header.DocSearchResponse
	(*AccessToken)(nil),                                 // 408: header.AccessToken
	(*ZaloCodeChallenge)(nil),                           // 409: header.ZaloCodeChallenge
	(*ConversationModal)(nil),                           // 410: header.ConversationModal
	(*ConversationModals)(nil),                          // 411: header.ConversationModals
	(*ConversationModalPickRequest)(nil),                // 412: header.ConversationModalPickRequest
	(*ConversationModalPicked)(nil),                     // 413: header.ConversationModalPicked
	(*EmailBlocks)(nil),                                 // 414: header.EmailBlocks
	(*EmailBlock)(nil),                                  // 415: header.EmailBlock
	(*HourEventMeta)(nil),                               // 416: header.HourEventMeta
	(*FacebookPageRegister)(nil),                        // 417: header.FacebookPageRegister
	(*CallDriverRequest)(nil),                           // 418: header.CallDriverRequest
	(*CallDriverResponse)(nil),                          // 419: header.CallDriverResponse
	(*BlockedNumbers)(nil),                              // 420: header.BlockedNumbers
	(*BlockedNumber)(nil),                               // 421: header.BlockedNumber
	(*TextToSpeech)(nil),                                // 422: header.TextToSpeech
	(*TTSVoiceSelection)(nil),                           // 423: header.TTSVoiceSelection
	(*BusinessHour)(nil),                                // 424: header.BusinessHour
	(*BusinessHours)(nil),                               // 425: header.BusinessHours
	(*Event_Data)(nil),                                  // 426: header.Event.Data
	(*ContactComponent_ContactButton)(nil),              // 427: header.ContactComponent.ContactButton
	(*CallContactComponent_Hotline)(nil),                // 428: header.CallContactComponent.Hotline
	(*MapContactComponent_Location)(nil),                // 429: header.MapContactComponent.Location
	(*WebPluginFormField_WebPluginFormFieldOption)(nil), // 430: header.WebPluginFormField.WebPluginFormFieldOption
	nil,                           // 431: header.Email.HeaderEntry
	nil,                           // 432: header.Order.FieldsEntry
	(*common.Context)(nil),        // 433: common.Context
	(*I18NString)(nil),            // 434: header.I18nString
	(*account.BusinessHours)(nil), // 435: account.BusinessHours
	(*common.By)(nil),             // 436: common.By
	(*FloatCondition)(nil),        // 437: header.FloatCondition
	(*account.Account)(nil),       // 438: account.Account
	(*account.Agent)(nil),         // 439: account.Agent
	(*common.Device)(nil),         // 440: common.Device
	(*TextCondition)(nil),         // 441: header.TextCondition
	(*BoolCondition)(nil),         // 442: header.BoolCondition
	(*DatetimeCondition)(nil),     // 443: header.DatetimeCondition
	(*account.Presence)(nil),      // 444: account.Presence
	(*noti5.Setting)(nil),         // 445: noti5.Setting
}
var file_header_proto_depIdxs = []int32{
	433, // 0: header.Empty.ctx:type_name -> common.Context
	433, // 1: header.Id.ctx:type_name -> common.Context
	433, // 2: header.Ids.ctx:type_name -> common.Context
	433, // 3: header.Notifications.ctx:type_name -> common.Context
	44,  // 4: header.Notifications.notifications:type_name -> header.Notification
	433, // 5: header.Notification.ctx:type_name -> common.Context
	433, // 6: header.ListNotiRequest.ctx:type_name -> common.Context
	46,  // 7: header.Attribute.revisions:type_name -> header.Attribute
	433, // 8: header.UserAlias.ctx:type_name -> common.Context
	433, // 9: header.PhoneDevices.ctx:type_name -> common.Context
	49,  // 10: header.PhoneDevices.phone_devices:type_name -> header.PhoneDevice
	433, // 11: header.PhoneDevice.ctx:type_name -> common.Context
	433, // 12: header.CallSettings.ctx:type_name -> common.Context
	51,  // 13: header.CallSettings.call_settings:type_name -> header.CallSetting
	433, // 14: header.CallSetting.ctx:type_name -> common.Context
	251, // 15: header.CallSetting.greeting_message:type_name -> header.GreetingAudio
	251, // 16: header.CallSetting.missed_message:type_name -> header.GreetingAudio
	251, // 17: header.CallSetting.business_hour_message:type_name -> header.GreetingAudio
	251, // 18: header.CallSetting.menu_message:type_name -> header.GreetingAudio
	52,  // 19: header.CallSetting.options:type_name -> header.CallRoutingAction
	251, // 20: header.CallSetting.invalid_option_message:type_name -> header.GreetingAudio
	52,  // 21: header.CallSetting.menu_fallback:type_name -> header.CallRoutingAction
	251, // 22: header.CallRoutingAction.audio_message:type_name -> header.GreetingAudio
	433, // 23: header.User.ctx:type_name -> common.Context
	46,  // 24: header.User.attributes:type_name -> header.Attribute
	110, // 25: header.User.session:type_name -> header.UserSession
	56,  // 26: header.User.labels:type_name -> header.UserLabel
	104, // 27: header.User.lastest_content_view:type_name -> header.Event
	433, // 28: header.Touchpoint.ctx:type_name -> common.Context
	372, // 29: header.Touchpoint.fields:type_name -> header.KV
	433, // 30: header.ShippingAddresses.ctx:type_name -> common.Context
	331, // 31: header.ShippingAddresses.shipping_addresses:type_name -> header.Address
	433, // 32: header.Label.ctx:type_name -> common.Context
	433, // 33: header.Labels.ctx:type_name -> common.Context
	57,  // 34: header.Labels.labels:type_name -> header.Label
	53,  // 35: header.Users.users:type_name -> header.User
	377, // 36: header.Users.errors:type_name -> header.Error
	434, // 37: header.AttributeDefinitionListItem.i18n_label:type_name -> header.I18nString
	433, // 38: header.AttributeDefinition.ctx:type_name -> common.Context
	434, // 39: header.AttributeDefinition.i18n_label:type_name -> header.I18nString
	62,  // 40: header.AttributeDefinition.items:type_name -> header.AttributeDefinitionListItem
	433, // 41: header.AttributeDefinitions.ctx:type_name -> common.Context
	63,  // 42: header.AttributeDefinitions.attributes:type_name -> header.AttributeDefinition
	433, // 43: header.Note.ctx:type_name -> common.Context
	433, // 44: header.Notes.ctx:type_name -> common.Context
	66,  // 45: header.Notes.notes:type_name -> header.Note
	433, // 46: header.UserNote.ctx:type_name -> common.Context
	433, // 47: header.UserRequest.ctx:type_name -> common.Context
	433, // 48: header.ListNotesRequest.ctx:type_name -> common.Context
	76,  // 49: header.Locations.locations:type_name -> header.Location
	377, // 50: header.Locations.errors:type_name -> header.Error
	74,  // 51: header.UserInfoParams.source:type_name -> header.IdParams
	74,  // 52: header.UserInfoParams.page_id:type_name -> header.IdParams
	74,  // 53: header.UserInfoParams.location_id:type_name -> header.IdParams
	72,  // 54: header.UserInfoParams.view_count:type_name -> header.IntParams
	72,  // 55: header.UserInfoParams.duration:type_name -> header.IntParams
	73,  // 56: header.UserInfoParams.country_code:type_name -> header.StringParams
	73,  // 57: header.UserInfoParams.continent_code:type_name -> header.StringParams
	73,  // 58: header.UserInfoParams.url:type_name -> header.StringParams
	72,  // 59: header.UserInfoParams.time_on_site:type_name -> header.IntParams
	82,  // 60: header.UserEventMetrics.metrics:type_name -> header.UserEventMetric
	85,  // 61: header.UserMetrics.metrics:type_name -> header.UserMetric
	435, // 62: header.UserMetricsRequest.business_hours:type_name -> account.BusinessHours
	435, // 63: header.UserMetricsRequest.not_business_hours:type_name -> account.BusinessHours
	88,  // 64: header.ConversationMetrics.metrics:type_name -> header.ConversationMetric
	435, // 65: header.ConversationMetricsRequest.business_hours:type_name -> account.BusinessHours
	435, // 66: header.ConversationMetricsRequest.not_business_hours:type_name -> account.BusinessHours
	91,  // 67: header.AgentMetrics.metrics:type_name -> header.AgentMetric
	435, // 68: header.AgentMetricsRequest.business_hours:type_name -> account.BusinessHours
	435, // 69: header.AgentMetricsRequest.not_business_hours:type_name -> account.BusinessHours
	76,  // 70: header.LocationMetric.location:type_name -> header.Location
	79,  // 71: header.PageMetric.page:type_name -> header.Page
	85,  // 72: header.UserReport.total_user:type_name -> header.UserMetric
	94,  // 73: header.UserReport.top_source:type_name -> header.SourceMetric
	95,  // 74: header.UserReport.top_location:type_name -> header.LocationMetric
	96,  // 75: header.UserReport.top_page:type_name -> header.PageMetric
	94,  // 76: header.SourceMetrics.source_metrics:type_name -> header.SourceMetric
	95,  // 77: header.LocationMetrics.location_metrics:type_name -> header.LocationMetric
	96,  // 78: header.PageMetrics.page_metrics:type_name -> header.PageMetric
	101, // 79: header.ReportCCU.ccus:type_name -> header.ConcurrentUser
	433, // 80: header.Events.ctx:type_name -> common.Context
	104, // 81: header.Events.events:type_name -> header.Event
	433, // 82: header.Event.ctx:type_name -> common.Context
	436, // 83: header.Event.by:type_name -> common.By
	54,  // 84: header.Event.touchpoint:type_name -> header.Touchpoint
	426, // 85: header.Event.data:type_name -> header.Event.Data
	433, // 86: header.ListUserEventsRequest.ctx:type_name -> common.Context
	433, // 87: header.UserEvent.ctx:type_name -> common.Context
	104, // 88: header.UserEvent.event:type_name -> header.Event
	53,  // 89: header.UserEvent.user:type_name -> header.User
	433, // 90: header.Topic.ctx:type_name -> common.Context
	104, // 91: header.Topic.by_event:type_name -> header.Event
	433, // 92: header.UnreadTopic.ctx:type_name -> common.Context
	104, // 93: header.UnreadTopic.by_event:type_name -> header.Event
	433, // 94: header.UserSession.ctx:type_name -> common.Context
	104, // 95: header.UserSession.start_event:type_name -> header.Event
	104, // 96: header.UserSession.latest_event:type_name -> header.Event
	60,  // 97: header.UserSession.campaigns:type_name -> header.SessionCampaign
	104, // 98: header.UserSession.latest_content_view:type_name -> header.Event
	433, // 99: header.StartRequest.ctx:type_name -> common.Context
	53,  // 100: header.StartRequest.user:type_name -> header.User
	122, // 101: header.StartRequest.members:type_name -> header.ConversationMember
	54,  // 102: header.StartRequest.touchpoint:type_name -> header.Touchpoint
	433, // 103: header.PresencesRequest.ctx:type_name -> common.Context
	433, // 104: header.BotRunRequest.ctx:type_name -> common.Context
	372, // 105: header.BotRunRequest.object_contexts:type_name -> header.KV
	165, // 106: header.BotRunRequest.bot:type_name -> header.Bot
	168, // 107: header.BotRunRequest.action:type_name -> header.BotAction
	104, // 108: header.BotRunRequest.event:type_name -> header.Event
	433, // 109: header.Rule.ctx:type_name -> common.Context
	118, // 110: header.Rule.channel_condition:type_name -> header.ChannelCondition
	117, // 111: header.Rule.timming_condition:type_name -> header.TimmingCondition
	161, // 112: header.Rule.user_conditions:type_name -> header.UserAttributeCondition
	119, // 113: header.ChannelCondition.locations:type_name -> header.LocationCondition
	119, // 114: header.ChannelCondition.not_in_locations:type_name -> header.LocationCondition
	433, // 115: header.Route.ctx:type_name -> common.Context
	116, // 116: header.Route.rules:type_name -> header.Rule
	433, // 117: header.ConversationMember.ctx:type_name -> common.Context
	436, // 118: header.ConversationMember.invited_by:type_name -> common.By
	433, // 119: header.ListConversationsRequest.ctx:type_name -> common.Context
	433, // 120: header.ListConversationEventsRequest.ctx:type_name -> common.Context
	433, // 121: header.Conversation.ctx:type_name -> common.Context
	122, // 122: header.Conversation.members:type_name -> header.ConversationMember
	142, // 123: header.Conversation.tags:type_name -> header.Tag
	54,  // 124: header.Conversation.touchpoint:type_name -> header.Touchpoint
	151, // 125: header.Conversation.integration:type_name -> header.Integration
	130, // 126: header.Conversation.last_message:type_name -> header.Message
	104, // 127: header.Conversation.last_internal_message_sent:type_name -> header.Event
	104, // 128: header.Conversation.last_message_sent:type_name -> header.Event
	104, // 129: header.Conversation.last_event:type_name -> header.Event
	121, // 130: header.Conversation.assigned_to:type_name -> header.RouteResult
	372, // 131: header.Conversation.fields:type_name -> header.KV
	128, // 132: header.Conversation.ratings:type_name -> header.Rating
	104, // 133: header.Conversation.matched_event:type_name -> header.Event
	127, // 134: header.Conversation.call:type_name -> header.CallInfo
	418, // 135: header.Conversation.call_request:type_name -> header.CallDriverRequest
	270, // 136: header.CallInfo.recorded_audio:type_name -> header.File
	433, // 137: header.Conversations.ctx:type_name -> common.Context
	126, // 138: header.Conversations.conversations:type_name -> header.Conversation
	377, // 139: header.Conversations.errors:type_name -> header.Error
	433, // 140: header.Message.ctx:type_name -> common.Context
	137, // 141: header.Message.attachments:type_name -> header.Attachment
	372, // 142: header.Message.fields:type_name -> header.KV
	132, // 143: header.Message.pongs:type_name -> header.MessagePong
	434, // 144: header.Message.i18n_quill_delta:type_name -> header.I18nString
	131, // 145: header.Message.story:type_name -> header.InstagramStory
	434, // 146: header.MessageButton.i18n_title:type_name -> header.I18nString
	133, // 147: header.GenericElementTemplate.default_action:type_name -> header.MessageButton
	133, // 148: header.GenericElementTemplate.buttons:type_name -> header.MessageButton
	434, // 149: header.GenericElementTemplate.i18n_title:type_name -> header.I18nString
	434, // 150: header.GenericElementTemplate.i18n_subtitle:type_name -> header.I18nString
	136, // 151: header.Attachment.elements:type_name -> header.GenericElementTemplate
	133, // 152: header.Attachment.buttons:type_name -> header.MessageButton
	135, // 153: header.Attachment.ask_info:type_name -> header.AskInfomation
	134, // 154: header.Attachment.ask_info_answer:type_name -> header.AskInfomationAnswer
	139, // 155: header.Attachment.form:type_name -> header.MessageForm
	140, // 156: header.Attachment.form_submit:type_name -> header.MessageFormSubmit
	138, // 157: header.Attachment.quick_replies:type_name -> header.QuickReply
	148, // 158: header.Attachment.postback:type_name -> header.Postback
	104, // 159: header.Attachment.quote:type_name -> header.Event
	362, // 160: header.Attachment.product:type_name -> header.Product
	138, // 161: header.Attachment.quick_reply:type_name -> header.QuickReply
	352, // 162: header.Attachment.order:type_name -> header.Order
	270, // 163: header.Attachment.file:type_name -> header.File
	434, // 164: header.QuickReply.i18n_title:type_name -> header.I18nString
	141, // 165: header.MessageForm.fields:type_name -> header.MessageFormField
	141, // 166: header.MessageFormSubmit.fields:type_name -> header.MessageFormField
	433, // 167: header.Tag.ctx:type_name -> common.Context
	433, // 168: header.Template.ctx:type_name -> common.Context
	130, // 169: header.Template.message:type_name -> header.Message
	143, // 170: header.Template.data:type_name -> header.TemplateData
	433, // 171: header.SearchTemplate.ctx:type_name -> common.Context
	433, // 172: header.Templates.ctx:type_name -> common.Context
	144, // 173: header.Templates.templates:type_name -> header.Template
	433, // 174: header.Tags.ctx:type_name -> common.Context
	142, // 175: header.Tags.tags:type_name -> header.Tag
	434, // 176: header.BotPostback.i18n_title:type_name -> header.I18nString
	433, // 177: header.Integrations.ctx:type_name -> common.Context
	151, // 178: header.Integrations.integrations:type_name -> header.Integration
	433, // 179: header.Integration.ctx:type_name -> common.Context
	433, // 180: header.TagRequest.ctx:type_name -> common.Context
	433, // 181: header.AssignRequest.ctx:type_name -> common.Context
	433, // 182: header.EndchatSetting.ctx:type_name -> common.Context
	154, // 183: header.EndchatSetting.connector_settings:type_name -> header.EndchatConnectorSetting
	154, // 184: header.EndchatSetting.global_setting:type_name -> header.EndchatConnectorSetting
	433, // 185: header.ConversationAutomations.ctx:type_name -> common.Context
	157, // 186: header.ConversationAutomations.conversation_automations:type_name -> header.ConversationAutomation
	433, // 187: header.ConversationAutomation.ctx:type_name -> common.Context
	159, // 188: header.ConversationAutomation.conditions:type_name -> header.BotCondition
	168, // 189: header.ConversationAutomation.actions:type_name -> header.BotAction
	119, // 190: header.BotCondition.locations:type_name -> header.LocationCondition
	119, // 191: header.BotCondition.exclude_locations:type_name -> header.LocationCondition
	161, // 192: header.BotCondition.user:type_name -> header.UserAttributeCondition
	160, // 193: header.BotCondition.order:type_name -> header.OrderCondition
	437, // 194: header.OrderCondition.total:type_name -> header.FloatCondition
	119, // 195: header.OrderCondition.shipping:type_name -> header.LocationCondition
	119, // 196: header.OrderCondition.exclude_shipping:type_name -> header.LocationCondition
	433, // 197: header.Sites.ctx:type_name -> common.Context
	164, // 198: header.Sites.sites:type_name -> header.Site
	433, // 199: header.VisitProductSiteRequest.ctx:type_name -> common.Context
	433, // 200: header.Site.ctx:type_name -> common.Context
	433, // 201: header.Bot.ctx:type_name -> common.Context
	168, // 202: header.Bot.action:type_name -> header.BotAction
	158, // 203: header.Bot.triggers:type_name -> header.Trigger
	190, // 204: header.Bot.initiative_frequency:type_name -> header.Frequently
	159, // 205: header.Bot.conditions:type_name -> header.BotCondition
	433, // 206: header.Bots.ctx:type_name -> common.Context
	165, // 207: header.Bots.bots:type_name -> header.Bot
	168, // 208: header.NextBotAction.action:type_name -> header.BotAction
	167, // 209: header.BotAction.nexts:type_name -> header.NextBotAction
	173, // 210: header.BotAction.jump:type_name -> header.ActionJump
	175, // 211: header.BotAction.send_http:type_name -> header.ActionSendHttp
	176, // 212: header.BotAction.ask_question:type_name -> header.ActionAskQuestion
	153, // 213: header.BotAction.assign:type_name -> header.AssignRequest
	172, // 214: header.BotAction.update_conversation:type_name -> header.ActionUpdateConversation
	177, // 215: header.BotAction.update_user:type_name -> header.ActionUpdateUser
	178, // 216: header.BotAction.update_user_labels:type_name -> header.ActionUpdateUserLabels
	170, // 217: header.BotAction.confirm_order:type_name -> header.ActionConfirmOrder
	169, // 218: header.BotAction.create_task:type_name -> header.ActionCreateTask
	171, // 219: header.BotAction.send_chat_transcript:type_name -> header.ActionSendChatTranscript
	399, // 220: header.ActionCreateTask.task:type_name -> header.Task
	130, // 221: header.ActionConfirmOrder.messages:type_name -> header.Message
	130, // 222: header.ActionConfirmOrder.invalid_messages:type_name -> header.Message
	372, // 223: header.ActionUpdateConversation.fields:type_name -> header.KV
	372, // 224: header.ActionSendHttp.header:type_name -> header.KV
	130, // 225: header.ActionAskQuestion.messages:type_name -> header.Message
	130, // 226: header.ActionAskQuestion.resume_message:type_name -> header.Message
	46,  // 227: header.ActionUpdateUser.attr:type_name -> header.Attribute
	46,  // 228: header.ActionUpdateUser.attrs:type_name -> header.Attribute
	179, // 229: header.Metric.submetrics:type_name -> header.Metric
	179, // 230: header.ReportBotResponse.metrics:type_name -> header.Metric
	182, // 231: header.BotrunMetrics.metrics:type_name -> header.BotrunMetric
	185, // 232: header.ActionrunMetrics.metrics:type_name -> header.ActionrunMetric
	433, // 233: header.RealtimeSubscription.ctx:type_name -> common.Context
	104, // 234: header.PollResult.events:type_name -> header.Event
	433, // 235: header.PublishMessage.ctx:type_name -> common.Context
	433, // 236: header.WidgetUser.ctx:type_name -> common.Context
	53,  // 237: header.WidgetUser.user:type_name -> header.User
	433, // 238: header.WidgetUserSetting.ctx:type_name -> common.Context
	438, // 239: header.WidgetUserSetting.account:type_name -> account.Account
	439, // 240: header.WidgetUserSetting.agents:type_name -> account.Agent
	53,  // 241: header.WidgetUserSetting.user:type_name -> header.User
	200, // 242: header.WidgetUserSetting.account_setting:type_name -> header.WidgetSetting
	165, // 243: header.WidgetUserSetting.bots:type_name -> header.Bot
	208, // 244: header.WidgetUserSetting.plugins:type_name -> header.WebPlugin
	331, // 245: header.WidgetUserSetting.addresses:type_name -> header.Address
	344, // 246: header.WidgetUserSetting.payment_methods:type_name -> header.PaymentMethod
	433, // 247: header.AccountWeb.ctx:type_name -> common.Context
	438, // 248: header.AccountWeb.account:type_name -> account.Account
	439, // 249: header.AccountWeb.agents:type_name -> account.Agent
	165, // 250: header.AccountWeb.bots:type_name -> header.Bot
	208, // 251: header.AccountWeb.plugins:type_name -> header.WebPlugin
	344, // 252: header.AccountWeb.payment_methods:type_name -> header.PaymentMethod
	198, // 253: header.WidgetHeader.links:type_name -> header.SocialLink
	433, // 254: header.WidgetSetting.ctx:type_name -> common.Context
	439, // 255: header.WidgetSetting.agents:type_name -> account.Agent
	199, // 256: header.WidgetSetting.header:type_name -> header.WidgetHeader
	203, // 257: header.WidgetSetting.offline_form:type_name -> header.WidgetForm
	203, // 258: header.WidgetSetting.prechat_form:type_name -> header.WidgetForm
	204, // 259: header.WidgetSetting.desktop_button:type_name -> header.WidgetChatButton
	204, // 260: header.WidgetSetting.mobile_button:type_name -> header.WidgetChatButton
	205, // 261: header.WidgetSetting.greeting:type_name -> header.WidgetGreeting
	434, // 262: header.WidgetSetting.caption:type_name -> header.I18nString
	434, // 263: header.WidgetSetting.tagline:type_name -> header.I18nString
	434, // 264: header.WidgetField.i18n_label:type_name -> header.I18nString
	434, // 265: header.WidgetField.i18n_placeholder:type_name -> header.I18nString
	201, // 266: header.WidgetForm.fields:type_name -> header.WidgetField
	202, // 267: header.WidgetForm.groups:type_name -> header.WidgetGroup
	434, // 268: header.WidgetForm.i18n_group_label:type_name -> header.I18nString
	434, // 269: header.WidgetForm.i18n_title:type_name -> header.I18nString
	434, // 270: header.WidgetForm.i18n_question_label:type_name -> header.I18nString
	434, // 271: header.WidgetGreeting.greeting:type_name -> header.I18nString
	130, // 272: header.CampaignNotification.user_email:type_name -> header.Message
	433, // 273: header.WebPlugins.ctx:type_name -> common.Context
	208, // 274: header.WebPlugins.plugins:type_name -> header.WebPlugin
	433, // 275: header.WebPlugin.ctx:type_name -> common.Context
	158, // 276: header.WebPlugin.triggers:type_name -> header.Trigger
	190, // 277: header.WebPlugin.initiative_frequency:type_name -> header.Frequently
	159, // 278: header.WebPlugin.conditions:type_name -> header.BotCondition
	200, // 279: header.WebPlugin.chatbox:type_name -> header.WidgetSetting
	228, // 280: header.WebPlugin.popup:type_name -> header.Popup
	215, // 281: header.WebPlugin.contact:type_name -> header.ContactComponent
	214, // 282: header.WebPlugin.notification:type_name -> header.Notif
	206, // 283: header.WebPlugin.conversion_notification:type_name -> header.CampaignNotification
	434, // 284: header.TextComponent.i18n_html:type_name -> header.I18nString
	434, // 285: header.TextComponent.i18n_quill_delta:type_name -> header.I18nString
	433, // 286: header.NotifProfiles.ctx:type_name -> common.Context
	213, // 287: header.NotifProfiles.profiles:type_name -> header.NotifProfile
	433, // 288: header.NotifProfile.ctx:type_name -> common.Context
	213, // 289: header.Notif.profiles:type_name -> header.NotifProfile
	434, // 290: header.Notif.i18n_title_quill_delta:type_name -> header.I18nString
	230, // 291: header.Notif.title_style:type_name -> header.Style
	434, // 292: header.Notif.i18n_message_quill_deltas:type_name -> header.I18nString
	230, // 293: header.Notif.message_style:type_name -> header.Style
	230, // 294: header.Notif.background_style:type_name -> header.Style
	230, // 295: header.Notif.subtext_style:type_name -> header.Style
	230, // 296: header.Notif.avatar_style:type_name -> header.Style
	427, // 297: header.ContactComponent.buttons:type_name -> header.ContactComponent.ContactButton
	428, // 298: header.CallContactComponent.hotlines:type_name -> header.CallContactComponent.Hotline
	429, // 299: header.MapContactComponent.locations:type_name -> header.MapContactComponent.Location
	434, // 300: header.WebPluginFormField.i18n_label:type_name -> header.I18nString
	430, // 301: header.WebPluginFormField.options:type_name -> header.WebPluginFormField.WebPluginFormFieldOption
	434, // 302: header.WebPluginFormField.i18n_placeholder:type_name -> header.I18nString
	222, // 303: header.WebPluginForm.fields:type_name -> header.WebPluginFormField
	238, // 304: header.ButtonsComponent.primary_actions:type_name -> header.PopupButtonAction
	434, // 305: header.ButtonsComponent.i18n_primary_text:type_name -> header.I18nString
	238, // 306: header.ButtonsComponent.secondary_actions:type_name -> header.PopupButtonAction
	434, // 307: header.ButtonsComponent.i18n_secondary_text:type_name -> header.I18nString
	230, // 308: header.WebPluginComponent.style:type_name -> header.Style
	230, // 309: header.WebPluginComponent.mobile_style:type_name -> header.Style
	209, // 310: header.WebPluginComponent.text:type_name -> header.TextComponent
	224, // 311: header.WebPluginComponent.buttons:type_name -> header.ButtonsComponent
	221, // 312: header.WebPluginComponent.countdown:type_name -> header.CountdownComponent
	223, // 313: header.WebPluginComponent.form:type_name -> header.WebPluginForm
	229, // 314: header.WebPluginComponent.link:type_name -> header.LinkComponent
	211, // 315: header.WebPluginComponent.image:type_name -> header.ImageComponent
	210, // 316: header.WebPluginComponent.line:type_name -> header.LineComponent
	227, // 317: header.WebPluginComponent.social_buttons:type_name -> header.SocialButtonsComponent
	226, // 318: header.WebPluginComponent.follow_facebook:type_name -> header.FollowFacebookComponent
	231, // 319: header.Popup.pages:type_name -> header.PopupPage
	230, // 320: header.Style.hover:type_name -> header.Style
	225, // 321: header.PopupPage.components:type_name -> header.WebPluginComponent
	230, // 322: header.PopupPage.style:type_name -> header.Style
	230, // 323: header.PopupPage.mobile_style:type_name -> header.Style
	239, // 324: header.PopupPage.background_click:type_name -> header.ButtonComponent
	433, // 325: header.Impression.ctx:type_name -> common.Context
	440, // 326: header.Impression.device:type_name -> common.Device
	433, // 327: header.ConversionRequest.ctx:type_name -> common.Context
	433, // 328: header.Conversions.ctx:type_name -> common.Context
	235, // 329: header.Conversions.conversions:type_name -> header.Conversion
	433, // 330: header.Conversion.ctx:type_name -> common.Context
	440, // 331: header.Conversion.device:type_name -> common.Device
	237, // 332: header.Conversion.submission:type_name -> header.CampaignSubmission
	53,  // 333: header.Conversion.user:type_name -> header.User
	433, // 334: header.UserCampaignStatus.ctx:type_name -> common.Context
	433, // 335: header.CampaignSubmission.ctx:type_name -> common.Context
	201, // 336: header.CampaignSubmission.fields:type_name -> header.WidgetField
	238, // 337: header.ButtonComponent.actions:type_name -> header.PopupButtonAction
	433, // 338: header.ReportCampaignRequest.ctx:type_name -> common.Context
	433, // 339: header.ReportCampaignResponse.ctx:type_name -> common.Context
	433, // 340: header.ReportWebPluginRequest.ctx:type_name -> common.Context
	433, // 341: header.ReportWebPluginResponse.ctx:type_name -> common.Context
	244, // 342: header.ReportWebPluginResponse.metrics:type_name -> header.WebPluginMetric
	433, // 343: header.WebPluginConversionRequest.ctx:type_name -> common.Context
	433, // 344: header.SearchLocationsRequest.ctx:type_name -> common.Context
	433, // 345: header.GreetingAudios.ctx:type_name -> common.Context
	251, // 346: header.GreetingAudios.greeting_audios:type_name -> header.GreetingAudio
	433, // 347: header.GreetingAudio.ctx:type_name -> common.Context
	270, // 348: header.GreetingAudio.file:type_name -> header.File
	433, // 349: header.UploadedImage.ctx:type_name -> common.Context
	433, // 350: header.UploadedImages.ctx:type_name -> common.Context
	252, // 351: header.UploadedImages.images:type_name -> header.UploadedImage
	433, // 352: header.Clients.ctx:type_name -> common.Context
	255, // 353: header.Clients.clients:type_name -> header.Client
	433, // 354: header.Client.ctx:type_name -> common.Context
	433, // 355: header.Webhooks.ctx:type_name -> common.Context
	258, // 356: header.Webhooks.webhooks:type_name -> header.Webhook
	433, // 357: header.Webhook.ctx:type_name -> common.Context
	257, // 358: header.Webhook.old_secret:type_name -> header.WebhookSecret
	433, // 359: header.WebhookDeliveries.ctx:type_name -> common.Context
	260, // 360: header.WebhookDeliveries.deliveries:type_name -> header.WebhookDelivery
	433, // 361: header.WebhookDelivery.ctx:type_name -> common.Context
	372, // 362: header.WebhookDelivery.resquest_headers:type_name -> header.KV
	372, // 363: header.WebhookDelivery.response_headers:type_name -> header.KV
	433, // 364: header.RecentIndexDeliveryRequest.ctx:type_name -> common.Context
	433, // 365: header.DeliveryRequest.ctx:type_name -> common.Context
	433, // 366: header.WebhookPayload.ctx:type_name -> common.Context
	433, // 367: header.WebhookTestResult.ctx:type_name -> common.Context
	433, // 368: header.Email.ctx:type_name -> common.Context
	431, // 369: header.Email.header:type_name -> header.Email.HeaderEntry
	266, // 370: header.Email.attachments:type_name -> header.EmailAttachment
	433, // 371: header.FileHeader.ctx:type_name -> common.Context
	433, // 372: header.PresignResult.ctx:type_name -> common.Context
	433, // 373: header.FileRequest.ctx:type_name -> common.Context
	433, // 374: header.File.ctx:type_name -> common.Context
	433, // 375: header.BotTerminated.ctx:type_name -> common.Context
	433, // 376: header.BlacklistIP.ctx:type_name -> common.Context
	433, // 377: header.BannedUser.ctx:type_name -> common.Context
	433, // 378: header.LoginSessions.ctx:type_name -> common.Context
	275, // 379: header.LoginSessions.sessions:type_name -> header.LoginSession
	433, // 380: header.LoginSession.ctx:type_name -> common.Context
	440, // 381: header.LoginSession.device:type_name -> common.Device
	76,  // 382: header.LoginSession.location:type_name -> header.Location
	433, // 383: header.ScryptChallenge.ctx:type_name -> common.Context
	433, // 384: header.SearchRequest.ctx:type_name -> common.Context
	433, // 385: header.FbFanpageSetting.ctx:type_name -> common.Context
	282, // 386: header.FbFanpageSetting.general_comment_setting:type_name -> header.FbCommentSetting
	282, // 387: header.FbFanpageSetting.specific_post_comment_setting:type_name -> header.FbCommentSetting
	433, // 388: header.FbFanpageSettings.ctx:type_name -> common.Context
	280, // 389: header.FbFanpageSettings.settings:type_name -> header.FbFanpageSetting
	279, // 390: header.FbCommentSetting.comments:type_name -> header.FbComment
	130, // 391: header.FbCommentSetting.message:type_name -> header.Message
	130, // 392: header.FbCommentSetting.message_for_comments_contain_phone_email_or_address:type_name -> header.Message
	130, // 393: header.FbCommentSetting.message_for_comments_contain_keyword:type_name -> header.Message
	433, // 394: header.FacebookPosts.ctx:type_name -> common.Context
	293, // 395: header.FacebookPosts.posts:type_name -> header.FacebookPost
	284, // 396: header.FacebookPostAttachmentMedia.image:type_name -> header.FacebookPostAttachmentMediaImage
	285, // 397: header.FacebookPostAttachment.media:type_name -> header.FacebookPostAttachmentMedia
	286, // 398: header.FacebookPostAttachemnts.data:type_name -> header.FacebookPostAttachment
	293, // 399: header.FbFacebookPosts.data:type_name -> header.FacebookPost
	291, // 400: header.FbFacebookPosts.paging:type_name -> header.FacebookPaging
	290, // 401: header.FacebookPaging.cursors:type_name -> header.FacebookPagingCursor
	433, // 402: header.InstagramMedia.ctx:type_name -> common.Context
	433, // 403: header.FacebookPost.ctx:type_name -> common.Context
	288, // 404: header.FacebookPost.from:type_name -> header.FacebookPostFrom
	287, // 405: header.FacebookPost.attachments:type_name -> header.FacebookPostAttachemnts
	433, // 406: header.UserOrderConfirmation.ctx:type_name -> common.Context
	352, // 407: header.UserOrderConfirmation.order:type_name -> header.Order
	433, // 408: header.Webpage.ctx:type_name -> common.Context
	372, // 409: header.Webpage.headers:type_name -> header.KV
	304, // 410: header.Webpage.reports:type_name -> header.WebpageReportDataPoint
	433, // 411: header.Webpages.ctx:type_name -> common.Context
	296, // 412: header.Webpages.webpages:type_name -> header.Webpage
	433, // 413: header.WebpageCheck.ctx:type_name -> common.Context
	372, // 414: header.WebpageCheck.request_headers:type_name -> header.KV
	372, // 415: header.WebpageCheck.response_headers:type_name -> header.KV
	433, // 416: header.RecentWebpageCheckRequest.ctx:type_name -> common.Context
	433, // 417: header.WebpageChecks.ctx:type_name -> common.Context
	298, // 418: header.WebpageChecks.checks:type_name -> header.WebpageCheck
	433, // 419: header.WebpageCheckRequest.ctx:type_name -> common.Context
	304, // 420: header.WebpageReportDataSet.points:type_name -> header.WebpageReportDataPoint
	433, // 421: header.WebpageReportRequest.ctx:type_name -> common.Context
	433, // 422: header.LangMessage.ctx:type_name -> common.Context
	433, // 423: header.Lang.ctx:type_name -> common.Context
	306, // 424: header.Lang.messages:type_name -> header.LangMessage
	433, // 425: header.Locale.ctx:type_name -> common.Context
	309, // 426: header.ListChangelogsResponse.changelogs:type_name -> header.Changelog
	438, // 427: header.AccountImage.img:type_name -> account.Account
	439, // 428: header.AccountImage.owner:type_name -> account.Agent
	433, // 429: header.UserViews.ctx:type_name -> common.Context
	314, // 430: header.UserViews.views:type_name -> header.UserView
	433, // 431: header.UserView.ctx:type_name -> common.Context
	315, // 432: header.UserView.condition:type_name -> header.UserViewCondition
	433, // 433: header.UserViewCondition.ctx:type_name -> common.Context
	441, // 434: header.UserViewCondition.text:type_name -> header.TextCondition
	442, // 435: header.UserViewCondition.boolean:type_name -> header.BoolCondition
	437, // 436: header.UserViewCondition.number:type_name -> header.FloatCondition
	443, // 437: header.UserViewCondition.datetime:type_name -> header.DatetimeCondition
	315, // 438: header.UserViewCondition.all:type_name -> header.UserViewCondition
	315, // 439: header.UserViewCondition.one:type_name -> header.UserViewCondition
	433, // 440: header.ReportResponse.ctx:type_name -> common.Context
	433, // 441: header.AvailibilityReportRequest.ctx:type_name -> common.Context
	433, // 442: header.FileUrlDownloadRequest.ctx:type_name -> common.Context
	433, // 443: header.PushNoti.ctx:type_name -> common.Context
	436, // 444: header.PushNoti.tos:type_name -> common.By
	434, // 445: header.InvoiceTemplate.i18n_terms_and_conditions:type_name -> header.I18nString
	434, // 446: header.InvoiceTemplate.i18n_tagline:type_name -> header.I18nString
	434, // 447: header.InvoiceTemplate.i18n_signature:type_name -> header.I18nString
	433, // 448: header.ShopSetting.ctx:type_name -> common.Context
	323, // 449: header.ShopSetting.other_currencies:type_name -> header.Currency
	331, // 450: header.ShopSetting.addresses:type_name -> header.Address
	375, // 451: header.ShopSetting.taxes:type_name -> header.Tax
	344, // 452: header.ShopSetting.payment_methods:type_name -> header.PaymentMethod
	320, // 453: header.ShopSetting.invoice_template:type_name -> header.InvoiceTemplate
	378, // 454: header.ShopSetting.shopee_shops:type_name -> header.ShopeeShop
	342, // 455: header.ShopSetting.shippings:type_name -> header.IntegratedShipping
	341, // 456: header.ShopSetting.shipping_policies:type_name -> header.ShippingPolicy
	357, // 457: header.ShopSetting.cancellation_codes:type_name -> header.CancellationCode
	433, // 458: header.Addresses.ctx:type_name -> common.Context
	331, // 459: header.Addresses.addresses:type_name -> header.Address
	433, // 460: header.Currency.ctx:type_name -> common.Context
	324, // 461: header.Currency.logs:type_name -> header.CurrencyLogEntry
	433, // 462: header.ProductCollections.ctx:type_name -> common.Context
	326, // 463: header.ProductCollections.product_collections:type_name -> header.ProductCollection
	433, // 464: header.ProductCollection.ctx:type_name -> common.Context
	433, // 465: header.InventoryProduct.ctx:type_name -> common.Context
	362, // 466: header.InventoryProduct.ref_product:type_name -> header.Product
	372, // 467: header.InventoryProduct.props:type_name -> header.KV
	362, // 468: header.OrderItem.product:type_name -> header.Product
	375, // 469: header.OrderItem.tax:type_name -> header.Tax
	433, // 470: header.Address.ctx:type_name -> common.Context
	330, // 471: header.Address.ghn:type_name -> header.GHNAddress
	331, // 472: header.Address.ghtk:type_name -> header.Address
	334, // 473: header.GHNOrder.items:type_name -> header.GHNOrderItem
	331, // 474: header.ShippingInfo.address:type_name -> header.Address
	331, // 475: header.ShippingInfo.pickup_address:type_name -> header.Address
	375, // 476: header.ShippingInfo.tax:type_name -> header.Tax
	337, // 477: header.ShippingInfo.data:type_name -> header.ShippingData
	339, // 478: header.ShippingData.ghtk:type_name -> header.GHTKShippingData
	338, // 479: header.ShippingData.ghn:type_name -> header.GHNShippingData
	433, // 480: header.ShippingPolicies.ctx:type_name -> common.Context
	341, // 481: header.ShippingPolicies.shipping_policies:type_name -> header.ShippingPolicy
	433, // 482: header.ShippingPolicy.ctx:type_name -> common.Context
	433, // 483: header.IntegratedShipping.ctx:type_name -> common.Context
	331, // 484: header.IntegratedShipping.address:type_name -> header.Address
	433, // 485: header.IntegratedShippings.ctx:type_name -> common.Context
	342, // 486: header.IntegratedShippings.integrated_shippings:type_name -> header.IntegratedShipping
	433, // 487: header.PaymentMethod.ctx:type_name -> common.Context
	433, // 488: header.PaymentMethods.ctx:type_name -> common.Context
	344, // 489: header.PaymentMethods.payment_methods:type_name -> header.PaymentMethod
	435, // 490: header.OrderMetricsRequest.business_hours:type_name -> account.BusinessHours
	435, // 491: header.OrderMetricsRequest.not_business_hours:type_name -> account.BusinessHours
	433, // 492: header.Orders.ctx:type_name -> common.Context
	346, // 493: header.Orders.metrics:type_name -> header.OrderMetric
	352, // 494: header.Orders.orders:type_name -> header.Order
	433, // 495: header.OrdersRequest.ctx:type_name -> common.Context
	433, // 496: header.DownloadOrderRequest.ctx:type_name -> common.Context
	352, // 497: header.DownloadOrderRequest.order:type_name -> header.Order
	320, // 498: header.DownloadOrderRequest.template:type_name -> header.InvoiceTemplate
	433, // 499: header.Order.ctx:type_name -> common.Context
	336, // 500: header.Order.shipping:type_name -> header.ShippingInfo
	344, // 501: header.Order.payment_method:type_name -> header.PaymentMethod
	329, // 502: header.Order.items:type_name -> header.OrderItem
	53,  // 503: header.Order.user:type_name -> header.User
	432, // 504: header.Order.fields:type_name -> header.Order.FieldsEntry
	354, // 505: header.Order.agents:type_name -> header.OrderAgent
	353, // 506: header.Order.stages:type_name -> header.OrderPipelineStage
	433, // 507: header.OrderPipelineStage.ctx:type_name -> common.Context
	399, // 508: header.OrderPipelineStage.tasks:type_name -> header.Task
	433, // 509: header.OrderAgent.ctx:type_name -> common.Context
	433, // 510: header.Bill.ctx:type_name -> common.Context
	433, // 511: header.CancellationCodes.ctx:type_name -> common.Context
	357, // 512: header.CancellationCodes.cancellation_codes:type_name -> header.CancellationCode
	433, // 513: header.CancellationCode.ctx:type_name -> common.Context
	433, // 514: header.OrderPipelineUpdated.ctx:type_name -> common.Context
	433, // 515: header.OrderStatusUpdated.ctx:type_name -> common.Context
	104, // 516: header.OrderHistoryEntry.event:type_name -> header.Event
	104, // 517: header.OrderHistoryEntry.ref_comment:type_name -> header.Event
	433, // 518: header.OrderHistoryEntries.ctx:type_name -> common.Context
	360, // 519: header.OrderHistoryEntries.entries:type_name -> header.OrderHistoryEntry
	433, // 520: header.Product.ctx:type_name -> common.Context
	362, // 521: header.Product.other_variants:type_name -> header.Product
	434, // 522: header.Product.i18n_name:type_name -> header.I18nString
	434, // 523: header.Product.i18n_description:type_name -> header.I18nString
	434, // 524: header.Product.i18n_long_description_quill_delta:type_name -> header.I18nString
	372, // 525: header.Product.props:type_name -> header.KV
	364, // 526: header.Product.options:type_name -> header.ProductOption
	327, // 527: header.Product.price_rules:type_name -> header.PriceRule
	363, // 528: header.Product.inventories:type_name -> header.ProductInventory
	375, // 529: header.Product.tax:type_name -> header.Tax
	133, // 530: header.Product.buttons:type_name -> header.MessageButton
	433, // 531: header.Products.ctx:type_name -> common.Context
	362, // 532: header.Products.products:type_name -> header.Product
	433, // 533: header.ProductFeeds.ctx:type_name -> common.Context
	370, // 534: header.ProductFeeds.product_feeds:type_name -> header.ProductFeed
	433, // 535: header.ProductFeed.ctx:type_name -> common.Context
	368, // 536: header.ProductFeed.shopee:type_name -> header.ShopeeProductFeed
	367, // 537: header.ProductFeed.website:type_name -> header.WebsiteProductFeed
	366, // 538: header.ProductFeed.google_sheet:type_name -> header.GoogleSheetProductFeed
	433, // 539: header.ProductsRequest.ctx:type_name -> common.Context
	372, // 540: header.ProductsRequest.props:type_name -> header.KV
	372, // 541: header.KV.kvs:type_name -> header.KV
	433, // 542: header.ProductCategories.ctx:type_name -> common.Context
	433, // 543: header.ProductProps.ctx:type_name -> common.Context
	372, // 544: header.ProductProps.props:type_name -> header.KV
	433, // 545: header.Tax.ctx:type_name -> common.Context
	434, // 546: header.Tax.i18n_name:type_name -> header.I18nString
	433, // 547: header.Taxes.ctx:type_name -> common.Context
	375, // 548: header.Taxes.taxes:type_name -> header.Tax
	433, // 549: header.ShopeeShop.ctx:type_name -> common.Context
	433, // 550: header.AuthorizeShopeeRequest.ctx:type_name -> common.Context
	433, // 551: header.ShopeeSyncProductRequest.ctx:type_name -> common.Context
	433, // 552: header.ShopeeSyncProductResponse.ctx:type_name -> common.Context
	433, // 553: header.AddressAutocompleteRequest.ctx:type_name -> common.Context
	433, // 554: header.AddressAutocompleteResponses.ctx:type_name -> common.Context
	384, // 555: header.AddressAutocompleteResponses.responses:type_name -> header.AddressAutocompleteResponse
	433, // 556: header.AddressAutocompleteResponse.ctx:type_name -> common.Context
	385, // 557: header.AddressAutocompleteResponse.matched_substrings:type_name -> header.Substring
	433, // 558: header.RateLimitSyncRequest.ctx:type_name -> common.Context
	388, // 559: header.RateLimitSyncRequest.new_entities:type_name -> header.RateLimitEntity
	433, // 560: header.RateLimitSyncResponse.ctx:type_name -> common.Context
	388, // 561: header.RateLimitSyncResponse.entities:type_name -> header.RateLimitEntity
	389, // 562: header.RateLimitEntity.windows:type_name -> header.RateLimitWindow
	433, // 563: header.CompactedUser.ctx:type_name -> common.Context
	392, // 564: header.CompactedUser.fullname:type_name -> header.CompactedAttribute
	392, // 565: header.CompactedUser.phone:type_name -> header.CompactedAttribute
	392, // 566: header.CompactedUser.email:type_name -> header.CompactedAttribute
	392, // 567: header.CompactedUser.attributes:type_name -> header.CompactedAttribute
	56,  // 568: header.CompactedUser.labels:type_name -> header.UserLabel
	110, // 569: header.CompactedUser.session:type_name -> header.UserSession
	390, // 570: header.CompactedUsers.users:type_name -> header.CompactedUser
	377, // 571: header.CompactedUsers.errors:type_name -> header.Error
	394, // 572: header.PipelineStage.routes:type_name -> header.PipelineRule
	399, // 573: header.PipelineStage.tasks:type_name -> header.Task
	433, // 574: header.PipelineRule.ctx:type_name -> common.Context
	159, // 575: header.PipelineRule.conditions:type_name -> header.BotCondition
	433, // 576: header.Pipelines.ctx:type_name -> common.Context
	396, // 577: header.Pipelines.pipelines:type_name -> header.Pipeline
	433, // 578: header.Pipeline.ctx:type_name -> common.Context
	393, // 579: header.Pipeline.stages:type_name -> header.PipelineStage
	433, // 580: header.TasksRequest.ctx:type_name -> common.Context
	433, // 581: header.Tasks.ctx:type_name -> common.Context
	399, // 582: header.Tasks.tasks:type_name -> header.Task
	433, // 583: header.Task.ctx:type_name -> common.Context
	104, // 584: header.Task.data_email:type_name -> header.Event
	104, // 585: header.TaskHistoryEntry.event:type_name -> header.Event
	104, // 586: header.TaskHistoryEntry.ref_comment:type_name -> header.Event
	433, // 587: header.TaskHistoryEntries.ctx:type_name -> common.Context
	400, // 588: header.TaskHistoryEntries.entries:type_name -> header.TaskHistoryEntry
	433, // 589: header.AgentGroups.ctx:type_name -> common.Context
	403, // 590: header.AgentGroups.Groups:type_name -> header.AgentGroup
	433, // 591: header.AgentGroup.ctx:type_name -> common.Context
	433, // 592: header.DocIndexRequest.ctx:type_name -> common.Context
	433, // 593: header.DocSearchRequest.ctx:type_name -> common.Context
	433, // 594: header.DocSearchResponse.ctx:type_name -> common.Context
	406, // 595: header.DocSearchResponse.hits:type_name -> header.DocHit
	433, // 596: header.ZaloCodeChallenge.ctx:type_name -> common.Context
	433, // 597: header.ConversationModal.ctx:type_name -> common.Context
	433, // 598: header.ConversationModals.ctx:type_name -> common.Context
	410, // 599: header.ConversationModals.conversation_modals:type_name -> header.ConversationModal
	433, // 600: header.ConversationModalPickRequest.ctx:type_name -> common.Context
	433, // 601: header.ConversationModalPicked.ctx:type_name -> common.Context
	433, // 602: header.EmailBlocks.ctx:type_name -> common.Context
	415, // 603: header.EmailBlocks.email_blocks:type_name -> header.EmailBlock
	433, // 604: header.EmailBlock.ctx:type_name -> common.Context
	433, // 605: header.FacebookPageRegister.ctx:type_name -> common.Context
	433, // 606: header.CallDriverRequest.ctx:type_name -> common.Context
	49,  // 607: header.CallDriverRequest.phone_device:type_name -> header.PhoneDevice
	49,  // 608: header.CallDriverResponse.phone_device:type_name -> header.PhoneDevice
	127, // 609: header.CallDriverResponse.call:type_name -> header.CallInfo
	433, // 610: header.BlockedNumbers.ctx:type_name -> common.Context
	421, // 611: header.BlockedNumbers.blocked_numbers:type_name -> header.BlockedNumber
	433, // 612: header.BlockedNumber.ctx:type_name -> common.Context
	423, // 613: header.TextToSpeech.speeches:type_name -> header.TTSVoiceSelection
	433, // 614: header.BusinessHours.ctx:type_name -> common.Context
	424, // 615: header.BusinessHours.week_days:type_name -> header.BusinessHour
	424, // 616: header.BusinessHours.extra_hours:type_name -> header.BusinessHour
	424, // 617: header.BusinessHours.holidays:type_name -> header.BusinessHour
	438, // 618: header.Event.Data.account:type_name -> account.Account
	439, // 619: header.Event.Data.agent:type_name -> account.Agent
	130, // 620: header.Event.Data.message:type_name -> header.Message
	126, // 621: header.Event.Data.conversation:type_name -> header.Conversation
	362, // 622: header.Event.Data.product:type_name -> header.Product
	108, // 623: header.Event.Data.topic:type_name -> header.Topic
	444, // 624: header.Event.Data.presence:type_name -> account.Presence
	53,  // 625: header.Event.Data.user:type_name -> header.User
	109, // 626: header.Event.Data.unread_topic:type_name -> header.UnreadTopic
	44,  // 627: header.Event.Data.notification:type_name -> header.Notification
	403, // 628: header.Event.Data.agent_group:type_name -> header.AgentGroup
	66,  // 629: header.Event.Data.note:type_name -> header.Note
	104, // 630: header.Event.Data.event:type_name -> header.Event
	445, // 631: header.Event.Data.notification_setting:type_name -> noti5.Setting
	116, // 632: header.Event.Data.rule:type_name -> header.Rule
	63,  // 633: header.Event.Data.user_attribute:type_name -> header.AttributeDefinition
	142, // 634: header.Event.Data.tag:type_name -> header.Tag
	85,  // 635: header.Event.Data.total_user:type_name -> header.UserMetric
	165, // 636: header.Event.Data.bot:type_name -> header.Bot
	115, // 637: header.Event.Data.bot_run_response:type_name -> header.BotRunResponse
	151, // 638: header.Event.Data.integration:type_name -> header.Integration
	271, // 639: header.Event.Data.bot_terminated:type_name -> header.BotTerminated
	258, // 640: header.Event.Data.webhook:type_name -> header.Webhook
	47,  // 641: header.Event.Data.user_alias:type_name -> header.UserAlias
	235, // 642: header.Event.Data.conversion:type_name -> header.Conversion
	164, // 643: header.Event.Data.site:type_name -> header.Site
	298, // 644: header.Event.Data.webpage_check:type_name -> header.WebpageCheck
	306, // 645: header.Event.Data.language_message:type_name -> header.LangMessage
	57,  // 646: header.Event.Data.label:type_name -> header.Label
	314, // 647: header.Event.Data.user_view:type_name -> header.UserView
	275, // 648: header.Event.Data.login_session:type_name -> header.LoginSession
	370, // 649: header.Event.Data.product_feed:type_name -> header.ProductFeed
	326, // 650: header.Event.Data.product_collection:type_name -> header.ProductCollection
	352, // 651: header.Event.Data.order:type_name -> header.Order
	323, // 652: header.Event.Data.currency:type_name -> header.Currency
	321, // 653: header.Event.Data.shop_setting:type_name -> header.ShopSetting
	331, // 654: header.Event.Data.shipping_address:type_name -> header.Address
	359, // 655: header.Event.Data.order_status:type_name -> header.OrderStatusUpdated
	355, // 656: header.Event.Data.bill:type_name -> header.Bill
	352, // 657: header.Event.Data.order_from:type_name -> header.Order
	104, // 658: header.Event.Data.current:type_name -> header.Event
	360, // 659: header.Event.Data.order_history_entry:type_name -> header.OrderHistoryEntry
	294, // 660: header.Event.Data.user_order_confirmation:type_name -> header.UserOrderConfirmation
	396, // 661: header.Event.Data.pipeline:type_name -> header.Pipeline
	358, // 662: header.Event.Data.order_pipeline_updated:type_name -> header.OrderPipelineUpdated
	399, // 663: header.Event.Data.task:type_name -> header.Task
	400, // 664: header.Event.Data.task_history_entry:type_name -> header.TaskHistoryEntry
	353, // 665: header.Event.Data.order_pipeline_stage:type_name -> header.OrderPipelineStage
	410, // 666: header.Event.Data.conversation_modal:type_name -> header.ConversationModal
	157, // 667: header.Event.Data.conversation_automation:type_name -> header.ConversationAutomation
	49,  // 668: header.Event.Data.phone_device:type_name -> header.PhoneDevice
	51,  // 669: header.Event.Data.call_setting:type_name -> header.CallSetting
	421, // 670: header.Event.Data.blocked_number:type_name -> header.BlockedNumber
	127, // 671: header.Event.Data.call_info:type_name -> header.CallInfo
	418, // 672: header.Event.Data.call_request:type_name -> header.CallDriverRequest
	251, // 673: header.Event.Data.greeting_audio:type_name -> header.GreetingAudio
	217, // 674: header.ContactComponent.ContactButton.zalo:type_name -> header.ZaloContactComponent
	216, // 675: header.ContactComponent.ContactButton.facebook:type_name -> header.FacebookContactComponent
	218, // 676: header.ContactComponent.ContactButton.call:type_name -> header.CallContactComponent
	219, // 677: header.ContactComponent.ContactButton.chat:type_name -> header.ChatContactComponent
	220, // 678: header.ContactComponent.ContactButton.map:type_name -> header.MapContactComponent
	434, // 679: header.WebPluginFormField.WebPluginFormFieldOption.i18n_label:type_name -> header.I18nString
	680, // [680:680] is the sub-list for method output_type
	680, // [680:680] is the sub-list for method input_type
	680, // [680:680] is the sub-list for extension type_name
	680, // [680:680] is the sub-list for extension extendee
	0,   // [0:680] is the sub-list for field type_name
}

func init() { file_header_proto_init() }
func file_header_proto_init() {
	if File_header_proto != nil {
		return
	}
	file_type_proto_init()
	file_locale_generated_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_header_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Id); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ids); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notifications); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNotiRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAlias); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhoneDevices); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhoneDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallRoutingAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Touchpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShippingAddresses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Label); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Labels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Users); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionCampaign); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributeDefinitionListItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributeDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributeDefinitions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserCreateResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Note); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserNote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNotesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Locations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Page); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfoParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Key); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEventMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEventMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEventMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConcurrentUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportCCU); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Events); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Topic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnreadTopic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PresencesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PresencesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BotRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BotRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimmingCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConversationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConversationEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conversation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rating); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conversations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstagramStory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessagePong); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageButton); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AskInfomationAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AskInfomation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericElementTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuickReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageForm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageFormSubmit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageFormField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Template); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Templates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Postback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BotPostback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Integrations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Integration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndchatConnectorSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndchatSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationAutomations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationAutomation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BotCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAttributeCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sites); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VisitProductSiteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Site); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bots); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextBotAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BotAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionCreateTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionConfirmOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionSendChatTranscript); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionUpdateConversation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionJump); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionSwitchLanguage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionSendHttp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionAskQuestion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionUpdateUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionUpdateUserLabels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportBotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportBotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BotrunMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BotrunMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BotrunMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionrunMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionrunMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionrunMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListObjectsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListObjectsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Frequently); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealtimeSubscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealtimeToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WidgetUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WidgetUserSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountWeb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SocialLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WidgetHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WidgetSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WidgetField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WidgetGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WidgetForm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WidgetChatButton); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WidgetGreeting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CampaignNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebPlugins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebPlugin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LineComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifProfiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notif); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FacebookContactComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZaloContactComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallContactComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatContactComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapContactComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountdownComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebPluginFormField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebPluginForm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ButtonsComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebPluginComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FollowFacebookComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SocialButtonsComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Popup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Style); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PopupPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Impression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conversions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conversion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserCampaignStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CampaignSubmission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PopupButtonAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ButtonComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImpressionCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversionCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportCampaignRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportCampaignResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebPluginMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportWebPluginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportWebPluginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebPluginConversionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversionsExported); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchLocationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GreetingAudios); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GreetingAudio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadedImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadedImages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Clients); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Client); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Webhooks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookSecret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Webhook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookDeliveries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookDelivery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecentIndexDeliveryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliveryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookTestResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Email); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PresignResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BotTerminated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlacklistIP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BannedUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginSessions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScryptChallenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbComment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbFanpageSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbFanpageSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbCommentSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FacebookPosts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FacebookPostAttachmentMediaImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FacebookPostAttachmentMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FacebookPostAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FacebookPostAttachemnts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FacebookPostFrom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FbFacebookPosts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FacebookPagingCursor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FacebookPaging); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstagramMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FacebookPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserOrderConfirmation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionCookie); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Webpage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[257].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Webpages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebpageCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[259].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecentWebpageCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[260].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebpageChecks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[261].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebpageCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[262].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebpageReportDataSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[263].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebpageReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[264].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebpageReportDataPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[265].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Urls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[266].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LangMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[267].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lang); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[268].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Locale); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[269].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Changelog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[270].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListChangelogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[271].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListChangelogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[272].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[273].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserViews); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[274].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[275].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserViewCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[276].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[277].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailibilityReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[278].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileUrlDownloadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[279].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushNoti); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[280].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvoiceTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[281].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShopSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[282].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Addresses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[283].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Currency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[284].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyLogEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[285].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductCollections); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[286].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[287].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[288].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InventoryProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[289].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[290].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GHNAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[291].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[292].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GHNOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[293].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GHNOrder2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[294].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GHNOrderItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[295].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GHTKOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[296].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShippingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[297].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShippingData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[298].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GHNShippingData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[299].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GHTKShippingData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[300].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShippingPolicies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[301].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShippingPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[302].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntegratedShipping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[303].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntegratedShippings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[304].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[305].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentMethods); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[306].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[307].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[308].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDraftOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[309].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Orders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[310].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[311].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[312].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[313].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderPipelineStage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[314].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderAgent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[315].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[316].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancellationCodes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[317].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancellationCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[318].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderPipelineUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[319].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderStatusUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[320].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderHistoryEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[321].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderHistoryEntries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[322].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[323].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductInventory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[324].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[325].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Products); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[326].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleSheetProductFeed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[327].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebsiteProductFeed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[328].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShopeeProductFeed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[329].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductFeeds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[330].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductFeed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[331].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[332].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[333].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductCategories); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[334].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductProps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[335].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tax); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[336].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Taxes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[337].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[338].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShopeeShop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[339].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizeShopeeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[340].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShopeeSyncProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[341].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShopeeSyncProductResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[342].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressAutocompleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[343].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressAutocompleteResponses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[344].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressAutocompleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[345].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Substring); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[346].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimitSyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[347].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimitSyncResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[348].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimitEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[349].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimitWindow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[350].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompactedUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[351].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompactedUsers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[352].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompactedAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[353].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineStage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[354].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[355].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pipelines); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[356].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pipeline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[357].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[358].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tasks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[359].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[360].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskHistoryEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[361].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskHistoryEntries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[362].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentGroups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[363].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[364].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[365].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[366].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocHit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[367].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocSearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[368].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[369].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZaloCodeChallenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[370].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationModal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[371].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationModals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[372].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationModalPickRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[373].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationModalPicked); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[374].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailBlocks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[375].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[376].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HourEventMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[377].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FacebookPageRegister); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[378].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallDriverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[379].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallDriverResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[380].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockedNumbers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[381].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockedNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[382].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextToSpeech); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[383].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TTSVoiceSelection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[384].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessHour); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[385].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessHours); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[386].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[387].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactComponent_ContactButton); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[388].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallContactComponent_Hotline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[389].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapContactComponent_Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[390].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebPluginFormField_WebPluginFormFieldOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_header_proto_msgTypes[384].OneofWrappers = []interface{}{}
	file_header_proto_msgTypes[385].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_header_proto_rawDesc,
			NumEnums:      40,
			NumMessages:   393,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_header_proto_goTypes,
		DependencyIndexes: file_header_proto_depIdxs,
		EnumInfos:         file_header_proto_enumTypes,
		MessageInfos:      file_header_proto_msgTypes,
	}.Build()
	File_header_proto = out.File
	file_header_proto_rawDesc = nil
	file_header_proto_goTypes = nil
	file_header_proto_depIdxs = nil
}
