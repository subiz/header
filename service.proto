syntax = "proto3";

package header;

option go_package = "github.com/subiz/header";
import "payment.proto";
import "noti5.proto";
import "account.proto";
import "header.proto";
import "common.proto";
import "zalokon.proto";

service GooglekonService {
	rpc SendEventToGoogle(header.Events) returns (header.Empty);

	rpc ReadGoogleLocationSetting(Id) returns (GoogleLocationSetting);
	rpc UpdateGoogleLocationSetting(GoogleLocationSetting) returns (GoogleLocationSetting);
	rpc ListGoogleLocationSettings(Id) returns (GoogleLocationSettings);
}

service KafkaConsumer {
	rpc Consume(KafkaMessage) returns (Empty);
}

service RateLimit {
	rpc SyncRateLimit(RateLimitSyncRequest) returns (RateLimitSyncResponse);
}

service DocSearch {
	rpc IndexConvo(header.DocIndexRequest) returns (header.Empty);
	rpc SearchConvos(header.DocSearchRequest) returns (header.DocSearchResponse);
	rpc Index(header.DocIndexRequest) returns (header.Empty);
	rpc Search(header.DocSearchRequest) returns (header.Ids);

	rpc ReportConversation(header.ConversationMetricsRequest) returns (header.ConversationMetrics);
	rpc Report(header.ConvoReportRequest) returns (header.ConvoReportResponse);
	rpc ListIds(header.ConvoReportRequest) returns (header.Conversations);
	rpc ListConversationIds(header.ConversationMetricsRequest) returns (header.Conversations);
	rpc ReportCall(header.CallMetricsRequest) returns (header.CallMetrics);
	rpc ListCallIds(header.CallMetricsRequest) returns (header.Conversations);
	rpc ReportAgent(header.AgentMetricsRequest) returns (header.AgentMetrics);
	//healthcheck
	rpc HealthCheckReport(header.Empty) returns (header.Empty);
	rpc HealthCheckIndex(header.Empty) returns (header.Empty);
}

service NumberRegistry {
	rpc Compact(String) returns (Number);
	rpc Uncompact(Number) returns (String);
	rpc CompactM(StrNumM) returns (StrNumM);

	rpc Shorten(String) returns (Number);
	rpc Lookup(Number) returns (String);

	rpc NewID2(header.Id) returns (header.Id);
}

service Map {
	rpc Predict(AddressAutocompleteRequest) returns (AddressAutocompleteResponses);
	rpc LookupAddress(Id) returns (Address);
	rpc PredictAddress(AddressAutocompleteRequest) returns (Addresses);

	rpc ListDistricts(Id) returns (Addresses);
	rpc ListProvinces(Id) returns (Addresses); // also city
	rpc ListWards(Id) returns (Addresses); // phuong/xa
	rpc ListStreets(Id) returns (Addresses);
	rpc ListAddresses(Ids) returns (Addresses);
	rpc ReadAddress(Id) returns (Address);
}

service AccountMgr {
	rpc CreateGroup(header.AgentGroup) returns (header.AgentGroup);
	rpc UpdateGroup(header.AgentGroup) returns (header.AgentGroup);
	rpc GetGroup(Id) returns (header.AgentGroup);
	rpc RequestPassword(Id) returns (Empty);
	rpc UpdatePassword(NewPassword) returns (account.Agent);
	rpc UpdateAgent(account.Agent) returns (account.Agent);
	rpc DeleteAgent(Id) returns (account.Agent);
	rpc DeleteAccount(Id) returns (account.Account);
	rpc SubizUpdateAccount(account.Account) returns (account.Account);
	rpc RequestChangeEmail(account.Agent) returns (Empty);// require password
	rpc ConfirmChangeEmail(account.Token) returns (account.Agent);
	rpc AcceptInvitation(NewPassword) returns (account.Agent);
	rpc GetInvitation(account.Token) returns (account.Agent);
	rpc InviteAgent(account.Agent) returns (account.Agent); // allow to call multiple time
	rpc GetAgent(Id) returns (account.Agent);
	rpc LookupAgentById(Id) returns (account.Agent);
	rpc ConfirmAccount(account.Token) returns (account.Account);
	rpc GetAccount(Id) returns (account.Account);
	rpc UpdateAccount(account.Account) returns (account.Account);
	rpc CreateAccount(CreateAccountRequest) returns (account.Account);
	rpc ListAgents(Id) returns (header.Response);

	rpc DeleteGroup(Id) returns (Empty);
	rpc ListGroups(Id) returns (header.AgentGroups);

	rpc ChangeEmail(account.Agent) returns (account.Agent);
	rpc SyncPublicHolidays(account.SyncPublicHolidaysRequest) returns (account.BusinessHours);
	rpc TransferOwner(Id) returns (account.Agent);

	rpc CheckLoginSession(LoginSession) returns (LoginSession);
	rpc ListLoginSessions(Id) returns (LoginSessions);
	rpc ListApiKeys(Id) returns (LoginSessions);
	rpc LogoutSession(Id) returns (Empty); // can use id or access-token
	rpc CreateApiKey(LoginSession) returns (LoginSession);

	rpc GetLanguage(Id) returns (Lang);
	rpc UpdateLanguage(LangMessage) returns (LangMessage);

	rpc GetShopSetting(header.Id) returns (header.ShopSetting);
	rpc UpdateShopSetting(header.ShopSetting) returns (header.ShopSetting);
	rpc ReadCurrency(header.Id) returns (header.Currency);

	// internal
	rpc AutoSyncCurrency(header.Id) returns (header.Empty);

	rpc ListShopAddresses(Id) returns (header.Addresses);
	rpc CreateShopAddress(header.Address) returns (header.Address);
	rpc UpdateShopAddress(header.Address) returns (header.Address);
	rpc DeleteShopAddress(Id) returns (Empty);

	rpc ListTaxes(Id) returns (header.Response);
	rpc CreateTax(header.Tax) returns (header.Tax);
	rpc UpdateTax(header.Tax) returns (header.Tax);
	rpc DeleteTax(Id) returns (Empty);

	rpc CheckShippingPolicy(header.Order) returns (header.ShippingPolicies);
	rpc ListShippingPolicies(Id) returns (header.ShippingPolicies);
	rpc CreateShippingPolicy(header.ShippingPolicy) returns (header.ShippingPolicy);
	rpc UpdateShippingPolicy(header.ShippingPolicy) returns (header.ShippingPolicy);
	rpc DeleteShippingPolicy(Id) returns (Empty);

	rpc CreateCancellationCode(header.CancellationCode) returns (header.CancellationCode);
	rpc ListCancellationCodes(Id) returns (header.CancellationCodes);
	rpc UpdateCancellationCode(header.CancellationCode) returns (header.CancellationCode);

	rpc MakeDefaultTax(Id) returns (Empty);

	rpc ListPaymentMethods(Id) returns (header.PaymentMethods);
	rpc CreatePaymentMethod(header.PaymentMethod) returns (header.PaymentMethod);
	rpc UpdatePaymentMethod(header.PaymentMethod) returns (header.PaymentMethod);
	rpc DeletePaymentMethod(Id) returns (Empty);
	rpc MakeDefaultPaymentMethod(Id) returns (Empty);

	rpc ListIntegratedShippingProviders(Ids) returns (header.IntegratedShippings);
	rpc DeintegrateShippingProvider(header.IntegratedShipping) returns (Empty);
	rpc IntegrateShippingProvider(header.IntegratedShipping) returns (header.IntegratedShipping);
	rpc SendGHNAffiliateOTP(header.IntegratedShipping) returns (header.IntegratedShipping);
	rpc EnterGHNAffiliateOTP(header.IntegratedShipping) returns (header.IntegratedShipping);

	rpc UpdateAgentPresence (account.Presence) returns (account.Presence);
	rpc ListAgentPresences (Id) returns (account.Presences);
	rpc ReportAvailibilities(AvailibilityReportRequest) returns (ReportResponse);

	rpc NewID(header.Id) returns (header.Id);

	rpc LockLogin(header.Id) returns (header.Id); // accid
	rpc UnlockLogin(header.Id) returns (header.Id);

	rpc ListBills(header.Id) returns (payment.Bills);
}

// user services
service UserMgr {
	rpc MergeUser(header.Users) returns (header.User);
	rpc DetachUser(header.Id) returns (header.Empty);

	rpc CreateUser2(header.User) returns (header.User); // ok
	rpc UpdateUser(header.User) returns (header.User);  // ok
	rpc TryUpdateUser(header.User) returns (header.TryUpdateUserResult); // ok

	rpc RemoveUser(header.Id) returns (header.Empty); // ok
	rpc RestoreUser(header.Id) returns (header.Empty); // ok

	rpc ReadUser(Id) returns (header.User); // ok
	rpc ReadOrCreateUserByContactProfile(Id) returns (header.User);
	rpc MatchUsers(Ids) returns (header.Users); // ok

	rpc BanUser(Id) returns (header.User); // ok
	rpc UnbanUser(Id) returns (header.User); // ok

	rpc LookupByPhone(Id) returns (header.Users);

	rpc UpdateView(header.UserView) returns (header.UserView);
	rpc CreateView(header.UserView) returns (header.UserView);
	rpc DeleteView(Id) returns (Empty);
	rpc GetView(Id) returns (header.UserView);
	rpc ListViews(Id) returns (header.UserViews);

	rpc UpdateSegment(header.Segment) returns (header.Segment);
	rpc CreateSegment(header.Segment) returns (header.Segment);
	rpc DeleteSegment(Id) returns (Empty);
	rpc GetSegment(Id) returns (header.Segment);
	rpc ListSegments(Id) returns (header.Segments);
	rpc AddToSegment(header.SegmentUsers) returns (Empty);
	rpc RemoveFromSegment(header.SegmentUsers) returns (Empty);

	rpc UpsertLabel(header.Label) returns (header.Label);
	rpc DeleteLabel(Id) returns (Empty);
	rpc ListLabels(Id) returns (header.Labels);
	rpc GetLabel(Id) returns (header.Label);

	rpc AddLeadOwner(UserRequest) returns (Empty);
	rpc RemoveLeadOwner(UserRequest) returns (Empty);
	rpc AddUserLabel(UserRequest) returns (Empty);
	rpc RemoveUserLabel(UserRequest) returns (Empty);

	rpc AddLeadConversionBy(UserRequest) returns (Empty);

	rpc CreateShippingAddress(Address) returns (Address);
	rpc UpdateShippingAddress(Address) returns (Address);
	rpc RemoveShippingAddress(Address) returns (Empty);
	rpc ListShippingAddress(Id) returns (ShippingAddresses);
	rpc MakeDefaultShippingAddress(Address) returns (Empty);
	rpc ListLeads(header.UserView) returns (header.Users); // ok
	rpc SuggestLeadField(header.SuggestLeadFieldRequest) returns (header.SuggestLeadFieldResponse); // ok
	rpc LinkProductUrl(header.Product) returns (header.Product); // ok
	rpc ListUserEvents(header.ListUserEventsRequest) returns (header.Events); // ok
	rpc CreateUserEvent(header.Event) returns (header.Event); // ok
	rpc FillDevice(common.Device) returns (common.Device);
	rpc ImportLead(header.ImportLeadRequest) returns (header.ImportLeadResponse);

	rpc LinkTask(header.Task) returns (header.Empty);

	rpc CountUserProfiles(header.UsersRequest) returns (header.CountTouchpointResponse); // ok
	rpc ListUserIds(header.UsersRequest) returns (header.Ids); // ok
	rpc ListUserIdWithPhones(header.UsersRequest) returns (header.Users); // ok

	rpc SearchUsers(header.DocSearchRequest) returns (header.DocSearchResponse);
	rpc ReportUser(header.UserReportRequest) returns (header.UserReportResponse);

	rpc FetchLiveUsers(header.LiveUserView) returns (header.LiveUserView); // 30s
	rpc StopLiveUsers(header.Id) returns (header.Empty);
	rpc SuggestLiveFields(header.SuggestLeadFieldRequest) returns (header.SuggestLeadFieldResponse);
	rpc Presences(header.PresencesRequest) returns (header.PresencesResponse);

	rpc UpdateSegmentMember(ResourceGroupMember) returns (ResourceGroupMember);
	rpc RemoveSegmentMember(ResourceGroupMember) returns (header.Empty);
}

service NoteMgr {
	rpc ListNotes(header.ListNotesRequest) returns (header.Notes);
	rpc AddNote(header.Note) returns (header.Note);
	rpc UpdateNote(header.Note) returns (header.Note);
	rpc DeleteNote(header.DeleteNoteRequest) returns (Empty);
}

service AttributeMgr {
	rpc ListAttributeDefinitions(Empty) returns (header.AttributeDefinitions);
	rpc CreateAttributeDefinition(header.AttributeDefinition) returns (header.AttributeDefinition);
	rpc UpdateAttributeDefinition(header.AttributeDefinition) returns (header.AttributeDefinition);
}

service AutomationMgr {
	rpc ListWorkflows(Id) returns (header.Response);
	rpc UpdateWorkflow(Workflow) returns (header.Response);
	rpc CreateWorkflow(Workflow) returns (header.Response);
	rpc DeleteWorkflow(Id) returns (header.Response);
	rpc ReadWorkflow(Id) returns (header.Response);

	rpc ListWorkflowLog(WorkflowLogRequest) returns (Response);
	// rpc ManuallyPauseAutomation() return (Response); // for an user or conversation
	// rpc ManuallyResumeAutomation() return (Response); // for user
}

service ConversationMgr {
	rpc AssignRule(header.AssignRequest) returns (header.RouteResult);
	rpc PongMessage(header.Event) returns (header.Event);

	rpc StartConversation(header.StartRequest) returns (header.Conversation);
	rpc EndConversation(Id) returns (header.Conversation);
	rpc GetConversation(Id) returns (header.Conversation);
	rpc ListConversations(header.ListConversationsRequest) returns (header.Conversations);
	rpc MatchConversations(Ids) returns (header.Conversations);

	rpc TagConversation(header.TagRequest) returns (Empty);
	rpc UntagConversation(header.TagRequest) returns (Empty);

	rpc JoinConversation(header.ConversationMember) returns (Empty);
	rpc LeftConversation(header.ConversationMember) returns (Empty);

	rpc UpdateConversationInfo(header.Conversation) returns (header.Conversation);

	rpc UpdateMuteConversation(header.Conversation) returns (Empty);
	rpc UpdateConversationMember(header.ConversationMember) returns (Empty);
	rpc UnwatchConversation(header.Conversation) returns (Empty);
	rpc UnhiddenConversation(header.Conversation) returns (Empty);

	rpc UpdateEndchatSetting(header.EndchatSetting) returns (header.EndchatSetting);
	rpc GetEndchatSetting(Id) returns (header.EndchatSetting);

	rpc TerminateBot(header.BotTerminated) returns (header.Event);

	rpc SendMessage(header.Event) returns (header.Event);
	rpc SendOmniChannelMessage(header.SendOmniChannelMessageRequest) returns (header.Event);
	rpc UpdateMessage(header.Event) returns (header.Event);
	rpc PinMessage(header.Event) returns (header.Empty);
	rpc UnpinMessage(header.Event) returns (header.Empty);
	rpc ListEvents(header.ListConversationEventsRequest) returns (header.Events);

	rpc Deintegrate(Id) returns (Empty);
	rpc ListIntegrations(Id) returns (header.Integrations);
	rpc Integrate(header.Integration) returns (header.Integration);
	rpc GetIntegration(Id) returns (header.Integration);

	rpc UpdateIntegrationMember(ResourceGroupMember) returns (ResourceGroupMember);
	rpc RemoveIntegrationMember(ResourceGroupMember) returns (header.Empty);

	rpc UpdateRule(header.Rule) returns (header.Rule);
	rpc CreateRule(header.Rule) returns (header.Rule);
	rpc DeleteRule(Id) returns (Empty);
	rpc ReadRule(Id) returns (header.Rule);
	rpc ListRules(Id) returns (header.Route);

	rpc ListConversationAutomations(Id) returns (header.ConversationAutomations);
	rpc UpdateConversationAutomation(header.ConversationAutomation) returns (header.ConversationAutomation);
	rpc DeleteConversationAutomation(Id) returns (Empty);
	rpc ReadConversationAutomation(Id) returns (header.ConversationAutomation);

	rpc ListPhoneDevices(header.Id) returns (header.PhoneDevices);
	rpc CreatePhoneDevice(header.PhoneDevice) returns (header.PhoneDevice);
	rpc UpdatePhoneDevice(header.PhoneDevice) returns (header.PhoneDevice);
	rpc DeletePhoneDevice(header.Id) returns (Empty);
	rpc ReadPhoneDevice(header.Id) returns (header.PhoneDevice);

	rpc TestNumber(header.Id) returns (header.Integration);
	rpc ActiveNumber(header.Integration) returns (header.Integration);

	rpc ListCallSettings(header.Id) returns (header.CallSettings);
	rpc UpdateCallSetting(header.CallSetting) returns (header.CallSetting);

	rpc BlockNumber(BlockedNumber) returns (BlockedNumber);
	rpc ListBlockedNumbers(Id) returns (BlockedNumbers);
	rpc UnblockNumber(BlockedNumber) returns (Empty);

	rpc ListGreetingAudio(Id) returns (GreetingAudios);
	rpc CreateGreetingAudio(GreetingAudio) returns (GreetingAudio);

	// try to make an outbound call from subiz
	rpc OriginateCall(StartRequest) returns (Conversation);

	rpc ListMyRecentCalls(Id) returns (RecentCallRecords);
	// sync, called from fabikon
	rpc SaveMessage(header.Event) returns (header.Event);
	rpc ApplyMessage(header.Event) returns (header.Event);
}

service TicketMgr {
	// ticket type
	rpc CreateTicketType(TicketType) returns (TicketType);
	rpc UpdateTicketType(TicketType) returns (TicketType);
	rpc ListTicketTypes(Id) returns (Response);
	rpc GetTicketType(Id) returns (TicketType);

	rpc CreateTicket(header.Ticket) returns (header.Ticket);
	rpc UpdateTicket(header.Ticket) returns (header.Ticket);
	rpc DeleteTicket(Id) returns (Empty);
	rpc RecoverTicket(Id) returns (Empty);
	rpc GetTicket(Id) returns (header.Ticket);
	rpc ListTickets(header.ListTicketRequest) returns (Response);
	rpc MatchTickets(Ids) returns (Response);

	rpc CreateTicketView(TicketView) returns (TicketView);
	rpc UpdateTicketView(header.TicketView) returns (header.TicketView);
	rpc DeleteTicketView(Id) returns (Empty);
	rpc GetTicketView(Id) returns (header.TicketView);
	rpc ListTicketViews(Empty) returns (Response);

	rpc CreateTicketTemplate(header.TicketTemplate) returns (header.TicketTemplate);
	rpc UpdateTicketTemplate(header.TicketTemplate) returns (header.TicketTemplate);
	rpc DeleteTicketTemplate(Id) returns (Empty);
	rpc GetTicketTemplate(Id) returns (header.TicketTemplate);
	rpc ListTicketTemplates(Empty) returns (Response);

	rpc PongTicketEvent(header.Event) returns (header.Event);

	rpc TagTicket(header.TagRequest) returns (Empty);
	rpc UntagTicket(header.TagRequest) returns (Empty);

	rpc JoinTicket(header.ConversationMember) returns (Empty);
	rpc LeftTicket(header.ConversationMember) returns (Empty);

	rpc ReadTickets(Ids) returns (Empty);
	rpc UnreadTickets(Ids) returns (Empty);

	rpc SnoozeTickets(Ids) returns (Empty);
	rpc UnsnoozeTickets(Ids) returns (Empty);

	rpc SendTicketEvent(header.Event) returns (header.Event);

	rpc ListTicketEvents(header.ListConversationEventsRequest) returns (header.Events);

	rpc UpdateTicketTypeMember(ResourceGroupMember) returns (ResourceGroupMember);
	rpc RemoveTicketTypeMember(ResourceGroupMember) returns (header.Empty);

	rpc CreateSLAPolicy(header.SLAPolicy) returns (Response);
	rpc UpdateSLAPolicy(header.SLAPolicy) returns (Response);
	rpc DeleteSLAPolicy(header.SLAPolicy) returns (Response);
	rpc ListSLAPolicies(header.Id) returns (Response);

	rpc ListTicketSLAViolations(header.Id) returns (Response);
}

service TemplateMgr {
	rpc CreateTemplate(header.Template) returns (header.Template);
	rpc UpdateTemplate(header.Template) returns (header.Template);
	rpc DeleteTemplate(Id) returns (Empty);
	rpc GetTemplate(Id) returns (header.Template);
	rpc ListTemplates(header.SearchTemplate) returns (header.Templates);
	rpc PickTemplate(Id) returns (Empty);

	rpc CreateModal(header.ConversationModal) returns (header.ConversationModal);
	rpc UpdateModal(header.ConversationModal) returns (header.ConversationModal);
	rpc DeleteModal(Id) returns (Empty);
	rpc GetModal(Id) returns (header.ConversationModal);
	rpc ListModals(header.Id) returns (header.ConversationModals);
	rpc PickModal(ConversationModalPickRequest) returns (ConversationModalPicked);
}

service TagMgr {
	rpc CreateTag(header.Tag) returns (header.Tag);
	rpc UpdateTag(header.Tag) returns (header.Tag);
	rpc DeleteTag(Id) returns (Empty);
	rpc ListTags(Id) returns (header.Tags);
	rpc GetTag(Id) returns (header.Tag);
}

// noti5 services
service Noti5Service {
	rpc ReadNotificationSetting(Id) returns (noti5.Setting);
	rpc UpdateNotificationSetting(noti5.Setting) returns (noti5.Setting);

	rpc Noti(header.PushNoti) returns (Empty);

	rpc AddToken(noti5.Token) returns (Empty);
	rpc RemoveToken(noti5.Token) returns (Empty);
	rpc CheckTokenExists(noti5.Token) returns (Empty);
}

service PaymentMgr {
	rpc SearchSub(account.SearchSubRequest) returns (AccSubs);
	rpc GetSub(header.Id) returns (AccSub);
	rpc Purchase(payment.PurchaseRequest) returns (payment.Invoice);
	rpc UpdateSubscription(payment.Subscription) returns (payment.Subscription);
	rpc GetSubscription(Id) returns (payment.Subscription);
	rpc Pay(payment.PayRequest) returns (payment.Bill);

	rpc CreateInvoice(payment.Invoice) returns (payment.Invoice);
	rpc UpdateInvoice(payment.Invoice) returns (payment.Invoice);
	rpc FilterInvoices(payment.ListInvoiceRequest) returns (payment.Invoices);
	rpc DraftInvoice(payment.Subscription) returns (payment.Invoice);

	rpc ListComments(payment.ListCommentsRequest) returns (payment.Comments);
	rpc AddComment(payment.Comment) returns (payment.Comment);
	rpc ExportInvoice(Id) returns (payment.String);
	rpc ConvertInvoiceToHtml(payment.Invoice) returns (payment.String);
	rpc GetExchangeRate(ExchangeRate) returns (ExchangeRate);
	rpc TransferMoney(payment.PayRequest) returns (payment.Bill);
	rpc ListLogs(payment.ListLogsRequest) returns (payment.Logs);
}

// pubsub services
service Pubsub {
	rpc Fire(PsMessage) returns (Empty);
	rpc Poll(RealtimeSubscription) returns (PollResult);
	rpc Subscribe(RealtimeSubscription) returns (RealtimeSubscription);
}

service FabikonService {
	rpc ReadFbFanpageSetting(Id) returns (header.FbFanpageSetting);
	rpc UpdateFbFanpageSetting(header.FbFanpageSetting) returns (header.FbFanpageSetting);
	rpc ListFbFanpageSettings(Id) returns (header.FbFanpageSettings);

	rpc ListFbPosts(Id) returns (header.FacebookPosts);
	rpc GetFbPost(FacebookPost) returns (FacebookPost);
	rpc SendEventToFacebook(header.Events) returns (header.Empty); // messenger, facebook_comment, instagram

	rpc RemoveFbUserLabel(header.User) returns (header.Empty);
	rpc AddFbUserLabel(header.User) returns (header.Empty);

	rpc GenerateRefLink(header.Id) returns (header.Id);
}

service ChannelConnector {
	rpc GetIntegration(Id) returns (Integration);
	rpc UpdateIntegration(Integration) returns (Integration);
}

service ZalokonService {
	rpc SendEventToZalo(header.Events) returns (header.Empty); // zalo
	rpc ListZnsTemplates(Id) returns (zalokon.ZnsTemplates);
	rpc RequestZaloUserInfo(header.ZaloUserRequest) returns (header.Empty);
	rpc RequestZaloUserToMakeCall(header.ZaloUserRequest) returns (header.Empty);
	rpc MakeSureZaloUser(header.ZaloUserRequest) returns (header.Empty);
	rpc GetZaloUserCallConsent(header.ZaloUserRequest) returns (header.Response);
	rpc SendZNS(header.ZnsRequest) returns (header.Event);

	rpc CreateZaloApplication(ZaloApplication) returns (ZaloApplication);
	rpc GetZaloApplication(Id) returns (ZaloApplication);
	rpc UpdateZaloApplication(ZaloApplication) returns (ZaloApplication);
	rpc DeleteZaloApplication(Id) returns (Empty);
	rpc ListZaloApplications(Empty) returns (header.ZaloApplications);
}

service MailkonService {
	rpc SendEmail(header.Events) returns (header.Empty); // mailkon

	rpc CreateEmailIdentity(header.Integration) returns (header.Integration);
	rpc DeleteEmailIdentity(header.Integration) returns (Empty); // send SES email to user

	rpc ResendSenderVerificationEmail(header.Integration) returns (Empty);
	rpc VerifySenderDomain(header.Integration) returns (header.EmailSenderVerificationResult);

	rpc ListBusinessEmailAddresses(header.Id) returns (header.BusinessEmailAddresses);
	rpc UpsertBusinessEmailAddress(header.BusinessEmailAddress) returns (header.BusinessEmailAddress);
	rpc DeleteBusinessEmailAddress(header.Id) returns (header.Empty);

	rpc TrackLink(header.LinkData) returns (Response);

	rpc ListBouncedEmails(BouncedEmail) returns (Response);
	rpc UpsertBouncedEmail(BouncedEmail) returns (BouncedEmail);
	rpc DeleteBouncedEmail(Id) returns (Response);

	rpc ListBlockedEmails(BlockedEmail) returns (Response);
	rpc BlockEmail(BlockedEmail) returns (Response);
	rpc UnblockEmail(Id) returns (Response);
}

// widget services
service WidgetService {
	rpc Read(Id) returns (header.WidgetSetting);
	rpc Update(header.WidgetSetting) returns (header.WidgetSetting);
	rpc ReadUserSetting(Id) returns (header.WidgetUserSetting);

	rpc ReadAccountSetting(Id) returns (header.AccountWeb);

	rpc SubmitImpression(header.Impression) returns (header.Impression);
	rpc SubmitConversion(header.Conversion) returns (header.Conversion);
	rpc SubmitUserCampaignStatus(header.UserCampaignStatus) returns (header.UserCampaignStatus); // replace

	rpc ReportCampaign(header.ReportCampaignRequest) returns (header.ReportCampaignResponse); // remove
	rpc ListConversions(header.ConversionRequest) returns (header.Conversions);
	rpc ExportConversions(header.ConversionRequest) returns (header.ConversionsExported);

	rpc UploadImage(header.UploadedImage) returns (header.UploadedImage);
	rpc ListUploadedImage(Id) returns (header.UploadedImages);
	rpc DeleteUploadedImage(header.UploadedImage) returns (Empty);

	rpc ListWebPlugins(Id) returns (WebPlugins);
	rpc UpdateWebPlugin(WebPlugin) returns (WebPlugin);
	rpc UpdateWebPluginEnabled(WebPlugin) returns (WebPlugin);
	rpc CreateWebPlugin(WebPlugin) returns (WebPlugin);
	rpc DeleteWebPlugin(Id) returns (Empty);

	rpc UpdateWebPluginTemplate(header.WebPlugin) returns (header.WebPlugin);
	rpc ListWebPluginTemplates(Id) returns (header.WebPlugins);
	rpc DeleteWebPluginTemplate(Id) returns (Empty);

	rpc ReportWebPlugin(header.ReportWebPluginRequest) returns (header.ReportWebPluginResponse);

	rpc SearchImages(Id) returns (header.UploadedImages);
	rpc ListNotifProfiles(Id) returns (header.NotifProfiles);
	rpc ListNotifBackgrounds(Id) returns (header.Urls);
}

// bizbot services
service Bizbot {
	rpc ListBots(header.BotsRequest) returns (header.Bots);
	rpc GetBot(Id) returns (header.Bot);
	rpc UpdateBotRunState(header.Bot) returns (header.Bot);
	rpc CreateBot(header.Bot) returns (header.Bot);
	rpc UpdateBot(header.Bot) returns (header.Bot);
	rpc DeleteBot(Id) returns (Empty);
	rpc OnEvent(header.BotRunRequest) returns (Empty);
	rpc StartBot(header.BotRunRequest) returns (Empty);
	rpc StopBot(header.BotRunRequest) returns (Empty);
	rpc TryAction(header.BotRunRequest) returns (Empty);
	rpc ReportBot2(header.BotrunMetricsRequest) returns (header.BotrunMetrics);
	rpc ReportAction(header.ActionrunMetricsRequest) returns (header.ActionrunMetrics);

	rpc ListObjects(header.ListObjectsRequest) returns (header.ListObjectsResponse);
	rpc ReportBot(header.ReportBotRequest) returns (header.ReportBotResponse);
}

// sendback services
service Sendback {
	rpc CreateWebhook(header.Webhook) returns (header.Webhook);
	rpc PingWebhook(Id) returns (header.WebhookTestResult);
	rpc DeleteWebhook(Id) returns (Empty);
	rpc ListWebhooks(Id) returns (header.Webhooks);
	rpc ReadWebhook(Id) returns (header.Webhook);
	rpc UpdateWebhook(header.Webhook) returns (header.Webhook);
	rpc UpdateWebhookSecret(Id) returns (header.Webhook);
	rpc ListRecentIndexDeliveries(header.RecentIndexDeliveryRequest) returns (header.WebhookDeliveries);
	rpc GetDelivery(header.DeliveryRequest) returns (header.WebhookDelivery);

	rpc SendWebhookEvent(header.Event) returns (Empty);
}

// notibox services
service Notibox {
	rpc SendNoti(header.Notification) returns (Empty);
	rpc ListNoties(header.ListNotiRequest) returns (header.Notifications);
	rpc MarkReadNoti(Id) returns (Empty);
	rpc MarkReadNotiTopic(Id) returns (Empty);
}

// proder services
service Proder {
	rpc ReadProduct(header.Product) returns (header.Product);
	rpc CreateProduct(header.Product) returns (header.Product);
	rpc UpdateProduct(header.Product) returns (header.Product);
	rpc DeleteProduct(Id) returns (Empty);
	rpc ListProducts2(header.ProductsRequest) returns (header.Products);
	rpc ImportProduct(header.ImportProductRequest) returns (header.ImportProductResponse);

	rpc ListProductCollections(Ids) returns (header.ProductCollections);
	rpc CreateProductCollection(ProductCollection) returns (ProductCollection);
	rpc UpdateProductCollection(ProductCollection) returns (ProductCollection);
	rpc DeleteProductCollection(Id) returns (Empty);

	rpc ListProductFeeds(Id) returns (header.ProductFeeds);
	rpc CreateProductFeed(header.ProductFeed) returns (header.ProductFeed);
	rpc UpdateProductFeed(header.ProductFeed) returns (header.ProductFeed);
	rpc DeleteProductFeed(Id) returns (Empty);

	rpc ListProductCategories(Ids) returns (header.ProductCategories);

	rpc ReadOrder(header.Id) returns (header.Order);
	rpc CreateOrder(header.Order) returns (header.Order);
	rpc UpdateOrder(header.Order) returns (header.Order);

	rpc DeleteOrder(header.Id) returns (header.Empty); // soft delete, mark as deleted
	rpc ListOrders(header.OrdersRequest) returns (header.Orders);
	rpc CountOrders2(header.CountOrdersRequest) returns (header.CountOrdersResponse);
	rpc ImportOrders(header.Orders) returns (header.Orders);

	// fire order_updated, order_event_updated
	rpc MakeOrderPayment(header.Bill) returns (header.Event);
	rpc DeleteOrderPayment(header.Key) returns (header.Event);
	rpc AddOrderComment(header.Event) returns (header.Event);
	rpc EditOrderComment(header.Event) returns (header.Event);
	rpc DeleteOrderComment(header.Key) returns (header.Event);
	rpc ListOrderEvents(header.Id) returns (header.OrderHistoryEntries);

	rpc DownloadOrder(header.DownloadOrderRequest) returns (header.File);
	rpc GetShopeeAuthUrl(header.Id) returns (header.Id);
	rpc AuthorizeShopeeShop(header.AuthorizeShopeeRequest) returns (header.ShopeeShop);
	rpc DeauthorizeShopeeShop(header.Id) returns (header.Empty);

	rpc SyncShopeeProducts(header.ShopeeSyncProductRequest) returns (header.ShopeeSyncProductResponse);

	rpc GHTKShippingStatus(header.GHTKOrder) returns (Empty);
	rpc GHNShippingStatus(header.GHNOrder2) returns (Empty);
	rpc ShippingFee(header.ShippingInfo) returns (header.ShippingInfo);
	rpc ShipOrder(header.Id) returns (header.Order);
	rpc UpdateShippingCode(header.Order) returns (header.Order);
	rpc CancelShippingOrder(header.Id) returns (header.Order);
	rpc PrintShippingOrders(header.Ids) returns (header.File);

	// rpc UpdateOrderPipelineStage(header.OrderPipelineStage) returns (header.Order); // trigger stage automation
	// used to update tasks and agent id

	rpc SeenOrder(header.Id) returns (Empty);
	rpc FollowOrder(header.Id) returns (Empty);
	rpc UnfollowOrder(header.Id) returns (Empty);
	rpc TagOrder(header.TagRequest) returns (Empty);
	rpc UntagOrder(header.TagRequest) returns (Empty);

	rpc ReadPipeline(header.Id) returns (header.Pipeline);
	rpc CreatePipeline(header.Pipeline) returns (header.Pipeline);
	rpc UpdatePipeline(header.Pipeline) returns (header.Pipeline);
	rpc DeletePipeline(Id) returns (Empty);
	rpc ListPipelines(Ids) returns (header.Pipelines);
	rpc DeletePipelineStage(header.PipelineStage) returns (Empty);
	rpc PreselectPipeline(Id) returns (header.Pipeline);
	rpc ReportOrder(header.OrderMetricsRequest) returns (header.Orders);

	rpc MoveOrderToPrimary(header.Ids) returns (Empty);
}

service TaskMgr {
	rpc ReadTask(header.Id) returns (header.Task);
	rpc CreateTask(header.Task) returns (header.Task);
	rpc UpdateTask(header.Task) returns (header.Task);
	rpc DeleteTask(Id) returns (Empty);
	rpc ListTasks(header.TasksRequest) returns (header.Tasks);
	rpc SeenTask(header.Id) returns (Empty);
	rpc CloseTaskReminder(header.Id) returns (Empty);

	rpc MuteTask(header.Id) returns (Empty);
	rpc UnmuteTask(header.Id) returns (Empty);

	rpc AddTaskComment(header.Event) returns (header.Event);
	rpc EditTaskComment(header.Event) returns (header.Event);
	rpc DeleteTaskComment(header.Key) returns (header.Event);
	rpc ListTaskComments(header.Id) returns (header.TaskHistoryEntries);
}

service Speex {
	rpc TextToSpeech(header.TTSVoiceSelection) returns (header.TTSVoiceSelection);
}

service CampaignMgr {
	rpc ListCampaigns(Ids) returns (header.Campaigns);
	rpc ReadCampaign(Id) returns (header.Campaign);
	rpc CreateCampaign(header.Campaign) returns (header.Campaign);
	rpc UpdateCampaign(header.Campaign) returns (header.Campaign);
	rpc DeleteCampaign(Id) returns (Empty);
	rpc OnEvent(header.Event) returns (Empty);
	rpc ListCampaignSendLog(header.CampaignSendLogRequest) returns (header.CampaignSendLog);
	rpc ReportBroadcastCampaign(Id) returns (header.BroadcastCampaignMetrics);

	rpc ListOutboundCallEntries(header.ListOutboundCallRequest) returns (header.OutboundCallEntries);
	rpc UpdateOutboundCall(header.OutboundCallEntry) returns (header.OutboundCallEntry);
	rpc ImportOutboundCall(header.ImportOutboundCallEntryRequest) returns (header.ImportOutboundCallEntryResponse);
	rpc GetOutboundCall(header.OutboundCallEntry) returns (header.OutboundCallEntry);
	rpc RemoveOutboudCall(header.OutboundCallEntry) returns (header.Empty);
	rpc ReportOutboundCalls(header.OutboundCallReportRequest) returns(header.OutboundCallReportResponse);
	rpc ReassignOutboundCall(ListOutboundCallRequest) returns (header.Empty);
}

service CreditMgr {
	rpc TrySpendCredit(header.CreditSpendEntry) returns (header.TrySpendCreditResponse);
	rpc ReportCreditSpend(header.CreditSpendReportRequest) returns (header.CreditSpendReportResponse);
	rpc ListCreditSpendLog(header.CreditSpendLogRequest) returns (header.CreditSpendEntries);

	rpc ListCredits(header.Id) returns (header.Response); // credit
	rpc AddCredit(header.Credit) returns (header.Response); // credit
	rpc DeleteCredit(header.Id) returns (header.Response); // empty
	rpc UpdateCredit(header.Credit) returns (header.Response); // credit
}

service FormMgr {
	rpc ListForms(header.Id) returns (header.Forms);
	rpc CreateForm(header.Form) returns (header.Form);
	rpc UpdateForm(header.Form) returns (header.Form);
	rpc DeleteForm(header.Id) returns (Empty);
	rpc ReportForm(header.FormReportRequest) returns (header.FormReportResponse);
	rpc ListFormSubmissions(header.ListFormSubmissionRequest) returns (header.FormSubmissions);
}

service Scheduler {
	rpc RegisterTask(header.SchedulerTask) returns (SchedulerTask);
	rpc UnregisterTask(header.SchedulerTask) returns (Response);
}
